
upd-data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015a3c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000041ec  08015c1c  08015c1c  00025c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019e08  08019e08  000300a8  2**0
                  CONTENTS
  4 .ARM          00000000  08019e08  08019e08  000300a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08019e08  08019e08  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019e08  08019e08  00029e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019e0c  08019e0c  00029e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08019e10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000244c  200000a8  08019eb8  000300a8  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  200024f4  08019eb8  000324f4  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a572  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007061  00000000  00000000  0006a64e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002930  00000000  00000000  000716b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000025f8  00000000  00000000  00073fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bebc  00000000  00000000  000765d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000299df  00000000  00000000  000a2494  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00100e77  00000000  00000000  000cbe73  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00001070  00000000  00000000  001cccea  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  000000c9  00000000  00000000  001cdd5a  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 0000000c  00000000  00000000  001cde24  2**2
                  CONTENTS, READONLY
 22 .iar.debug_frame 00000112  00000000  00000000  001cde30  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00013230  00000000  00000000  001cdf44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000a8 	.word	0x200000a8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015c04 	.word	0x08015c04

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000ac 	.word	0x200000ac
 800021c:	08015c04 	.word	0x08015c04

08000220 <USBPD_CAD_Init>:
 8000220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000222:	2801      	cmp	r0, #1
 8000224:	4604      	mov	r4, r0
 8000226:	460e      	mov	r6, r1
 8000228:	4615      	mov	r5, r2
 800022a:	461f      	mov	r7, r3
 800022c:	d82e      	bhi.n	800028c <USBPD_CAD_Init+0x6c>
 800022e:	200c      	movs	r0, #12
 8000230:	f015 fc60 	bl	8015af4 <malloc>
 8000234:	4940      	ldr	r1, [pc, #256]	; (8000338 <.text_6>)
 8000236:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 800023a:	6050      	str	r0, [r2, #4]
 800023c:	b908      	cbnz	r0, 8000242 <USBPD_CAD_Init+0x22>
 800023e:	2003      	movs	r0, #3
 8000240:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8000242:	2300      	movs	r3, #0
 8000244:	469c      	mov	ip, r3
 8000246:	469e      	mov	lr, r3
 8000248:	e880 5008 	stmia.w	r0, {r3, ip, lr}
 800024c:	7808      	ldrb	r0, [r1, #0]
 800024e:	1c40      	adds	r0, r0, #1
 8000250:	7008      	strb	r0, [r1, #0]
 8000252:	6850      	ldr	r0, [r2, #4]
 8000254:	6007      	str	r7, [r0, #0]
 8000256:	7103      	strb	r3, [r0, #4]
 8000258:	6086      	str	r6, [r0, #8]
 800025a:	2201      	movs	r2, #1
 800025c:	4837      	ldr	r0, [pc, #220]	; (800033c <.text_7>)
 800025e:	6881      	ldr	r1, [r0, #8]
 8000260:	6082      	str	r2, [r0, #8]
 8000262:	6882      	ldr	r2, [r0, #8]
 8000264:	2a01      	cmp	r2, #1
 8000266:	d0fc      	beq.n	8000262 <USBPD_CAD_Init+0x42>
 8000268:	4b35      	ldr	r3, [pc, #212]	; (8000340 <.text_8>)
 800026a:	4a36      	ldr	r2, [pc, #216]	; (8000344 <.text_9>)
 800026c:	6003      	str	r3, [r0, #0]
 800026e:	6803      	ldr	r3, [r0, #0]
 8000270:	6013      	str	r3, [r2, #0]
 8000272:	6081      	str	r1, [r0, #8]
 8000274:	463a      	mov	r2, r7
 8000276:	6881      	ldr	r1, [r0, #8]
 8000278:	f041 0101 	orr.w	r1, r1, #1
 800027c:	6081      	str	r1, [r0, #8]
 800027e:	4629      	mov	r1, r5
 8000280:	6873      	ldr	r3, [r6, #4]
 8000282:	4620      	mov	r0, r4
 8000284:	f012 fb7a 	bl	801297c <CAD_Init>
 8000288:	2000      	movs	r0, #0
 800028a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800028c:	2001      	movs	r0, #1
 800028e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08000290 <USBPD_CAD_PortEnable>:
 8000290:	2802      	cmp	r0, #2
 8000292:	d204      	bcs.n	800029e <USBPD_CAD_PortEnable+0xe>
 8000294:	4a28      	ldr	r2, [pc, #160]	; (8000338 <.text_6>)
 8000296:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800029a:	6842      	ldr	r2, [r0, #4]
 800029c:	7111      	strb	r1, [r2, #4]
 800029e:	4770      	bx	lr

080002a0 <USBPD_CAD_Process>:
 80002a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	2600      	movs	r6, #0
 80002a6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8000344 <.text_9>
 80002aa:	4d24      	ldr	r5, [pc, #144]	; (800033c <.text_7>)
 80002ac:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8000340 <.text_8>
 80002b0:	4f21      	ldr	r7, [pc, #132]	; (8000338 <.text_6>)
 80002b2:	ac02      	add	r4, sp, #8
 80002b4:	e031      	b.n	800031a <USBPD_CAD_Process+0x7a>
 80002b6:	2002      	movs	r0, #2
 80002b8:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 80002bc:	1d38      	adds	r0, r7, #4
 80002be:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80002c2:	7903      	ldrb	r3, [r0, #4]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d126      	bne.n	8000316 <USBPD_CAD_Process+0x76>
 80002c8:	aa01      	add	r2, sp, #4
 80002ca:	4669      	mov	r1, sp
 80002cc:	4630      	mov	r0, r6
 80002ce:	f012 fc25 	bl	8012b1c <CAD_StateMachine>
 80002d2:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 80002d6:	f89d 0000 	ldrb.w	r0, [sp]
 80002da:	b1e0      	cbz	r0, 8000316 <USBPD_CAD_Process+0x76>
 80002dc:	4601      	mov	r1, r0
 80002de:	2901      	cmp	r1, #1
 80002e0:	d10e      	bne.n	8000300 <USBPD_CAD_Process+0x60>
 80002e2:	68a8      	ldr	r0, [r5, #8]
 80002e4:	60a9      	str	r1, [r5, #8]
 80002e6:	68a9      	ldr	r1, [r5, #8]
 80002e8:	2901      	cmp	r1, #1
 80002ea:	d0fc      	beq.n	80002e6 <USBPD_CAD_Process+0x46>
 80002ec:	f8c5 9000 	str.w	r9, [r5]
 80002f0:	682a      	ldr	r2, [r5, #0]
 80002f2:	f8c8 2000 	str.w	r2, [r8]
 80002f6:	60a8      	str	r0, [r5, #8]
 80002f8:	68a8      	ldr	r0, [r5, #8]
 80002fa:	f040 0001 	orr.w	r0, r0, #1
 80002fe:	60a8      	str	r0, [r5, #8]
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	9a01      	ldr	r2, [sp, #4]
 800030a:	f89d 1000 	ldrb.w	r1, [sp]
 800030e:	f8d3 a000 	ldr.w	sl, [r3]
 8000312:	4630      	mov	r0, r6
 8000314:	47d0      	blx	sl
 8000316:	1c76      	adds	r6, r6, #1
 8000318:	b2f6      	uxtb	r6, r6
 800031a:	7838      	ldrb	r0, [r7, #0]
 800031c:	4286      	cmp	r6, r0
 800031e:	dbca      	blt.n	80002b6 <USBPD_CAD_Process+0x16>
 8000320:	2801      	cmp	r0, #1
 8000322:	bf08      	it	eq
 8000324:	9802      	ldreq	r0, [sp, #8]
 8000326:	d004      	beq.n	8000332 <USBPD_CAD_Process+0x92>
 8000328:	6860      	ldr	r0, [r4, #4]
 800032a:	9902      	ldr	r1, [sp, #8]
 800032c:	4288      	cmp	r0, r1
 800032e:	bf28      	it	cs
 8000330:	4608      	movcs	r0, r1
 8000332:	b004      	add	sp, #16
 8000334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000338 <.text_6>:
 8000338:	200000c4 	.word	0x200000c4

0800033c <.text_7>:
 800033c:	40023000 	.word	0x40023000

08000340 <.text_8>:
 8000340:	f407a5c2 	.word	0xf407a5c2

08000344 <.text_9>:
 8000344:	200000e0 	.word	0x200000e0

08000348 <USBPD_CAD_AssertRd>:
 8000348:	b510      	push	{r4, lr}
 800034a:	4604      	mov	r4, r0
 800034c:	f013 fe8e 	bl	801406c <USBPDM1_DeAssertRp>
 8000350:	4620      	mov	r0, r4
 8000352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000356:	f013 be95 	b.w	8014084 <USBPDM1_AssertRd>

0800035a <USBPD_CAD_AssertRp>:
 800035a:	b510      	push	{r4, lr}
 800035c:	4604      	mov	r4, r0
 800035e:	f013 fef7 	bl	8014150 <USBPDM1_DeAssertRd>
 8000362:	4620      	mov	r0, r4
 8000364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000368:	f013 be28 	b.w	8013fbc <USBPDM1_AssertRp>

0800036c <USBPD_CAD_EnterErrorRecovery>:
 800036c:	f012 bba8 	b.w	8012ac0 <CAD_Enter_ErrorRecovery>

08000370 <USBPD_CAD_SetRpResistor>:
 8000370:	b580      	push	{r7, lr}
 8000372:	f012 fbc5 	bl	8012b00 <CAD_Set_ResistorRp>
 8000376:	b100      	cbz	r0, 800037a <USBPD_CAD_SetRpResistor+0xa>
 8000378:	2004      	movs	r0, #4
 800037a:	bd02      	pop	{r1, pc}

0800037c <USBPD_CAD_GetMemoryConsumption>:
 800037c:	2018      	movs	r0, #24
 800037e:	4770      	bx	lr

08000380 <USBPD_PE_Init>:
 8000380:	e92d 42ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r9, lr}
 8000384:	4605      	mov	r5, r0
 8000386:	2d01      	cmp	r5, #1
 8000388:	460e      	mov	r6, r1
 800038a:	4691      	mov	r9, r2
 800038c:	461f      	mov	r7, r3
 800038e:	d82c      	bhi.n	80003ea <USBPD_PE_Init+0x6a>
 8000390:	f44f 706a 	mov.w	r0, #936	; 0x3a8
 8000394:	f015 fbae 	bl	8015af4 <malloc>
 8000398:	0004      	movs	r4, r0
 800039a:	498b      	ldr	r1, [pc, #556]	; (80005c8 <.text_12>)
 800039c:	4628      	mov	r0, r5
 800039e:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
 80003a2:	bf08      	it	eq
 80003a4:	2016      	moveq	r0, #22
 80003a6:	d041      	beq.n	800042c <USBPD_PE_Init+0xac>
 80003a8:	f44f 716a 	mov.w	r1, #936	; 0x3a8
 80003ac:	4620      	mov	r0, r4
 80003ae:	f015 fb71 	bl	8015a94 <__aeabi_memclr>
 80003b2:	6026      	str	r6, [r4, #0]
 80003b4:	f8c4 9004 	str.w	r9, [r4, #4]
 80003b8:	f504 72a0 	add.w	r2, r4, #320	; 0x140
 80003bc:	6920      	ldr	r0, [r4, #16]
 80003be:	f365 0000 	bfi	r0, r5, #0, #1
 80003c2:	6120      	str	r0, [r4, #16]
 80003c4:	60a7      	str	r7, [r4, #8]
 80003c6:	6820      	ldr	r0, [r4, #0]
 80003c8:	6801      	ldr	r1, [r0, #0]
 80003ca:	9102      	str	r1, [sp, #8]
 80003cc:	f504 7154 	add.w	r1, r4, #848	; 0x350
 80003d0:	9101      	str	r1, [sp, #4]
 80003d2:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80003d6:	9100      	str	r1, [sp, #0]
 80003d8:	6840      	ldr	r0, [r0, #4]
 80003da:	f20f 0158 	addw	r1, pc, #88	; 0x58
 80003de:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80003e2:	4628      	mov	r0, r5
 80003e4:	f005 fba5 	bl	8005b32 <USBPD_PRL_Init>
 80003e8:	b108      	cbz	r0, 80003ee <USBPD_PE_Init+0x6e>
 80003ea:	2002      	movs	r0, #2
 80003ec:	e01e      	b.n	800042c <USBPD_PE_Init+0xac>
 80003ee:	6820      	ldr	r0, [r4, #0]
 80003f0:	6841      	ldr	r1, [r0, #4]
 80003f2:	f3c1 0080 	ubfx	r0, r1, #2, #1
 80003f6:	2800      	cmp	r0, #0
 80003f8:	6860      	ldr	r0, [r4, #4]
 80003fa:	6801      	ldr	r1, [r0, #0]
 80003fc:	d004      	beq.n	8000408 <USBPD_PE_Init+0x88>
 80003fe:	f041 0108 	orr.w	r1, r1, #8
 8000402:	6001      	str	r1, [r0, #0]
 8000404:	2201      	movs	r2, #1
 8000406:	e003      	b.n	8000410 <USBPD_PE_Init+0x90>
 8000408:	f021 0108 	bic.w	r1, r1, #8
 800040c:	6001      	str	r1, [r0, #0]
 800040e:	2200      	movs	r2, #0
 8000410:	7933      	ldrb	r3, [r6, #4]
 8000412:	f003 0303 	and.w	r3, r3, #3
 8000416:	4611      	mov	r1, r2
 8000418:	4628      	mov	r0, r5
 800041a:	f005 fbe3 	bl	8005be4 <USBPD_PRL_SetHeader>
 800041e:	7931      	ldrb	r1, [r6, #4]
 8000420:	f001 0103 	and.w	r1, r1, #3
 8000424:	4628      	mov	r0, r5
 8000426:	f005 fc0e 	bl	8005c46 <USBPD_PRL_CBL_SetHeaderSpecification>
 800042a:	2000      	movs	r0, #0
 800042c:	b004      	add	sp, #16
 800042e:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
	...

08000434 <USBPD_PE_Init::PE_PrlCallbacks>:
 8000434:	4c71 0800 4cb5 0800 4871 0800 48bb 0800     qL...L..qH...H..

08000444 <USBPD_PE_SetTrace>:
 8000444:	4a61      	ldr	r2, [pc, #388]	; (80005cc <.text_13>)
 8000446:	60d0      	str	r0, [r2, #12]
 8000448:	7011      	strb	r1, [r2, #0]
 800044a:	4770      	bx	lr

0800044c <USBPD_PE_CheckLIB>:
 800044c:	4960      	ldr	r1, [pc, #384]	; (80005d0 <.text_14>)
 800044e:	4288      	cmp	r0, r1
 8000450:	d101      	bne.n	8000456 <USBPD_PE_CheckLIB+0xa>
 8000452:	2001      	movs	r0, #1
 8000454:	4770      	bx	lr
 8000456:	2000      	movs	r0, #0
 8000458:	4770      	bx	lr

0800045a <USBPD_PE_GetMemoryConsumption>:
 800045a:	b510      	push	{r4, lr}
 800045c:	f005 fbc0 	bl	8005be0 <USBPD_PRL_GetMemoryConsumption>
 8000460:	4604      	mov	r4, r0
 8000462:	f7ff ff8b 	bl	800037c <USBPD_CAD_GetMemoryConsumption>
 8000466:	1904      	adds	r4, r0, r4
 8000468:	f504 60ea 	add.w	r0, r4, #1872	; 0x750
 800046c:	bd10      	pop	{r4, pc}

0800046e <USBPD_PE_TimerCounter>:
 800046e:	4957      	ldr	r1, [pc, #348]	; (80005cc <.text_13>)
 8000470:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8000474:	b081      	sub	sp, #4
 8000476:	6840      	ldr	r0, [r0, #4]
 8000478:	f500 7061 	add.w	r0, r0, #900	; 0x384
 800047c:	8801      	ldrh	r1, [r0, #0]
 800047e:	044a      	lsls	r2, r1, #17
 8000480:	d002      	beq.n	8000488 <USBPD_PE_TimerCounter+0x1a>
 8000482:	8802      	ldrh	r2, [r0, #0]
 8000484:	1e51      	subs	r1, r2, #1
 8000486:	8001      	strh	r1, [r0, #0]
 8000488:	88c1      	ldrh	r1, [r0, #6]
 800048a:	044a      	lsls	r2, r1, #17
 800048c:	d002      	beq.n	8000494 <USBPD_PE_TimerCounter+0x26>
 800048e:	88c1      	ldrh	r1, [r0, #6]
 8000490:	1e4a      	subs	r2, r1, #1
 8000492:	80c2      	strh	r2, [r0, #6]
 8000494:	8841      	ldrh	r1, [r0, #2]
 8000496:	044a      	lsls	r2, r1, #17
 8000498:	d002      	beq.n	80004a0 <USBPD_PE_TimerCounter+0x32>
 800049a:	8841      	ldrh	r1, [r0, #2]
 800049c:	1e4a      	subs	r2, r1, #1
 800049e:	8042      	strh	r2, [r0, #2]
 80004a0:	8901      	ldrh	r1, [r0, #8]
 80004a2:	044a      	lsls	r2, r1, #17
 80004a4:	d002      	beq.n	80004ac <USBPD_PE_TimerCounter+0x3e>
 80004a6:	8901      	ldrh	r1, [r0, #8]
 80004a8:	1e4a      	subs	r2, r1, #1
 80004aa:	8102      	strh	r2, [r0, #8]
 80004ac:	8881      	ldrh	r1, [r0, #4]
 80004ae:	044a      	lsls	r2, r1, #17
 80004b0:	d002      	beq.n	80004b8 <USBPD_PE_TimerCounter+0x4a>
 80004b2:	8881      	ldrh	r1, [r0, #4]
 80004b4:	1e4a      	subs	r2, r1, #1
 80004b6:	8082      	strh	r2, [r0, #4]
 80004b8:	8941      	ldrh	r1, [r0, #10]
 80004ba:	044a      	lsls	r2, r1, #17
 80004bc:	d002      	beq.n	80004c4 <USBPD_PE_TimerCounter+0x56>
 80004be:	8941      	ldrh	r1, [r0, #10]
 80004c0:	1e4a      	subs	r2, r1, #1
 80004c2:	8142      	strh	r2, [r0, #10]
 80004c4:	8981      	ldrh	r1, [r0, #12]
 80004c6:	044a      	lsls	r2, r1, #17
 80004c8:	d002      	beq.n	80004d0 <USBPD_PE_TimerCounter+0x62>
 80004ca:	8981      	ldrh	r1, [r0, #12]
 80004cc:	1e4a      	subs	r2, r1, #1
 80004ce:	8182      	strh	r2, [r0, #12]
 80004d0:	6901      	ldr	r1, [r0, #16]
 80004d2:	1c49      	adds	r1, r1, #1
 80004d4:	6101      	str	r1, [r0, #16]
 80004d6:	b001      	add	sp, #4
 80004d8:	4770      	bx	lr

080004da <USBPD_PE_TimerCounteUpdate>:
 80004da:	b518      	push	{r3, r4, lr}
 80004dc:	4a3b      	ldr	r2, [pc, #236]	; (80005cc <.text_13>)
 80004de:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80004e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004e6:	6840      	ldr	r0, [r0, #4]
 80004e8:	f500 7061 	add.w	r0, r0, #900	; 0x384
 80004ec:	8803      	ldrh	r3, [r0, #0]
 80004ee:	045c      	lsls	r4, r3, #17
 80004f0:	d008      	beq.n	8000504 <USBPD_PE_TimerCounteUpdate+0x2a>
 80004f2:	8804      	ldrh	r4, [r0, #0]
 80004f4:	f3c4 040e 	ubfx	r4, r4, #0, #15
 80004f8:	42a1      	cmp	r1, r4
 80004fa:	bf3d      	ittte	cc
 80004fc:	8803      	ldrhcc	r3, [r0, #0]
 80004fe:	1a5b      	subcc	r3, r3, r1
 8000500:	8003      	strhcc	r3, [r0, #0]
 8000502:	8002      	strhcs	r2, [r0, #0]
 8000504:	88c3      	ldrh	r3, [r0, #6]
 8000506:	045c      	lsls	r4, r3, #17
 8000508:	d007      	beq.n	800051a <USBPD_PE_TimerCounteUpdate+0x40>
 800050a:	88c3      	ldrh	r3, [r0, #6]
 800050c:	f000 f83f 	bl	800058e <.text_10>
 8000510:	bf3d      	ittte	cc
 8000512:	88c4      	ldrhcc	r4, [r0, #6]
 8000514:	1a64      	subcc	r4, r4, r1
 8000516:	80c4      	strhcc	r4, [r0, #6]
 8000518:	80c2      	strhcs	r2, [r0, #6]
 800051a:	8843      	ldrh	r3, [r0, #2]
 800051c:	045c      	lsls	r4, r3, #17
 800051e:	d007      	beq.n	8000530 <USBPD_PE_TimerCounteUpdate+0x56>
 8000520:	8843      	ldrh	r3, [r0, #2]
 8000522:	f000 f834 	bl	800058e <.text_10>
 8000526:	bf3d      	ittte	cc
 8000528:	8844      	ldrhcc	r4, [r0, #2]
 800052a:	1a64      	subcc	r4, r4, r1
 800052c:	8044      	strhcc	r4, [r0, #2]
 800052e:	8042      	strhcs	r2, [r0, #2]
 8000530:	8903      	ldrh	r3, [r0, #8]
 8000532:	045c      	lsls	r4, r3, #17
 8000534:	d007      	beq.n	8000546 <USBPD_PE_TimerCounteUpdate+0x6c>
 8000536:	8903      	ldrh	r3, [r0, #8]
 8000538:	f000 f829 	bl	800058e <.text_10>
 800053c:	bf3d      	ittte	cc
 800053e:	8904      	ldrhcc	r4, [r0, #8]
 8000540:	1a64      	subcc	r4, r4, r1
 8000542:	8104      	strhcc	r4, [r0, #8]
 8000544:	8102      	strhcs	r2, [r0, #8]
 8000546:	8883      	ldrh	r3, [r0, #4]
 8000548:	045c      	lsls	r4, r3, #17
 800054a:	d007      	beq.n	800055c <USBPD_PE_TimerCounteUpdate+0x82>
 800054c:	8883      	ldrh	r3, [r0, #4]
 800054e:	f000 f81e 	bl	800058e <.text_10>
 8000552:	bf3d      	ittte	cc
 8000554:	8884      	ldrhcc	r4, [r0, #4]
 8000556:	1a64      	subcc	r4, r4, r1
 8000558:	8084      	strhcc	r4, [r0, #4]
 800055a:	8082      	strhcs	r2, [r0, #4]
 800055c:	8943      	ldrh	r3, [r0, #10]
 800055e:	045c      	lsls	r4, r3, #17
 8000560:	d007      	beq.n	8000572 <USBPD_PE_TimerCounteUpdate+0x98>
 8000562:	8943      	ldrh	r3, [r0, #10]
 8000564:	f000 f813 	bl	800058e <.text_10>
 8000568:	bf3d      	ittte	cc
 800056a:	8944      	ldrhcc	r4, [r0, #10]
 800056c:	1a64      	subcc	r4, r4, r1
 800056e:	8144      	strhcc	r4, [r0, #10]
 8000570:	8142      	strhcs	r2, [r0, #10]
 8000572:	8983      	ldrh	r3, [r0, #12]
 8000574:	045c      	lsls	r4, r3, #17
 8000576:	d006      	beq.n	8000586 <USBPD_PE_TimerCounteUpdate+0xac>
 8000578:	8983      	ldrh	r3, [r0, #12]
 800057a:	f000 f808 	bl	800058e <.text_10>
 800057e:	bf3c      	itt	cc
 8000580:	8982      	ldrhcc	r2, [r0, #12]
 8000582:	1a52      	subcc	r2, r2, r1
 8000584:	8182      	strh	r2, [r0, #12]
 8000586:	6902      	ldr	r2, [r0, #16]
 8000588:	1889      	adds	r1, r1, r2
 800058a:	6101      	str	r1, [r0, #16]
 800058c:	bd11      	pop	{r0, r4, pc}

0800058e <.text_10>:
 800058e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000592:	4299      	cmp	r1, r3
 8000594:	4770      	bx	lr

08000596 <USBPD_PE_IsCableConnected>:
 8000596:	b538      	push	{r3, r4, r5, lr}
 8000598:	460c      	mov	r4, r1
 800059a:	490b      	ldr	r1, [pc, #44]	; (80005c8 <.text_12>)
 800059c:	4602      	mov	r2, r0
 800059e:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 80005a2:	2100      	movs	r1, #0
 80005a4:	f004 f98a 	bl	80048bc <PE_Reset>
 80005a8:	6868      	ldr	r0, [r5, #4]
 80005aa:	6801      	ldr	r1, [r0, #0]
 80005ac:	2c01      	cmp	r4, #1
 80005ae:	d103      	bne.n	80005b8 <USBPD_PE_IsCableConnected+0x22>
 80005b0:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80005b4:	6001      	str	r1, [r0, #0]
 80005b6:	e005      	b.n	80005c4 <USBPD_PE_IsCableConnected+0x2e>
 80005b8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80005bc:	6001      	str	r1, [r0, #0]
 80005be:	2000      	movs	r0, #0
 80005c0:	f885 037f 	strb.w	r0, [r5, #895]	; 0x37f
 80005c4:	2000      	movs	r0, #0
 80005c6:	bd32      	pop	{r1, r4, r5, pc}

080005c8 <.text_12>:
 80005c8:	200000d4 	.word	0x200000d4

080005cc <.text_13>:
 80005cc:	200000d0 	.word	0x200000d0

080005d0 <.text_14>:
 80005d0:	30260000 	.word	0x30260000

080005d4 <USBPD_PE_StateMachine_SRC>:
 80005d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005d8:	4606      	mov	r6, r0
 80005da:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000620 <USBPD_PE_StateMachine_SRC+0x4c>
 80005de:	f109 0004 	add.w	r0, r9, #4
 80005e2:	b087      	sub	sp, #28
 80005e4:	4631      	mov	r1, r6
 80005e6:	f850 7021 	ldr.w	r7, [r0, r1, lsl #2]
 80005ea:	f507 7461 	add.w	r4, r7, #900	; 0x384
 80005ee:	f04f 0800 	mov.w	r8, #0
 80005f2:	6925      	ldr	r5, [r4, #16]
 80005f4:	8820      	ldrh	r0, [r4, #0]
 80005f6:	89e1      	ldrh	r1, [r4, #14]
 80005f8:	f3c5 050b 	ubfx	r5, r5, #0, #12
 80005fc:	1945      	adds	r5, r0, r5
 80005fe:	f3c1 2042 	ubfx	r0, r1, #9, #3
 8000602:	1945      	adds	r5, r0, r5
 8000604:	4638      	mov	r0, r7
 8000606:	f001 011f 	and.w	r1, r1, #31
 800060a:	194d      	adds	r5, r1, r5
 800060c:	f003 fce5 	bl	8003fda <PE_Check_RxEvent>
 8000610:	2803      	cmp	r0, #3
 8000612:	b2ad      	uxth	r5, r5
 8000614:	f88d 000c 	strb.w	r0, [sp, #12]
 8000618:	f040 8543 	bne.w	80010a2 <USBPD_PE_StateMachine_SRC+0xace>
 800061c:	2001      	movs	r0, #1
 800061e:	e055      	b.n	80006cc <USBPD_PE_StateMachine_SRC+0xf8>
 8000620:	200000d0 	.word	0x200000d0
 8000624:	a903      	add	r1, sp, #12
 8000626:	4638      	mov	r0, r7
 8000628:	f002 fe7d 	bl	8003326 <PE_StateMachine_VDM>
 800062c:	4605      	mov	r5, r0
 800062e:	f8d9 c00c 	ldr.w	ip, [r9, #12]
 8000632:	f1bc 0f00 	cmp.w	ip, #0
 8000636:	d009      	beq.n	800064c <USBPD_PE_StateMachine_SRC+0x78>
 8000638:	f899 0000 	ldrb.w	r0, [r9]
 800063c:	07c1      	lsls	r1, r0, #31
 800063e:	d505      	bpl.n	800064c <USBPD_PE_StateMachine_SRC+0x78>
 8000640:	7932      	ldrb	r2, [r6, #4]
 8000642:	7970      	ldrb	r0, [r6, #5]
 8000644:	4290      	cmp	r0, r2
 8000646:	d001      	beq.n	800064c <USBPD_PE_StateMachine_SRC+0x78>
 8000648:	f000 fea8 	bl	800139c <.text_41>
 800064c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8000650:	2814      	cmp	r0, #20
 8000652:	f000 8503 	beq.w	800105c <USBPD_PE_StateMachine_SRC+0xa88>
 8000656:	4638      	mov	r0, r7
 8000658:	f003 fce3 	bl	8004022 <PE_Check_AMSConflict>
 800065c:	2815      	cmp	r0, #21
 800065e:	d101      	bne.n	8000664 <USBPD_PE_StateMachine_SRC+0x90>
 8000660:	f000 fe6e 	bl	8001340 <.text_34+0x6>
 8000664:	f8d9 500c 	ldr.w	r5, [r9, #12]
 8000668:	b15d      	cbz	r5, 8000682 <USBPD_PE_StateMachine_SRC+0xae>
 800066a:	f899 0000 	ldrb.w	r0, [r9]
 800066e:	07c1      	lsls	r1, r0, #31
 8000670:	d507      	bpl.n	8000682 <USBPD_PE_StateMachine_SRC+0xae>
 8000672:	7932      	ldrb	r2, [r6, #4]
 8000674:	7970      	ldrb	r0, [r6, #5]
 8000676:	4290      	cmp	r0, r2
 8000678:	d003      	beq.n	8000682 <USBPD_PE_StateMachine_SRC+0xae>
 800067a:	7172      	strb	r2, [r6, #5]
 800067c:	f004 f9fc 	bl	8004a78 <.text_213>
 8000680:	47a8      	blx	r5
 8000682:	2500      	movs	r5, #0
 8000684:	f1b8 0f00 	cmp.w	r8, #0
 8000688:	bf1e      	ittt	ne
 800068a:	f8d9 0010 	ldrne.w	r0, [r9, #16]
 800068e:	f8df 1bf0 	ldrne.w	r1, [pc, #3056]	; 8001280 <.text_16>
 8000692:	4288      	cmpne	r0, r1
 8000694:	d016      	beq.n	80006c4 <USBPD_PE_StateMachine_SRC+0xf0>
 8000696:	7c38      	ldrb	r0, [r7, #16]
 8000698:	f109 0104 	add.w	r1, r9, #4
 800069c:	f000 0001 	and.w	r0, r0, #1
 80006a0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80006a4:	f001 fe4f 	bl	8002346 <.text_81>
 80006a8:	f109 0004 	add.w	r0, r9, #4
 80006ac:	7c39      	ldrb	r1, [r7, #16]
 80006ae:	f001 0101 	and.w	r1, r1, #1
 80006b2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80006b6:	6901      	ldr	r1, [r0, #16]
 80006b8:	0bca      	lsrs	r2, r1, #15
 80006ba:	2a08      	cmp	r2, #8
 80006bc:	bf24      	itt	cs
 80006be:	f3c1 010e 	ubfxcs	r1, r1, #0, #15
 80006c2:	6101      	strcs	r1, [r0, #16]
 80006c4:	2d00      	cmp	r5, #0
 80006c6:	f000 84f1 	beq.w	80010ac <USBPD_PE_StateMachine_SRC+0xad8>
 80006ca:	4628      	mov	r0, r5
 80006cc:	b007      	add	sp, #28
 80006ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006d2:	68b8      	ldr	r0, [r7, #8]
 80006d4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80006d6:	b111      	cbz	r1, 80006de <USBPD_PE_StateMachine_SRC+0x10a>
 80006d8:	f000 ff06 	bl	80014e8 <.text_50>
 80006dc:	4788      	blx	r1
 80006de:	4658      	mov	r0, fp
 80006e0:	e7f4      	b.n	80006cc <USBPD_PE_StateMachine_SRC+0xf8>
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	6813      	ldr	r3, [r2, #0]
 80006e6:	f3c3 3100 	ubfx	r1, r3, #12, #1
 80006ea:	2900      	cmp	r1, #0
 80006ec:	d036      	beq.n	800075c <USBPD_PE_StateMachine_SRC+0x188>
 80006ee:	f003 0103 	and.w	r1, r3, #3
 80006f2:	2901      	cmp	r1, #1
 80006f4:	bf0c      	ite	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	2101      	movne	r1, #1
 80006fa:	f023 0320 	bic.w	r3, r3, #32
 80006fe:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	2100      	movs	r1, #0
 8000706:	7679      	strb	r1, [r7, #25]
 8000708:	6879      	ldr	r1, [r7, #4]
 800070a:	680a      	ldr	r2, [r1, #0]
 800070c:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8000710:	2a01      	cmp	r2, #1
 8000712:	d009      	beq.n	8000728 <USBPD_PE_StateMachine_SRC+0x154>
 8000714:	680b      	ldr	r3, [r1, #0]
 8000716:	2201      	movs	r2, #1
 8000718:	f362 230a 	bfi	r3, r2, #8, #3
 800071c:	600b      	str	r3, [r1, #0]
 800071e:	b108      	cbz	r0, 8000724 <USBPD_PE_StateMachine_SRC+0x150>
 8000720:	f000 fe45 	bl	80013ae <.text_42>
 8000724:	f004 f998 	bl	8004a58 <.text_210>
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	6801      	ldr	r1, [r0, #0]
 800072c:	f3c1 1000 	ubfx	r0, r1, #4, #1
 8000730:	b130      	cbz	r0, 8000740 <USBPD_PE_StateMachine_SRC+0x16c>
 8000732:	f248 0014 	movw	r0, #32788	; 0x8014
 8000736:	8020      	strh	r0, [r4, #0]
 8000738:	2514      	movs	r5, #20
 800073a:	2006      	movs	r0, #6
 800073c:	7130      	strb	r0, [r6, #4]
 800073e:	e776      	b.n	800062e <USBPD_PE_StateMachine_SRC+0x5a>
 8000740:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8000744:	2800      	cmp	r0, #0
 8000746:	d03b      	beq.n	80007c0 <USBPD_PE_StateMachine_SRC+0x1ec>
 8000748:	6838      	ldr	r0, [r7, #0]
 800074a:	7801      	ldrb	r1, [r0, #0]
 800074c:	078a      	lsls	r2, r1, #30
 800074e:	d537      	bpl.n	80007c0 <USBPD_PE_StateMachine_SRC+0x1ec>
 8000750:	7eb8      	ldrb	r0, [r7, #26]
 8000752:	1c40      	adds	r0, r0, #1
 8000754:	76b8      	strb	r0, [r7, #26]
 8000756:	2105      	movs	r1, #5
 8000758:	7131      	strb	r1, [r6, #4]
 800075a:	e768      	b.n	800062e <USBPD_PE_StateMachine_SRC+0x5a>
 800075c:	b138      	cbz	r0, 800076e <USBPD_PE_StateMachine_SRC+0x19a>
 800075e:	f001 fe00 	bl	8002362 <.text_83>
 8000762:	7c39      	ldrb	r1, [r7, #16]
 8000764:	f8d9 c00c 	ldr.w	ip, [r9, #12]
 8000768:	2221      	movs	r2, #33	; 0x21
 800076a:	f004 f97d 	bl	8004a68 <.text_211+0x2>
 800076e:	f000 fd97 	bl	80012a0 <.text_20>
 8000772:	2121      	movs	r1, #33	; 0x21
 8000774:	f003 fb2e 	bl	8003dd4 <.text_164+0x6>
 8000778:	2000      	movs	r0, #0
 800077a:	e7df      	b.n	800073c <USBPD_PE_StateMachine_SRC+0x168>
 800077c:	a903      	add	r1, sp, #12
 800077e:	4638      	mov	r0, r7
 8000780:	f002 fc72 	bl	8003068 <PE_StateMachine_VDMCable>
 8000784:	e752      	b.n	800062c <USBPD_PE_StateMachine_SRC+0x58>
 8000786:	f000 fde3 	bl	8001350 <.text_35>
 800078a:	d102      	bne.n	8000792 <USBPD_PE_StateMachine_SRC+0x1be>
 800078c:	2107      	movs	r1, #7
 800078e:	7131      	strb	r1, [r6, #4]
 8000790:	2500      	movs	r5, #0
 8000792:	e74c      	b.n	800062e <USBPD_PE_StateMachine_SRC+0x5a>
 8000794:	4638      	mov	r0, r7
 8000796:	f000 fe38 	bl	800140a <PE_StateMachine_SRC_SendCapa>
 800079a:	e747      	b.n	800062c <USBPD_PE_StateMachine_SRC+0x58>
 800079c:	88a0      	ldrh	r0, [r4, #4]
 800079e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80007a2:	d102      	bne.n	80007aa <USBPD_PE_StateMachine_SRC+0x1d6>
 80007a4:	f000 fdd8 	bl	8001358 <.text_36>
 80007a8:	7131      	strb	r1, [r6, #4]
 80007aa:	f000 fdd1 	bl	8001350 <.text_35>
 80007ae:	d1f0      	bne.n	8000792 <USBPD_PE_StateMachine_SRC+0x1be>
 80007b0:	6838      	ldr	r0, [r7, #0]
 80007b2:	6841      	ldr	r1, [r0, #4]
 80007b4:	f3c1 10c0 	ubfx	r0, r1, #7, #1
 80007b8:	b110      	cbz	r0, 80007c0 <USBPD_PE_StateMachine_SRC+0x1ec>
 80007ba:	7e78      	ldrb	r0, [r7, #25]
 80007bc:	1c40      	adds	r0, r0, #1
 80007be:	7678      	strb	r0, [r7, #25]
 80007c0:	2107      	movs	r1, #7
 80007c2:	e7c9      	b.n	8000758 <USBPD_PE_StateMachine_SRC+0x184>
 80007c4:	7810      	ldrb	r0, [r2, #0]
 80007c6:	7851      	ldrb	r1, [r2, #1]
 80007c8:	7893      	ldrb	r3, [r2, #2]
 80007ca:	eb00 2001 	add.w	r0, r0, r1, lsl #8
 80007ce:	78d1      	ldrb	r1, [r2, #3]
 80007d0:	eb00 4003 	add.w	r0, r0, r3, lsl #16
 80007d4:	eb00 6001 	add.w	r0, r0, r1, lsl #24
 80007d8:	9000      	str	r0, [sp, #0]
 80007da:	f000 fd9b 	bl	8001314 <.text_30>
 80007de:	d115      	bne.n	800080c <USBPD_PE_StateMachine_SRC+0x238>
 80007e0:	89e1      	ldrh	r1, [r4, #14]
 80007e2:	0bc8      	lsrs	r0, r1, #15
 80007e4:	d112      	bne.n	800080c <USBPD_PE_StateMachine_SRC+0x238>
 80007e6:	f3c1 3002 	ubfx	r0, r1, #12, #3
 80007ea:	b178      	cbz	r0, 800080c <USBPD_PE_StateMachine_SRC+0x238>
 80007ec:	f001 001f 	and.w	r0, r1, #31
 80007f0:	2802      	cmp	r0, #2
 80007f2:	d10b      	bne.n	800080c <USBPD_PE_StateMachine_SRC+0x238>
 80007f4:	7c38      	ldrb	r0, [r7, #16]
 80007f6:	f003 fea4 	bl	8004542 <.text_195>
 80007fa:	68bd      	ldr	r5, [r7, #8]
 80007fc:	7c38      	ldrb	r0, [r7, #16]
 80007fe:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8000802:	f003 fe98 	bl	8004536 <.text_194>
 8000806:	2009      	movs	r0, #9
 8000808:	f000 fd98 	bl	800133c <.text_34+0x2>
 800080c:	f000 fda0 	bl	8001350 <.text_35>
 8000810:	d1bf      	bne.n	8000792 <USBPD_PE_StateMachine_SRC+0x1be>
 8000812:	210f      	movs	r1, #15
 8000814:	e7bb      	b.n	800078e <USBPD_PE_StateMachine_SRC+0x1ba>
 8000816:	4638      	mov	r0, r7
 8000818:	f000 fe6e 	bl	80014f8 <PE_StateMachine_SRC_NegocCapa>
 800081c:	e706      	b.n	800062c <USBPD_PE_StateMachine_SRC+0x58>
 800081e:	f000 fd3b 	bl	8001298 <.text_19>
 8000822:	d135      	bne.n	8000890 <USBPD_PE_StateMachine_SRC+0x2bc>
 8000824:	f000 fd40 	bl	80012a8 <.text_21>
 8000828:	d006      	beq.n	8000838 <USBPD_PE_StateMachine_SRC+0x264>
 800082a:	f001 fd45 	bl	80022b8 <.text_70>
 800082e:	b108      	cbz	r0, 8000834 <USBPD_PE_StateMachine_SRC+0x260>
 8000830:	f000 fdbd 	bl	80013ae <.text_42>
 8000834:	f004 f910 	bl	8004a58 <.text_210>
 8000838:	68b8      	ldr	r0, [r7, #8]
 800083a:	6801      	ldr	r1, [r0, #0]
 800083c:	2900      	cmp	r1, #0
 800083e:	d027      	beq.n	8000890 <USBPD_PE_StateMachine_SRC+0x2bc>
 8000840:	f000 fe52 	bl	80014e8 <.text_50>
 8000844:	4788      	blx	r1
 8000846:	2800      	cmp	r0, #0
 8000848:	d1e3      	bne.n	8000812 <USBPD_PE_StateMachine_SRC+0x23e>
 800084a:	200d      	movs	r0, #13
 800084c:	e776      	b.n	800073c <USBPD_PE_StateMachine_SRC+0x168>
 800084e:	f000 fd9d 	bl	800138c <.text_40>
 8000852:	2800      	cmp	r0, #0
 8000854:	d11c      	bne.n	8000890 <USBPD_PE_StateMachine_SRC+0x2bc>
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f001 fddc 	bl	8002414 <.text_93+0x2>
 800085c:	d00d      	beq.n	800087a <USBPD_PE_StateMachine_SRC+0x2a6>
 800085e:	6802      	ldr	r2, [r0, #0]
 8000860:	2103      	movs	r1, #3
 8000862:	f361 220a 	bfi	r2, r1, #8, #3
 8000866:	6002      	str	r2, [r0, #0]
 8000868:	f000 fd63 	bl	8001332 <.text_33>
 800086c:	d503      	bpl.n	8000876 <USBPD_PE_StateMachine_SRC+0x2a2>
 800086e:	f000 fdb7 	bl	80013e0 <.text_45>
 8000872:	f004 f8f8 	bl	8004a66 <.text_211>
 8000876:	f004 f8ef 	bl	8004a58 <.text_210>
 800087a:	f000 fd5a 	bl	8001332 <.text_33>
 800087e:	d504      	bpl.n	800088a <USBPD_PE_StateMachine_SRC+0x2b6>
 8000880:	f000 fdae 	bl	80013e0 <.text_45>
 8000884:	2210      	movs	r2, #16
 8000886:	f004 f8ef 	bl	8004a68 <.text_211+0x2>
 800088a:	2110      	movs	r1, #16
 800088c:	f000 fd1e 	bl	80012cc <.text_24>
 8000890:	e6cd      	b.n	800062e <USBPD_PE_StateMachine_SRC+0x5a>
 8000892:	465d      	mov	r5, fp
 8000894:	e6cb      	b.n	800062e <USBPD_PE_StateMachine_SRC+0x5a>
 8000896:	2001      	movs	r0, #1
 8000898:	9000      	str	r0, [sp, #0]
 800089a:	2397      	movs	r3, #151	; 0x97
 800089c:	2202      	movs	r2, #2
 800089e:	f000 fd69 	bl	8001374 <.text_38+0x2>
 80008a2:	2800      	cmp	r0, #0
 80008a4:	d1f6      	bne.n	8000894 <USBPD_PE_StateMachine_SRC+0x2c0>
 80008a6:	83bd      	strh	r5, [r7, #28]
 80008a8:	f000 fd43 	bl	8001332 <.text_33>
 80008ac:	d504      	bpl.n	80008b8 <USBPD_PE_StateMachine_SRC+0x2e4>
 80008ae:	f000 fd90 	bl	80013d2 <.text_44>
 80008b2:	2229      	movs	r2, #41	; 0x29
 80008b4:	f003 ffd2 	bl	800485c <.text_203+0x2>
 80008b8:	f000 fcf2 	bl	80012a0 <.text_20>
 80008bc:	2129      	movs	r1, #41	; 0x29
 80008be:	f003 fa89 	bl	8003dd4 <.text_164+0x6>
 80008c2:	f248 2026 	movw	r0, #33318	; 0x8226
 80008c6:	8020      	strh	r0, [r4, #0]
 80008c8:	f240 2526 	movw	r5, #550	; 0x226
 80008cc:	e6af      	b.n	800062e <USBPD_PE_StateMachine_SRC+0x5a>
 80008ce:	f000 fce3 	bl	8001298 <.text_19>
 80008d2:	d1fb      	bne.n	80008cc <USBPD_PE_StateMachine_SRC+0x2f8>
 80008d4:	b120      	cbz	r0, 80008e0 <USBPD_PE_StateMachine_SRC+0x30c>
 80008d6:	2000      	movs	r0, #0
 80008d8:	9000      	str	r0, [sp, #0]
 80008da:	222a      	movs	r2, #42	; 0x2a
 80008dc:	f000 fd1e 	bl	800131c <.text_31>
 80008e0:	f000 fcde 	bl	80012a0 <.text_20>
 80008e4:	212a      	movs	r1, #42	; 0x2a
 80008e6:	f003 fa75 	bl	8003dd4 <.text_164+0x6>
 80008ea:	f000 fd4f 	bl	800138c <.text_40>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d1ec      	bne.n	80008cc <USBPD_PE_StateMachine_SRC+0x2f8>
 80008f2:	f000 fd1e 	bl	8001332 <.text_33>
 80008f6:	d504      	bpl.n	8000902 <USBPD_PE_StateMachine_SRC+0x32e>
 80008f8:	f000 fd72 	bl	80013e0 <.text_45>
 80008fc:	222e      	movs	r2, #46	; 0x2e
 80008fe:	f004 f8b3 	bl	8004a68 <.text_211+0x2>
 8000902:	212e      	movs	r1, #46	; 0x2e
 8000904:	e7c2      	b.n	800088c <USBPD_PE_StateMachine_SRC+0x2b8>
 8000906:	4638      	mov	r0, r7
 8000908:	f002 fb1c 	bl	8002f44 <PE_PerformSoftReset>
 800090c:	2000      	movs	r0, #0
 800090e:	9000      	str	r0, [sp, #0]
 8000910:	2307      	movs	r3, #7
 8000912:	f000 fd2e 	bl	8001372 <.text_38>
 8000916:	2800      	cmp	r0, #0
 8000918:	d1d8      	bne.n	80008cc <USBPD_PE_StateMachine_SRC+0x2f8>
 800091a:	f000 fd0a 	bl	8001332 <.text_33>
 800091e:	d504      	bpl.n	800092a <USBPD_PE_StateMachine_SRC+0x356>
 8000920:	f000 fd5e 	bl	80013e0 <.text_45>
 8000924:	2231      	movs	r2, #49	; 0x31
 8000926:	f004 f89f 	bl	8004a68 <.text_211+0x2>
 800092a:	2131      	movs	r1, #49	; 0x31
 800092c:	e7ae      	b.n	800088c <USBPD_PE_StateMachine_SRC+0x2b8>
 800092e:	2000      	movs	r0, #0
 8000930:	9000      	str	r0, [sp, #0]
 8000932:	2312      	movs	r3, #18
 8000934:	79f1      	ldrb	r1, [r6, #7]
 8000936:	220d      	movs	r2, #13
 8000938:	4638      	mov	r0, r7
 800093a:	f002 fa66 	bl	8002e0a <PE_Send_CtrlMessage>
 800093e:	2800      	cmp	r0, #0
 8000940:	d1c4      	bne.n	80008cc <USBPD_PE_StateMachine_SRC+0x2f8>
 8000942:	f000 fcf3 	bl	800132c <.text_32+0x2>
 8000946:	d504      	bpl.n	8000952 <USBPD_PE_StateMachine_SRC+0x37e>
 8000948:	f000 fd4a 	bl	80013e0 <.text_45>
 800094c:	2230      	movs	r2, #48	; 0x30
 800094e:	f004 f88b 	bl	8004a68 <.text_211+0x2>
 8000952:	2130      	movs	r1, #48	; 0x30
 8000954:	e79a      	b.n	800088c <USBPD_PE_StateMachine_SRC+0x2b8>
 8000956:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800095a:	2911      	cmp	r1, #17
 800095c:	bf01      	itttt	eq
 800095e:	89e2      	ldrheq	r2, [r4, #14]
 8000960:	f24f 011f 	movweq	r1, #61471	; 0xf01f
 8000964:	400a      	andeq	r2, r1
 8000966:	2a03      	cmpeq	r2, #3
 8000968:	d10e      	bne.n	8000988 <USBPD_PE_StateMachine_SRC+0x3b4>
 800096a:	b120      	cbz	r0, 8000976 <USBPD_PE_StateMachine_SRC+0x3a2>
 800096c:	2000      	movs	r0, #0
 800096e:	9000      	str	r0, [sp, #0]
 8000970:	2231      	movs	r2, #49	; 0x31
 8000972:	f000 fcd3 	bl	800131c <.text_31>
 8000976:	f000 fc93 	bl	80012a0 <.text_20>
 800097a:	2131      	movs	r1, #49	; 0x31
 800097c:	f003 fa2a 	bl	8003dd4 <.text_164+0x6>
 8000980:	2007      	movs	r0, #7
 8000982:	7130      	strb	r0, [r6, #4]
 8000984:	f000 fcdc 	bl	8001340 <.text_34+0x6>
 8000988:	f000 fce2 	bl	8001350 <.text_35>
 800098c:	d19e      	bne.n	80008cc <USBPD_PE_StateMachine_SRC+0x2f8>
 800098e:	e740      	b.n	8000812 <USBPD_PE_StateMachine_SRC+0x23e>
 8000990:	6939      	ldr	r1, [r7, #16]
 8000992:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8000996:	6139      	str	r1, [r7, #16]
 8000998:	4638      	mov	r0, r7
 800099a:	f002 fa9e 	bl	8002eda <PE_Send_HARDRESET>
 800099e:	68b8      	ldr	r0, [r7, #8]
 80009a0:	6843      	ldr	r3, [r0, #4]
 80009a2:	b113      	cbz	r3, 80009aa <USBPD_PE_StateMachine_SRC+0x3d6>
 80009a4:	f000 fc8c 	bl	80012c0 <.text_23>
 80009a8:	4798      	blx	r3
 80009aa:	f8a4 a000 	strh.w	sl, [r4]
 80009ae:	251b      	movs	r5, #27
 80009b0:	7e38      	ldrb	r0, [r7, #24]
 80009b2:	1c40      	adds	r0, r0, #1
 80009b4:	7638      	strb	r0, [r7, #24]
 80009b6:	f000 fd22 	bl	80013fe <.text_47>
 80009ba:	2000      	movs	r0, #0
 80009bc:	7030      	strb	r0, [r6, #0]
 80009be:	2115      	movs	r1, #21
 80009c0:	6938      	ldr	r0, [r7, #16]
 80009c2:	f020 00e0 	bic.w	r0, r0, #224	; 0xe0
 80009c6:	6138      	str	r0, [r7, #16]
 80009c8:	e6c6      	b.n	8000758 <USBPD_PE_StateMachine_SRC+0x184>
 80009ca:	f8a4 a000 	strh.w	sl, [r4]
 80009ce:	2115      	movs	r1, #21
 80009d0:	251b      	movs	r5, #27
 80009d2:	7131      	strb	r1, [r6, #4]
 80009d4:	b120      	cbz	r0, 80009e0 <USBPD_PE_StateMachine_SRC+0x40c>
 80009d6:	2000      	movs	r0, #0
 80009d8:	9000      	str	r0, [sp, #0]
 80009da:	221e      	movs	r2, #30
 80009dc:	f000 fc9e 	bl	800131c <.text_31>
 80009e0:	211e      	movs	r1, #30
 80009e2:	e753      	b.n	800088c <USBPD_PE_StateMachine_SRC+0x2b8>
 80009e4:	f000 fc58 	bl	8001298 <.text_19>
 80009e8:	d137      	bne.n	8000a5a <USBPD_PE_StateMachine_SRC+0x486>
 80009ea:	7e3a      	ldrb	r2, [r7, #24]
 80009ec:	2a03      	cmp	r2, #3
 80009ee:	d31a      	bcc.n	8000a26 <USBPD_PE_StateMachine_SRC+0x452>
 80009f0:	f8d7 c010 	ldr.w	ip, [r7, #16]
 80009f4:	f3cc 0140 	ubfx	r1, ip, #1, #1
 80009f8:	2900      	cmp	r1, #0
 80009fa:	bf1e      	ittt	ne
 80009fc:	68ba      	ldrne	r2, [r7, #8]
 80009fe:	6b51      	ldrne	r1, [r2, #52]	; 0x34
 8000a00:	2900      	cmpne	r1, #0
 8000a02:	d002      	beq.n	8000a0a <USBPD_PE_StateMachine_SRC+0x436>
 8000a04:	2092      	movs	r0, #146	; 0x92
 8000a06:	7130      	strb	r0, [r6, #4]
 8000a08:	e6c2      	b.n	8000790 <USBPD_PE_StateMachine_SRC+0x1bc>
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	7639      	strb	r1, [r7, #24]
 8000a0e:	7131      	strb	r1, [r6, #4]
 8000a10:	b138      	cbz	r0, 8000a22 <USBPD_PE_StateMachine_SRC+0x44e>
 8000a12:	9100      	str	r1, [sp, #0]
 8000a14:	2221      	movs	r2, #33	; 0x21
 8000a16:	f00c 0101 	and.w	r1, ip, #1
 8000a1a:	f8d9 c00c 	ldr.w	ip, [r9, #12]
 8000a1e:	2009      	movs	r0, #9
 8000a20:	47e0      	blx	ip
 8000a22:	2121      	movs	r1, #33	; 0x21
 8000a24:	e732      	b.n	800088c <USBPD_PE_StateMachine_SRC+0x2b8>
 8000a26:	f248 208a 	movw	r0, #33418	; 0x828a
 8000a2a:	8020      	strh	r0, [r4, #0]
 8000a2c:	2500      	movs	r5, #0
 8000a2e:	2017      	movs	r0, #23
 8000a30:	7130      	strb	r0, [r6, #4]
 8000a32:	68b8      	ldr	r0, [r7, #8]
 8000a34:	6843      	ldr	r3, [r0, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d00f      	beq.n	8000a5a <USBPD_PE_StateMachine_SRC+0x486>
 8000a3a:	6938      	ldr	r0, [r7, #16]
 8000a3c:	f3c0 2101 	ubfx	r1, r0, #8, #2
 8000a40:	1e4a      	subs	r2, r1, #1
 8000a42:	4192      	sbcs	r2, r2
 8000a44:	0fd2      	lsrs	r2, r2, #31
 8000a46:	f000 fc23 	bl	8001290 <.text_18>
 8000a4a:	68b8      	ldr	r0, [r7, #8]
 8000a4c:	6843      	ldr	r3, [r0, #4]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d003      	beq.n	8000a5a <USBPD_PE_StateMachine_SRC+0x486>
 8000a52:	7c38      	ldrb	r0, [r7, #16]
 8000a54:	2203      	movs	r2, #3
 8000a56:	f000 fc1b 	bl	8001290 <.text_18>
 8000a5a:	e5e8      	b.n	800062e <USBPD_PE_StateMachine_SRC+0x5a>
 8000a5c:	68b8      	ldr	r0, [r7, #8]
 8000a5e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000a60:	b162      	cbz	r2, 8000a7c <USBPD_PE_StateMachine_SRC+0x4a8>
 8000a62:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8000a66:	2100      	movs	r1, #0
 8000a68:	4790      	blx	r2
 8000a6a:	2801      	cmp	r0, #1
 8000a6c:	d106      	bne.n	8000a7c <USBPD_PE_StateMachine_SRC+0x4a8>
 8000a6e:	f248 3020 	movw	r0, #33568	; 0x8320
 8000a72:	8020      	strh	r0, [r4, #0]
 8000a74:	f44f 7548 	mov.w	r5, #800	; 0x320
 8000a78:	2013      	movs	r0, #19
 8000a7a:	7130      	strb	r0, [r6, #4]
 8000a7c:	f000 fc68 	bl	8001350 <.text_35>
 8000a80:	d1eb      	bne.n	8000a5a <USBPD_PE_StateMachine_SRC+0x486>
 8000a82:	68b9      	ldr	r1, [r7, #8]
 8000a84:	684b      	ldr	r3, [r1, #4]
 8000a86:	b10b      	cbz	r3, 8000a8c <USBPD_PE_StateMachine_SRC+0x4b8>
 8000a88:	f000 fc3e 	bl	8001308 <.text_29>
 8000a8c:	f000 fcb7 	bl	80013fe <.text_47>
 8000a90:	68ba      	ldr	r2, [r7, #8]
 8000a92:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8000a94:	2800      	cmp	r0, #0
 8000a96:	f43f ae51 	beq.w	800073c <USBPD_PE_StateMachine_SRC+0x168>
 8000a9a:	2192      	movs	r1, #146	; 0x92
 8000a9c:	e65c      	b.n	8000758 <USBPD_PE_StateMachine_SRC+0x184>
 8000a9e:	f000 fc57 	bl	8001350 <.text_35>
 8000aa2:	d11e      	bne.n	8000ae2 <USBPD_PE_StateMachine_SRC+0x50e>
 8000aa4:	68b9      	ldr	r1, [r7, #8]
 8000aa6:	684b      	ldr	r3, [r1, #4]
 8000aa8:	b11b      	cbz	r3, 8000ab2 <USBPD_PE_StateMachine_SRC+0x4de>
 8000aaa:	7c38      	ldrb	r0, [r7, #16]
 8000aac:	2204      	movs	r2, #4
 8000aae:	f000 fbef 	bl	8001290 <.text_18>
 8000ab2:	f000 fca4 	bl	80013fe <.text_47>
 8000ab6:	68b8      	ldr	r0, [r7, #8]
 8000ab8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000aba:	b19a      	cbz	r2, 8000ae4 <USBPD_PE_StateMachine_SRC+0x510>
 8000abc:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	4790      	blx	r2
 8000ac4:	2801      	cmp	r0, #1
 8000ac6:	d10d      	bne.n	8000ae4 <USBPD_PE_StateMachine_SRC+0x510>
 8000ac8:	68b8      	ldr	r0, [r7, #8]
 8000aca:	6843      	ldr	r3, [r0, #4]
 8000acc:	b113      	cbz	r3, 8000ad4 <USBPD_PE_StateMachine_SRC+0x500>
 8000ace:	f000 fbf1 	bl	80012b4 <.text_22>
 8000ad2:	4798      	blx	r3
 8000ad4:	f001 fc1c 	bl	8002310 <.text_76>
 8000ad8:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8000adc:	f005 fd55 	bl	800658a <USBPD_PRL_PowerSinkReset>
 8000ae0:	7135      	strb	r5, [r6, #4]
 8000ae2:	e5a4      	b.n	800062e <USBPD_PE_StateMachine_SRC+0x5a>
 8000ae4:	68b8      	ldr	r0, [r7, #8]
 8000ae6:	6843      	ldr	r3, [r0, #4]
 8000ae8:	b10b      	cbz	r3, 8000aee <USBPD_PE_StateMachine_SRC+0x51a>
 8000aea:	f000 fc0d 	bl	8001308 <.text_29>
 8000aee:	68b9      	ldr	r1, [r7, #8]
 8000af0:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8000af2:	e7cf      	b.n	8000a94 <USBPD_PE_StateMachine_SRC+0x4c0>
 8000af4:	2001      	movs	r0, #1
 8000af6:	9000      	str	r0, [sp, #0]
 8000af8:	231b      	movs	r3, #27
 8000afa:	2207      	movs	r2, #7
 8000afc:	f000 fc3a 	bl	8001374 <.text_38+0x2>
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d1ee      	bne.n	8000ae2 <USBPD_PE_StateMachine_SRC+0x50e>
 8000b04:	2006      	movs	r0, #6
 8000b06:	f000 fc10 	bl	800132a <.text_32>
 8000b0a:	d504      	bpl.n	8000b16 <USBPD_PE_StateMachine_SRC+0x542>
 8000b0c:	f000 fc68 	bl	80013e0 <.text_45>
 8000b10:	220b      	movs	r2, #11
 8000b12:	f003 ffa9 	bl	8004a68 <.text_211+0x2>
 8000b16:	210b      	movs	r1, #11
 8000b18:	e6b8      	b.n	800088c <USBPD_PE_StateMachine_SRC+0x2b8>
 8000b1a:	f000 fbfb 	bl	8001314 <.text_30>
 8000b1e:	d13b      	bne.n	8000b98 <USBPD_PE_StateMachine_SRC+0x5c4>
 8000b20:	89e1      	ldrh	r1, [r4, #14]
 8000b22:	0bc8      	lsrs	r0, r1, #15
 8000b24:	d11f      	bne.n	8000b66 <USBPD_PE_StateMachine_SRC+0x592>
 8000b26:	f3c1 3302 	ubfx	r3, r1, #12, #3
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	d01b      	beq.n	8000b66 <USBPD_PE_StateMachine_SRC+0x592>
 8000b2e:	f001 011f 	and.w	r1, r1, #31
 8000b32:	2901      	cmp	r1, #1
 8000b34:	d117      	bne.n	8000b66 <USBPD_PE_StateMachine_SRC+0x592>
 8000b36:	68bd      	ldr	r5, [r7, #8]
 8000b38:	7c38      	ldrb	r0, [r7, #16]
 8000b3a:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	2104      	movs	r1, #4
 8000b42:	f000 0001 	and.w	r0, r0, #1
 8000b46:	47e0      	blx	ip
 8000b48:	f000 fbf7 	bl	800133a <.text_34>
 8000b4c:	f000 fbf1 	bl	8001332 <.text_33>
 8000b50:	d504      	bpl.n	8000b5c <USBPD_PE_StateMachine_SRC+0x588>
 8000b52:	f000 fb97 	bl	8001284 <.text_17>
 8000b56:	220d      	movs	r2, #13
 8000b58:	f003 ff86 	bl	8004a68 <.text_211+0x2>
 8000b5c:	f000 fba0 	bl	80012a0 <.text_20>
 8000b60:	210d      	movs	r1, #13
 8000b62:	f003 f937 	bl	8003dd4 <.text_164+0x6>
 8000b66:	89e0      	ldrh	r0, [r4, #14]
 8000b68:	f410 4f70 	tst.w	r0, #61440	; 0xf000
 8000b6c:	d114      	bne.n	8000b98 <USBPD_PE_StateMachine_SRC+0x5c4>
 8000b6e:	f000 001f 	and.w	r0, r0, #31
 8000b72:	2804      	cmp	r0, #4
 8000b74:	bf18      	it	ne
 8000b76:	2810      	cmpne	r0, #16
 8000b78:	d10e      	bne.n	8000b98 <USBPD_PE_StateMachine_SRC+0x5c4>
 8000b7a:	f000 fbde 	bl	800133a <.text_34>
 8000b7e:	f000 fbd8 	bl	8001332 <.text_33>
 8000b82:	d504      	bpl.n	8000b8e <USBPD_PE_StateMachine_SRC+0x5ba>
 8000b84:	f000 fb7e 	bl	8001284 <.text_17>
 8000b88:	220e      	movs	r2, #14
 8000b8a:	f003 ff6d 	bl	8004a68 <.text_211+0x2>
 8000b8e:	f000 fb87 	bl	80012a0 <.text_20>
 8000b92:	210e      	movs	r1, #14
 8000b94:	f003 f91e 	bl	8003dd4 <.text_164+0x6>
 8000b98:	f000 fbda 	bl	8001350 <.text_35>
 8000b9c:	d106      	bne.n	8000bac <USBPD_PE_StateMachine_SRC+0x5d8>
 8000b9e:	2103      	movs	r1, #3
 8000ba0:	e5f5      	b.n	800078e <USBPD_PE_StateMachine_SRC+0x1ba>
 8000ba2:	68b8      	ldr	r0, [r7, #8]
 8000ba4:	6881      	ldr	r1, [r0, #8]
 8000ba6:	b911      	cbnz	r1, 8000bae <USBPD_PE_StateMachine_SRC+0x5da>
 8000ba8:	f000 fbe8 	bl	800137c <.text_39>
 8000bac:	e53f      	b.n	800062e <USBPD_PE_StateMachine_SRC+0x5a>
 8000bae:	f000 fc9b 	bl	80014e8 <.text_50>
 8000bb2:	4788      	blx	r1
 8000bb4:	280a      	cmp	r0, #10
 8000bb6:	d002      	beq.n	8000bbe <USBPD_PE_StateMachine_SRC+0x5ea>
 8000bb8:	280d      	cmp	r0, #13
 8000bba:	d01c      	beq.n	8000bf6 <USBPD_PE_StateMachine_SRC+0x622>
 8000bbc:	e02c      	b.n	8000c18 <USBPD_PE_StateMachine_SRC+0x644>
 8000bbe:	f248 001e 	movw	r0, #32798	; 0x801e
 8000bc2:	8020      	strh	r0, [r4, #0]
 8000bc4:	2324      	movs	r3, #36	; 0x24
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	9000      	str	r0, [sp, #0]
 8000bca:	f000 fbd2 	bl	8001372 <.text_38>
 8000bce:	251e      	movs	r5, #30
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	d1eb      	bne.n	8000bac <USBPD_PE_StateMachine_SRC+0x5d8>
 8000bd4:	68b8      	ldr	r0, [r7, #8]
 8000bd6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000bd8:	b11b      	cbz	r3, 8000be2 <USBPD_PE_StateMachine_SRC+0x60e>
 8000bda:	7c38      	ldrb	r0, [r7, #16]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f001 fb77 	bl	80022d0 <.text_72+0x4>
 8000be2:	f000 fba6 	bl	8001332 <.text_33>
 8000be6:	d504      	bpl.n	8000bf2 <USBPD_PE_StateMachine_SRC+0x61e>
 8000be8:	f000 fbfa 	bl	80013e0 <.text_45>
 8000bec:	223a      	movs	r2, #58	; 0x3a
 8000bee:	f003 ff3b 	bl	8004a68 <.text_211+0x2>
 8000bf2:	213a      	movs	r1, #58	; 0x3a
 8000bf4:	e64a      	b.n	800088c <USBPD_PE_StateMachine_SRC+0x2b8>
 8000bf6:	f001 fbae 	bl	8002356 <.text_82>
 8000bfa:	4638      	mov	r0, r7
 8000bfc:	f002 f905 	bl	8002e0a <PE_Send_CtrlMessage>
 8000c00:	2800      	cmp	r0, #0
 8000c02:	d1d3      	bne.n	8000bac <USBPD_PE_StateMachine_SRC+0x5d8>
 8000c04:	f000 fb95 	bl	8001332 <.text_33>
 8000c08:	d504      	bpl.n	8000c14 <USBPD_PE_StateMachine_SRC+0x640>
 8000c0a:	f000 fbe9 	bl	80013e0 <.text_45>
 8000c0e:	223b      	movs	r2, #59	; 0x3b
 8000c10:	f003 ff2a 	bl	8004a68 <.text_211+0x2>
 8000c14:	213b      	movs	r1, #59	; 0x3b
 8000c16:	e639      	b.n	800088c <USBPD_PE_StateMachine_SRC+0x2b8>
 8000c18:	f000 fbb0 	bl	800137c <.text_39>
 8000c1c:	2800      	cmp	r0, #0
 8000c1e:	d134      	bne.n	8000c8a <USBPD_PE_StateMachine_SRC+0x6b6>
 8000c20:	f000 fb87 	bl	8001332 <.text_33>
 8000c24:	d504      	bpl.n	8000c30 <USBPD_PE_StateMachine_SRC+0x65c>
 8000c26:	f000 fbdb 	bl	80013e0 <.text_45>
 8000c2a:	2216      	movs	r2, #22
 8000c2c:	f003 ff1c 	bl	8004a68 <.text_211+0x2>
 8000c30:	2116      	movs	r1, #22
 8000c32:	e62b      	b.n	800088c <USBPD_PE_StateMachine_SRC+0x2b8>
 8000c34:	f000 fb30 	bl	8001298 <.text_19>
 8000c38:	d127      	bne.n	8000c8a <USBPD_PE_StateMachine_SRC+0x6b6>
 8000c3a:	f000 fb35 	bl	80012a8 <.text_21>
 8000c3e:	d006      	beq.n	8000c4e <USBPD_PE_StateMachine_SRC+0x67a>
 8000c40:	f001 fb3a 	bl	80022b8 <.text_70>
 8000c44:	b108      	cbz	r0, 8000c4a <USBPD_PE_StateMachine_SRC+0x676>
 8000c46:	f000 fbb2 	bl	80013ae <.text_42>
 8000c4a:	f003 ff05 	bl	8004a58 <.text_210>
 8000c4e:	f000 fbce 	bl	80013ee <.text_46>
 8000c52:	b133      	cbz	r3, 8000c62 <USBPD_PE_StateMachine_SRC+0x68e>
 8000c54:	f000 fb4c 	bl	80012f0 <.text_27>
 8000c58:	68b8      	ldr	r0, [r7, #8]
 8000c5a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c5c:	b10b      	cbz	r3, 8000c62 <USBPD_PE_StateMachine_SRC+0x68e>
 8000c5e:	f000 fb41 	bl	80012e4 <.text_26>
 8000c62:	f000 fb80 	bl	8001366 <.text_37>
 8000c66:	2000      	movs	r0, #0
 8000c68:	9000      	str	r0, [sp, #0]
 8000c6a:	2325      	movs	r3, #37	; 0x25
 8000c6c:	2206      	movs	r2, #6
 8000c6e:	f000 fb81 	bl	8001374 <.text_38+0x2>
 8000c72:	2800      	cmp	r0, #0
 8000c74:	d109      	bne.n	8000c8a <USBPD_PE_StateMachine_SRC+0x6b6>
 8000c76:	68b8      	ldr	r0, [r7, #8]
 8000c78:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c7a:	b10b      	cbz	r3, 8000c80 <USBPD_PE_StateMachine_SRC+0x6ac>
 8000c7c:	f000 fb2c 	bl	80012d8 <.text_25>
 8000c80:	f248 10ae 	movw	r0, #33198	; 0x81ae
 8000c84:	8020      	strh	r0, [r4, #0]
 8000c86:	f44f 75d7 	mov.w	r5, #430	; 0x1ae
 8000c8a:	e4d0      	b.n	800062e <USBPD_PE_StateMachine_SRC+0x5a>
 8000c8c:	f000 fb42 	bl	8001314 <.text_30>
 8000c90:	bf01      	itttt	eq
 8000c92:	89e1      	ldrheq	r1, [r4, #14]
 8000c94:	f24f 001f 	movweq	r0, #61471	; 0xf01f
 8000c98:	4001      	andeq	r1, r0
 8000c9a:	2906      	cmpeq	r1, #6
 8000c9c:	d108      	bne.n	8000cb0 <USBPD_PE_StateMachine_SRC+0x6dc>
 8000c9e:	2214      	movs	r2, #20
 8000ca0:	f88d 200c 	strb.w	r2, [sp, #12]
 8000ca4:	f000 fc20 	bl	80014e8 <.text_50>
 8000ca8:	f005 f9ee 	bl	8006088 <USBPD_PRL_EnableRX>
 8000cac:	2026      	movs	r0, #38	; 0x26
 8000cae:	7130      	strb	r0, [r6, #4]
 8000cb0:	f000 fb4e 	bl	8001350 <.text_35>
 8000cb4:	d1e9      	bne.n	8000c8a <USBPD_PE_StateMachine_SRC+0x6b6>
 8000cb6:	68b9      	ldr	r1, [r7, #8]
 8000cb8:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8000cba:	b108      	cbz	r0, 8000cc0 <USBPD_PE_StateMachine_SRC+0x6ec>
 8000cbc:	f7ff beed 	b.w	8000a9a <USBPD_PE_StateMachine_SRC+0x4c6>
 8000cc0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <USBPD_PE_StateMachine_SRC+0x6fa>
 8000cc6:	7c38      	ldrb	r0, [r7, #16]
 8000cc8:	220a      	movs	r2, #10
 8000cca:	f001 fb01 	bl	80022d0 <.text_72+0x4>
 8000cce:	e5a0      	b.n	8000812 <USBPD_PE_StateMachine_SRC+0x23e>
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4638      	mov	r0, r7
 8000cd4:	f003 f977 	bl	8003fc6 <PE_ChangePowerRole>
 8000cd8:	68b8      	ldr	r0, [r7, #8]
 8000cda:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000cdc:	b11b      	cbz	r3, 8000ce6 <USBPD_PE_StateMachine_SRC+0x712>
 8000cde:	7c38      	ldrb	r0, [r7, #16]
 8000ce0:	220d      	movs	r2, #13
 8000ce2:	f001 fb2c 	bl	800233e <.text_80+0x4>
 8000ce6:	4638      	mov	r0, r7
 8000ce8:	f003 fece 	bl	8004a88 <PE_ResetDuringSwap>
 8000cec:	f000 fb21 	bl	8001332 <.text_33>
 8000cf0:	d504      	bpl.n	8000cfc <USBPD_PE_StateMachine_SRC+0x728>
 8000cf2:	f000 fb6e 	bl	80013d2 <.text_44>
 8000cf6:	2214      	movs	r2, #20
 8000cf8:	f003 fdb0 	bl	800485c <.text_203+0x2>
 8000cfc:	f000 fad0 	bl	80012a0 <.text_20>
 8000d00:	2114      	movs	r1, #20
 8000d02:	f003 f867 	bl	8003dd4 <.text_164+0x6>
 8000d06:	68b8      	ldr	r0, [r7, #8]
 8000d08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d003      	beq.n	8000d16 <USBPD_PE_StateMachine_SRC+0x742>
 8000d0e:	7c38      	ldrb	r0, [r7, #16]
 8000d10:	220e      	movs	r2, #14
 8000d12:	f001 fb14 	bl	800233e <.text_80+0x4>
 8000d16:	e53b      	b.n	8000790 <USBPD_PE_StateMachine_SRC+0x1bc>
 8000d18:	2001      	movs	r0, #1
 8000d1a:	9000      	str	r0, [sp, #0]
 8000d1c:	231f      	movs	r3, #31
 8000d1e:	220a      	movs	r2, #10
 8000d20:	f000 fb28 	bl	8001374 <.text_38+0x2>
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d1b0      	bne.n	8000c8a <USBPD_PE_StateMachine_SRC+0x6b6>
 8000d28:	2008      	movs	r0, #8
 8000d2a:	83b8      	strh	r0, [r7, #28]
 8000d2c:	f8a4 a000 	strh.w	sl, [r4]
 8000d30:	251b      	movs	r5, #27
 8000d32:	68b8      	ldr	r0, [r7, #8]
 8000d34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d36:	b113      	cbz	r3, 8000d3e <USBPD_PE_StateMachine_SRC+0x76a>
 8000d38:	f000 fac2 	bl	80012c0 <.text_23>
 8000d3c:	4798      	blx	r3
 8000d3e:	f000 faf8 	bl	8001332 <.text_33>
 8000d42:	d504      	bpl.n	8000d4e <USBPD_PE_StateMachine_SRC+0x77a>
 8000d44:	f000 fb4c 	bl	80013e0 <.text_45>
 8000d48:	2239      	movs	r2, #57	; 0x39
 8000d4a:	f003 fe8d 	bl	8004a68 <.text_211+0x2>
 8000d4e:	2139      	movs	r1, #57	; 0x39
 8000d50:	e59c      	b.n	800088c <USBPD_PE_StateMachine_SRC+0x2b8>
 8000d52:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8000d56:	2911      	cmp	r1, #17
 8000d58:	bf04      	itt	eq
 8000d5a:	89e1      	ldrheq	r1, [r4, #14]
 8000d5c:	f411 4f70 	tsteq.w	r1, #61440	; 0xf000
 8000d60:	d14b      	bne.n	8000dfa <USBPD_PE_StateMachine_SRC+0x826>
 8000d62:	f001 011f 	and.w	r1, r1, #31
 8000d66:	2903      	cmp	r1, #3
 8000d68:	d006      	beq.n	8000d78 <USBPD_PE_StateMachine_SRC+0x7a4>
 8000d6a:	2904      	cmp	r1, #4
 8000d6c:	d023      	beq.n	8000db6 <USBPD_PE_StateMachine_SRC+0x7e2>
 8000d6e:	290c      	cmp	r1, #12
 8000d70:	d012      	beq.n	8000d98 <USBPD_PE_StateMachine_SRC+0x7c4>
 8000d72:	2910      	cmp	r1, #16
 8000d74:	d02e      	beq.n	8000dd4 <USBPD_PE_StateMachine_SRC+0x800>
 8000d76:	e040      	b.n	8000dfa <USBPD_PE_StateMachine_SRC+0x826>
 8000d78:	b138      	cbz	r0, 8000d8a <USBPD_PE_StateMachine_SRC+0x7b6>
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	9000      	str	r0, [sp, #0]
 8000d7e:	223a      	movs	r2, #58	; 0x3a
 8000d80:	7c39      	ldrb	r1, [r7, #16]
 8000d82:	f8d9 500c 	ldr.w	r5, [r9, #12]
 8000d86:	f003 fd69 	bl	800485c <.text_203+0x2>
 8000d8a:	f000 fa89 	bl	80012a0 <.text_20>
 8000d8e:	213a      	movs	r1, #58	; 0x3a
 8000d90:	f003 f820 	bl	8003dd4 <.text_164+0x6>
 8000d94:	2020      	movs	r0, #32
 8000d96:	e02e      	b.n	8000df6 <USBPD_PE_StateMachine_SRC+0x822>
 8000d98:	68b8      	ldr	r0, [r7, #8]
 8000d9a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000d9c:	b113      	cbz	r3, 8000da4 <USBPD_PE_StateMachine_SRC+0x7d0>
 8000d9e:	f000 fa89 	bl	80012b4 <.text_22>
 8000da2:	4798      	blx	r3
 8000da4:	f000 fac5 	bl	8001332 <.text_33>
 8000da8:	d503      	bpl.n	8000db2 <USBPD_PE_StateMachine_SRC+0x7de>
 8000daa:	f000 fb12 	bl	80013d2 <.text_44>
 8000dae:	f003 fd54 	bl	800485a <.text_203>
 8000db2:	213b      	movs	r1, #59	; 0x3b
 8000db4:	e01c      	b.n	8000df0 <USBPD_PE_StateMachine_SRC+0x81c>
 8000db6:	68b8      	ldr	r0, [r7, #8]
 8000db8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000dba:	b10b      	cbz	r3, 8000dc0 <USBPD_PE_StateMachine_SRC+0x7ec>
 8000dbc:	f000 fa9e 	bl	80012fc <.text_28>
 8000dc0:	f000 fab7 	bl	8001332 <.text_33>
 8000dc4:	d504      	bpl.n	8000dd0 <USBPD_PE_StateMachine_SRC+0x7fc>
 8000dc6:	f000 fb04 	bl	80013d2 <.text_44>
 8000dca:	2216      	movs	r2, #22
 8000dcc:	f003 fd46 	bl	800485c <.text_203+0x2>
 8000dd0:	2116      	movs	r1, #22
 8000dd2:	e00d      	b.n	8000df0 <USBPD_PE_StateMachine_SRC+0x81c>
 8000dd4:	68b8      	ldr	r0, [r7, #8]
 8000dd6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000dd8:	b10b      	cbz	r3, 8000dde <USBPD_PE_StateMachine_SRC+0x80a>
 8000dda:	f000 fa8f 	bl	80012fc <.text_28>
 8000dde:	f000 faa8 	bl	8001332 <.text_33>
 8000de2:	d504      	bpl.n	8000dee <USBPD_PE_StateMachine_SRC+0x81a>
 8000de4:	f000 faf5 	bl	80013d2 <.text_44>
 8000de8:	2217      	movs	r2, #23
 8000dea:	f003 fd37 	bl	800485c <.text_203+0x2>
 8000dee:	2117      	movs	r1, #23
 8000df0:	f000 fa6c 	bl	80012cc <.text_24>
 8000df4:	2003      	movs	r0, #3
 8000df6:	f000 faa1 	bl	800133c <.text_34+0x2>
 8000dfa:	f000 faa9 	bl	8001350 <.text_35>
 8000dfe:	d128      	bne.n	8000e52 <USBPD_PE_StateMachine_SRC+0x87e>
 8000e00:	e6cd      	b.n	8000b9e <USBPD_PE_StateMachine_SRC+0x5ca>
 8000e02:	f000 faf4 	bl	80013ee <.text_46>
 8000e06:	b133      	cbz	r3, 8000e16 <USBPD_PE_StateMachine_SRC+0x842>
 8000e08:	f000 fa72 	bl	80012f0 <.text_27>
 8000e0c:	68b8      	ldr	r0, [r7, #8]
 8000e0e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000e10:	b10b      	cbz	r3, 8000e16 <USBPD_PE_StateMachine_SRC+0x842>
 8000e12:	f000 fa67 	bl	80012e4 <.text_26>
 8000e16:	f000 faa6 	bl	8001366 <.text_37>
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	9000      	str	r0, [sp, #0]
 8000e1e:	2321      	movs	r3, #33	; 0x21
 8000e20:	2206      	movs	r2, #6
 8000e22:	f000 faa7 	bl	8001374 <.text_38+0x2>
 8000e26:	2800      	cmp	r0, #0
 8000e28:	d113      	bne.n	8000e52 <USBPD_PE_StateMachine_SRC+0x87e>
 8000e2a:	68b8      	ldr	r0, [r7, #8]
 8000e2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000e2e:	b10b      	cbz	r3, 8000e34 <USBPD_PE_StateMachine_SRC+0x860>
 8000e30:	f000 fa52 	bl	80012d8 <.text_25>
 8000e34:	f248 10e0 	movw	r0, #33248	; 0x81e0
 8000e38:	8020      	strh	r0, [r4, #0]
 8000e3a:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
 8000e3e:	e724      	b.n	8000c8a <USBPD_PE_StateMachine_SRC+0x6b6>
 8000e40:	f000 fa68 	bl	8001314 <.text_30>
 8000e44:	d103      	bne.n	8000e4e <USBPD_PE_StateMachine_SRC+0x87a>
 8000e46:	2126      	movs	r1, #38	; 0x26
 8000e48:	7131      	strb	r1, [r6, #4]
 8000e4a:	f000 fa79 	bl	8001340 <.text_34+0x6>
 8000e4e:	f000 fa7f 	bl	8001350 <.text_35>
 8000e52:	f47f abec 	bne.w	800062e <USBPD_PE_StateMachine_SRC+0x5a>
 8000e56:	68b9      	ldr	r1, [r7, #8]
 8000e58:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8000e5a:	2800      	cmp	r0, #0
 8000e5c:	d03e      	beq.n	8000edc <USBPD_PE_StateMachine_SRC+0x908>
 8000e5e:	e61c      	b.n	8000a9a <USBPD_PE_StateMachine_SRC+0x4c6>
 8000e60:	2903      	cmp	r1, #3
 8000e62:	d119      	bne.n	8000e98 <USBPD_PE_StateMachine_SRC+0x8c4>
 8000e64:	2000      	movs	r0, #0
 8000e66:	83b8      	strh	r0, [r7, #28]
 8000e68:	f001 fa2c 	bl	80022c4 <.text_71>
 8000e6c:	f000 fb3c 	bl	80014e8 <.text_50>
 8000e70:	f004 fef9 	bl	8005c66 <USBPD_PRL_SRCReleaseSinkNG>
 8000e74:	2004      	movs	r0, #4
 8000e76:	7130      	strb	r0, [r6, #4]
 8000e78:	6938      	ldr	r0, [r7, #16]
 8000e7a:	f3c0 0081 	ubfx	r0, r0, #2, #2
 8000e7e:	2803      	cmp	r0, #3
 8000e80:	d108      	bne.n	8000e94 <USBPD_PE_StateMachine_SRC+0x8c0>
 8000e82:	89a0      	ldrh	r0, [r4, #12]
 8000e84:	0441      	lsls	r1, r0, #17
 8000e86:	d107      	bne.n	8000e98 <USBPD_PE_StateMachine_SRC+0x8c4>
 8000e88:	f24b 61b0 	movw	r1, #46768	; 0xb6b0
 8000e8c:	81a1      	strh	r1, [r4, #12]
 8000e8e:	f243 65b0 	movw	r5, #14000	; 0x36b0
 8000e92:	e001      	b.n	8000e98 <USBPD_PE_StateMachine_SRC+0x8c4>
 8000e94:	2000      	movs	r0, #0
 8000e96:	81a0      	strh	r0, [r4, #12]
 8000e98:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8000e9c:	2814      	cmp	r0, #20
 8000e9e:	d017      	beq.n	8000ed0 <USBPD_PE_StateMachine_SRC+0x8fc>
 8000ea0:	79b1      	ldrb	r1, [r6, #6]
 8000ea2:	71f1      	strb	r1, [r6, #7]
 8000ea4:	89e1      	ldrh	r1, [r4, #14]
 8000ea6:	0bc8      	lsrs	r0, r1, #15
 8000ea8:	d003      	beq.n	8000eb2 <USBPD_PE_StateMachine_SRC+0x8de>
 8000eaa:	4638      	mov	r0, r7
 8000eac:	f003 fbc4 	bl	8004638 <PE_Check_ExtendedMessage>
 8000eb0:	e00b      	b.n	8000eca <USBPD_PE_StateMachine_SRC+0x8f6>
 8000eb2:	f411 4f70 	tst.w	r1, #61440	; 0xf000
 8000eb6:	d104      	bne.n	8000ec2 <USBPD_PE_StateMachine_SRC+0x8ee>
 8000eb8:	a903      	add	r1, sp, #12
 8000eba:	4638      	mov	r0, r7
 8000ebc:	f003 f8f2 	bl	80040a4 <PE_Check_ControlMessage>
 8000ec0:	e003      	b.n	8000eca <USBPD_PE_StateMachine_SRC+0x8f6>
 8000ec2:	4638      	mov	r0, r7
 8000ec4:	f003 fa92 	bl	80043ec <PE_Check_DataMessage>
 8000ec8:	4605      	mov	r5, r0
 8000eca:	f000 fa39 	bl	8001340 <.text_34+0x6>
 8000ece:	e6dc      	b.n	8000c8a <USBPD_PE_StateMachine_SRC+0x6b6>
 8000ed0:	89a0      	ldrh	r0, [r4, #12]
 8000ed2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000ed6:	d102      	bne.n	8000ede <USBPD_PE_StateMachine_SRC+0x90a>
 8000ed8:	2100      	movs	r1, #0
 8000eda:	81a1      	strh	r1, [r4, #12]
 8000edc:	e499      	b.n	8000812 <USBPD_PE_StateMachine_SRC+0x23e>
 8000ede:	78b0      	ldrb	r0, [r6, #2]
 8000ee0:	b968      	cbnz	r0, 8000efe <USBPD_PE_StateMachine_SRC+0x92a>
 8000ee2:	7830      	ldrb	r0, [r6, #0]
 8000ee4:	b158      	cbz	r0, 8000efe <USBPD_PE_StateMachine_SRC+0x92a>
 8000ee6:	7871      	ldrb	r1, [r6, #1]
 8000ee8:	71f1      	strb	r1, [r6, #7]
 8000eea:	7130      	strb	r0, [r6, #4]
 8000eec:	2000      	movs	r0, #0
 8000eee:	7030      	strb	r0, [r6, #0]
 8000ef0:	6960      	ldr	r0, [r4, #20]
 8000ef2:	61a0      	str	r0, [r4, #24]
 8000ef4:	6938      	ldr	r0, [r7, #16]
 8000ef6:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8000efa:	6138      	str	r0, [r7, #16]
 8000efc:	e448      	b.n	8000790 <USBPD_PE_StateMachine_SRC+0x1bc>
 8000efe:	88a0      	ldrh	r0, [r4, #4]
 8000f00:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000f04:	d102      	bne.n	8000f0c <USBPD_PE_StateMachine_SRC+0x938>
 8000f06:	f000 fa27 	bl	8001358 <.text_36>
 8000f0a:	e440      	b.n	800078e <USBPD_PE_StateMachine_SRC+0x1ba>
 8000f0c:	7c39      	ldrb	r1, [r7, #16]
 8000f0e:	f001 fbe9 	bl	80026e4 <.text_101>
 8000f12:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8000f16:	465d      	mov	r5, fp
 8000f18:	8901      	ldrh	r1, [r0, #8]
 8000f1a:	044a      	lsls	r2, r1, #17
 8000f1c:	bf1c      	itt	ne
 8000f1e:	8905      	ldrhne	r5, [r0, #8]
 8000f20:	f3c5 050e 	ubfxne	r5, r5, #0, #15
 8000f24:	8801      	ldrh	r1, [r0, #0]
 8000f26:	044a      	lsls	r2, r1, #17
 8000f28:	f43f ab81 	beq.w	800062e <USBPD_PE_StateMachine_SRC+0x5a>
 8000f2c:	8802      	ldrh	r2, [r0, #0]
 8000f2e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8000f32:	4295      	cmp	r5, r2
 8000f34:	f4ff ab7b 	bcc.w	800062e <USBPD_PE_StateMachine_SRC+0x5a>
 8000f38:	8805      	ldrh	r5, [r0, #0]
 8000f3a:	f3c5 050e 	ubfx	r5, r5, #0, #15
 8000f3e:	e6a4      	b.n	8000c8a <USBPD_PE_StateMachine_SRC+0x6b6>
 8000f40:	f000 fa40 	bl	80013c4 <.text_43>
 8000f44:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 8000f48:	2206      	movs	r2, #6
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	f001 ff8b 	bl	8002e68 <PE_Send_DataMessage>
 8000f52:	2800      	cmp	r0, #0
 8000f54:	d14e      	bne.n	8000ff4 <USBPD_PE_StateMachine_SRC+0xa20>
 8000f56:	f000 f9ec 	bl	8001332 <.text_33>
 8000f5a:	d504      	bpl.n	8000f66 <USBPD_PE_StateMachine_SRC+0x992>
 8000f5c:	f000 fa40 	bl	80013e0 <.text_45>
 8000f60:	225d      	movs	r2, #93	; 0x5d
 8000f62:	f003 fd81 	bl	8004a68 <.text_211+0x2>
 8000f66:	215d      	movs	r1, #93	; 0x5d
 8000f68:	e490      	b.n	800088c <USBPD_PE_StateMachine_SRC+0x2b8>
 8000f6a:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8000f6e:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8000f72:	f8dc a014 	ldr.w	sl, [ip, #20]
 8000f76:	ab06      	add	r3, sp, #24
 8000f78:	aa05      	add	r2, sp, #20
 8000f7a:	210a      	movs	r1, #10
 8000f7c:	47d0      	blx	sl
 8000f7e:	f107 0a20 	add.w	sl, r7, #32
 8000f82:	2000      	movs	r0, #0
 8000f84:	f88a 0000 	strb.w	r0, [sl]
 8000f88:	f88a 0001 	strb.w	r0, [sl, #1]
 8000f8c:	f000 faac 	bl	80014e8 <.text_50>
 8000f90:	f003 fe9d 	bl	8004cce <PE_Get_UnchunkedSupport>
 8000f94:	b928      	cbnz	r0, 8000fa2 <USBPD_PE_StateMachine_SRC+0x9ce>
 8000f96:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8000f9a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8000f9e:	f88a 0001 	strb.w	r0, [sl, #1]
 8000fa2:	a905      	add	r1, sp, #20
 8000fa4:	9a06      	ldr	r2, [sp, #24]
 8000fa6:	f107 0022 	add.w	r0, r7, #34	; 0x22
 8000faa:	f014 fd76 	bl	8015a9a <__aeabi_memcpy>
 8000fae:	2000      	movs	r0, #0
 8000fb0:	2103      	movs	r1, #3
 8000fb2:	2208      	movs	r2, #8
 8000fb4:	9002      	str	r0, [sp, #8]
 8000fb6:	9101      	str	r1, [sp, #4]
 8000fb8:	9200      	str	r2, [sp, #0]
 8000fba:	f107 031e 	add.w	r3, r7, #30
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4638      	mov	r0, r7
 8000fc4:	f003 ff32 	bl	8004e2c <PE_Send_ExtendedMessage>
 8000fc8:	f000 f9b3 	bl	8001332 <.text_33>
 8000fcc:	d504      	bpl.n	8000fd8 <USBPD_PE_StateMachine_SRC+0xa04>
 8000fce:	f000 fa07 	bl	80013e0 <.text_45>
 8000fd2:	224c      	movs	r2, #76	; 0x4c
 8000fd4:	f003 fd48 	bl	8004a68 <.text_211+0x2>
 8000fd8:	214c      	movs	r1, #76	; 0x4c
 8000fda:	e457      	b.n	800088c <USBPD_PE_StateMachine_SRC+0x2b8>
 8000fdc:	f507 7b69 	add.w	fp, r7, #932	; 0x3a4
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	9000      	str	r0, [sp, #0]
 8000fe4:	f89b 2000 	ldrb.w	r2, [fp]
 8000fe8:	7871      	ldrb	r1, [r6, #1]
 8000fea:	2339      	movs	r3, #57	; 0x39
 8000fec:	4638      	mov	r0, r7
 8000fee:	f001 ff0c 	bl	8002e0a <PE_Send_CtrlMessage>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	f47f ab1b 	bne.w	800062e <USBPD_PE_StateMachine_SRC+0x5a>
 8000ff8:	f8bb 0002 	ldrh.w	r0, [fp, #2]
 8000ffc:	f000 f995 	bl	800132a <.text_32>
 8001000:	d504      	bpl.n	800100c <USBPD_PE_StateMachine_SRC+0xa38>
 8001002:	f000 f9ed 	bl	80013e0 <.text_45>
 8001006:	2244      	movs	r2, #68	; 0x44
 8001008:	f003 fd2e 	bl	8004a68 <.text_211+0x2>
 800100c:	2144      	movs	r1, #68	; 0x44
 800100e:	e43d      	b.n	800088c <USBPD_PE_StateMachine_SRC+0x2b8>
 8001010:	f000 f99e 	bl	8001350 <.text_35>
 8001014:	bf04      	itt	eq
 8001016:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
 800101a:	2914      	cmpeq	r1, #20
 800101c:	d006      	beq.n	800102c <USBPD_PE_StateMachine_SRC+0xa58>
 800101e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8001022:	2a14      	cmp	r2, #20
 8001024:	f43f ab03 	beq.w	800062e <USBPD_PE_StateMachine_SRC+0x5a>
 8001028:	89e0      	ldrh	r0, [r4, #14]
 800102a:	0bc0      	lsrs	r0, r0, #15
 800102c:	f43f adb7 	beq.w	8000b9e <USBPD_PE_StateMachine_SRC+0x5ca>
 8001030:	e73b      	b.n	8000eaa <USBPD_PE_StateMachine_SRC+0x8d6>
 8001032:	4638      	mov	r0, r7
 8001034:	f003 ff5b 	bl	8004eee <PE_SubStateMachine_ExtendedMessages>
 8001038:	e00e      	b.n	8001058 <USBPD_PE_StateMachine_SRC+0xa84>
 800103a:	a903      	add	r1, sp, #12
 800103c:	4638      	mov	r0, r7
 800103e:	f004 f859 	bl	80050f4 <PE_SubStateMachine_Generic>
 8001042:	e009      	b.n	8001058 <USBPD_PE_StateMachine_SRC+0xa84>
 8001044:	a903      	add	r1, sp, #12
 8001046:	4638      	mov	r0, r7
 8001048:	f004 fbc1 	bl	80057ce <PE_SubStateMachine_VconnSwap>
 800104c:	e004      	b.n	8001058 <USBPD_PE_StateMachine_SRC+0xa84>
 800104e:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8001052:	4638      	mov	r0, r7
 8001054:	f002 ff61 	bl	8003f1a <PE_StateMachine_UVDM>
 8001058:	f7ff bae8 	b.w	800062c <USBPD_PE_StateMachine_SRC+0x58>
 800105c:	78b0      	ldrb	r0, [r6, #2]
 800105e:	2800      	cmp	r0, #0
 8001060:	bf1e      	ittt	ne
 8001062:	6939      	ldrne	r1, [r7, #16]
 8001064:	f3c1 3000 	ubfxne	r0, r1, #12, #1
 8001068:	2800      	cmpne	r0, #0
 800106a:	d014      	beq.n	8001096 <USBPD_PE_StateMachine_SRC+0xac2>
 800106c:	f3c1 3040 	ubfx	r0, r1, #13, #1
 8001070:	b180      	cbz	r0, 8001094 <USBPD_PE_StateMachine_SRC+0xac0>
 8001072:	f899 0000 	ldrb.w	r0, [r9]
 8001076:	0782      	lsls	r2, r0, #30
 8001078:	d506      	bpl.n	8001088 <USBPD_PE_StateMachine_SRC+0xab4>
 800107a:	f000 fa39 	bl	80014f0 <.text_51>
 800107e:	f8d9 500c 	ldr.w	r5, [r9, #12]
 8001082:	225b      	movs	r2, #91	; 0x5b
 8001084:	f003 fbea 	bl	800485c <.text_203+0x2>
 8001088:	f003 fcdf 	bl	8004a4a <.text_209>
 800108c:	6938      	ldr	r0, [r7, #16]
 800108e:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8001092:	6138      	str	r0, [r7, #16]
 8001094:	2501      	movs	r5, #1
 8001096:	6938      	ldr	r0, [r7, #16]
 8001098:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 800109c:	6138      	str	r0, [r7, #16]
 800109e:	f7ff baf1 	b.w	8000684 <USBPD_PE_StateMachine_SRC+0xb0>
 80010a2:	f88d 600d 	strb.w	r6, [sp, #13]
 80010a6:	9504      	str	r5, [sp, #16]
 80010a8:	f207 367b 	addw	r6, r7, #891	; 0x37b
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f001 fea7 	bl	8002e00 <.text_131+0x2>
 80010b2:	f43f ab0b 	beq.w	80006cc <USBPD_PE_StateMachine_SRC+0xf8>
 80010b6:	7832      	ldrb	r2, [r6, #0]
 80010b8:	2502      	movs	r5, #2
 80010ba:	2a0f      	cmp	r2, #15
 80010bc:	d111      	bne.n	80010e2 <USBPD_PE_StateMachine_SRC+0xb0e>
 80010be:	7132      	strb	r2, [r6, #4]
 80010c0:	2000      	movs	r0, #0
 80010c2:	7030      	strb	r0, [r6, #0]
 80010c4:	61a0      	str	r0, [r4, #24]
 80010c6:	f8d9 c00c 	ldr.w	ip, [r9, #12]
 80010ca:	f1bc 0f00 	cmp.w	ip, #0
 80010ce:	d008      	beq.n	80010e2 <USBPD_PE_StateMachine_SRC+0xb0e>
 80010d0:	f899 0000 	ldrb.w	r0, [r9]
 80010d4:	07c1      	lsls	r1, r0, #31
 80010d6:	d504      	bpl.n	80010e2 <USBPD_PE_StateMachine_SRC+0xb0e>
 80010d8:	7970      	ldrb	r0, [r6, #5]
 80010da:	4290      	cmp	r0, r2
 80010dc:	d001      	beq.n	80010e2 <USBPD_PE_StateMachine_SRC+0xb0e>
 80010de:	f000 f95d 	bl	800139c <.text_41>
 80010e2:	9904      	ldr	r1, [sp, #16]
 80010e4:	b121      	cbz	r1, 80010f0 <USBPD_PE_StateMachine_SRC+0xb1c>
 80010e6:	f001 f8d7 	bl	8002298 <.text_68>
 80010ea:	bf08      	it	eq
 80010ec:	f04f 0801 	moveq.w	r8, #1
 80010f0:	7931      	ldrb	r1, [r6, #4]
 80010f2:	f899 0000 	ldrb.w	r0, [r9]
 80010f6:	000b      	movs	r3, r1
 80010f8:	f507 72a1 	add.w	r2, r7, #322	; 0x142
 80010fc:	f000 0002 	and.w	r0, r0, #2
 8001100:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8001104:	f248 0a1b 	movw	sl, #32795	; 0x801b
 8001108:	f000 80a3 	beq.w	8001252 <USBPD_PE_StateMachine_SRC+0xc7e>
 800110c:	1e4b      	subs	r3, r1, #1
 800110e:	d094      	beq.n	800103a <USBPD_PE_StateMachine_SRC+0xa66>
 8001110:	1e5b      	subs	r3, r3, #1
 8001112:	f43f aae6 	beq.w	80006e2 <USBPD_PE_StateMachine_SRC+0x10e>
 8001116:	1e5b      	subs	r3, r3, #1
 8001118:	2b01      	cmp	r3, #1
 800111a:	f67f aea1 	bls.w	8000e60 <USBPD_PE_StateMachine_SRC+0x88c>
 800111e:	1e9b      	subs	r3, r3, #2
 8001120:	f43f ab2c 	beq.w	800077c <USBPD_PE_StateMachine_SRC+0x1a8>
 8001124:	1e5b      	subs	r3, r3, #1
 8001126:	f43f ab2e 	beq.w	8000786 <USBPD_PE_StateMachine_SRC+0x1b2>
 800112a:	1e5b      	subs	r3, r3, #1
 800112c:	f43f ab32 	beq.w	8000794 <USBPD_PE_StateMachine_SRC+0x1c0>
 8001130:	1e5b      	subs	r3, r3, #1
 8001132:	f43f ab33 	beq.w	800079c <USBPD_PE_StateMachine_SRC+0x1c8>
 8001136:	1e5b      	subs	r3, r3, #1
 8001138:	f43f ab6d 	beq.w	8000816 <USBPD_PE_StateMachine_SRC+0x242>
 800113c:	1edb      	subs	r3, r3, #3
 800113e:	f43f ab6e 	beq.w	800081e <USBPD_PE_StateMachine_SRC+0x24a>
 8001142:	1e5b      	subs	r3, r3, #1
 8001144:	f43f ab83 	beq.w	800084e <USBPD_PE_StateMachine_SRC+0x27a>
 8001148:	1e5b      	subs	r3, r3, #1
 800114a:	f43f aba2 	beq.w	8000892 <USBPD_PE_StateMachine_SRC+0x2be>
 800114e:	1e5b      	subs	r3, r3, #1
 8001150:	f43f ac1e 	beq.w	8000990 <USBPD_PE_StateMachine_SRC+0x3bc>
 8001154:	1e5b      	subs	r3, r3, #1
 8001156:	f43f abd6 	beq.w	8000906 <USBPD_PE_StateMachine_SRC+0x332>
 800115a:	1e5b      	subs	r3, r3, #1
 800115c:	f43f abe7 	beq.w	800092e <USBPD_PE_StateMachine_SRC+0x35a>
 8001160:	1e5b      	subs	r3, r3, #1
 8001162:	f43f abf8 	beq.w	8000956 <USBPD_PE_StateMachine_SRC+0x382>
 8001166:	1e5b      	subs	r3, r3, #1
 8001168:	f43f ac99 	beq.w	8000a9e <USBPD_PE_StateMachine_SRC+0x4ca>
 800116c:	1e5b      	subs	r3, r3, #1
 800116e:	f43f ac2c 	beq.w	80009ca <USBPD_PE_StateMachine_SRC+0x3f6>
 8001172:	1e5b      	subs	r3, r3, #1
 8001174:	f43f ac36 	beq.w	80009e4 <USBPD_PE_StateMachine_SRC+0x410>
 8001178:	1e5b      	subs	r3, r3, #1
 800117a:	f43f ab23 	beq.w	80007c4 <USBPD_PE_StateMachine_SRC+0x1f0>
 800117e:	1e5b      	subs	r3, r3, #1
 8001180:	f43f ac6c 	beq.w	8000a5c <USBPD_PE_StateMachine_SRC+0x488>
 8001184:	1e5b      	subs	r3, r3, #1
 8001186:	2b01      	cmp	r3, #1
 8001188:	d94c      	bls.n	8001224 <USBPD_PE_StateMachine_SRC+0xc50>
 800118a:	1e9b      	subs	r3, r3, #2
 800118c:	f43f acb2 	beq.w	8000af4 <USBPD_PE_StateMachine_SRC+0x520>
 8001190:	1e5b      	subs	r3, r3, #1
 8001192:	f43f acc2 	beq.w	8000b1a <USBPD_PE_StateMachine_SRC+0x546>
 8001196:	1e9b      	subs	r3, r3, #2
 8001198:	d0b9      	beq.n	800110e <USBPD_PE_StateMachine_SRC+0xb3a>
 800119a:	1e5b      	subs	r3, r3, #1
 800119c:	f43f adbc 	beq.w	8000d18 <USBPD_PE_StateMachine_SRC+0x744>
 80011a0:	1e5b      	subs	r3, r3, #1
 80011a2:	f43f add6 	beq.w	8000d52 <USBPD_PE_StateMachine_SRC+0x77e>
 80011a6:	1e5b      	subs	r3, r3, #1
 80011a8:	f43f ae2b 	beq.w	8000e02 <USBPD_PE_StateMachine_SRC+0x82e>
 80011ac:	1e5b      	subs	r3, r3, #1
 80011ae:	f43f ae47 	beq.w	8000e40 <USBPD_PE_StateMachine_SRC+0x86c>
 80011b2:	1e5b      	subs	r3, r3, #1
 80011b4:	f43f acf5 	beq.w	8000ba2 <USBPD_PE_StateMachine_SRC+0x5ce>
 80011b8:	1e9b      	subs	r3, r3, #2
 80011ba:	f43f ad3b 	beq.w	8000c34 <USBPD_PE_StateMachine_SRC+0x660>
 80011be:	1e5b      	subs	r3, r3, #1
 80011c0:	f43f ad64 	beq.w	8000c8c <USBPD_PE_StateMachine_SRC+0x6b8>
 80011c4:	1e5b      	subs	r3, r3, #1
 80011c6:	f43f ad83 	beq.w	8000cd0 <USBPD_PE_StateMachine_SRC+0x6fc>
 80011ca:	1e5b      	subs	r3, r3, #1
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d929      	bls.n	8001224 <USBPD_PE_StateMachine_SRC+0xc50>
 80011d0:	1edb      	subs	r3, r3, #3
 80011d2:	f43f ace9 	beq.w	8000ba8 <USBPD_PE_StateMachine_SRC+0x5d4>
 80011d6:	1e5b      	subs	r3, r3, #1
 80011d8:	f43f aeb2 	beq.w	8000f40 <USBPD_PE_StateMachine_SRC+0x96c>
 80011dc:	1e5b      	subs	r3, r3, #1
 80011de:	d096      	beq.n	800110e <USBPD_PE_StateMachine_SRC+0xb3a>
 80011e0:	1e5b      	subs	r3, r3, #1
 80011e2:	f43f aec2 	beq.w	8000f6a <USBPD_PE_StateMachine_SRC+0x996>
 80011e6:	1e5b      	subs	r3, r3, #1
 80011e8:	f43f aef8 	beq.w	8000fdc <USBPD_PE_StateMachine_SRC+0xa08>
 80011ec:	1e5b      	subs	r3, r3, #1
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d918      	bls.n	8001224 <USBPD_PE_StateMachine_SRC+0xc50>
 80011f2:	1e9b      	subs	r3, r3, #2
 80011f4:	d001      	beq.n	80011fa <USBPD_PE_StateMachine_SRC+0xc26>
 80011f6:	1e9b      	subs	r3, r3, #2
 80011f8:	2b05      	cmp	r3, #5
 80011fa:	f67f af1a 	bls.w	8001032 <USBPD_PE_StateMachine_SRC+0xa5e>
 80011fe:	1f9b      	subs	r3, r3, #6
 8001200:	f43f af06 	beq.w	8001010 <USBPD_PE_StateMachine_SRC+0xa3c>
 8001204:	1e5b      	subs	r3, r3, #1
 8001206:	2b03      	cmp	r3, #3
 8001208:	bf84      	itt	hi
 800120a:	3b28      	subhi	r3, #40	; 0x28
 800120c:	2b02      	cmphi	r3, #2
 800120e:	d909      	bls.n	8001224 <USBPD_PE_StateMachine_SRC+0xc50>
 8001210:	3b12      	subs	r3, #18
 8001212:	d007      	beq.n	8001224 <USBPD_PE_StateMachine_SRC+0xc50>
 8001214:	3b12      	subs	r3, #18
 8001216:	f43f af1a 	beq.w	800104e <USBPD_PE_StateMachine_SRC+0xa7a>
 800121a:	3b0c      	subs	r3, #12
 800121c:	f43f aa59 	beq.w	80006d2 <USBPD_PE_StateMachine_SRC+0xfe>
 8001220:	1e5b      	subs	r3, r3, #1
 8001222:	2b02      	cmp	r3, #2
 8001224:	f67f af09 	bls.w	800103a <USBPD_PE_StateMachine_SRC+0xa66>
 8001228:	1edb      	subs	r3, r3, #3
 800122a:	f43f ab34 	beq.w	8000896 <USBPD_PE_StateMachine_SRC+0x2c2>
 800122e:	1e5b      	subs	r3, r3, #1
 8001230:	f43f ab4d 	beq.w	80008ce <USBPD_PE_StateMachine_SRC+0x2fa>
 8001234:	1e9b      	subs	r3, r3, #2
 8001236:	d0f5      	beq.n	8001224 <USBPD_PE_StateMachine_SRC+0xc50>
 8001238:	1e5b      	subs	r3, r3, #1
 800123a:	f43f aa9f 	beq.w	800077c <USBPD_PE_StateMachine_SRC+0x1a8>
 800123e:	1e9b      	subs	r3, r3, #2
 8001240:	2b08      	cmp	r3, #8
 8001242:	f67f aeff 	bls.w	8001044 <USBPD_PE_StateMachine_SRC+0xa70>
 8001246:	3b0a      	subs	r3, #10
 8001248:	2b02      	cmp	r3, #2
 800124a:	f67f a9f0 	bls.w	800062e <USBPD_PE_StateMachine_SRC+0x5a>
 800124e:	f7ff b9e9 	b.w	8000624 <USBPD_PE_StateMachine_SRC+0x50>
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	680a      	ldr	r2, [r1, #0]
 8001256:	f022 0210 	bic.w	r2, r2, #16
 800125a:	600a      	str	r2, [r1, #0]
 800125c:	b148      	cbz	r0, 8001272 <USBPD_PE_StateMachine_SRC+0xc9e>
 800125e:	f001 f880 	bl	8002362 <.text_83>
 8001262:	7c39      	ldrb	r1, [r7, #16]
 8001264:	f8d9 800c 	ldr.w	r8, [r9, #12]
 8001268:	225f      	movs	r2, #95	; 0x5f
 800126a:	f001 0101 	and.w	r1, r1, #1
 800126e:	2009      	movs	r0, #9
 8001270:	47c0      	blx	r8
 8001272:	f000 f815 	bl	80012a0 <.text_20>
 8001276:	215f      	movs	r1, #95	; 0x5f
 8001278:	f002 fdac 	bl	8003dd4 <.text_164+0x6>
 800127c:	f7ff ba2f 	b.w	80006de <USBPD_PE_StateMachine_SRC+0x10a>

08001280 <.text_16>:
 8001280:	b5e8b5cd 	.word	0xb5e8b5cd

08001284 <.text_17>:
 8001284:	9500      	str	r5, [sp, #0]
 8001286:	2300      	movs	r3, #0
 8001288:	7c39      	ldrb	r1, [r7, #16]
 800128a:	f8d9 c00c 	ldr.w	ip, [r9, #12]
 800128e:	4770      	bx	lr

08001290 <.text_18>:
 8001290:	2101      	movs	r1, #1
 8001292:	f000 0001 	and.w	r0, r0, #1

08001296 <__iar_annotation$$tailcall>:
 8001296:	4718      	bx	r3

08001298 <.text_19>:
 8001298:	8821      	ldrh	r1, [r4, #0]
 800129a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800129e:	4770      	bx	lr

080012a0 <.text_20>:
 80012a0:	68ba      	ldr	r2, [r7, #8]
 80012a2:	7c38      	ldrb	r0, [r7, #16]
 80012a4:	68d3      	ldr	r3, [r2, #12]
 80012a6:	4770      	bx	lr

080012a8 <.text_21>:
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	680a      	ldr	r2, [r1, #0]
 80012ac:	f3c2 2202 	ubfx	r2, r2, #8, #3
 80012b0:	2a04      	cmp	r2, #4
 80012b2:	4770      	bx	lr

080012b4 <.text_22>:
 80012b4:	7c38      	ldrb	r0, [r7, #16]
 80012b6:	2205      	movs	r2, #5
 80012b8:	2101      	movs	r1, #1
 80012ba:	f000 0001 	and.w	r0, r0, #1
 80012be:	4770      	bx	lr

080012c0 <.text_23>:
 80012c0:	7c38      	ldrb	r0, [r7, #16]
 80012c2:	2202      	movs	r2, #2
 80012c4:	2101      	movs	r1, #1
 80012c6:	f000 0001 	and.w	r0, r0, #1
 80012ca:	4770      	bx	lr

080012cc <.text_24>:
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	7c38      	ldrb	r0, [r7, #16]
 80012d0:	68d3      	ldr	r3, [r2, #12]
 80012d2:	f000 0001 	and.w	r0, r0, #1

080012d6 <__iar_annotation$$tailcall>:
 80012d6:	4718      	bx	r3

080012d8 <.text_25>:
 80012d8:	7c38      	ldrb	r0, [r7, #16]
 80012da:	2208      	movs	r2, #8
 80012dc:	2101      	movs	r1, #1
 80012de:	f000 0001 	and.w	r0, r0, #1

080012e2 <__iar_annotation$$tailcall>:
 80012e2:	4718      	bx	r3

080012e4 <.text_26>:
 80012e4:	7c38      	ldrb	r0, [r7, #16]
 80012e6:	2207      	movs	r2, #7
 80012e8:	2101      	movs	r1, #1
 80012ea:	f000 0001 	and.w	r0, r0, #1

080012ee <__iar_annotation$$tailcall>:
 80012ee:	4718      	bx	r3

080012f0 <.text_27>:
 80012f0:	7c38      	ldrb	r0, [r7, #16]
 80012f2:	2206      	movs	r2, #6
 80012f4:	2101      	movs	r1, #1
 80012f6:	f000 0001 	and.w	r0, r0, #1

080012fa <__iar_annotation$$tailcall>:
 80012fa:	4718      	bx	r3

080012fc <.text_28>:
 80012fc:	7c38      	ldrb	r0, [r7, #16]
 80012fe:	2204      	movs	r2, #4
 8001300:	2101      	movs	r1, #1
 8001302:	f000 0001 	and.w	r0, r0, #1

08001306 <__iar_annotation$$tailcall>:
 8001306:	4718      	bx	r3

08001308 <.text_29>:
 8001308:	7c38      	ldrb	r0, [r7, #16]
 800130a:	2206      	movs	r2, #6
 800130c:	2101      	movs	r1, #1
 800130e:	f000 0001 	and.w	r0, r0, #1

08001312 <__iar_annotation$$tailcall>:
 8001312:	4718      	bx	r3

08001314 <.text_30>:
 8001314:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001318:	2811      	cmp	r0, #17
 800131a:	4770      	bx	lr

0800131c <.text_31>:
 800131c:	7c39      	ldrb	r1, [r7, #16]
 800131e:	f8d9 c00c 	ldr.w	ip, [r9, #12]
 8001322:	f001 0101 	and.w	r1, r1, #1
 8001326:	2009      	movs	r0, #9

08001328 <__iar_annotation$$tailcall>:
 8001328:	4760      	bx	ip

0800132a <.text_32>:
 800132a:	83b8      	strh	r0, [r7, #28]
 800132c:	f8a4 a000 	strh.w	sl, [r4]
 8001330:	251b      	movs	r5, #27

08001332 <.text_33>:
 8001332:	f899 0000 	ldrb.w	r0, [r9]
 8001336:	0781      	lsls	r1, r0, #30
 8001338:	4770      	bx	lr

0800133a <.text_34>:
 800133a:	2003      	movs	r0, #3
 800133c:	7130      	strb	r0, [r6, #4]
 800133e:	2500      	movs	r5, #0
 8001340:	2014      	movs	r0, #20
 8001342:	f88d 000c 	strb.w	r0, [sp, #12]
 8001346:	7c38      	ldrb	r0, [r7, #16]
 8001348:	f000 0001 	and.w	r0, r0, #1
 800134c:	f004 be9c 	b.w	8006088 <USBPD_PRL_EnableRX>

08001350 <.text_35>:
 8001350:	8820      	ldrh	r0, [r4, #0]
 8001352:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001356:	4770      	bx	lr

08001358 <.text_36>:
 8001358:	2100      	movs	r1, #0
 800135a:	80a1      	strh	r1, [r4, #4]
 800135c:	2105      	movs	r1, #5
 800135e:	7eb8      	ldrb	r0, [r7, #26]
 8001360:	1c40      	adds	r0, r0, #1
 8001362:	76b8      	strb	r0, [r7, #26]
 8001364:	4770      	bx	lr

08001366 <.text_37>:
 8001366:	7c38      	ldrb	r0, [r7, #16]
 8001368:	2100      	movs	r1, #0
 800136a:	f000 0001 	and.w	r0, r0, #1
 800136e:	f004 bc4c 	b.w	8005c0a <USBPD_PRL_SetHeaderPowerRole>

08001372 <.text_38>:
 8001372:	2203      	movs	r2, #3
 8001374:	2100      	movs	r1, #0
 8001376:	4638      	mov	r0, r7
 8001378:	f001 bd47 	b.w	8002e0a <PE_Send_CtrlMessage>

0800137c <.text_39>:
 800137c:	2000      	movs	r0, #0
 800137e:	9000      	str	r0, [sp, #0]
 8001380:	2303      	movs	r3, #3
 8001382:	2204      	movs	r2, #4
 8001384:	2100      	movs	r1, #0
 8001386:	4638      	mov	r0, r7
 8001388:	f001 bd3f 	b.w	8002e0a <PE_Send_CtrlMessage>

0800138c <.text_40>:
 800138c:	2000      	movs	r0, #0
 800138e:	9000      	str	r0, [sp, #0]
 8001390:	2303      	movs	r3, #3
 8001392:	2206      	movs	r2, #6
 8001394:	2100      	movs	r1, #0
 8001396:	4638      	mov	r0, r7
 8001398:	f001 bd37 	b.w	8002e0a <PE_Send_CtrlMessage>

0800139c <.text_41>:
 800139c:	7172      	strb	r2, [r6, #5]
 800139e:	2000      	movs	r0, #0
 80013a0:	9000      	str	r0, [sp, #0]
 80013a2:	2300      	movs	r3, #0
 80013a4:	7c39      	ldrb	r1, [r7, #16]
 80013a6:	f001 0101 	and.w	r1, r1, #1
 80013aa:	2004      	movs	r0, #4

080013ac <__iar_annotation$$tailcall>:
 80013ac:	4760      	bx	ip

080013ae <.text_42>:
 80013ae:	2000      	movs	r0, #0
 80013b0:	9000      	str	r0, [sp, #0]
 80013b2:	2300      	movs	r3, #0
 80013b4:	7c39      	ldrb	r1, [r7, #16]
 80013b6:	f8d9 c00c 	ldr.w	ip, [r9, #12]
 80013ba:	225a      	movs	r2, #90	; 0x5a
 80013bc:	f001 0101 	and.w	r1, r1, #1
 80013c0:	2009      	movs	r0, #9

080013c2 <__iar_annotation$$tailcall>:
 80013c2:	4760      	bx	ip

080013c4 <.text_43>:
 80013c4:	2000      	movs	r0, #0
 80013c6:	2103      	movs	r1, #3
 80013c8:	2201      	movs	r2, #1
 80013ca:	9002      	str	r0, [sp, #8]
 80013cc:	9101      	str	r1, [sp, #4]
 80013ce:	9200      	str	r2, [sp, #0]
 80013d0:	4770      	bx	lr

080013d2 <.text_44>:
 80013d2:	2100      	movs	r1, #0
 80013d4:	9100      	str	r1, [sp, #0]
 80013d6:	2300      	movs	r3, #0
 80013d8:	7c39      	ldrb	r1, [r7, #16]
 80013da:	f8d9 500c 	ldr.w	r5, [r9, #12]
 80013de:	4770      	bx	lr

080013e0 <.text_45>:
 80013e0:	2100      	movs	r1, #0
 80013e2:	9100      	str	r1, [sp, #0]
 80013e4:	2300      	movs	r3, #0
 80013e6:	7c39      	ldrb	r1, [r7, #16]
 80013e8:	f8d9 c00c 	ldr.w	ip, [r9, #12]
 80013ec:	4770      	bx	lr

080013ee <.text_46>:
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	6801      	ldr	r1, [r0, #0]
 80013f2:	f041 0110 	orr.w	r1, r1, #16
 80013f6:	6001      	str	r1, [r0, #0]
 80013f8:	68b8      	ldr	r0, [r7, #8]
 80013fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80013fc:	4770      	bx	lr

080013fe <.text_47>:
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	6801      	ldr	r1, [r0, #0]
 8001402:	f021 0110 	bic.w	r1, r1, #16
 8001406:	6001      	str	r1, [r0, #0]
 8001408:	4770      	bx	lr

0800140a <PE_StateMachine_SRC_SendCapa>:
 800140a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800140c:	4607      	mov	r7, r0
 800140e:	4c35      	ldr	r4, [pc, #212]	; (80014e4 <.text_49>)
 8001410:	f000 f86a 	bl	80014e8 <.text_50>
 8001414:	eb04 0180 	add.w	r1, r4, r0, lsl #2
 8001418:	2602      	movs	r6, #2
 800141a:	684d      	ldr	r5, [r1, #4]
 800141c:	6929      	ldr	r1, [r5, #16]
 800141e:	0849      	lsrs	r1, r1, #1
 8001420:	f001 0101 	and.w	r1, r1, #1
 8001424:	4628      	mov	r0, r5
 8001426:	f001 fcc1 	bl	8002dac <PE_Send_SRCCapabilities>
 800142a:	2805      	cmp	r0, #5
 800142c:	d002      	beq.n	8001434 <PE_StateMachine_SRC_SendCapa+0x2a>
 800142e:	2809      	cmp	r0, #9
 8001430:	d055      	beq.n	80014de <PE_StateMachine_SRC_SendCapa+0xd4>
 8001432:	e01f      	b.n	8001474 <PE_StateMachine_SRC_SendCapa+0x6a>
 8001434:	2001      	movs	r0, #1
 8001436:	83a8      	strh	r0, [r5, #28]
 8001438:	2000      	movs	r0, #0
 800143a:	6929      	ldr	r1, [r5, #16]
 800143c:	7668      	strb	r0, [r5, #25]
 800143e:	7628      	strb	r0, [r5, #24]
 8001440:	f041 0102 	orr.w	r1, r1, #2
 8001444:	6129      	str	r1, [r5, #16]
 8001446:	f248 001b 	movw	r0, #32795	; 0x801b
 800144a:	f8a5 0384 	strh.w	r0, [r5, #900]	; 0x384
 800144e:	261b      	movs	r6, #27
 8001450:	2016      	movs	r0, #22
 8001452:	f885 037f 	strb.w	r0, [r5, #895]	; 0x37f
 8001456:	7820      	ldrb	r0, [r4, #0]
 8001458:	0782      	lsls	r2, r0, #30
 800145a:	d505      	bpl.n	8001468 <PE_StateMachine_SRC_SendCapa+0x5e>
 800145c:	f000 f848 	bl	80014f0 <.text_51>
 8001460:	68e4      	ldr	r4, [r4, #12]
 8001462:	220f      	movs	r2, #15
 8001464:	f001 ff3f 	bl	80032e6 <.text_142+0x2>
 8001468:	f001 ff38 	bl	80032dc <.text_141>
 800146c:	210f      	movs	r1, #15
 800146e:	f002 fcb1 	bl	8003dd4 <.text_164+0x6>
 8001472:	e034      	b.n	80014de <PE_StateMachine_SRC_SendCapa+0xd4>
 8001474:	6928      	ldr	r0, [r5, #16]
 8001476:	f3c0 0140 	ubfx	r1, r0, #1, #1
 800147a:	b999      	cbnz	r1, 80014a4 <PE_StateMachine_SRC_SendCapa+0x9a>
 800147c:	7e69      	ldrb	r1, [r5, #25]
 800147e:	2933      	cmp	r1, #51	; 0x33
 8001480:	d219      	bcs.n	80014b6 <PE_StateMachine_SRC_SendCapa+0xac>
 8001482:	f248 0096 	movw	r0, #32918	; 0x8096
 8001486:	f8a5 0384 	strh.w	r0, [r5, #900]	; 0x384
 800148a:	2696      	movs	r6, #150	; 0x96
 800148c:	2008      	movs	r0, #8
 800148e:	f885 037f 	strb.w	r0, [r5, #895]	; 0x37f
 8001492:	f8b7 0388 	ldrh.w	r0, [r7, #904]	; 0x388
 8001496:	0441      	lsls	r1, r0, #17
 8001498:	d021      	beq.n	80014de <PE_StateMachine_SRC_SendCapa+0xd4>
 800149a:	f8b7 6388 	ldrh.w	r6, [r7, #904]	; 0x388
 800149e:	f3c6 060e 	ubfx	r6, r6, #0, #15
 80014a2:	e01c      	b.n	80014de <PE_StateMachine_SRC_SendCapa+0xd4>
 80014a4:	f000 0001 	and.w	r0, r0, #1
 80014a8:	f004 fbdd 	bl	8005c66 <USBPD_PRL_SRCReleaseSinkNG>
 80014ac:	200f      	movs	r0, #15
 80014ae:	f885 037f 	strb.w	r0, [r5, #895]	; 0x37f
 80014b2:	2600      	movs	r6, #0
 80014b4:	e013      	b.n	80014de <PE_StateMachine_SRC_SendCapa+0xd4>
 80014b6:	7821      	ldrb	r1, [r4, #0]
 80014b8:	078a      	lsls	r2, r1, #30
 80014ba:	d508      	bpl.n	80014ce <PE_StateMachine_SRC_SendCapa+0xc4>
 80014bc:	2200      	movs	r2, #0
 80014be:	9200      	str	r2, [sp, #0]
 80014c0:	f000 0101 	and.w	r1, r0, #1
 80014c4:	68e4      	ldr	r4, [r4, #12]
 80014c6:	2300      	movs	r3, #0
 80014c8:	2221      	movs	r2, #33	; 0x21
 80014ca:	2009      	movs	r0, #9
 80014cc:	47a0      	blx	r4
 80014ce:	f001 ff05 	bl	80032dc <.text_141>
 80014d2:	2121      	movs	r1, #33	; 0x21
 80014d4:	f002 fc7e 	bl	8003dd4 <.text_164+0x6>
 80014d8:	2000      	movs	r0, #0
 80014da:	f885 037f 	strb.w	r0, [r5, #895]	; 0x37f
 80014de:	4630      	mov	r0, r6
 80014e0:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

080014e4 <.text_49>:
 80014e4:	200000d0 	.word	0x200000d0

080014e8 <.text_50>:
 80014e8:	7c38      	ldrb	r0, [r7, #16]
 80014ea:	f000 0001 	and.w	r0, r0, #1
 80014ee:	4770      	bx	lr

080014f0 <.text_51>:
 80014f0:	2200      	movs	r2, #0
 80014f2:	9200      	str	r2, [sp, #0]
 80014f4:	2300      	movs	r3, #0
 80014f6:	4770      	bx	lr

080014f8 <PE_StateMachine_SRC_NegocCapa>:
 80014f8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80014fa:	f001 f82f 	bl	800255c <.text_96>
 80014fe:	68aa      	ldr	r2, [r5, #8]
 8001500:	7c28      	ldrb	r0, [r5, #16]
 8001502:	69d3      	ldr	r3, [r2, #28]
 8001504:	a901      	add	r1, sp, #4
 8001506:	f000 0001 	and.w	r0, r0, #1
 800150a:	4798      	blx	r3
 800150c:	2602      	movs	r6, #2
 800150e:	280a      	cmp	r0, #10
 8001510:	d016      	beq.n	8001540 <PE_StateMachine_SRC_NegocCapa+0x48>
 8001512:	280b      	cmp	r0, #11
 8001514:	d002      	beq.n	800151c <PE_StateMachine_SRC_NegocCapa+0x24>
 8001516:	280d      	cmp	r0, #13
 8001518:	d045      	beq.n	80015a6 <PE_StateMachine_SRC_NegocCapa+0xae>
 800151a:	e05a      	b.n	80015d2 <PE_StateMachine_SRC_NegocCapa+0xda>
 800151c:	2000      	movs	r0, #0
 800151e:	9000      	str	r0, [sp, #0]
 8001520:	230c      	movs	r3, #12
 8001522:	2202      	movs	r2, #2
 8001524:	f000 f875 	bl	8001612 <.text_54>
 8001528:	2800      	cmp	r0, #0
 800152a:	d16a      	bne.n	8001602 <PE_StateMachine_SRC_NegocCapa+0x10a>
 800152c:	7820      	ldrb	r0, [r4, #0]
 800152e:	0781      	lsls	r1, r0, #30
 8001530:	d504      	bpl.n	800153c <PE_StateMachine_SRC_NegocCapa+0x44>
 8001532:	f000 f868 	bl	8001606 <.text_53>
 8001536:	2204      	movs	r2, #4
 8001538:	f001 fed5 	bl	80032e6 <.text_142+0x2>
 800153c:	2104      	movs	r1, #4
 800153e:	e05c      	b.n	80015fa <PE_StateMachine_SRC_NegocCapa+0x102>
 8001540:	6868      	ldr	r0, [r5, #4]
 8001542:	6801      	ldr	r1, [r0, #0]
 8001544:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8001548:	2801      	cmp	r0, #1
 800154a:	d00d      	beq.n	8001568 <PE_StateMachine_SRC_NegocCapa+0x70>
 800154c:	9801      	ldr	r0, [sp, #4]
 800154e:	2803      	cmp	r0, #3
 8001550:	bf02      	ittt	eq
 8001552:	6928      	ldreq	r0, [r5, #16]
 8001554:	f3c0 0081 	ubfxeq	r0, r0, #2, #2
 8001558:	2803      	cmpeq	r0, #3
 800155a:	d105      	bne.n	8001568 <PE_StateMachine_SRC_NegocCapa+0x70>
 800155c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001560:	f8a5 0384 	strh.w	r0, [r5, #900]	; 0x384
 8001564:	2600      	movs	r6, #0
 8001566:	e004      	b.n	8001572 <PE_StateMachine_SRC_NegocCapa+0x7a>
 8001568:	f248 001e 	movw	r0, #32798	; 0x801e
 800156c:	f8a5 0384 	strh.w	r0, [r5, #900]	; 0x384
 8001570:	261e      	movs	r6, #30
 8001572:	2000      	movs	r0, #0
 8001574:	9000      	str	r0, [sp, #0]
 8001576:	230c      	movs	r3, #12
 8001578:	2203      	movs	r2, #3
 800157a:	f000 f84a 	bl	8001612 <.text_54>
 800157e:	b960      	cbnz	r0, 800159a <PE_StateMachine_SRC_NegocCapa+0xa2>
 8001580:	7820      	ldrb	r0, [r4, #0]
 8001582:	0781      	lsls	r1, r0, #30
 8001584:	d504      	bpl.n	8001590 <PE_StateMachine_SRC_NegocCapa+0x98>
 8001586:	f000 f83e 	bl	8001606 <.text_53>
 800158a:	2201      	movs	r2, #1
 800158c:	f001 feab 	bl	80032e6 <.text_142+0x2>
 8001590:	f001 fea4 	bl	80032dc <.text_141>
 8001594:	2101      	movs	r1, #1
 8001596:	f002 fc1d 	bl	8003dd4 <.text_164+0x6>
 800159a:	9801      	ldr	r0, [sp, #4]
 800159c:	6929      	ldr	r1, [r5, #16]
 800159e:	f360 0183 	bfi	r1, r0, #2, #2
 80015a2:	6129      	str	r1, [r5, #16]
 80015a4:	e02d      	b.n	8001602 <PE_StateMachine_SRC_NegocCapa+0x10a>
 80015a6:	f001 feb8 	bl	800331a <.text_146+0x4>
 80015aa:	bf0c      	ite	eq
 80015ac:	2303      	moveq	r3, #3
 80015ae:	230e      	movne	r3, #14
 80015b0:	2000      	movs	r0, #0
 80015b2:	9000      	str	r0, [sp, #0]
 80015b4:	220c      	movs	r2, #12
 80015b6:	f000 f82c 	bl	8001612 <.text_54>
 80015ba:	2800      	cmp	r0, #0
 80015bc:	d121      	bne.n	8001602 <PE_StateMachine_SRC_NegocCapa+0x10a>
 80015be:	7820      	ldrb	r0, [r4, #0]
 80015c0:	0781      	lsls	r1, r0, #30
 80015c2:	d504      	bpl.n	80015ce <PE_StateMachine_SRC_NegocCapa+0xd6>
 80015c4:	f000 f81f 	bl	8001606 <.text_53>
 80015c8:	2203      	movs	r2, #3
 80015ca:	f001 fe8c 	bl	80032e6 <.text_142+0x2>
 80015ce:	2103      	movs	r1, #3
 80015d0:	e013      	b.n	80015fa <PE_StateMachine_SRC_NegocCapa+0x102>
 80015d2:	f001 fea2 	bl	800331a <.text_146+0x4>
 80015d6:	bf0c      	ite	eq
 80015d8:	2303      	moveq	r3, #3
 80015da:	230e      	movne	r3, #14
 80015dc:	2000      	movs	r0, #0
 80015de:	9000      	str	r0, [sp, #0]
 80015e0:	2204      	movs	r2, #4
 80015e2:	f000 f816 	bl	8001612 <.text_54>
 80015e6:	b960      	cbnz	r0, 8001602 <PE_StateMachine_SRC_NegocCapa+0x10a>
 80015e8:	7820      	ldrb	r0, [r4, #0]
 80015ea:	0781      	lsls	r1, r0, #30
 80015ec:	d504      	bpl.n	80015f8 <PE_StateMachine_SRC_NegocCapa+0x100>
 80015ee:	f000 f80a 	bl	8001606 <.text_53>
 80015f2:	2202      	movs	r2, #2
 80015f4:	f001 fe77 	bl	80032e6 <.text_142+0x2>
 80015f8:	2102      	movs	r1, #2
 80015fa:	68aa      	ldr	r2, [r5, #8]
 80015fc:	7c28      	ldrb	r0, [r5, #16]
 80015fe:	f002 fbe8 	bl	8003dd2 <.text_164+0x4>
 8001602:	4630      	mov	r0, r6
 8001604:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08001606 <.text_53>:
 8001606:	2100      	movs	r1, #0
 8001608:	9100      	str	r1, [sp, #0]
 800160a:	2300      	movs	r3, #0
 800160c:	7c29      	ldrb	r1, [r5, #16]
 800160e:	68e4      	ldr	r4, [r4, #12]
 8001610:	4770      	bx	lr

08001612 <.text_54>:
 8001612:	2100      	movs	r1, #0
 8001614:	4628      	mov	r0, r5
 8001616:	f001 bbf8 	b.w	8002e0a <PE_Send_CtrlMessage>

0800161a <USBPD_PE_StateMachine_SNK>:
 800161a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800161e:	b090      	sub	sp, #64	; 0x40
 8001620:	4607      	mov	r7, r0
 8001622:	f8df 0c04 	ldr.w	r0, [pc, #3076]	; 8002228 <.text_56>
 8001626:	9004      	str	r0, [sp, #16]
 8001628:	4639      	mov	r1, r7
 800162a:	1d00      	adds	r0, r0, #4
 800162c:	2400      	movs	r4, #0
 800162e:	f850 8021 	ldr.w	r8, [r0, r1, lsl #2]
 8001632:	f508 7061 	add.w	r0, r8, #900	; 0x384
 8001636:	9005      	str	r0, [sp, #20]
 8001638:	6906      	ldr	r6, [r0, #16]
 800163a:	8800      	ldrh	r0, [r0, #0]
 800163c:	9905      	ldr	r1, [sp, #20]
 800163e:	89c9      	ldrh	r1, [r1, #14]
 8001640:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8001644:	1986      	adds	r6, r0, r6
 8001646:	f3c1 2042 	ubfx	r0, r1, #9, #3
 800164a:	1986      	adds	r6, r0, r6
 800164c:	4640      	mov	r0, r8
 800164e:	f001 011f 	and.w	r1, r1, #31
 8001652:	198e      	adds	r6, r1, r6
 8001654:	f002 fcc1 	bl	8003fda <PE_Check_RxEvent>
 8001658:	2803      	cmp	r0, #3
 800165a:	b2b6      	uxth	r6, r6
 800165c:	f88d 000c 	strb.w	r0, [sp, #12]
 8001660:	f040 84f9 	bne.w	8002056 <USBPD_PE_StateMachine_SNK+0xa3c>
 8001664:	2001      	movs	r0, #1
 8001666:	e051      	b.n	800170c <USBPD_PE_StateMachine_SNK+0xf2>
 8001668:	a903      	add	r1, sp, #12
 800166a:	4640      	mov	r0, r8
 800166c:	f001 fe5b 	bl	8003326 <PE_StateMachine_VDM>
 8001670:	4604      	mov	r4, r0
 8001672:	f000 fdfd 	bl	8002270 <.text_64>
 8001676:	d008      	beq.n	800168a <USBPD_PE_StateMachine_SNK+0x70>
 8001678:	7801      	ldrb	r1, [r0, #0]
 800167a:	07ca      	lsls	r2, r1, #31
 800167c:	d505      	bpl.n	800168a <USBPD_PE_StateMachine_SNK+0x70>
 800167e:	793a      	ldrb	r2, [r7, #4]
 8001680:	7978      	ldrb	r0, [r7, #5]
 8001682:	4290      	cmp	r0, r2
 8001684:	d001      	beq.n	800168a <USBPD_PE_StateMachine_SNK+0x70>
 8001686:	f000 fe75 	bl	8002374 <.text_85>
 800168a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800168e:	2814      	cmp	r0, #20
 8001690:	f000 84b8 	beq.w	8002004 <USBPD_PE_StateMachine_SNK+0x9ea>
 8001694:	4640      	mov	r0, r8
 8001696:	f002 fcc4 	bl	8004022 <PE_Check_AMSConflict>
 800169a:	2815      	cmp	r0, #21
 800169c:	d101      	bne.n	80016a2 <USBPD_PE_StateMachine_SNK+0x88>
 800169e:	f000 fe2f 	bl	8002300 <.text_75+0x6>
 80016a2:	9804      	ldr	r0, [sp, #16]
 80016a4:	68c4      	ldr	r4, [r0, #12]
 80016a6:	b16c      	cbz	r4, 80016c4 <USBPD_PE_StateMachine_SNK+0xaa>
 80016a8:	7801      	ldrb	r1, [r0, #0]
 80016aa:	07ca      	lsls	r2, r1, #31
 80016ac:	d50a      	bpl.n	80016c4 <USBPD_PE_StateMachine_SNK+0xaa>
 80016ae:	793a      	ldrb	r2, [r7, #4]
 80016b0:	7978      	ldrb	r0, [r7, #5]
 80016b2:	4290      	cmp	r0, r2
 80016b4:	d006      	beq.n	80016c4 <USBPD_PE_StateMachine_SNK+0xaa>
 80016b6:	717a      	strb	r2, [r7, #5]
 80016b8:	f000 fe57 	bl	800236a <.text_84>
 80016bc:	f001 0101 	and.w	r1, r1, #1
 80016c0:	2004      	movs	r0, #4
 80016c2:	47a0      	blx	r4
 80016c4:	2400      	movs	r4, #0
 80016c6:	9808      	ldr	r0, [sp, #32]
 80016c8:	2800      	cmp	r0, #0
 80016ca:	bf1f      	itttt	ne
 80016cc:	9904      	ldrne	r1, [sp, #16]
 80016ce:	6908      	ldrne	r0, [r1, #16]
 80016d0:	f8df 2b58 	ldrne.w	r2, [pc, #2904]	; 800222c <.text_57>
 80016d4:	4290      	cmpne	r0, r2
 80016d6:	d015      	beq.n	8001704 <USBPD_PE_StateMachine_SNK+0xea>
 80016d8:	7b32      	ldrb	r2, [r6, #12]
 80016da:	1d08      	adds	r0, r1, #4
 80016dc:	f002 0201 	and.w	r2, r2, #1
 80016e0:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80016e4:	f000 fe2f 	bl	8002346 <.text_81>
 80016e8:	9804      	ldr	r0, [sp, #16]
 80016ea:	7b32      	ldrb	r2, [r6, #12]
 80016ec:	1d01      	adds	r1, r0, #4
 80016ee:	f002 0201 	and.w	r2, r2, #1
 80016f2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80016f6:	6901      	ldr	r1, [r0, #16]
 80016f8:	0bca      	lsrs	r2, r1, #15
 80016fa:	2a08      	cmp	r2, #8
 80016fc:	bf24      	itt	cs
 80016fe:	f3c1 010e 	ubfxcs	r1, r1, #0, #15
 8001702:	6101      	strcs	r1, [r0, #16]
 8001704:	2c00      	cmp	r4, #0
 8001706:	f000 84b4 	beq.w	8002072 <USBPD_PE_StateMachine_SNK+0xa58>
 800170a:	4620      	mov	r0, r4
 800170c:	f002 bc02 	b.w	8003f14 <.text_180>
 8001710:	6870      	ldr	r0, [r6, #4]
 8001712:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001714:	b111      	cbz	r1, 800171c <USBPD_PE_StateMachine_SNK+0x102>
 8001716:	f000 fda2 	bl	800225e <.text_62>
 800171a:	4788      	blx	r1
 800171c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001720:	e7f4      	b.n	800170c <USBPD_PE_StateMachine_SNK+0xf2>
 8001722:	f000 fd9c 	bl	800225e <.text_62>
 8001726:	f004 fc88 	bl	800603a <USBPD_PRL_Reset>
 800172a:	6831      	ldr	r1, [r6, #0]
 800172c:	680a      	ldr	r2, [r1, #0]
 800172e:	f3c2 3000 	ubfx	r0, r2, #12, #1
 8001732:	2800      	cmp	r0, #0
 8001734:	d09d      	beq.n	8001672 <USBPD_PE_StateMachine_SNK+0x58>
 8001736:	f002 0003 	and.w	r0, r2, #3
 800173a:	2801      	cmp	r0, #1
 800173c:	bf0c      	ite	eq
 800173e:	2000      	moveq	r0, #0
 8001740:	2001      	movne	r0, #1
 8001742:	f022 0220 	bic.w	r2, r2, #32
 8001746:	ea42 1240 	orr.w	r2, r2, r0, lsl #5
 800174a:	600a      	str	r2, [r1, #0]
 800174c:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 8001750:	9805      	ldr	r0, [sp, #20]
 8001752:	f8a0 a000 	strh.w	sl, [r0]
 8001756:	2043      	movs	r0, #67	; 0x43
 8001758:	7138      	strb	r0, [r7, #4]
 800175a:	e78a      	b.n	8001672 <USBPD_PE_StateMachine_SNK+0x58>
 800175c:	2a11      	cmp	r2, #17
 800175e:	d12f      	bne.n	80017c0 <USBPD_PE_StateMachine_SNK+0x1a6>
 8001760:	9905      	ldr	r1, [sp, #20]
 8001762:	89c9      	ldrh	r1, [r1, #14]
 8001764:	0bc8      	lsrs	r0, r1, #15
 8001766:	d12b      	bne.n	80017c0 <USBPD_PE_StateMachine_SNK+0x1a6>
 8001768:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800176c:	b340      	cbz	r0, 80017c0 <USBPD_PE_StateMachine_SNK+0x1a6>
 800176e:	f001 001f 	and.w	r0, r1, #31
 8001772:	2801      	cmp	r0, #1
 8001774:	d124      	bne.n	80017c0 <USBPD_PE_StateMachine_SNK+0x1a6>
 8001776:	68f0      	ldr	r0, [r6, #12]
 8001778:	f040 0002 	orr.w	r0, r0, #2
 800177c:	2200      	movs	r2, #0
 800177e:	60f0      	str	r0, [r6, #12]
 8001780:	7532      	strb	r2, [r6, #20]
 8001782:	f3c1 1181 	ubfx	r1, r1, #6, #2
 8001786:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800178a:	f003 fa18 	bl	8004bbe <PE_ExtRevisionInteroperability>
 800178e:	9805      	ldr	r0, [sp, #20]
 8001790:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8001794:	89c1      	ldrh	r1, [r0, #14]
 8001796:	7b30      	ldrb	r0, [r6, #12]
 8001798:	f8dc 5018 	ldr.w	r5, [ip, #24]
 800179c:	f3c1 3302 	ubfx	r3, r1, #12, #3
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	f508 72a1 	add.w	r2, r8, #322	; 0x142
 80017a6:	2104      	movs	r1, #4
 80017a8:	f000 0001 	and.w	r0, r0, #1
 80017ac:	47a8      	blx	r5
 80017ae:	2001      	movs	r0, #1
 80017b0:	8330      	strh	r0, [r6, #24]
 80017b2:	f000 fda5 	bl	8002300 <.text_75+0x6>
 80017b6:	6830      	ldr	r0, [r6, #0]
 80017b8:	f7ff fe22 	bl	8001400 <.text_47+0x2>
 80017bc:	2044      	movs	r0, #68	; 0x44
 80017be:	7138      	strb	r0, [r7, #4]
 80017c0:	f000 fd65 	bl	800228e <.text_67>
 80017c4:	d107      	bne.n	80017d6 <USBPD_PE_StateMachine_SNK+0x1bc>
 80017c6:	6830      	ldr	r0, [r6, #0]
 80017c8:	6802      	ldr	r2, [r0, #0]
 80017ca:	f022 0210 	bic.w	r2, r2, #16
 80017ce:	6002      	str	r2, [r0, #0]
 80017d0:	200f      	movs	r0, #15
 80017d2:	7138      	strb	r0, [r7, #4]
 80017d4:	2400      	movs	r4, #0
 80017d6:	e74c      	b.n	8001672 <USBPD_PE_StateMachine_SNK+0x58>
 80017d8:	2001      	movs	r0, #1
 80017da:	8330      	strh	r0, [r6, #24]
 80017dc:	466a      	mov	r2, sp
 80017de:	6873      	ldr	r3, [r6, #4]
 80017e0:	7b30      	ldrb	r0, [r6, #12]
 80017e2:	6a1c      	ldr	r4, [r3, #32]
 80017e4:	f108 0114 	add.w	r1, r8, #20
 80017e8:	f000 0001 	and.w	r0, r0, #1
 80017ec:	47a0      	blx	r4
 80017ee:	9800      	ldr	r0, [sp, #0]
 80017f0:	68f1      	ldr	r1, [r6, #12]
 80017f2:	f360 0183 	bfi	r1, r0, #2, #2
 80017f6:	60f1      	str	r1, [r6, #12]
 80017f8:	2045      	movs	r0, #69	; 0x45
 80017fa:	e7ea      	b.n	80017d2 <USBPD_PE_StateMachine_SNK+0x1b8>
 80017fc:	2000      	movs	r0, #0
 80017fe:	2146      	movs	r1, #70	; 0x46
 8001800:	f7ff fde2 	bl	80013c8 <.text_43+0x4>
 8001804:	f108 0314 	add.w	r3, r8, #20
 8001808:	2202      	movs	r2, #2
 800180a:	2100      	movs	r1, #0
 800180c:	4640      	mov	r0, r8
 800180e:	f001 fb2b 	bl	8002e68 <PE_Send_DataMessage>
 8001812:	9805      	ldr	r0, [sp, #20]
 8001814:	f8a0 b000 	strh.w	fp, [r0]
 8001818:	241b      	movs	r4, #27
 800181a:	e72a      	b.n	8001672 <USBPD_PE_StateMachine_SNK+0x58>
 800181c:	a903      	add	r1, sp, #12
 800181e:	4640      	mov	r0, r8
 8001820:	f000 fe08 	bl	8002434 <PE_StateMachine_SNK_SelectCapa>
 8001824:	e724      	b.n	8001670 <USBPD_PE_StateMachine_SNK+0x56>
 8001826:	2a11      	cmp	r2, #17
 8001828:	d12e      	bne.n	8001888 <USBPD_PE_StateMachine_SNK+0x26e>
 800182a:	f000 fd11 	bl	8002250 <.text_61>
 800182e:	d12b      	bne.n	8001888 <USBPD_PE_StateMachine_SNK+0x26e>
 8001830:	f000 fd66 	bl	8002300 <.text_75+0x6>
 8001834:	f000 fded 	bl	8002412 <.text_93>
 8001838:	d008      	beq.n	800184c <USBPD_PE_StateMachine_SNK+0x232>
 800183a:	f000 fd34 	bl	80022a6 <.text_69>
 800183e:	d501      	bpl.n	8001844 <USBPD_PE_StateMachine_SNK+0x22a>
 8001840:	f000 fda9 	bl	8002396 <.text_87>
 8001844:	f000 fd0f 	bl	8002266 <.text_63>
 8001848:	f002 fac4 	bl	8003dd4 <.text_164+0x6>
 800184c:	2000      	movs	r0, #0
 800184e:	8330      	strh	r0, [r6, #24]
 8001850:	2400      	movs	r4, #0
 8001852:	2003      	movs	r0, #3
 8001854:	7138      	strb	r0, [r7, #4]
 8001856:	f000 fd16 	bl	8002286 <.text_66>
 800185a:	d504      	bpl.n	8001866 <USBPD_PE_StateMachine_SNK+0x24c>
 800185c:	f000 fd3c 	bl	80022d8 <.text_73>
 8001860:	2210      	movs	r2, #16
 8001862:	f002 fffb 	bl	800485c <.text_203+0x2>
 8001866:	f000 fce3 	bl	8002230 <.text_58>
 800186a:	2110      	movs	r1, #16
 800186c:	f002 fab2 	bl	8003dd4 <.text_164+0x6>
 8001870:	68f0      	ldr	r0, [r6, #12]
 8001872:	f3c0 0081 	ubfx	r0, r0, #2, #2
 8001876:	2803      	cmp	r0, #3
 8001878:	d104      	bne.n	8001884 <USBPD_PE_StateMachine_SNK+0x26a>
 800187a:	9905      	ldr	r1, [sp, #20]
 800187c:	f24a 3028 	movw	r0, #41768	; 0xa328
 8001880:	8148      	strh	r0, [r1, #10]
 8001882:	e001      	b.n	8001888 <USBPD_PE_StateMachine_SNK+0x26e>
 8001884:	9905      	ldr	r1, [sp, #20]
 8001886:	814c      	strh	r4, [r1, #10]
 8001888:	f000 fd01 	bl	800228e <.text_67>
 800188c:	d1c5      	bne.n	800181a <USBPD_PE_StateMachine_SNK+0x200>
 800188e:	e79f      	b.n	80017d0 <USBPD_PE_StateMachine_SNK+0x1b6>
 8001890:	a903      	add	r1, sp, #12
 8001892:	4640      	mov	r0, r8
 8001894:	f001 fbe8 	bl	8003068 <PE_StateMachine_VDMCable>
 8001898:	e6ea      	b.n	8001670 <USBPD_PE_StateMachine_SNK+0x56>
 800189a:	f000 fccd 	bl	8002238 <.text_59>
 800189e:	bf1e      	ittt	ne
 80018a0:	6870      	ldrne	r0, [r6, #4]
 80018a2:	6b02      	ldrne	r2, [r0, #48]	; 0x30
 80018a4:	2a00      	cmpne	r2, #0
 80018a6:	d001      	beq.n	80018ac <USBPD_PE_StateMachine_SNK+0x292>
 80018a8:	f000 fd3d 	bl	8002326 <.text_78>
 80018ac:	68f0      	ldr	r0, [r6, #12]
 80018ae:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80018b2:	60f0      	str	r0, [r6, #12]
 80018b4:	f000 fd9e 	bl	80023f4 <.text_91>
 80018b8:	2000      	movs	r0, #0
 80018ba:	8330      	strh	r0, [r6, #24]
 80018bc:	6830      	ldr	r0, [r6, #0]
 80018be:	6801      	ldr	r1, [r0, #0]
 80018c0:	f3c1 2102 	ubfx	r1, r1, #8, #3
 80018c4:	2901      	cmp	r1, #1
 80018c6:	d00a      	beq.n	80018de <USBPD_PE_StateMachine_SNK+0x2c4>
 80018c8:	6802      	ldr	r2, [r0, #0]
 80018ca:	2101      	movs	r1, #1
 80018cc:	f000 fced 	bl	80022aa <.text_69+0x4>
 80018d0:	d501      	bpl.n	80018d6 <USBPD_PE_StateMachine_SNK+0x2bc>
 80018d2:	f000 fd82 	bl	80023da <.text_90>
 80018d6:	f000 fcc6 	bl	8002266 <.text_63>
 80018da:	f002 fa7b 	bl	8003dd4 <.text_164+0x6>
 80018de:	2000      	movs	r0, #0
 80018e0:	7038      	strb	r0, [r7, #0]
 80018e2:	7d31      	ldrb	r1, [r6, #20]
 80018e4:	68f0      	ldr	r0, [r6, #12]
 80018e6:	f020 00e0 	bic.w	r0, r0, #224	; 0xe0
 80018ea:	2903      	cmp	r1, #3
 80018ec:	60f0      	str	r0, [r6, #12]
 80018ee:	d30c      	bcc.n	800190a <USBPD_PE_StateMachine_SNK+0x2f0>
 80018f0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80018f4:	2800      	cmp	r0, #0
 80018f6:	bf1e      	ittt	ne
 80018f8:	6871      	ldrne	r1, [r6, #4]
 80018fa:	6b48      	ldrne	r0, [r1, #52]	; 0x34
 80018fc:	2800      	cmpne	r0, #0
 80018fe:	d002      	beq.n	8001906 <USBPD_PE_StateMachine_SNK+0x2ec>
 8001900:	2192      	movs	r1, #146	; 0x92
 8001902:	7139      	strb	r1, [r7, #4]
 8001904:	e766      	b.n	80017d4 <USBPD_PE_StateMachine_SNK+0x1ba>
 8001906:	2000      	movs	r0, #0
 8001908:	e726      	b.n	8001758 <USBPD_PE_StateMachine_SNK+0x13e>
 800190a:	1c49      	adds	r1, r1, #1
 800190c:	7531      	strb	r1, [r6, #20]
 800190e:	4640      	mov	r0, r8
 8001910:	f001 fae3 	bl	8002eda <PE_Send_HARDRESET>
 8001914:	f000 fcfc 	bl	8002310 <.text_76>
 8001918:	f000 fd81 	bl	800241e <.text_94>
 800191c:	e7f1      	b.n	8001902 <USBPD_PE_StateMachine_SNK+0x2e8>
 800191e:	f000 fc8b 	bl	8002238 <.text_59>
 8001922:	bf1e      	ittt	ne
 8001924:	6870      	ldrne	r0, [r6, #4]
 8001926:	6b02      	ldrne	r2, [r0, #48]	; 0x30
 8001928:	2a00      	cmpne	r2, #0
 800192a:	d001      	beq.n	8001930 <USBPD_PE_StateMachine_SNK+0x316>
 800192c:	f000 fcfb 	bl	8002326 <.text_78>
 8001930:	f000 fca9 	bl	8002286 <.text_66>
 8001934:	d504      	bpl.n	8001940 <USBPD_PE_StateMachine_SNK+0x326>
 8001936:	f000 fd26 	bl	8002386 <.text_86>
 800193a:	221e      	movs	r2, #30
 800193c:	f003 f894 	bl	8004a68 <.text_211+0x2>
 8001940:	f000 fc76 	bl	8002230 <.text_58>
 8001944:	211e      	movs	r1, #30
 8001946:	f002 fa45 	bl	8003dd4 <.text_164+0x6>
 800194a:	f000 fce1 	bl	8002310 <.text_76>
 800194e:	f000 fd66 	bl	800241e <.text_94>
 8001952:	e7d6      	b.n	8001902 <USBPD_PE_StateMachine_SNK+0x2e8>
 8001954:	6870      	ldr	r0, [r6, #4]
 8001956:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001958:	b1ca      	cbz	r2, 800198e <USBPD_PE_StateMachine_SNK+0x374>
 800195a:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800195e:	2100      	movs	r1, #0
 8001960:	4790      	blx	r2
 8001962:	2801      	cmp	r0, #1
 8001964:	d113      	bne.n	800198e <USBPD_PE_StateMachine_SNK+0x374>
 8001966:	9905      	ldr	r1, [sp, #20]
 8001968:	f248 40fb 	movw	r0, #34043	; 0x84fb
 800196c:	8008      	strh	r0, [r1, #0]
 800196e:	2140      	movs	r1, #64	; 0x40
 8001970:	7139      	strb	r1, [r7, #4]
 8001972:	2400      	movs	r4, #0
 8001974:	f000 fc87 	bl	8002286 <.text_66>
 8001978:	d504      	bpl.n	8001984 <USBPD_PE_StateMachine_SNK+0x36a>
 800197a:	f000 fcad 	bl	80022d8 <.text_73>
 800197e:	2213      	movs	r2, #19
 8001980:	f002 ff6c 	bl	800485c <.text_203+0x2>
 8001984:	f000 fc54 	bl	8002230 <.text_58>
 8001988:	2113      	movs	r1, #19
 800198a:	f002 fa23 	bl	8003dd4 <.text_164+0x6>
 800198e:	f000 fc7e 	bl	800228e <.text_67>
 8001992:	d109      	bne.n	80019a8 <USBPD_PE_StateMachine_SNK+0x38e>
 8001994:	6870      	ldr	r0, [r6, #4]
 8001996:	6843      	ldr	r3, [r0, #4]
 8001998:	b10b      	cbz	r3, 800199e <USBPD_PE_StateMachine_SNK+0x384>
 800199a:	f000 fcbe 	bl	800231a <.text_77>
 800199e:	f000 fd2f 	bl	8002400 <.text_92>
 80019a2:	d0b1      	beq.n	8001908 <USBPD_PE_StateMachine_SNK+0x2ee>
 80019a4:	2192      	movs	r1, #146	; 0x92
 80019a6:	7139      	strb	r1, [r7, #4]
 80019a8:	e663      	b.n	8001672 <USBPD_PE_StateMachine_SNK+0x58>
 80019aa:	6870      	ldr	r0, [r6, #4]
 80019ac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80019ae:	b1e2      	cbz	r2, 80019ea <USBPD_PE_StateMachine_SNK+0x3d0>
 80019b0:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80019b4:	2101      	movs	r1, #1
 80019b6:	4790      	blx	r2
 80019b8:	2801      	cmp	r0, #1
 80019ba:	d116      	bne.n	80019ea <USBPD_PE_StateMachine_SNK+0x3d0>
 80019bc:	6870      	ldr	r0, [r6, #4]
 80019be:	6843      	ldr	r3, [r0, #4]
 80019c0:	b11b      	cbz	r3, 80019ca <USBPD_PE_StateMachine_SNK+0x3b0>
 80019c2:	7b30      	ldrb	r0, [r6, #12]
 80019c4:	2205      	movs	r2, #5
 80019c6:	f000 fcaa 	bl	800231e <.text_77+0x4>
 80019ca:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80019ce:	f004 fddc 	bl	800658a <USBPD_PRL_PowerSinkReset>
 80019d2:	6830      	ldr	r0, [r6, #0]
 80019d4:	f7ff fd14 	bl	8001400 <.text_47+0x2>
 80019d8:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 80019dc:	f000 fc72 	bl	80022c4 <.text_71>
 80019e0:	9805      	ldr	r0, [sp, #20]
 80019e2:	f8a0 a000 	strh.w	sl, [r0]
 80019e6:	2043      	movs	r0, #67	; 0x43
 80019e8:	7138      	strb	r0, [r7, #4]
 80019ea:	f000 fc50 	bl	800228e <.text_67>
 80019ee:	d1db      	bne.n	80019a8 <USBPD_PE_StateMachine_SNK+0x38e>
 80019f0:	6870      	ldr	r0, [r6, #4]
 80019f2:	6843      	ldr	r3, [r0, #4]
 80019f4:	b10b      	cbz	r3, 80019fa <USBPD_PE_StateMachine_SNK+0x3e0>
 80019f6:	f000 fc90 	bl	800231a <.text_77>
 80019fa:	f000 fd01 	bl	8002400 <.text_92>
 80019fe:	f43f aeab 	beq.w	8001758 <USBPD_PE_StateMachine_SNK+0x13e>
 8001a02:	e7cf      	b.n	80019a4 <USBPD_PE_StateMachine_SNK+0x38a>
 8001a04:	4640      	mov	r0, r8
 8001a06:	f001 fa9d 	bl	8002f44 <PE_PerformSoftReset>
 8001a0a:	f003 fecd 	bl	80057a8 <.text_259>
 8001a0e:	f000 fc8f 	bl	8002330 <.text_79>
 8001a12:	2800      	cmp	r0, #0
 8001a14:	d10c      	bne.n	8001a30 <USBPD_PE_StateMachine_SNK+0x416>
 8001a16:	f000 fc36 	bl	8002286 <.text_66>
 8001a1a:	d504      	bpl.n	8001a26 <USBPD_PE_StateMachine_SNK+0x40c>
 8001a1c:	f000 fcc7 	bl	80023ae <.text_88>
 8001a20:	2231      	movs	r2, #49	; 0x31
 8001a22:	f002 ff1b 	bl	800485c <.text_203+0x2>
 8001a26:	2131      	movs	r1, #49	; 0x31
 8001a28:	6872      	ldr	r2, [r6, #4]
 8001a2a:	7b30      	ldrb	r0, [r6, #12]
 8001a2c:	f002 f9d1 	bl	8003dd2 <.text_164+0x4>
 8001a30:	e61f      	b.n	8001672 <USBPD_PE_StateMachine_SNK+0x58>
 8001a32:	6830      	ldr	r0, [r6, #0]
 8001a34:	6801      	ldr	r1, [r0, #0]
 8001a36:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8001a3a:	2804      	cmp	r0, #4
 8001a3c:	f43f aec8 	beq.w	80017d0 <USBPD_PE_StateMachine_SNK+0x1b6>
 8001a40:	2100      	movs	r1, #0
 8001a42:	9100      	str	r1, [sp, #0]
 8001a44:	2350      	movs	r3, #80	; 0x50
 8001a46:	220d      	movs	r2, #13
 8001a48:	4640      	mov	r0, r8
 8001a4a:	f001 f9de 	bl	8002e0a <PE_Send_CtrlMessage>
 8001a4e:	2800      	cmp	r0, #0
 8001a50:	d1ee      	bne.n	8001a30 <USBPD_PE_StateMachine_SNK+0x416>
 8001a52:	2003      	movs	r0, #3
 8001a54:	f000 fc12 	bl	800227c <.text_65>
 8001a58:	d504      	bpl.n	8001a64 <USBPD_PE_StateMachine_SNK+0x44a>
 8001a5a:	f000 fca8 	bl	80023ae <.text_88>
 8001a5e:	2230      	movs	r2, #48	; 0x30
 8001a60:	f002 fefc 	bl	800485c <.text_203+0x2>
 8001a64:	2130      	movs	r1, #48	; 0x30
 8001a66:	e7df      	b.n	8001a28 <USBPD_PE_StateMachine_SNK+0x40e>
 8001a68:	2a11      	cmp	r2, #17
 8001a6a:	d108      	bne.n	8001a7e <USBPD_PE_StateMachine_SNK+0x464>
 8001a6c:	f000 fbea 	bl	8002244 <.text_60>
 8001a70:	2903      	cmp	r1, #3
 8001a72:	d104      	bne.n	8001a7e <USBPD_PE_StateMachine_SNK+0x464>
 8001a74:	4640      	mov	r0, r8
 8001a76:	f001 fa65 	bl	8002f44 <PE_PerformSoftReset>
 8001a7a:	f000 fc3e 	bl	80022fa <.text_75>
 8001a7e:	e703      	b.n	8001888 <USBPD_PE_StateMachine_SNK+0x26e>
 8001a80:	9400      	str	r4, [sp, #0]
 8001a82:	2343      	movs	r3, #67	; 0x43
 8001a84:	2207      	movs	r2, #7
 8001a86:	f000 fc54 	bl	8002332 <.text_79+0x2>
 8001a8a:	2800      	cmp	r0, #0
 8001a8c:	d122      	bne.n	8001ad4 <USBPD_PE_StateMachine_SNK+0x4ba>
 8001a8e:	2006      	movs	r0, #6
 8001a90:	f000 fbf4 	bl	800227c <.text_65>
 8001a94:	d504      	bpl.n	8001aa0 <USBPD_PE_StateMachine_SNK+0x486>
 8001a96:	f000 fc8a 	bl	80023ae <.text_88>
 8001a9a:	220b      	movs	r2, #11
 8001a9c:	f002 fede 	bl	800485c <.text_203+0x2>
 8001aa0:	210b      	movs	r1, #11
 8001aa2:	e7c1      	b.n	8001a28 <USBPD_PE_StateMachine_SNK+0x40e>
 8001aa4:	2a11      	cmp	r2, #17
 8001aa6:	d115      	bne.n	8001ad4 <USBPD_PE_StateMachine_SNK+0x4ba>
 8001aa8:	9905      	ldr	r1, [sp, #20]
 8001aaa:	89ca      	ldrh	r2, [r1, #14]
 8001aac:	f24f 031f 	movw	r3, #61471	; 0xf01f
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	2a06      	cmp	r2, #6
 8001ab4:	d10e      	bne.n	8001ad4 <USBPD_PE_StateMachine_SNK+0x4ba>
 8001ab6:	b120      	cbz	r0, 8001ac2 <USBPD_PE_StateMachine_SNK+0x4a8>
 8001ab8:	f000 fc57 	bl	800236a <.text_84>
 8001abc:	222c      	movs	r2, #44	; 0x2c
 8001abe:	f002 ffd3 	bl	8004a68 <.text_211+0x2>
 8001ac2:	f000 fbb5 	bl	8002230 <.text_58>
 8001ac6:	212c      	movs	r1, #44	; 0x2c
 8001ac8:	f002 f984 	bl	8003dd4 <.text_164+0x6>
 8001acc:	2003      	movs	r0, #3
 8001ace:	7138      	strb	r0, [r7, #4]
 8001ad0:	f000 fc0a 	bl	80022e8 <.text_74>
 8001ad4:	e5cd      	b.n	8001672 <USBPD_PE_StateMachine_SNK+0x58>
 8001ad6:	f003 fe67 	bl	80057a8 <.text_259>
 8001ada:	2204      	movs	r2, #4
 8001adc:	f000 fc29 	bl	8002332 <.text_79+0x2>
 8001ae0:	2800      	cmp	r0, #0
 8001ae2:	d1f7      	bne.n	8001ad4 <USBPD_PE_StateMachine_SNK+0x4ba>
 8001ae4:	f000 fbcf 	bl	8002286 <.text_66>
 8001ae8:	d469      	bmi.n	8001bbe <USBPD_PE_StateMachine_SNK+0x5a4>
 8001aea:	e06d      	b.n	8001bc8 <USBPD_PE_StateMachine_SNK+0x5ae>
 8001aec:	2949      	cmp	r1, #73	; 0x49
 8001aee:	d105      	bne.n	8001afc <USBPD_PE_StateMachine_SNK+0x4e2>
 8001af0:	9905      	ldr	r1, [sp, #20]
 8001af2:	f248 0064 	movw	r0, #32868	; 0x8064
 8001af6:	8048      	strh	r0, [r1, #2]
 8001af8:	2003      	movs	r0, #3
 8001afa:	7138      	strb	r0, [r7, #4]
 8001afc:	7938      	ldrb	r0, [r7, #4]
 8001afe:	2803      	cmp	r0, #3
 8001b00:	d112      	bne.n	8001b28 <USBPD_PE_StateMachine_SNK+0x50e>
 8001b02:	2100      	movs	r1, #0
 8001b04:	8331      	strh	r1, [r6, #24]
 8001b06:	f000 fbdd 	bl	80022c4 <.text_71>
 8001b0a:	2004      	movs	r0, #4
 8001b0c:	7138      	strb	r0, [r7, #4]
 8001b0e:	f000 fbba 	bl	8002286 <.text_66>
 8001b12:	d504      	bpl.n	8001b1e <USBPD_PE_StateMachine_SNK+0x504>
 8001b14:	f000 fc37 	bl	8002386 <.text_86>
 8001b18:	2220      	movs	r2, #32
 8001b1a:	f002 ffa5 	bl	8004a68 <.text_211+0x2>
 8001b1e:	f000 fb87 	bl	8002230 <.text_58>
 8001b22:	2120      	movs	r1, #32
 8001b24:	f002 f956 	bl	8003dd4 <.text_164+0x6>
 8001b28:	a903      	add	r1, sp, #12
 8001b2a:	4640      	mov	r0, r8
 8001b2c:	f000 fd29 	bl	8002582 <PE_StateMachine_SNK_ReadyWait>
 8001b30:	e59e      	b.n	8001670 <USBPD_PE_StateMachine_SNK+0x56>
 8001b32:	6870      	ldr	r0, [r6, #4]
 8001b34:	6881      	ldr	r1, [r0, #8]
 8001b36:	b909      	cbnz	r1, 8001b3c <USBPD_PE_StateMachine_SNK+0x522>
 8001b38:	202a      	movs	r0, #42	; 0x2a
 8001b3a:	e64a      	b.n	80017d2 <USBPD_PE_StateMachine_SNK+0x1b8>
 8001b3c:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8001b40:	4788      	blx	r1
 8001b42:	280a      	cmp	r0, #10
 8001b44:	d002      	beq.n	8001b4c <USBPD_PE_StateMachine_SNK+0x532>
 8001b46:	280d      	cmp	r0, #13
 8001b48:	d023      	beq.n	8001b92 <USBPD_PE_StateMachine_SNK+0x578>
 8001b4a:	e032      	b.n	8001bb2 <USBPD_PE_StateMachine_SNK+0x598>
 8001b4c:	6870      	ldr	r0, [r6, #4]
 8001b4e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b50:	b11b      	cbz	r3, 8001b5a <USBPD_PE_StateMachine_SNK+0x540>
 8001b52:	7b30      	ldrb	r0, [r6, #12]
 8001b54:	f001 f94e 	bl	8002df4 <.text_130>
 8001b58:	4798      	blx	r3
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	9000      	str	r0, [sp, #0]
 8001b5e:	2352      	movs	r3, #82	; 0x52
 8001b60:	f000 fbe6 	bl	8002330 <.text_79>
 8001b64:	2800      	cmp	r0, #0
 8001b66:	d1b5      	bne.n	8001ad4 <USBPD_PE_StateMachine_SNK+0x4ba>
 8001b68:	2008      	movs	r0, #8
 8001b6a:	8330      	strh	r0, [r6, #24]
 8001b6c:	f000 fc42 	bl	80023f4 <.text_91>
 8001b70:	6870      	ldr	r0, [r6, #4]
 8001b72:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b74:	b10b      	cbz	r3, 8001b7a <USBPD_PE_StateMachine_SNK+0x560>
 8001b76:	f000 fbe0 	bl	800233a <.text_80>
 8001b7a:	9805      	ldr	r0, [sp, #20]
 8001b7c:	f8a0 9000 	strh.w	r9, [r0]
 8001b80:	f240 3443 	movw	r4, #835	; 0x343
 8001b84:	f000 fb7f 	bl	8002286 <.text_66>
 8001b88:	d501      	bpl.n	8001b8e <USBPD_PE_StateMachine_SNK+0x574>
 8001b8a:	f000 fc19 	bl	80023c0 <.text_89>
 8001b8e:	213a      	movs	r1, #58	; 0x3a
 8001b90:	e74a      	b.n	8001a28 <USBPD_PE_StateMachine_SNK+0x40e>
 8001b92:	f000 fbe0 	bl	8002356 <.text_82>
 8001b96:	4640      	mov	r0, r8
 8001b98:	f001 f937 	bl	8002e0a <PE_Send_CtrlMessage>
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	d199      	bne.n	8001ad4 <USBPD_PE_StateMachine_SNK+0x4ba>
 8001ba0:	f000 fb71 	bl	8002286 <.text_66>
 8001ba4:	d503      	bpl.n	8001bae <USBPD_PE_StateMachine_SNK+0x594>
 8001ba6:	f000 fc02 	bl	80023ae <.text_88>
 8001baa:	f002 fe56 	bl	800485a <.text_203>
 8001bae:	213b      	movs	r1, #59	; 0x3b
 8001bb0:	e73a      	b.n	8001a28 <USBPD_PE_StateMachine_SNK+0x40e>
 8001bb2:	202a      	movs	r0, #42	; 0x2a
 8001bb4:	7138      	strb	r0, [r7, #4]
 8001bb6:	2400      	movs	r4, #0
 8001bb8:	f000 fb65 	bl	8002286 <.text_66>
 8001bbc:	d504      	bpl.n	8001bc8 <USBPD_PE_StateMachine_SNK+0x5ae>
 8001bbe:	f000 fbf6 	bl	80023ae <.text_88>
 8001bc2:	2216      	movs	r2, #22
 8001bc4:	f002 fe4a 	bl	800485c <.text_203+0x2>
 8001bc8:	2116      	movs	r1, #22
 8001bca:	e72d      	b.n	8001a28 <USBPD_PE_StateMachine_SNK+0x40e>
 8001bcc:	2a11      	cmp	r2, #17
 8001bce:	d10d      	bne.n	8001bec <USBPD_PE_StateMachine_SNK+0x5d2>
 8001bd0:	f000 fb3e 	bl	8002250 <.text_61>
 8001bd4:	d10a      	bne.n	8001bec <USBPD_PE_StateMachine_SNK+0x5d2>
 8001bd6:	6870      	ldr	r0, [r6, #4]
 8001bd8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001bda:	b11b      	cbz	r3, 8001be4 <USBPD_PE_StateMachine_SNK+0x5ca>
 8001bdc:	7b30      	ldrb	r0, [r6, #12]
 8001bde:	2209      	movs	r2, #9
 8001be0:	f000 fbad 	bl	800233e <.text_80+0x4>
 8001be4:	2053      	movs	r0, #83	; 0x53
 8001be6:	7138      	strb	r0, [r7, #4]
 8001be8:	f000 fb8a 	bl	8002300 <.text_75+0x6>
 8001bec:	f000 fb4f 	bl	800228e <.text_67>
 8001bf0:	d155      	bne.n	8001c9e <USBPD_PE_StateMachine_SNK+0x684>
 8001bf2:	6872      	ldr	r2, [r6, #4]
 8001bf4:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8001bf6:	2800      	cmp	r0, #0
 8001bf8:	f47f aed4 	bne.w	80019a4 <USBPD_PE_StateMachine_SNK+0x38a>
 8001bfc:	200f      	movs	r0, #15
 8001bfe:	e5ab      	b.n	8001758 <USBPD_PE_StateMachine_SNK+0x13e>
 8001c00:	6831      	ldr	r1, [r6, #0]
 8001c02:	680a      	ldr	r2, [r1, #0]
 8001c04:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8001c08:	2a04      	cmp	r2, #4
 8001c0a:	d00a      	beq.n	8001c22 <USBPD_PE_StateMachine_SNK+0x608>
 8001c0c:	f000 fb54 	bl	80022b8 <.text_70>
 8001c10:	b118      	cbz	r0, 8001c1a <USBPD_PE_StateMachine_SNK+0x600>
 8001c12:	f000 fbaa 	bl	800236a <.text_84>
 8001c16:	f002 ff26 	bl	8004a66 <.text_211>
 8001c1a:	f000 fb24 	bl	8002266 <.text_63>
 8001c1e:	f002 f8d9 	bl	8003dd4 <.text_164+0x6>
 8001c22:	6870      	ldr	r0, [r6, #4]
 8001c24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c26:	b11b      	cbz	r3, 8001c30 <USBPD_PE_StateMachine_SNK+0x616>
 8001c28:	7b30      	ldrb	r0, [r6, #12]
 8001c2a:	220a      	movs	r2, #10
 8001c2c:	f000 fb87 	bl	800233e <.text_80+0x4>
 8001c30:	f000 fb15 	bl	800225e <.text_62>
 8001c34:	f004 f815 	bl	8005c62 <USBPD_PRL_SRCSetSinkNG>
 8001c38:	6870      	ldr	r0, [r6, #4]
 8001c3a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c3c:	b10b      	cbz	r3, 8001c42 <USBPD_PE_StateMachine_SNK+0x628>
 8001c3e:	f000 fb45 	bl	80022cc <.text_72>
 8001c42:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8001c46:	2101      	movs	r1, #1
 8001c48:	f003 ffdf 	bl	8005c0a <USBPD_PRL_SetHeaderPowerRole>
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	9000      	str	r0, [sp, #0]
 8001c50:	2354      	movs	r3, #84	; 0x54
 8001c52:	2206      	movs	r2, #6
 8001c54:	f000 fb6d 	bl	8002332 <.text_79+0x2>
 8001c58:	b948      	cbnz	r0, 8001c6e <USBPD_PE_StateMachine_SNK+0x654>
 8001c5a:	6870      	ldr	r0, [r6, #4]
 8001c5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c5e:	b11b      	cbz	r3, 8001c68 <USBPD_PE_StateMachine_SNK+0x64e>
 8001c60:	7b30      	ldrb	r0, [r6, #12]
 8001c62:	220c      	movs	r2, #12
 8001c64:	f000 fb6b 	bl	800233e <.text_80+0x4>
 8001c68:	9805      	ldr	r0, [sp, #20]
 8001c6a:	8005      	strh	r5, [r0, #0]
 8001c6c:	2414      	movs	r4, #20
 8001c6e:	7938      	ldrb	r0, [r7, #4]
 8001c70:	2854      	cmp	r0, #84	; 0x54
 8001c72:	d014      	beq.n	8001c9e <USBPD_PE_StateMachine_SNK+0x684>
 8001c74:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8001c78:	2100      	movs	r1, #0
 8001c7a:	f003 ffc6 	bl	8005c0a <USBPD_PRL_SetHeaderPowerRole>
 8001c7e:	6870      	ldr	r0, [r6, #4]
 8001c80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00b      	beq.n	8001c9e <USBPD_PE_StateMachine_SNK+0x684>
 8001c86:	7b30      	ldrb	r0, [r6, #12]
 8001c88:	2206      	movs	r2, #6
 8001c8a:	f000 fb21 	bl	80022d0 <.text_72+0x4>
 8001c8e:	6870      	ldr	r0, [r6, #4]
 8001c90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <USBPD_PE_StateMachine_SNK+0x684>
 8001c96:	2207      	movs	r2, #7
 8001c98:	7b30      	ldrb	r0, [r6, #12]
 8001c9a:	f000 fb50 	bl	800233e <.text_80+0x4>
 8001c9e:	e4e8      	b.n	8001672 <USBPD_PE_StateMachine_SNK+0x58>
 8001ca0:	f000 faf5 	bl	800228e <.text_67>
 8001ca4:	d1fb      	bne.n	8001c9e <USBPD_PE_StateMachine_SNK+0x684>
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	4640      	mov	r0, r8
 8001caa:	f002 f98c 	bl	8003fc6 <PE_ChangePowerRole>
 8001cae:	6870      	ldr	r0, [r6, #4]
 8001cb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001cb2:	b11b      	cbz	r3, 8001cbc <USBPD_PE_StateMachine_SNK+0x6a2>
 8001cb4:	7b30      	ldrb	r0, [r6, #12]
 8001cb6:	220e      	movs	r2, #14
 8001cb8:	f000 fb0a 	bl	80022d0 <.text_72+0x4>
 8001cbc:	f000 facf 	bl	800225e <.text_62>
 8001cc0:	f003 ffd1 	bl	8005c66 <USBPD_PRL_SRCReleaseSinkNG>
 8001cc4:	4640      	mov	r0, r8
 8001cc6:	f002 fedf 	bl	8004a88 <PE_ResetDuringSwap>
 8001cca:	f000 fadc 	bl	8002286 <.text_66>
 8001cce:	f100 80c7 	bmi.w	8001e60 <USBPD_PE_StateMachine_SNK+0x846>
 8001cd2:	e0ca      	b.n	8001e6a <USBPD_PE_StateMachine_SNK+0x850>
 8001cd4:	6870      	ldr	r0, [r6, #4]
 8001cd6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001cd8:	b11b      	cbz	r3, 8001ce2 <USBPD_PE_StateMachine_SNK+0x6c8>
 8001cda:	7b30      	ldrb	r0, [r6, #12]
 8001cdc:	2202      	movs	r2, #2
 8001cde:	f000 fb2e 	bl	800233e <.text_80+0x4>
 8001ce2:	f508 7569 	add.w	r5, r8, #932	; 0x3a4
 8001ce6:	9400      	str	r4, [sp, #0]
 8001ce8:	2358      	movs	r3, #88	; 0x58
 8001cea:	782a      	ldrb	r2, [r5, #0]
 8001cec:	f000 fb21 	bl	8002332 <.text_79+0x2>
 8001cf0:	2800      	cmp	r0, #0
 8001cf2:	f040 809b 	bne.w	8001e2c <USBPD_PE_StateMachine_SNK+0x812>
 8001cf6:	8868      	ldrh	r0, [r5, #2]
 8001cf8:	8330      	strh	r0, [r6, #24]
 8001cfa:	e58a      	b.n	8001812 <USBPD_PE_StateMachine_SNK+0x1f8>
 8001cfc:	2a11      	cmp	r2, #17
 8001cfe:	bf02      	ittt	eq
 8001d00:	9905      	ldreq	r1, [sp, #20]
 8001d02:	89c9      	ldrheq	r1, [r1, #14]
 8001d04:	f411 4f70 	tsteq.w	r1, #61440	; 0xf000
 8001d08:	d155      	bne.n	8001db6 <USBPD_PE_StateMachine_SNK+0x79c>
 8001d0a:	f001 011f 	and.w	r1, r1, #31
 8001d0e:	2903      	cmp	r1, #3
 8001d10:	d006      	beq.n	8001d20 <USBPD_PE_StateMachine_SNK+0x706>
 8001d12:	2904      	cmp	r1, #4
 8001d14:	d036      	beq.n	8001d84 <USBPD_PE_StateMachine_SNK+0x76a>
 8001d16:	290c      	cmp	r1, #12
 8001d18:	d02b      	beq.n	8001d72 <USBPD_PE_StateMachine_SNK+0x758>
 8001d1a:	2910      	cmp	r1, #16
 8001d1c:	d03b      	beq.n	8001d96 <USBPD_PE_StateMachine_SNK+0x77c>
 8001d1e:	e04a      	b.n	8001db6 <USBPD_PE_StateMachine_SNK+0x79c>
 8001d20:	f000 fb68 	bl	80023f4 <.text_91>
 8001d24:	f240 3443 	movw	r4, #835	; 0x343
 8001d28:	9805      	ldr	r0, [sp, #20]
 8001d2a:	f8a0 9000 	strh.w	r9, [r0]
 8001d2e:	6870      	ldr	r0, [r6, #4]
 8001d30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d32:	b10b      	cbz	r3, 8001d38 <USBPD_PE_StateMachine_SNK+0x71e>
 8001d34:	f000 fb01 	bl	800233a <.text_80>
 8001d38:	6830      	ldr	r0, [r6, #0]
 8001d3a:	f000 fc1d 	bl	8002578 <.text_98>
 8001d3e:	d00a      	beq.n	8001d56 <USBPD_PE_StateMachine_SNK+0x73c>
 8001d40:	6802      	ldr	r2, [r0, #0]
 8001d42:	2104      	movs	r1, #4
 8001d44:	f000 fab1 	bl	80022aa <.text_69+0x4>
 8001d48:	d501      	bpl.n	8001d4e <USBPD_PE_StateMachine_SNK+0x734>
 8001d4a:	f000 fb46 	bl	80023da <.text_90>
 8001d4e:	f000 fa8a 	bl	8002266 <.text_63>
 8001d52:	f002 f83f 	bl	8003dd4 <.text_164+0x6>
 8001d56:	f000 fa96 	bl	8002286 <.text_66>
 8001d5a:	d501      	bpl.n	8001d60 <USBPD_PE_StateMachine_SNK+0x746>
 8001d5c:	f000 fb30 	bl	80023c0 <.text_89>
 8001d60:	f000 fa66 	bl	8002230 <.text_58>
 8001d64:	213a      	movs	r1, #58	; 0x3a
 8001d66:	f002 f835 	bl	8003dd4 <.text_164+0x6>
 8001d6a:	f000 fac9 	bl	8002300 <.text_75+0x6>
 8001d6e:	2059      	movs	r0, #89	; 0x59
 8001d70:	e020      	b.n	8001db4 <USBPD_PE_StateMachine_SNK+0x79a>
 8001d72:	b128      	cbz	r0, 8001d80 <USBPD_PE_StateMachine_SNK+0x766>
 8001d74:	2000      	movs	r0, #0
 8001d76:	9000      	str	r0, [sp, #0]
 8001d78:	223b      	movs	r2, #59	; 0x3b
 8001d7a:	7b31      	ldrb	r1, [r6, #12]
 8001d7c:	f002 fe74 	bl	8004a68 <.text_211+0x2>
 8001d80:	213b      	movs	r1, #59	; 0x3b
 8001d82:	e010      	b.n	8001da6 <USBPD_PE_StateMachine_SNK+0x78c>
 8001d84:	b128      	cbz	r0, 8001d92 <USBPD_PE_StateMachine_SNK+0x778>
 8001d86:	2000      	movs	r0, #0
 8001d88:	9000      	str	r0, [sp, #0]
 8001d8a:	2216      	movs	r2, #22
 8001d8c:	7b31      	ldrb	r1, [r6, #12]
 8001d8e:	f002 fe6b 	bl	8004a68 <.text_211+0x2>
 8001d92:	2116      	movs	r1, #22
 8001d94:	e007      	b.n	8001da6 <USBPD_PE_StateMachine_SNK+0x78c>
 8001d96:	b128      	cbz	r0, 8001da4 <USBPD_PE_StateMachine_SNK+0x78a>
 8001d98:	2000      	movs	r0, #0
 8001d9a:	9000      	str	r0, [sp, #0]
 8001d9c:	2217      	movs	r2, #23
 8001d9e:	7b31      	ldrb	r1, [r6, #12]
 8001da0:	f002 fe62 	bl	8004a68 <.text_211+0x2>
 8001da4:	2117      	movs	r1, #23
 8001da6:	6872      	ldr	r2, [r6, #4]
 8001da8:	7b30      	ldrb	r0, [r6, #12]
 8001daa:	f002 f812 	bl	8003dd2 <.text_164+0x4>
 8001dae:	f000 fa9b 	bl	80022e8 <.text_74>
 8001db2:	2003      	movs	r0, #3
 8001db4:	7138      	strb	r0, [r7, #4]
 8001db6:	f000 fa6a 	bl	800228e <.text_67>
 8001dba:	d136      	bne.n	8001e2a <USBPD_PE_StateMachine_SNK+0x810>
 8001dbc:	e0fa      	b.n	8001fb4 <USBPD_PE_StateMachine_SNK+0x99a>
 8001dbe:	2a11      	cmp	r2, #17
 8001dc0:	d106      	bne.n	8001dd0 <USBPD_PE_StateMachine_SNK+0x7b6>
 8001dc2:	f000 fa45 	bl	8002250 <.text_61>
 8001dc6:	d103      	bne.n	8001dd0 <USBPD_PE_StateMachine_SNK+0x7b6>
 8001dc8:	205a      	movs	r0, #90	; 0x5a
 8001dca:	7138      	strb	r0, [r7, #4]
 8001dcc:	f000 fa98 	bl	8002300 <.text_75+0x6>
 8001dd0:	f000 fa5d 	bl	800228e <.text_67>
 8001dd4:	d129      	bne.n	8001e2a <USBPD_PE_StateMachine_SNK+0x810>
 8001dd6:	6870      	ldr	r0, [r6, #4]
 8001dd8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001dda:	b11b      	cbz	r3, 8001de4 <USBPD_PE_StateMachine_SNK+0x7ca>
 8001ddc:	7b30      	ldrb	r0, [r6, #12]
 8001dde:	220f      	movs	r2, #15
 8001de0:	f000 faad 	bl	800233e <.text_80+0x4>
 8001de4:	6871      	ldr	r1, [r6, #4]
 8001de6:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8001de8:	2800      	cmp	r0, #0
 8001dea:	f43f acf1 	beq.w	80017d0 <USBPD_PE_StateMachine_SNK+0x1b6>
 8001dee:	e5d9      	b.n	80019a4 <USBPD_PE_StateMachine_SNK+0x38a>
 8001df0:	6870      	ldr	r0, [r6, #4]
 8001df2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001df4:	b143      	cbz	r3, 8001e08 <USBPD_PE_StateMachine_SNK+0x7ee>
 8001df6:	7b30      	ldrb	r0, [r6, #12]
 8001df8:	220a      	movs	r2, #10
 8001dfa:	f000 faa0 	bl	800233e <.text_80+0x4>
 8001dfe:	6870      	ldr	r0, [r6, #4]
 8001e00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e02:	b10b      	cbz	r3, 8001e08 <USBPD_PE_StateMachine_SNK+0x7ee>
 8001e04:	f000 fa62 	bl	80022cc <.text_72>
 8001e08:	2000      	movs	r0, #0
 8001e0a:	9000      	str	r0, [sp, #0]
 8001e0c:	235b      	movs	r3, #91	; 0x5b
 8001e0e:	2206      	movs	r2, #6
 8001e10:	f000 fa8f 	bl	8002332 <.text_79+0x2>
 8001e14:	b950      	cbnz	r0, 8001e2c <USBPD_PE_StateMachine_SNK+0x812>
 8001e16:	6870      	ldr	r0, [r6, #4]
 8001e18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e1a:	b11b      	cbz	r3, 8001e24 <USBPD_PE_StateMachine_SNK+0x80a>
 8001e1c:	7b30      	ldrb	r0, [r6, #12]
 8001e1e:	220c      	movs	r2, #12
 8001e20:	f000 fa8d 	bl	800233e <.text_80+0x4>
 8001e24:	9805      	ldr	r0, [sp, #20]
 8001e26:	8005      	strh	r5, [r0, #0]
 8001e28:	2414      	movs	r4, #20
 8001e2a:	e422      	b.n	8001672 <USBPD_PE_StateMachine_SNK+0x58>
 8001e2c:	6870      	ldr	r0, [r6, #4]
 8001e2e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0fa      	beq.n	8001e2a <USBPD_PE_StateMachine_SNK+0x810>
 8001e34:	220f      	movs	r2, #15
 8001e36:	e72f      	b.n	8001c98 <USBPD_PE_StateMachine_SNK+0x67e>
 8001e38:	f000 fa29 	bl	800228e <.text_67>
 8001e3c:	d1f5      	bne.n	8001e2a <USBPD_PE_StateMachine_SNK+0x810>
 8001e3e:	2101      	movs	r1, #1
 8001e40:	4640      	mov	r0, r8
 8001e42:	f002 f8c0 	bl	8003fc6 <PE_ChangePowerRole>
 8001e46:	4640      	mov	r0, r8
 8001e48:	f002 fe1e 	bl	8004a88 <PE_ResetDuringSwap>
 8001e4c:	6870      	ldr	r0, [r6, #4]
 8001e4e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e50:	b11b      	cbz	r3, 8001e5a <USBPD_PE_StateMachine_SNK+0x840>
 8001e52:	7b30      	ldrb	r0, [r6, #12]
 8001e54:	220e      	movs	r2, #14
 8001e56:	f000 fa3b 	bl	80022d0 <.text_72+0x4>
 8001e5a:	f000 fa14 	bl	8002286 <.text_66>
 8001e5e:	d504      	bpl.n	8001e6a <USBPD_PE_StateMachine_SNK+0x850>
 8001e60:	f000 faa5 	bl	80023ae <.text_88>
 8001e64:	2215      	movs	r2, #21
 8001e66:	f002 fcf9 	bl	800485c <.text_203+0x2>
 8001e6a:	2115      	movs	r1, #21
 8001e6c:	e5dc      	b.n	8001a28 <USBPD_PE_StateMachine_SNK+0x40e>
 8001e6e:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8001e72:	7b30      	ldrb	r0, [r6, #12]
 8001e74:	f8dc 5014 	ldr.w	r5, [ip, #20]
 8001e78:	ab07      	add	r3, sp, #28
 8001e7a:	aa09      	add	r2, sp, #36	; 0x24
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	f000 0001 	and.w	r0, r0, #1
 8001e82:	47a8      	blx	r5
 8001e84:	9a07      	ldr	r2, [sp, #28]
 8001e86:	f003 fbf5 	bl	8005674 <.text_248>
 8001e8a:	ab09      	add	r3, sp, #36	; 0x24
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4640      	mov	r0, r8
 8001e92:	f000 ffe9 	bl	8002e68 <PE_Send_DataMessage>
 8001e96:	e7c8      	b.n	8001e2a <USBPD_PE_StateMachine_SNK+0x810>
 8001e98:	f7ff fa94 	bl	80013c4 <.text_43>
 8001e9c:	f508 7367 	add.w	r3, r8, #924	; 0x39c
 8001ea0:	2206      	movs	r2, #6
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4640      	mov	r0, r8
 8001ea6:	f000 ffdf 	bl	8002e68 <PE_Send_DataMessage>
 8001eaa:	2800      	cmp	r0, #0
 8001eac:	d1bd      	bne.n	8001e2a <USBPD_PE_StateMachine_SNK+0x810>
 8001eae:	f000 f9ea 	bl	8002286 <.text_66>
 8001eb2:	d504      	bpl.n	8001ebe <USBPD_PE_StateMachine_SNK+0x8a4>
 8001eb4:	f000 fa7b 	bl	80023ae <.text_88>
 8001eb8:	225d      	movs	r2, #93	; 0x5d
 8001eba:	f002 fccf 	bl	800485c <.text_203+0x2>
 8001ebe:	215d      	movs	r1, #93	; 0x5d
 8001ec0:	e5b2      	b.n	8001a28 <USBPD_PE_StateMachine_SNK+0x40e>
 8001ec2:	9400      	str	r4, [sp, #0]
 8001ec4:	2366      	movs	r3, #102	; 0x66
 8001ec6:	2214      	movs	r2, #20
 8001ec8:	f000 fa33 	bl	8002332 <.text_79+0x2>
 8001ecc:	2800      	cmp	r0, #0
 8001ece:	d1ac      	bne.n	8001e2a <USBPD_PE_StateMachine_SNK+0x810>
 8001ed0:	9805      	ldr	r0, [sp, #20]
 8001ed2:	f8a0 b000 	strh.w	fp, [r0]
 8001ed6:	241b      	movs	r4, #27
 8001ed8:	f000 f9d5 	bl	8002286 <.text_66>
 8001edc:	d504      	bpl.n	8001ee8 <USBPD_PE_StateMachine_SNK+0x8ce>
 8001ede:	f000 fa66 	bl	80023ae <.text_88>
 8001ee2:	224a      	movs	r2, #74	; 0x4a
 8001ee4:	f002 fcba 	bl	800485c <.text_203+0x2>
 8001ee8:	f000 f9a2 	bl	8002230 <.text_58>
 8001eec:	214a      	movs	r1, #74	; 0x4a
 8001eee:	f001 ff71 	bl	8003dd4 <.text_164+0x6>
 8001ef2:	200b      	movs	r0, #11
 8001ef4:	8330      	strh	r0, [r6, #24]
 8001ef6:	e798      	b.n	8001e2a <USBPD_PE_StateMachine_SNK+0x810>
 8001ef8:	2a11      	cmp	r2, #17
 8001efa:	d121      	bne.n	8001f40 <USBPD_PE_StateMachine_SNK+0x926>
 8001efc:	9905      	ldr	r1, [sp, #20]
 8001efe:	89c9      	ldrh	r1, [r1, #14]
 8001f00:	0bc8      	lsrs	r0, r1, #15
 8001f02:	d01d      	beq.n	8001f40 <USBPD_PE_StateMachine_SNK+0x926>
 8001f04:	f001 011f 	and.w	r1, r1, #31
 8001f08:	290c      	cmp	r1, #12
 8001f0a:	d119      	bne.n	8001f40 <USBPD_PE_StateMachine_SNK+0x926>
 8001f0c:	6874      	ldr	r4, [r6, #4]
 8001f0e:	7b30      	ldrb	r0, [r6, #12]
 8001f10:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8001f14:	2304      	movs	r3, #4
 8001f16:	f508 72a2 	add.w	r2, r8, #324	; 0x144
 8001f1a:	210a      	movs	r1, #10
 8001f1c:	f000 0001 	and.w	r0, r0, #1
 8001f20:	47e0      	blx	ip
 8001f22:	f000 f9ea 	bl	80022fa <.text_75>
 8001f26:	f000 f9ae 	bl	8002286 <.text_66>
 8001f2a:	d504      	bpl.n	8001f36 <USBPD_PE_StateMachine_SNK+0x91c>
 8001f2c:	f000 f9d4 	bl	80022d8 <.text_73>
 8001f30:	224b      	movs	r2, #75	; 0x4b
 8001f32:	f002 fc93 	bl	800485c <.text_203+0x2>
 8001f36:	f000 f97b 	bl	8002230 <.text_58>
 8001f3a:	214b      	movs	r1, #75	; 0x4b
 8001f3c:	f001 ff4a 	bl	8003dd4 <.text_164+0x6>
 8001f40:	f000 f9a5 	bl	800228e <.text_67>
 8001f44:	d146      	bne.n	8001fd4 <USBPD_PE_StateMachine_SNK+0x9ba>
 8001f46:	2203      	movs	r2, #3
 8001f48:	713a      	strb	r2, [r7, #4]
 8001f4a:	e5c1      	b.n	8001ad0 <USBPD_PE_StateMachine_SNK+0x4b6>
 8001f4c:	f508 7569 	add.w	r5, r8, #932	; 0x3a4
 8001f50:	9400      	str	r4, [sp, #0]
 8001f52:	2339      	movs	r3, #57	; 0x39
 8001f54:	782a      	ldrb	r2, [r5, #0]
 8001f56:	f000 f9ec 	bl	8002332 <.text_79+0x2>
 8001f5a:	2800      	cmp	r0, #0
 8001f5c:	d11b      	bne.n	8001f96 <USBPD_PE_StateMachine_SNK+0x97c>
 8001f5e:	8868      	ldrh	r0, [r5, #2]
 8001f60:	8330      	strh	r0, [r6, #24]
 8001f62:	f000 fa56 	bl	8002412 <.text_93>
 8001f66:	d008      	beq.n	8001f7a <USBPD_PE_StateMachine_SNK+0x960>
 8001f68:	f000 f99d 	bl	80022a6 <.text_69>
 8001f6c:	d501      	bpl.n	8001f72 <USBPD_PE_StateMachine_SNK+0x958>
 8001f6e:	f000 fa12 	bl	8002396 <.text_87>
 8001f72:	f000 f978 	bl	8002266 <.text_63>
 8001f76:	f001 ff2d 	bl	8003dd4 <.text_164+0x6>
 8001f7a:	f000 f984 	bl	8002286 <.text_66>
 8001f7e:	d504      	bpl.n	8001f8a <USBPD_PE_StateMachine_SNK+0x970>
 8001f80:	f000 fa01 	bl	8002386 <.text_86>
 8001f84:	2244      	movs	r2, #68	; 0x44
 8001f86:	f002 fd6f 	bl	8004a68 <.text_211+0x2>
 8001f8a:	f000 f951 	bl	8002230 <.text_58>
 8001f8e:	2144      	movs	r1, #68	; 0x44
 8001f90:	f001 ff20 	bl	8003dd4 <.text_164+0x6>
 8001f94:	e43d      	b.n	8001812 <USBPD_PE_StateMachine_SNK+0x1f8>
 8001f96:	f000 fa3c 	bl	8002412 <.text_93>
 8001f9a:	d00e      	beq.n	8001fba <USBPD_PE_StateMachine_SNK+0x9a0>
 8001f9c:	f000 f983 	bl	80022a6 <.text_69>
 8001fa0:	d501      	bpl.n	8001fa6 <USBPD_PE_StateMachine_SNK+0x98c>
 8001fa2:	f000 fa1a 	bl	80023da <.text_90>
 8001fa6:	215a      	movs	r1, #90	; 0x5a
 8001fa8:	e53e      	b.n	8001a28 <USBPD_PE_StateMachine_SNK+0x40e>
 8001faa:	f000 f970 	bl	800228e <.text_67>
 8001fae:	bf08      	it	eq
 8001fb0:	2a14      	cmpeq	r2, #20
 8001fb2:	d101      	bne.n	8001fb8 <USBPD_PE_StateMachine_SNK+0x99e>
 8001fb4:	2003      	movs	r0, #3
 8001fb6:	e5c0      	b.n	8001b3a <USBPD_PE_StateMachine_SNK+0x520>
 8001fb8:	2a14      	cmp	r2, #20
 8001fba:	f43f ab5a 	beq.w	8001672 <USBPD_PE_StateMachine_SNK+0x58>
 8001fbe:	89c0      	ldrh	r0, [r0, #14]
 8001fc0:	0bc0      	lsrs	r0, r0, #15
 8001fc2:	d004      	beq.n	8001fce <USBPD_PE_StateMachine_SNK+0x9b4>
 8001fc4:	4640      	mov	r0, r8
 8001fc6:	f002 fb37 	bl	8004638 <PE_Check_ExtendedMessage>
 8001fca:	f000 f999 	bl	8002300 <.text_75+0x6>
 8001fce:	f000 f939 	bl	8002244 <.text_60>
 8001fd2:	2910      	cmp	r1, #16
 8001fd4:	f47f ab4d 	bne.w	8001672 <USBPD_PE_StateMachine_SNK+0x58>
 8001fd8:	f000 f992 	bl	8002300 <.text_75+0x6>
 8001fdc:	e7ea      	b.n	8001fb4 <USBPD_PE_StateMachine_SNK+0x99a>
 8001fde:	4640      	mov	r0, r8
 8001fe0:	f002 ff85 	bl	8004eee <PE_SubStateMachine_ExtendedMessages>
 8001fe4:	e5a4      	b.n	8001b30 <USBPD_PE_StateMachine_SNK+0x516>
 8001fe6:	a903      	add	r1, sp, #12
 8001fe8:	4640      	mov	r0, r8
 8001fea:	f003 f883 	bl	80050f4 <PE_SubStateMachine_Generic>
 8001fee:	e59f      	b.n	8001b30 <USBPD_PE_StateMachine_SNK+0x516>
 8001ff0:	a903      	add	r1, sp, #12
 8001ff2:	4640      	mov	r0, r8
 8001ff4:	f003 fbeb 	bl	80057ce <PE_SubStateMachine_VconnSwap>
 8001ff8:	e59a      	b.n	8001b30 <USBPD_PE_StateMachine_SNK+0x516>
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4640      	mov	r0, r8
 8001ffe:	f001 ff8c 	bl	8003f1a <PE_StateMachine_UVDM>
 8002002:	e595      	b.n	8001b30 <USBPD_PE_StateMachine_SNK+0x516>
 8002004:	78b8      	ldrb	r0, [r7, #2]
 8002006:	2800      	cmp	r0, #0
 8002008:	bf1e      	ittt	ne
 800200a:	68f1      	ldrne	r1, [r6, #12]
 800200c:	f3c1 3000 	ubfxne	r0, r1, #12, #1
 8002010:	2800      	cmpne	r0, #0
 8002012:	d01a      	beq.n	800204a <USBPD_PE_StateMachine_SNK+0xa30>
 8002014:	f3c1 3040 	ubfx	r0, r1, #13, #1
 8002018:	b1a0      	cbz	r0, 8002044 <USBPD_PE_StateMachine_SNK+0xa2a>
 800201a:	9804      	ldr	r0, [sp, #16]
 800201c:	7802      	ldrb	r2, [r0, #0]
 800201e:	0793      	lsls	r3, r2, #30
 8002020:	d507      	bpl.n	8002032 <USBPD_PE_StateMachine_SNK+0xa18>
 8002022:	9c04      	ldr	r4, [sp, #16]
 8002024:	f000 f99d 	bl	8002362 <.text_83>
 8002028:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800202c:	225b      	movs	r2, #91	; 0x5b
 800202e:	f002 fd1b 	bl	8004a68 <.text_211+0x2>
 8002032:	f000 f8fd 	bl	8002230 <.text_58>
 8002036:	215b      	movs	r1, #91	; 0x5b
 8002038:	f001 fecc 	bl	8003dd4 <.text_164+0x6>
 800203c:	68f0      	ldr	r0, [r6, #12]
 800203e:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8002042:	60f0      	str	r0, [r6, #12]
 8002044:	2103      	movs	r1, #3
 8002046:	7139      	strb	r1, [r7, #4]
 8002048:	2401      	movs	r4, #1
 800204a:	68f0      	ldr	r0, [r6, #12]
 800204c:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8002050:	60f0      	str	r0, [r6, #12]
 8002052:	f7ff bb38 	b.w	80016c6 <USBPD_PE_StateMachine_SNK+0xac>
 8002056:	f88d 700d 	strb.w	r7, [sp, #13]
 800205a:	9606      	str	r6, [sp, #24]
 800205c:	9408      	str	r4, [sp, #32]
 800205e:	f108 0604 	add.w	r6, r8, #4
 8002062:	f208 377b 	addw	r7, r8, #891	; 0x37b
 8002066:	f248 3943 	movw	r9, #33603	; 0x8343
 800206a:	f248 1af4 	movw	sl, #33268	; 0x81f4
 800206e:	f248 0b1b 	movw	fp, #32795	; 0x801b
 8002072:	6830      	ldr	r0, [r6, #0]
 8002074:	f000 fec4 	bl	8002e00 <.text_131+0x2>
 8002078:	f43f ab48 	beq.w	800170c <USBPD_PE_StateMachine_SNK+0xf2>
 800207c:	783a      	ldrb	r2, [r7, #0]
 800207e:	2402      	movs	r4, #2
 8002080:	2a0f      	cmp	r2, #15
 8002082:	d10d      	bne.n	80020a0 <USBPD_PE_StateMachine_SNK+0xa86>
 8002084:	2000      	movs	r0, #0
 8002086:	7038      	strb	r0, [r7, #0]
 8002088:	713a      	strb	r2, [r7, #4]
 800208a:	f000 f8f1 	bl	8002270 <.text_64>
 800208e:	d007      	beq.n	80020a0 <USBPD_PE_StateMachine_SNK+0xa86>
 8002090:	7801      	ldrb	r1, [r0, #0]
 8002092:	07cb      	lsls	r3, r1, #31
 8002094:	d504      	bpl.n	80020a0 <USBPD_PE_StateMachine_SNK+0xa86>
 8002096:	7978      	ldrb	r0, [r7, #5]
 8002098:	4290      	cmp	r0, r2
 800209a:	d001      	beq.n	80020a0 <USBPD_PE_StateMachine_SNK+0xa86>
 800209c:	f000 f96a 	bl	8002374 <.text_85>
 80020a0:	9906      	ldr	r1, [sp, #24]
 80020a2:	b121      	cbz	r1, 80020ae <USBPD_PE_StateMachine_SNK+0xa94>
 80020a4:	f000 f8f8 	bl	8002298 <.text_68>
 80020a8:	bf04      	itt	eq
 80020aa:	2001      	moveq	r0, #1
 80020ac:	9008      	streq	r0, [sp, #32]
 80020ae:	9a04      	ldr	r2, [sp, #16]
 80020b0:	9804      	ldr	r0, [sp, #16]
 80020b2:	7939      	ldrb	r1, [r7, #4]
 80020b4:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 80020b8:	7800      	ldrb	r0, [r0, #0]
 80020ba:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80020be:	000b      	movs	r3, r1
 80020c0:	f000 0002 	and.w	r0, r0, #2
 80020c4:	f248 0514 	movw	r5, #32788	; 0x8014
 80020c8:	f000 809b 	beq.w	8002202 <USBPD_PE_StateMachine_SNK+0xbe8>
 80020cc:	1e4b      	subs	r3, r1, #1
 80020ce:	d08a      	beq.n	8001fe6 <USBPD_PE_StateMachine_SNK+0x9cc>
 80020d0:	1e9b      	subs	r3, r3, #2
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	f67f ad0a 	bls.w	8001aec <USBPD_PE_StateMachine_SNK+0x4d2>
 80020d8:	1e9b      	subs	r3, r3, #2
 80020da:	f43f abd9 	beq.w	8001890 <USBPD_PE_StateMachine_SNK+0x276>
 80020de:	3b0a      	subs	r3, #10
 80020e0:	f43f abdb 	beq.w	800189a <USBPD_PE_StateMachine_SNK+0x280>
 80020e4:	1e5b      	subs	r3, r3, #1
 80020e6:	f43f ac8d 	beq.w	8001a04 <USBPD_PE_StateMachine_SNK+0x3ea>
 80020ea:	1e5b      	subs	r3, r3, #1
 80020ec:	f43f aca1 	beq.w	8001a32 <USBPD_PE_StateMachine_SNK+0x418>
 80020f0:	1fdb      	subs	r3, r3, #7
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d972      	bls.n	80021dc <USBPD_PE_StateMachine_SNK+0xbc2>
 80020f6:	1e9b      	subs	r3, r3, #2
 80020f8:	f43f acc2 	beq.w	8001a80 <USBPD_PE_StateMachine_SNK+0x466>
 80020fc:	1edb      	subs	r3, r3, #3
 80020fe:	d0e6      	beq.n	80020ce <USBPD_PE_StateMachine_SNK+0xab4>
 8002100:	1e5b      	subs	r3, r3, #1
 8002102:	f43f ade7 	beq.w	8001cd4 <USBPD_PE_StateMachine_SNK+0x6ba>
 8002106:	1f1b      	subs	r3, r3, #4
 8002108:	f43f ad13 	beq.w	8001b32 <USBPD_PE_StateMachine_SNK+0x518>
 800210c:	1f5b      	subs	r3, r3, #5
 800210e:	2b02      	cmp	r3, #2
 8002110:	d964      	bls.n	80021dc <USBPD_PE_StateMachine_SNK+0xbc2>
 8002112:	1edb      	subs	r3, r3, #3
 8002114:	f43f acdf 	beq.w	8001ad6 <USBPD_PE_StateMachine_SNK+0x4bc>
 8002118:	1e5b      	subs	r3, r3, #1
 800211a:	f43f aebd 	beq.w	8001e98 <USBPD_PE_StateMachine_SNK+0x87e>
 800211e:	1e5b      	subs	r3, r3, #1
 8002120:	d0d5      	beq.n	80020ce <USBPD_PE_StateMachine_SNK+0xab4>
 8002122:	1e9b      	subs	r3, r3, #2
 8002124:	f43f af12 	beq.w	8001f4c <USBPD_PE_StateMachine_SNK+0x932>
 8002128:	1e5b      	subs	r3, r3, #1
 800212a:	2b01      	cmp	r3, #1
 800212c:	d956      	bls.n	80021dc <USBPD_PE_StateMachine_SNK+0xbc2>
 800212e:	1e9b      	subs	r3, r3, #2
 8002130:	d001      	beq.n	8002136 <USBPD_PE_StateMachine_SNK+0xb1c>
 8002132:	1e9b      	subs	r3, r3, #2
 8002134:	2b05      	cmp	r3, #5
 8002136:	f67f af52 	bls.w	8001fde <USBPD_PE_StateMachine_SNK+0x9c4>
 800213a:	1f9b      	subs	r3, r3, #6
 800213c:	f43f af35 	beq.w	8001faa <USBPD_PE_StateMachine_SNK+0x990>
 8002140:	1e5b      	subs	r3, r3, #1
 8002142:	2b03      	cmp	r3, #3
 8002144:	d94a      	bls.n	80021dc <USBPD_PE_StateMachine_SNK+0xbc2>
 8002146:	1f1b      	subs	r3, r3, #4
 8002148:	f43f aaeb 	beq.w	8001722 <USBPD_PE_StateMachine_SNK+0x108>
 800214c:	1e5b      	subs	r3, r3, #1
 800214e:	f43f abe6 	beq.w	800191e <USBPD_PE_StateMachine_SNK+0x304>
 8002152:	1e5b      	subs	r3, r3, #1
 8002154:	f43f ac29 	beq.w	80019aa <USBPD_PE_StateMachine_SNK+0x390>
 8002158:	1e5b      	subs	r3, r3, #1
 800215a:	f43f aa8a 	beq.w	8001672 <USBPD_PE_StateMachine_SNK+0x58>
 800215e:	1e9b      	subs	r3, r3, #2
 8002160:	f43f aafc 	beq.w	800175c <USBPD_PE_StateMachine_SNK+0x142>
 8002164:	1e5b      	subs	r3, r3, #1
 8002166:	f43f ab37 	beq.w	80017d8 <USBPD_PE_StateMachine_SNK+0x1be>
 800216a:	1e5b      	subs	r3, r3, #1
 800216c:	f43f ab46 	beq.w	80017fc <USBPD_PE_StateMachine_SNK+0x1e2>
 8002170:	1e5b      	subs	r3, r3, #1
 8002172:	f43f ab53 	beq.w	800181c <USBPD_PE_StateMachine_SNK+0x202>
 8002176:	1e5b      	subs	r3, r3, #1
 8002178:	f43f ab55 	beq.w	8001826 <USBPD_PE_StateMachine_SNK+0x20c>
 800217c:	1e9b      	subs	r3, r3, #2
 800217e:	d0a9      	beq.n	80020d4 <USBPD_PE_StateMachine_SNK+0xaba>
 8002180:	1edb      	subs	r3, r3, #3
 8002182:	f43f ae74 	beq.w	8001e6e <USBPD_PE_StateMachine_SNK+0x854>
 8002186:	1f1b      	subs	r3, r3, #4
 8002188:	f43f ac6e 	beq.w	8001a68 <USBPD_PE_StateMachine_SNK+0x44e>
 800218c:	1e9b      	subs	r3, r3, #2
 800218e:	f43f ad1d 	beq.w	8001bcc <USBPD_PE_StateMachine_SNK+0x5b2>
 8002192:	1e5b      	subs	r3, r3, #1
 8002194:	f43f ad34 	beq.w	8001c00 <USBPD_PE_StateMachine_SNK+0x5e6>
 8002198:	1e5b      	subs	r3, r3, #1
 800219a:	f43f ad81 	beq.w	8001ca0 <USBPD_PE_StateMachine_SNK+0x686>
 800219e:	1f1b      	subs	r3, r3, #4
 80021a0:	f43f adac 	beq.w	8001cfc <USBPD_PE_StateMachine_SNK+0x6e2>
 80021a4:	1e5b      	subs	r3, r3, #1
 80021a6:	f43f ae0a 	beq.w	8001dbe <USBPD_PE_StateMachine_SNK+0x7a4>
 80021aa:	1e5b      	subs	r3, r3, #1
 80021ac:	f43f ae20 	beq.w	8001df0 <USBPD_PE_StateMachine_SNK+0x7d6>
 80021b0:	1e5b      	subs	r3, r3, #1
 80021b2:	f43f ae41 	beq.w	8001e38 <USBPD_PE_StateMachine_SNK+0x81e>
 80021b6:	1fdb      	subs	r3, r3, #7
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d90f      	bls.n	80021dc <USBPD_PE_StateMachine_SNK+0xbc2>
 80021bc:	1edb      	subs	r3, r3, #3
 80021be:	f43f ae80 	beq.w	8001ec2 <USBPD_PE_StateMachine_SNK+0x8a8>
 80021c2:	1e5b      	subs	r3, r3, #1
 80021c4:	f43f ae98 	beq.w	8001ef8 <USBPD_PE_StateMachine_SNK+0x8de>
 80021c8:	3b0e      	subs	r3, #14
 80021ca:	d007      	beq.n	80021dc <USBPD_PE_StateMachine_SNK+0xbc2>
 80021cc:	3b12      	subs	r3, #18
 80021ce:	f43f af14 	beq.w	8001ffa <USBPD_PE_StateMachine_SNK+0x9e0>
 80021d2:	3b0c      	subs	r3, #12
 80021d4:	f43f aa9c 	beq.w	8001710 <USBPD_PE_StateMachine_SNK+0xf6>
 80021d8:	1e5b      	subs	r3, r3, #1
 80021da:	2b02      	cmp	r3, #2
 80021dc:	f67f af03 	bls.w	8001fe6 <USBPD_PE_StateMachine_SNK+0x9cc>
 80021e0:	1f5b      	subs	r3, r3, #5
 80021e2:	f43f ac5f 	beq.w	8001aa4 <USBPD_PE_StateMachine_SNK+0x48a>
 80021e6:	1e5b      	subs	r3, r3, #1
 80021e8:	d0f8      	beq.n	80021dc <USBPD_PE_StateMachine_SNK+0xbc2>
 80021ea:	1e5b      	subs	r3, r3, #1
 80021ec:	f43f ab50 	beq.w	8001890 <USBPD_PE_StateMachine_SNK+0x276>
 80021f0:	1e5b      	subs	r3, r3, #1
 80021f2:	f43f abaf 	beq.w	8001954 <USBPD_PE_StateMachine_SNK+0x33a>
 80021f6:	1e5b      	subs	r3, r3, #1
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	f67f aef9 	bls.w	8001ff0 <USBPD_PE_StateMachine_SNK+0x9d6>
 80021fe:	f7ff ba33 	b.w	8001668 <USBPD_PE_StateMachine_SNK+0x4e>
 8002202:	6831      	ldr	r1, [r6, #0]
 8002204:	680a      	ldr	r2, [r1, #0]
 8002206:	f022 0210 	bic.w	r2, r2, #16
 800220a:	600a      	str	r2, [r1, #0]
 800220c:	b120      	cbz	r0, 8002218 <USBPD_PE_StateMachine_SNK+0xbfe>
 800220e:	f000 f8ac 	bl	800236a <.text_84>
 8002212:	225f      	movs	r2, #95	; 0x5f
 8002214:	f002 fc28 	bl	8004a68 <.text_211+0x2>
 8002218:	f000 f80a 	bl	8002230 <.text_58>
 800221c:	215f      	movs	r1, #95	; 0x5f
 800221e:	f001 fdd9 	bl	8003dd4 <.text_164+0x6>
 8002222:	f7ff ba7b 	b.w	800171c <USBPD_PE_StateMachine_SNK+0x102>
	...

08002228 <.text_56>:
 8002228:	200000d0 	.word	0x200000d0

0800222c <.text_57>:
 800222c:	b5e8b5cd 	.word	0xb5e8b5cd

08002230 <.text_58>:
 8002230:	6872      	ldr	r2, [r6, #4]
 8002232:	7b30      	ldrb	r0, [r6, #12]
 8002234:	68d3      	ldr	r3, [r2, #12]
 8002236:	4770      	bx	lr

08002238 <.text_59>:
 8002238:	6830      	ldr	r0, [r6, #0]
 800223a:	6801      	ldr	r1, [r0, #0]
 800223c:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8002240:	2800      	cmp	r0, #0
 8002242:	4770      	bx	lr

08002244 <.text_60>:
 8002244:	9805      	ldr	r0, [sp, #20]
 8002246:	89c1      	ldrh	r1, [r0, #14]
 8002248:	f24f 021f 	movw	r2, #61471	; 0xf01f
 800224c:	4011      	ands	r1, r2
 800224e:	4770      	bx	lr

08002250 <.text_61>:
 8002250:	9805      	ldr	r0, [sp, #20]
 8002252:	89c1      	ldrh	r1, [r0, #14]
 8002254:	f24f 021f 	movw	r2, #61471	; 0xf01f
 8002258:	4011      	ands	r1, r2
 800225a:	2906      	cmp	r1, #6
 800225c:	4770      	bx	lr

0800225e <.text_62>:
 800225e:	7b30      	ldrb	r0, [r6, #12]
 8002260:	f000 0001 	and.w	r0, r0, #1
 8002264:	4770      	bx	lr

08002266 <.text_63>:
 8002266:	6872      	ldr	r2, [r6, #4]
 8002268:	7b30      	ldrb	r0, [r6, #12]
 800226a:	68d3      	ldr	r3, [r2, #12]
 800226c:	215a      	movs	r1, #90	; 0x5a
 800226e:	4770      	bx	lr

08002270 <.text_64>:
 8002270:	9804      	ldr	r0, [sp, #16]
 8002272:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8002276:	f1bc 0f00 	cmp.w	ip, #0
 800227a:	4770      	bx	lr

0800227c <.text_65>:
 800227c:	8330      	strh	r0, [r6, #24]
 800227e:	241b      	movs	r4, #27
 8002280:	9805      	ldr	r0, [sp, #20]
 8002282:	f8a0 b000 	strh.w	fp, [r0]

08002286 <.text_66>:
 8002286:	9804      	ldr	r0, [sp, #16]
 8002288:	7801      	ldrb	r1, [r0, #0]
 800228a:	078a      	lsls	r2, r1, #30
 800228c:	4770      	bx	lr

0800228e <.text_67>:
 800228e:	9805      	ldr	r0, [sp, #20]
 8002290:	8801      	ldrh	r1, [r0, #0]
 8002292:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002296:	4770      	bx	lr

08002298 <.text_68>:
 8002298:	2207      	movs	r2, #7
 800229a:	fbb1 f2f2 	udiv	r2, r1, r2
 800229e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80022a2:	1a88      	subs	r0, r1, r2
 80022a4:	4770      	bx	lr

080022a6 <.text_69>:
 80022a6:	6802      	ldr	r2, [r0, #0]
 80022a8:	2103      	movs	r1, #3
 80022aa:	f361 220a 	bfi	r2, r1, #8, #3
 80022ae:	6002      	str	r2, [r0, #0]
 80022b0:	9804      	ldr	r0, [sp, #16]
 80022b2:	7801      	ldrb	r1, [r0, #0]
 80022b4:	078a      	lsls	r2, r1, #30
 80022b6:	4770      	bx	lr

080022b8 <.text_70>:
 80022b8:	680b      	ldr	r3, [r1, #0]
 80022ba:	2204      	movs	r2, #4
 80022bc:	f362 230a 	bfi	r3, r2, #8, #3
 80022c0:	600b      	str	r3, [r1, #0]
 80022c2:	4770      	bx	lr

080022c4 <.text_71>:
 80022c4:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80022c8:	f003 bede 	b.w	8006088 <USBPD_PRL_EnableRX>

080022cc <.text_72>:
 80022cc:	7b30      	ldrb	r0, [r6, #12]
 80022ce:	220b      	movs	r2, #11
 80022d0:	2101      	movs	r1, #1
 80022d2:	f000 0001 	and.w	r0, r0, #1

080022d6 <__iar_annotation$$tailcall>:
 80022d6:	4718      	bx	r3

080022d8 <.text_73>:
 80022d8:	f8dd c010 	ldr.w	ip, [sp, #16]
 80022dc:	9400      	str	r4, [sp, #0]
 80022de:	2300      	movs	r3, #0
 80022e0:	7b31      	ldrb	r1, [r6, #12]
 80022e2:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80022e6:	4770      	bx	lr

080022e8 <.text_74>:
 80022e8:	2014      	movs	r0, #20
 80022ea:	f88d 000c 	strb.w	r0, [sp, #12]
 80022ee:	2400      	movs	r4, #0
 80022f0:	7b30      	ldrb	r0, [r6, #12]
 80022f2:	f000 0001 	and.w	r0, r0, #1
 80022f6:	f003 bec7 	b.w	8006088 <USBPD_PRL_EnableRX>

080022fa <.text_75>:
 80022fa:	2003      	movs	r0, #3
 80022fc:	7138      	strb	r0, [r7, #4]
 80022fe:	2400      	movs	r4, #0
 8002300:	2014      	movs	r0, #20
 8002302:	f88d 000c 	strb.w	r0, [sp, #12]
 8002306:	7b30      	ldrb	r0, [r6, #12]
 8002308:	f000 0001 	and.w	r0, r0, #1
 800230c:	f003 bebc 	b.w	8006088 <USBPD_PRL_EnableRX>

08002310 <.text_76>:
 8002310:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002314:	2101      	movs	r1, #1
 8002316:	f002 bad1 	b.w	80048bc <PE_Reset>

0800231a <.text_77>:
 800231a:	7b30      	ldrb	r0, [r6, #12]
 800231c:	2206      	movs	r2, #6
 800231e:	2100      	movs	r1, #0
 8002320:	f000 0001 	and.w	r0, r0, #1

08002324 <__iar_annotation$$tailcall>:
 8002324:	4718      	bx	r3

08002326 <.text_78>:
 8002326:	7b30      	ldrb	r0, [r6, #12]
 8002328:	2100      	movs	r1, #0
 800232a:	f000 0001 	and.w	r0, r0, #1

0800232e <__iar_annotation$$tailcall>:
 800232e:	4710      	bx	r2

08002330 <.text_79>:
 8002330:	2203      	movs	r2, #3
 8002332:	2100      	movs	r1, #0
 8002334:	4640      	mov	r0, r8
 8002336:	f000 bd68 	b.w	8002e0a <PE_Send_CtrlMessage>

0800233a <.text_80>:
 800233a:	7b30      	ldrb	r0, [r6, #12]
 800233c:	2206      	movs	r2, #6
 800233e:	2100      	movs	r1, #0
 8002340:	f000 0001 	and.w	r0, r0, #1

08002344 <__iar_annotation$$tailcall>:
 8002344:	4718      	bx	r3

08002346 <.text_81>:
 8002346:	6901      	ldr	r1, [r0, #16]
 8002348:	6902      	ldr	r2, [r0, #16]
 800234a:	0bc9      	lsrs	r1, r1, #15
 800234c:	1c49      	adds	r1, r1, #1
 800234e:	f361 32df 	bfi	r2, r1, #15, #17
 8002352:	6102      	str	r2, [r0, #16]
 8002354:	4770      	bx	lr

08002356 <.text_82>:
 8002356:	2000      	movs	r0, #0
 8002358:	9000      	str	r0, [sp, #0]
 800235a:	2303      	movs	r3, #3
 800235c:	220c      	movs	r2, #12
 800235e:	2100      	movs	r1, #0
 8002360:	4770      	bx	lr

08002362 <.text_83>:
 8002362:	2000      	movs	r0, #0
 8002364:	9000      	str	r0, [sp, #0]
 8002366:	2300      	movs	r3, #0
 8002368:	4770      	bx	lr

0800236a <.text_84>:
 800236a:	2000      	movs	r0, #0
 800236c:	9000      	str	r0, [sp, #0]
 800236e:	2300      	movs	r3, #0
 8002370:	7b31      	ldrb	r1, [r6, #12]
 8002372:	4770      	bx	lr

08002374 <.text_85>:
 8002374:	717a      	strb	r2, [r7, #5]
 8002376:	2000      	movs	r0, #0
 8002378:	9000      	str	r0, [sp, #0]
 800237a:	2300      	movs	r3, #0
 800237c:	7b31      	ldrb	r1, [r6, #12]
 800237e:	f001 0101 	and.w	r1, r1, #1
 8002382:	2004      	movs	r0, #4

08002384 <__iar_annotation$$tailcall>:
 8002384:	4760      	bx	ip

08002386 <.text_86>:
 8002386:	2000      	movs	r0, #0
 8002388:	9c04      	ldr	r4, [sp, #16]
 800238a:	9000      	str	r0, [sp, #0]
 800238c:	2300      	movs	r3, #0
 800238e:	7b31      	ldrb	r1, [r6, #12]
 8002390:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8002394:	4770      	bx	lr

08002396 <.text_87>:
 8002396:	2000      	movs	r0, #0
 8002398:	9c04      	ldr	r4, [sp, #16]
 800239a:	9000      	str	r0, [sp, #0]
 800239c:	2300      	movs	r3, #0
 800239e:	7b31      	ldrb	r1, [r6, #12]
 80023a0:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80023a4:	225a      	movs	r2, #90	; 0x5a
 80023a6:	f001 0101 	and.w	r1, r1, #1
 80023aa:	2009      	movs	r0, #9

080023ac <__iar_annotation$$tailcall>:
 80023ac:	4760      	bx	ip

080023ae <.text_88>:
 80023ae:	2000      	movs	r0, #0
 80023b0:	f8dd c010 	ldr.w	ip, [sp, #16]
 80023b4:	9000      	str	r0, [sp, #0]
 80023b6:	2300      	movs	r3, #0
 80023b8:	7b31      	ldrb	r1, [r6, #12]
 80023ba:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80023be:	4770      	bx	lr

080023c0 <.text_89>:
 80023c0:	2000      	movs	r0, #0
 80023c2:	f8dd c010 	ldr.w	ip, [sp, #16]
 80023c6:	9000      	str	r0, [sp, #0]
 80023c8:	2300      	movs	r3, #0
 80023ca:	7b31      	ldrb	r1, [r6, #12]
 80023cc:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80023d0:	223a      	movs	r2, #58	; 0x3a
 80023d2:	f001 0101 	and.w	r1, r1, #1
 80023d6:	2009      	movs	r0, #9

080023d8 <__iar_annotation$$tailcall>:
 80023d8:	4728      	bx	r5

080023da <.text_90>:
 80023da:	2000      	movs	r0, #0
 80023dc:	f8dd c010 	ldr.w	ip, [sp, #16]
 80023e0:	9000      	str	r0, [sp, #0]
 80023e2:	2300      	movs	r3, #0
 80023e4:	7b31      	ldrb	r1, [r6, #12]
 80023e6:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80023ea:	225a      	movs	r2, #90	; 0x5a
 80023ec:	f001 0101 	and.w	r1, r1, #1
 80023f0:	2009      	movs	r0, #9

080023f2 <__iar_annotation$$tailcall>:
 80023f2:	4728      	bx	r5

080023f4 <.text_91>:
 80023f4:	6830      	ldr	r0, [r6, #0]
 80023f6:	6801      	ldr	r1, [r0, #0]
 80023f8:	f041 0110 	orr.w	r1, r1, #16
 80023fc:	6001      	str	r1, [r0, #0]
 80023fe:	4770      	bx	lr

08002400 <.text_92>:
 8002400:	6830      	ldr	r0, [r6, #0]
 8002402:	6801      	ldr	r1, [r0, #0]
 8002404:	f021 0110 	bic.w	r1, r1, #16
 8002408:	6001      	str	r1, [r0, #0]
 800240a:	6872      	ldr	r2, [r6, #4]
 800240c:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800240e:	2800      	cmp	r0, #0
 8002410:	4770      	bx	lr

08002412 <.text_93>:
 8002412:	6830      	ldr	r0, [r6, #0]
 8002414:	6801      	ldr	r1, [r0, #0]
 8002416:	f3c1 2102 	ubfx	r1, r1, #8, #3
 800241a:	2903      	cmp	r1, #3
 800241c:	4770      	bx	lr

0800241e <.text_94>:
 800241e:	6830      	ldr	r0, [r6, #0]
 8002420:	6801      	ldr	r1, [r0, #0]
 8002422:	f041 0110 	orr.w	r1, r1, #16
 8002426:	6001      	str	r1, [r0, #0]
 8002428:	f248 208a 	movw	r0, #33418	; 0x828a
 800242c:	9905      	ldr	r1, [sp, #20]
 800242e:	8008      	strh	r0, [r1, #0]
 8002430:	219b      	movs	r1, #155	; 0x9b
 8002432:	4770      	bx	lr

08002434 <PE_StateMachine_SNK_SelectCapa>:
 8002434:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8002438:	4688      	mov	r8, r1
 800243a:	f000 f88f 	bl	800255c <.text_96>
 800243e:	f898 0000 	ldrb.w	r0, [r8]
 8002442:	2602      	movs	r6, #2
 8002444:	f505 7761 	add.w	r7, r5, #900	; 0x384
 8002448:	2811      	cmp	r0, #17
 800244a:	bf04      	itt	eq
 800244c:	89f8      	ldrheq	r0, [r7, #14]
 800244e:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 8002452:	d178      	bne.n	8002546 <PE_StateMachine_SNK_SelectCapa+0x112>
 8002454:	f000 031f 	and.w	r3, r0, #31
 8002458:	2b02      	cmp	r3, #2
 800245a:	bf18      	it	ne
 800245c:	2b03      	cmpne	r3, #3
 800245e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002462:	f248 12f4 	movw	r2, #33268	; 0x81f4
 8002466:	d004      	beq.n	8002472 <PE_StateMachine_SNK_SelectCapa+0x3e>
 8002468:	2b04      	cmp	r3, #4
 800246a:	bf18      	it	ne
 800246c:	2b0c      	cmpne	r3, #12
 800246e:	d01b      	beq.n	80024a8 <PE_StateMachine_SNK_SelectCapa+0x74>
 8002470:	e031      	b.n	80024d6 <PE_StateMachine_SNK_SelectCapa+0xa2>
 8002472:	2047      	movs	r0, #71	; 0x47
 8002474:	f885 037f 	strb.w	r0, [r5, #895]	; 0x37f
 8002478:	803a      	strh	r2, [r7, #0]
 800247a:	460e      	mov	r6, r1
 800247c:	6868      	ldr	r0, [r5, #4]
 800247e:	f000 f87b 	bl	8002578 <.text_98>
 8002482:	d026      	beq.n	80024d2 <PE_StateMachine_SNK_SelectCapa+0x9e>
 8002484:	f001 ffa0 	bl	80043c8 <.text_190>
 8002488:	7820      	ldrb	r0, [r4, #0]
 800248a:	0781      	lsls	r1, r0, #30
 800248c:	d506      	bpl.n	800249c <PE_StateMachine_SNK_SelectCapa+0x68>
 800248e:	f002 faef 	bl	8004a70 <.text_212>
 8002492:	7c29      	ldrb	r1, [r5, #16]
 8002494:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8002498:	f002 fae5 	bl	8004a66 <.text_211>
 800249c:	f000 ff1e 	bl	80032dc <.text_141>
 80024a0:	215a      	movs	r1, #90	; 0x5a
 80024a2:	f001 fc97 	bl	8003dd4 <.text_164+0x6>
 80024a6:	e014      	b.n	80024d2 <PE_StateMachine_SNK_SelectCapa+0x9e>
 80024a8:	686b      	ldr	r3, [r5, #4]
 80024aa:	681e      	ldr	r6, [r3, #0]
 80024ac:	f3c6 2302 	ubfx	r3, r6, #8, #3
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d005      	beq.n	80024c0 <PE_StateMachine_SNK_SelectCapa+0x8c>
 80024b4:	2043      	movs	r0, #67	; 0x43
 80024b6:	f885 037f 	strb.w	r0, [r5, #895]	; 0x37f
 80024ba:	803a      	strh	r2, [r7, #0]
 80024bc:	460e      	mov	r6, r1
 80024be:	e008      	b.n	80024d2 <PE_StateMachine_SNK_SelectCapa+0x9e>
 80024c0:	f000 001f 	and.w	r0, r0, #31
 80024c4:	280c      	cmp	r0, #12
 80024c6:	bf0c      	ite	eq
 80024c8:	2049      	moveq	r0, #73	; 0x49
 80024ca:	2003      	movne	r0, #3
 80024cc:	f885 037f 	strb.w	r0, [r5, #895]	; 0x37f
 80024d0:	2600      	movs	r6, #0
 80024d2:	f000 f8ff 	bl	80026d4 <.text_100>
 80024d6:	f898 0000 	ldrb.w	r0, [r8]
 80024da:	2814      	cmp	r0, #20
 80024dc:	d133      	bne.n	8002546 <PE_StateMachine_SNK_SelectCapa+0x112>
 80024de:	7bb9      	ldrb	r1, [r7, #14]
 80024e0:	7820      	ldrb	r0, [r4, #0]
 80024e2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80024e6:	f001 011f 	and.w	r1, r1, #31
 80024ea:	2902      	cmp	r1, #2
 80024ec:	f000 0002 	and.w	r0, r0, #2
 80024f0:	d00e      	beq.n	8002510 <PE_StateMachine_SNK_SelectCapa+0xdc>
 80024f2:	2903      	cmp	r1, #3
 80024f4:	d004      	beq.n	8002500 <PE_StateMachine_SNK_SelectCapa+0xcc>
 80024f6:	2904      	cmp	r1, #4
 80024f8:	d012      	beq.n	8002520 <PE_StateMachine_SNK_SelectCapa+0xec>
 80024fa:	290c      	cmp	r1, #12
 80024fc:	d018      	beq.n	8002530 <PE_StateMachine_SNK_SelectCapa+0xfc>
 80024fe:	e022      	b.n	8002546 <PE_StateMachine_SNK_SelectCapa+0x112>
 8002500:	b120      	cbz	r0, 800250c <PE_StateMachine_SNK_SelectCapa+0xd8>
 8002502:	f000 f834 	bl	800256e <.text_97>
 8002506:	2201      	movs	r2, #1
 8002508:	f002 faae 	bl	8004a68 <.text_211+0x2>
 800250c:	2101      	movs	r1, #1
 800250e:	e016      	b.n	800253e <PE_StateMachine_SNK_SelectCapa+0x10a>
 8002510:	b120      	cbz	r0, 800251c <PE_StateMachine_SNK_SelectCapa+0xe8>
 8002512:	f000 f82c 	bl	800256e <.text_97>
 8002516:	2204      	movs	r2, #4
 8002518:	f002 faa6 	bl	8004a68 <.text_211+0x2>
 800251c:	2104      	movs	r1, #4
 800251e:	e00e      	b.n	800253e <PE_StateMachine_SNK_SelectCapa+0x10a>
 8002520:	b120      	cbz	r0, 800252c <PE_StateMachine_SNK_SelectCapa+0xf8>
 8002522:	f000 f824 	bl	800256e <.text_97>
 8002526:	2202      	movs	r2, #2
 8002528:	f002 fa9e 	bl	8004a68 <.text_211+0x2>
 800252c:	2102      	movs	r1, #2
 800252e:	e006      	b.n	800253e <PE_StateMachine_SNK_SelectCapa+0x10a>
 8002530:	b120      	cbz	r0, 800253c <PE_StateMachine_SNK_SelectCapa+0x108>
 8002532:	f000 f81c 	bl	800256e <.text_97>
 8002536:	2203      	movs	r2, #3
 8002538:	f002 fa96 	bl	8004a68 <.text_211+0x2>
 800253c:	2103      	movs	r1, #3
 800253e:	68aa      	ldr	r2, [r5, #8]
 8002540:	7c28      	ldrb	r0, [r5, #16]
 8002542:	f001 fc46 	bl	8003dd2 <.text_164+0x4>
 8002546:	8838      	ldrh	r0, [r7, #0]
 8002548:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800254c:	d103      	bne.n	8002556 <PE_StateMachine_SNK_SelectCapa+0x122>
 800254e:	210f      	movs	r1, #15
 8002550:	f885 137f 	strb.w	r1, [r5, #895]	; 0x37f
 8002554:	2600      	movs	r6, #0
 8002556:	4630      	mov	r0, r6
 8002558:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

0800255c <.text_96>:
 800255c:	f8df 49d4 	ldr.w	r4, [pc, #2516]	; 8002f34 <.text_135>
 8002560:	7c00      	ldrb	r0, [r0, #16]
 8002562:	1d21      	adds	r1, r4, #4
 8002564:	f000 0001 	and.w	r0, r0, #1
 8002568:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 800256c:	4770      	bx	lr

0800256e <.text_97>:
 800256e:	2000      	movs	r0, #0
 8002570:	9000      	str	r0, [sp, #0]
 8002572:	2300      	movs	r3, #0
 8002574:	7c29      	ldrb	r1, [r5, #16]
 8002576:	4770      	bx	lr

08002578 <.text_98>:
 8002578:	6801      	ldr	r1, [r0, #0]
 800257a:	f3c1 2102 	ubfx	r1, r1, #8, #3
 800257e:	2904      	cmp	r1, #4
 8002580:	4770      	bx	lr

08002582 <PE_StateMachine_SNK_ReadyWait>:
 8002582:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002586:	7c02      	ldrb	r2, [r0, #16]
 8002588:	f8df 99a8 	ldr.w	r9, [pc, #2472]	; 8002f34 <.text_135>
 800258c:	4688      	mov	r8, r1
 800258e:	f002 0201 	and.w	r2, r2, #1
 8002592:	f109 0004 	add.w	r0, r9, #4
 8002596:	4611      	mov	r1, r2
 8002598:	2402      	movs	r4, #2
 800259a:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 800259e:	f898 0000 	ldrb.w	r0, [r8]
 80025a2:	2814      	cmp	r0, #20
 80025a4:	f505 7662 	add.w	r6, r5, #904	; 0x388
 80025a8:	f205 377b 	addw	r7, r5, #891	; 0x37b
 80025ac:	d017      	beq.n	80025de <PE_StateMachine_SNK_ReadyWait+0x5c>
 80025ae:	79b9      	ldrb	r1, [r7, #6]
 80025b0:	71f9      	strb	r1, [r7, #7]
 80025b2:	8971      	ldrh	r1, [r6, #10]
 80025b4:	0bc8      	lsrs	r0, r1, #15
 80025b6:	d003      	beq.n	80025c0 <PE_StateMachine_SNK_ReadyWait+0x3e>
 80025b8:	4628      	mov	r0, r5
 80025ba:	f002 f83d 	bl	8004638 <PE_Check_ExtendedMessage>
 80025be:	e00b      	b.n	80025d8 <PE_StateMachine_SNK_ReadyWait+0x56>
 80025c0:	f411 4f70 	tst.w	r1, #61440	; 0xf000
 80025c4:	d104      	bne.n	80025d0 <PE_StateMachine_SNK_ReadyWait+0x4e>
 80025c6:	4641      	mov	r1, r8
 80025c8:	4628      	mov	r0, r5
 80025ca:	f001 fd6b 	bl	80040a4 <PE_Check_ControlMessage>
 80025ce:	e003      	b.n	80025d8 <PE_StateMachine_SNK_ReadyWait+0x56>
 80025d0:	4628      	mov	r0, r5
 80025d2:	f001 ff0b 	bl	80043ec <PE_Check_DataMessage>
 80025d6:	4604      	mov	r4, r0
 80025d8:	f000 f87c 	bl	80026d4 <.text_100>
 80025dc:	e077      	b.n	80026ce <PE_StateMachine_SNK_ReadyWait+0x14c>
 80025de:	692c      	ldr	r4, [r5, #16]
 80025e0:	0be4      	lsrs	r4, r4, #15
 80025e2:	d01e      	beq.n	8002622 <PE_StateMachine_SNK_ReadyWait+0xa0>
 80025e4:	8870      	ldrh	r0, [r6, #2]
 80025e6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80025ea:	d106      	bne.n	80025fa <PE_StateMachine_SNK_ReadyWait+0x78>
 80025ec:	210f      	movs	r1, #15
 80025ee:	7139      	strb	r1, [r7, #4]
 80025f0:	2400      	movs	r4, #0
 80025f2:	7e28      	ldrb	r0, [r5, #24]
 80025f4:	1c40      	adds	r0, r0, #1
 80025f6:	7628      	strb	r0, [r5, #24]
 80025f8:	e069      	b.n	80026ce <PE_StateMachine_SNK_ReadyWait+0x14c>
 80025fa:	68f0      	ldr	r0, [r6, #12]
 80025fc:	8971      	ldrh	r1, [r6, #10]
 80025fe:	f3c1 2342 	ubfx	r3, r1, #9, #3
 8002602:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8002606:	2233      	movs	r2, #51	; 0x33
 8002608:	18e3      	adds	r3, r4, r3
 800260a:	f3c1 2142 	ubfx	r1, r1, #9, #3
 800260e:	fb02 0303 	mla	r3, r2, r3, r0
 8002612:	1864      	adds	r4, r4, r1
 8002614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002618:	fb02 0404 	mla	r4, r2, r4, r0
 800261c:	8073      	strh	r3, [r6, #2]
 800261e:	b2a4      	uxth	r4, r4
 8002620:	e055      	b.n	80026ce <PE_StateMachine_SNK_ReadyWait+0x14c>
 8002622:	88f0      	ldrh	r0, [r6, #6]
 8002624:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002628:	d104      	bne.n	8002634 <PE_StateMachine_SNK_ReadyWait+0xb2>
 800262a:	2100      	movs	r1, #0
 800262c:	80f1      	strh	r1, [r6, #6]
 800262e:	2045      	movs	r0, #69	; 0x45
 8002630:	7138      	strb	r0, [r7, #4]
 8002632:	e04c      	b.n	80026ce <PE_StateMachine_SNK_ReadyWait+0x14c>
 8002634:	78b9      	ldrb	r1, [r7, #2]
 8002636:	b9f9      	cbnz	r1, 8002678 <PE_StateMachine_SNK_ReadyWait+0xf6>
 8002638:	7838      	ldrb	r0, [r7, #0]
 800263a:	b1e8      	cbz	r0, 8002678 <PE_StateMachine_SNK_ReadyWait+0xf6>
 800263c:	4610      	mov	r0, r2
 800263e:	f003 fb1b 	bl	8005c78 <USBPD_PRL_IsResistor_SinkTxOK>
 8002642:	2801      	cmp	r0, #1
 8002644:	bf01      	itttt	eq
 8002646:	6868      	ldreq	r0, [r5, #4]
 8002648:	7801      	ldrbeq	r1, [r0, #0]
 800264a:	f001 0103 	andeq.w	r1, r1, #3
 800264e:	2902      	cmpeq	r1, #2
 8002650:	bf1f      	itttt	ne
 8002652:	6868      	ldrne	r0, [r5, #4]
 8002654:	7801      	ldrbne	r1, [r0, #0]
 8002656:	f001 0103 	andne.w	r1, r1, #3
 800265a:	2901      	cmpne	r1, #1
 800265c:	d10c      	bne.n	8002678 <PE_StateMachine_SNK_ReadyWait+0xf6>
 800265e:	7878      	ldrb	r0, [r7, #1]
 8002660:	71f8      	strb	r0, [r7, #7]
 8002662:	7838      	ldrb	r0, [r7, #0]
 8002664:	7138      	strb	r0, [r7, #4]
 8002666:	2000      	movs	r0, #0
 8002668:	7038      	strb	r0, [r7, #0]
 800266a:	6930      	ldr	r0, [r6, #16]
 800266c:	6170      	str	r0, [r6, #20]
 800266e:	6928      	ldr	r0, [r5, #16]
 8002670:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8002674:	6128      	str	r0, [r5, #16]
 8002676:	e02a      	b.n	80026ce <PE_StateMachine_SNK_ReadyWait+0x14c>
 8002678:	8830      	ldrh	r0, [r6, #0]
 800267a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800267e:	d107      	bne.n	8002690 <PE_StateMachine_SNK_ReadyWait+0x10e>
 8002680:	2100      	movs	r1, #0
 8002682:	8031      	strh	r1, [r6, #0]
 8002684:	2105      	movs	r1, #5
 8002686:	7ea8      	ldrb	r0, [r5, #26]
 8002688:	1c40      	adds	r0, r0, #1
 800268a:	76a8      	strb	r0, [r5, #26]
 800268c:	7139      	strb	r1, [r7, #4]
 800268e:	e01e      	b.n	80026ce <PE_StateMachine_SNK_ReadyWait+0x14c>
 8002690:	7c29      	ldrb	r1, [r5, #16]
 8002692:	f000 f827 	bl	80026e4 <.text_101>
 8002696:	f500 7162 	add.w	r1, r0, #904	; 0x388
 800269a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800269e:	88ca      	ldrh	r2, [r1, #6]
 80026a0:	0453      	lsls	r3, r2, #17
 80026a2:	bf1c      	itt	ne
 80026a4:	88cc      	ldrhne	r4, [r1, #6]
 80026a6:	f3c4 040e 	ubfxne	r4, r4, #0, #15
 80026aa:	880a      	ldrh	r2, [r1, #0]
 80026ac:	0453      	lsls	r3, r2, #17
 80026ae:	d007      	beq.n	80026c0 <PE_StateMachine_SNK_ReadyWait+0x13e>
 80026b0:	880b      	ldrh	r3, [r1, #0]
 80026b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80026b6:	429c      	cmp	r4, r3
 80026b8:	bf24      	itt	cs
 80026ba:	880c      	ldrhcs	r4, [r1, #0]
 80026bc:	f3c4 040e 	ubfxcs	r4, r4, #0, #15
 80026c0:	f114 0f01 	cmn.w	r4, #1
 80026c4:	d103      	bne.n	80026ce <PE_StateMachine_SNK_ReadyWait+0x14c>
 80026c6:	f890 037b 	ldrb.w	r0, [r0, #891]	; 0x37b
 80026ca:	b100      	cbz	r0, 80026ce <PE_StateMachine_SNK_ReadyWait+0x14c>
 80026cc:	240f      	movs	r4, #15
 80026ce:	4620      	mov	r0, r4
 80026d0:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

080026d4 <.text_100>:
 80026d4:	2014      	movs	r0, #20
 80026d6:	f888 0000 	strb.w	r0, [r8]
 80026da:	7c28      	ldrb	r0, [r5, #16]
 80026dc:	f000 0001 	and.w	r0, r0, #1
 80026e0:	f003 bcd2 	b.w	8006088 <USBPD_PRL_EnableRX>

080026e4 <.text_101>:
 80026e4:	f109 0004 	add.w	r0, r9, #4
 80026e8:	f001 0101 	and.w	r1, r1, #1
 80026ec:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80026f0:	4770      	bx	lr

080026f2 <USBPD_PE_StateMachine_DRP>:
 80026f2:	f8df 1840 	ldr.w	r1, [pc, #2112]	; 8002f34 <.text_135>
 80026f6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80026fa:	684a      	ldr	r2, [r1, #4]
 80026fc:	6851      	ldr	r1, [r2, #4]
 80026fe:	680b      	ldr	r3, [r1, #0]
 8002700:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8002704:	2900      	cmp	r1, #0
 8002706:	bf18      	it	ne
 8002708:	f7fd bf64 	bne.w	80005d4 <USBPD_PE_StateMachine_SRC>
 800270c:	f7fe bf85 	b.w	800161a <USBPD_PE_StateMachine_SNK>

08002710 <USBPD_PE_InitVDM_Callback>:
 8002710:	f8df 2820 	ldr.w	r2, [pc, #2080]	; 8002f34 <.text_135>
 8002714:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8002718:	6842      	ldr	r2, [r0, #4]
 800271a:	60d1      	str	r1, [r2, #12]
 800271c:	4770      	bx	lr

0800271e <USBPD_PE_SVDM_RequestIdentity>:
 800271e:	b538      	push	{r3, r4, r5, lr}
 8002720:	f8df 2bb4 	ldr.w	r2, [pc, #2996]	; 80032d8 <.text_140>
 8002724:	4603      	mov	r3, r0
 8002726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	6854      	ldr	r4, [r2, #4]
 800272e:	f3c4 2240 	ubfx	r2, r4, #9, #1
 8002732:	2a00      	cmp	r2, #0
 8002734:	bf1e      	ittt	ne
 8002736:	68da      	ldrne	r2, [r3, #12]
 8002738:	2a00      	cmpne	r2, #0
 800273a:	2902      	cmpne	r1, #2
 800273c:	d101      	bne.n	8002742 <USBPD_PE_SVDM_RequestIdentity+0x24>
 800273e:	2002      	movs	r0, #2
 8002740:	bd32      	pop	{r1, r4, r5, pc}
 8002742:	f203 347b 	addw	r4, r3, #891	; 0x37b
 8002746:	7822      	ldrb	r2, [r4, #0]
 8002748:	b922      	cbnz	r2, 8002754 <USBPD_PE_SVDM_RequestIdentity+0x36>
 800274a:	685d      	ldr	r5, [r3, #4]
 800274c:	682a      	ldr	r2, [r5, #0]
 800274e:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8002752:	b90a      	cbnz	r2, 8002758 <USBPD_PE_SVDM_RequestIdentity+0x3a>
 8002754:	2003      	movs	r0, #3
 8002756:	bd32      	pop	{r1, r4, r5, pc}
 8002758:	7061      	strb	r1, [r4, #1]
 800275a:	b111      	cbz	r1, 8002762 <USBPD_PE_SVDM_RequestIdentity+0x44>
 800275c:	2901      	cmp	r1, #1
 800275e:	d007      	beq.n	8002770 <USBPD_PE_SVDM_RequestIdentity+0x52>
 8002760:	e013      	b.n	800278a <USBPD_PE_SVDM_RequestIdentity+0x6c>
 8002762:	6829      	ldr	r1, [r5, #0]
 8002764:	f3c1 2102 	ubfx	r1, r1, #8, #3
 8002768:	2903      	cmp	r1, #3
 800276a:	d10e      	bne.n	800278a <USBPD_PE_SVDM_RequestIdentity+0x6c>
 800276c:	217d      	movs	r1, #125	; 0x7d
 800276e:	e00b      	b.n	8002788 <USBPD_PE_SVDM_RequestIdentity+0x6a>
 8002770:	6829      	ldr	r1, [r5, #0]
 8002772:	f240 7204 	movw	r2, #1796	; 0x704
 8002776:	400a      	ands	r2, r1
 8002778:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800277c:	bf1c      	itt	ne
 800277e:	f3c1 2102 	ubfxne	r1, r1, #8, #3
 8002782:	2903      	cmpne	r1, #3
 8002784:	d101      	bne.n	800278a <USBPD_PE_SVDM_RequestIdentity+0x6c>
 8002786:	2105      	movs	r1, #5
 8002788:	e122      	b.n	80029d0 <.text_118>
 800278a:	2010      	movs	r0, #16
 800278c:	bd32      	pop	{r1, r4, r5, pc}

0800278e <USBPD_PE_SVDM_RequestSVID>:
 800278e:	b538      	push	{r3, r4, r5, lr}
 8002790:	f000 f917 	bl	80029c2 <.text_117>
 8002794:	2a00      	cmp	r2, #0
 8002796:	bf18      	it	ne
 8002798:	2902      	cmpne	r1, #2
 800279a:	d101      	bne.n	80027a0 <USBPD_PE_SVDM_RequestSVID+0x12>
 800279c:	2002      	movs	r0, #2
 800279e:	bd32      	pop	{r1, r4, r5, pc}
 80027a0:	f203 347b 	addw	r4, r3, #891	; 0x37b
 80027a4:	7822      	ldrb	r2, [r4, #0]
 80027a6:	b922      	cbnz	r2, 80027b2 <USBPD_PE_SVDM_RequestSVID+0x24>
 80027a8:	685d      	ldr	r5, [r3, #4]
 80027aa:	682d      	ldr	r5, [r5, #0]
 80027ac:	f3c5 3200 	ubfx	r2, r5, #12, #1
 80027b0:	b90a      	cbnz	r2, 80027b6 <USBPD_PE_SVDM_RequestSVID+0x28>
 80027b2:	2003      	movs	r0, #3
 80027b4:	bd32      	pop	{r1, r4, r5, pc}
 80027b6:	2210      	movs	r2, #16
 80027b8:	f3c5 2502 	ubfx	r5, r5, #8, #3
 80027bc:	2d03      	cmp	r5, #3
 80027be:	d001      	beq.n	80027c4 <USBPD_PE_SVDM_RequestSVID+0x36>
 80027c0:	2010      	movs	r0, #16
 80027c2:	bd32      	pop	{r1, r4, r5, pc}
 80027c4:	257f      	movs	r5, #127	; 0x7f
 80027c6:	7061      	strb	r1, [r4, #1]
 80027c8:	7025      	strb	r5, [r4, #0]
 80027ca:	b129      	cbz	r1, 80027d8 <USBPD_PE_SVDM_RequestSVID+0x4a>
 80027cc:	2901      	cmp	r1, #1
 80027ce:	d107      	bne.n	80027e0 <USBPD_PE_SVDM_RequestSVID+0x52>
 80027d0:	6919      	ldr	r1, [r3, #16]
 80027d2:	f3c1 3180 	ubfx	r1, r1, #14, #1
 80027d6:	b119      	cbz	r1, 80027e0 <USBPD_PE_SVDM_RequestSVID+0x52>
 80027d8:	6899      	ldr	r1, [r3, #8]
 80027da:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80027dc:	4790      	blx	r2
 80027de:	2200      	movs	r2, #0
 80027e0:	4610      	mov	r0, r2
 80027e2:	bd32      	pop	{r1, r4, r5, pc}

080027e4 <USBPD_PE_SVDM_RequestMode>:
 80027e4:	b570      	push	{r4, r5, r6, lr}
 80027e6:	f000 f8c6 	bl	8002976 <.text_115>
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	bf18      	it	ne
 80027ee:	2902      	cmpne	r1, #2
 80027f0:	d101      	bne.n	80027f6 <USBPD_PE_SVDM_RequestMode+0x12>
 80027f2:	2002      	movs	r0, #2
 80027f4:	bd70      	pop	{r4, r5, r6, pc}
 80027f6:	f504 7557 	add.w	r5, r4, #860	; 0x35c
 80027fa:	7feb      	ldrb	r3, [r5, #31]
 80027fc:	b923      	cbnz	r3, 8002808 <USBPD_PE_SVDM_RequestMode+0x24>
 80027fe:	6866      	ldr	r6, [r4, #4]
 8002800:	6836      	ldr	r6, [r6, #0]
 8002802:	f3c6 3300 	ubfx	r3, r6, #12, #1
 8002806:	b90b      	cbnz	r3, 800280c <USBPD_PE_SVDM_RequestMode+0x28>
 8002808:	2003      	movs	r0, #3
 800280a:	bd70      	pop	{r4, r5, r6, pc}
 800280c:	2310      	movs	r3, #16
 800280e:	f3c6 2602 	ubfx	r6, r6, #8, #3
 8002812:	2e03      	cmp	r6, #3
 8002814:	d001      	beq.n	800281a <USBPD_PE_SVDM_RequestMode+0x36>
 8002816:	2010      	movs	r0, #16
 8002818:	bd70      	pop	{r4, r5, r6, pc}
 800281a:	f884 137c 	strb.w	r1, [r4, #892]	; 0x37c
 800281e:	2681      	movs	r6, #129	; 0x81
 8002820:	77ee      	strb	r6, [r5, #31]
 8002822:	802a      	strh	r2, [r5, #0]
 8002824:	b129      	cbz	r1, 8002832 <USBPD_PE_SVDM_RequestMode+0x4e>
 8002826:	2901      	cmp	r1, #1
 8002828:	d107      	bne.n	800283a <USBPD_PE_SVDM_RequestMode+0x56>
 800282a:	6921      	ldr	r1, [r4, #16]
 800282c:	f3c1 3180 	ubfx	r1, r1, #14, #1
 8002830:	b119      	cbz	r1, 800283a <USBPD_PE_SVDM_RequestMode+0x56>
 8002832:	68a1      	ldr	r1, [r4, #8]
 8002834:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002836:	4790      	blx	r2
 8002838:	2300      	movs	r3, #0
 800283a:	4618      	mov	r0, r3
 800283c:	bd70      	pop	{r4, r5, r6, pc}

0800283e <USBPD_PE_SVDM_RequestModeEnter>:
 800283e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002840:	f000 f849 	bl	80028d6 <.text_112>
 8002844:	b90c      	cbnz	r4, 800284a <USBPD_PE_SVDM_RequestModeEnter+0xc>
 8002846:	2002      	movs	r0, #2
 8002848:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800284a:	f505 7657 	add.w	r6, r5, #860	; 0x35c
 800284e:	7ff4      	ldrb	r4, [r6, #31]
 8002850:	b914      	cbnz	r4, 8002858 <USBPD_PE_SVDM_RequestModeEnter+0x1a>
 8002852:	f000 f83b 	bl	80028cc <.text_111>
 8002856:	b90c      	cbnz	r4, 800285c <USBPD_PE_SVDM_RequestModeEnter+0x1e>
 8002858:	2003      	movs	r0, #3
 800285a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800285c:	f000 f830 	bl	80028c0 <.text_110>
 8002860:	d001      	beq.n	8002866 <USBPD_PE_SVDM_RequestModeEnter+0x28>
 8002862:	2010      	movs	r0, #16
 8002864:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8002866:	f885 137c 	strb.w	r1, [r5, #892]	; 0x37c
 800286a:	2782      	movs	r7, #130	; 0x82
 800286c:	e016      	b.n	800289c <.text_109>

0800286e <USBPD_PE_SVDM_RequestModeExit>:
 800286e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002870:	f000 f831 	bl	80028d6 <.text_112>
 8002874:	b90c      	cbnz	r4, 800287a <USBPD_PE_SVDM_RequestModeExit+0xc>
 8002876:	2002      	movs	r0, #2
 8002878:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800287a:	f505 7657 	add.w	r6, r5, #860	; 0x35c
 800287e:	7ff4      	ldrb	r4, [r6, #31]
 8002880:	b914      	cbnz	r4, 8002888 <USBPD_PE_SVDM_RequestModeExit+0x1a>
 8002882:	f000 f823 	bl	80028cc <.text_111>
 8002886:	b90c      	cbnz	r4, 800288c <USBPD_PE_SVDM_RequestModeExit+0x1e>
 8002888:	2003      	movs	r0, #3
 800288a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800288c:	f000 f818 	bl	80028c0 <.text_110>
 8002890:	d001      	beq.n	8002896 <USBPD_PE_SVDM_RequestModeExit+0x28>
 8002892:	2010      	movs	r0, #16
 8002894:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8002896:	f885 137c 	strb.w	r1, [r5, #892]	; 0x37c
 800289a:	2783      	movs	r7, #131	; 0x83

0800289c <.text_109>:
 800289c:	8032      	strh	r2, [r6, #0]
 800289e:	77f7      	strb	r7, [r6, #31]
 80028a0:	692a      	ldr	r2, [r5, #16]
 80028a2:	f363 1247 	bfi	r2, r3, #5, #3
 80028a6:	612a      	str	r2, [r5, #16]
 80028a8:	b129      	cbz	r1, 80028b6 <.text_109+0x1a>
 80028aa:	2902      	cmp	r1, #2
 80028ac:	d000      	beq.n	80028b0 <.text_109+0x14>
 80028ae:	d205      	bcs.n	80028bc <.text_109+0x20>
 80028b0:	f3c2 3180 	ubfx	r1, r2, #14, #1
 80028b4:	b111      	cbz	r1, 80028bc <.text_109+0x20>
 80028b6:	f000 f98e 	bl	8002bd6 <.text_124>
 80028ba:	2400      	movs	r4, #0
 80028bc:	4620      	mov	r0, r4
 80028be:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080028c0 <.text_110>:
 80028c0:	2410      	movs	r4, #16
 80028c2:	f407 67e1 	and.w	r7, r7, #1800	; 0x708
 80028c6:	f5b7 7f42 	cmp.w	r7, #776	; 0x308
 80028ca:	4770      	bx	lr

080028cc <.text_111>:
 80028cc:	686f      	ldr	r7, [r5, #4]
 80028ce:	683f      	ldr	r7, [r7, #0]
 80028d0:	f3c7 3400 	ubfx	r4, r7, #12, #1
 80028d4:	4770      	bx	lr

080028d6 <.text_112>:
 80028d6:	f8df 4a00 	ldr.w	r4, [pc, #2560]	; 80032d8 <.text_140>
 80028da:	4605      	mov	r5, r0
 80028dc:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 80028e0:	68ec      	ldr	r4, [r5, #12]
 80028e2:	4770      	bx	lr

080028e4 <USBPD_PE_SVDM_RequestSpecific>:
 80028e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e6:	f7ff fff6 	bl	80028d6 <.text_112>
 80028ea:	b90c      	cbnz	r4, 80028f0 <USBPD_PE_SVDM_RequestSpecific+0xc>
 80028ec:	2002      	movs	r0, #2
 80028ee:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80028f0:	f205 367b 	addw	r6, r5, #891	; 0x37b
 80028f4:	7834      	ldrb	r4, [r6, #0]
 80028f6:	b914      	cbnz	r4, 80028fe <USBPD_PE_SVDM_RequestSpecific+0x1a>
 80028f8:	f7ff ffe8 	bl	80028cc <.text_111>
 80028fc:	b90c      	cbnz	r4, 8002902 <USBPD_PE_SVDM_RequestSpecific+0x1e>
 80028fe:	2003      	movs	r0, #3
 8002900:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8002902:	692c      	ldr	r4, [r5, #16]
 8002904:	f3c4 3480 	ubfx	r4, r4, #14, #1
 8002908:	b90c      	cbnz	r4, 800290e <USBPD_PE_SVDM_RequestSpecific+0x2a>
 800290a:	000c      	movs	r4, r1
 800290c:	d10e      	bne.n	800292c <USBPD_PE_SVDM_RequestSpecific+0x48>
 800290e:	f3c7 2402 	ubfx	r4, r7, #8, #3
 8002912:	2c03      	cmp	r4, #3
 8002914:	d10a      	bne.n	800292c <USBPD_PE_SVDM_RequestSpecific+0x48>
 8002916:	7071      	strb	r1, [r6, #1]
 8002918:	2185      	movs	r1, #133	; 0x85
 800291a:	7031      	strb	r1, [r6, #0]
 800291c:	f505 7156 	add.w	r1, r5, #856	; 0x358
 8002920:	600a      	str	r2, [r1, #0]
 8002922:	808b      	strh	r3, [r1, #4]
 8002924:	f000 f957 	bl	8002bd6 <.text_124>
 8002928:	2000      	movs	r0, #0
 800292a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800292c:	2010      	movs	r0, #16
 800292e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08002930 <USBPD_PE_SVDM_RequestAttention>:
 8002930:	b538      	push	{r3, r4, r5, lr}
 8002932:	f000 f820 	bl	8002976 <.text_115>
 8002936:	b103      	cbz	r3, 800293a <USBPD_PE_SVDM_RequestAttention+0xa>
 8002938:	b109      	cbz	r1, 800293e <USBPD_PE_SVDM_RequestAttention+0xe>
 800293a:	2002      	movs	r0, #2
 800293c:	bd32      	pop	{r1, r4, r5, pc}
 800293e:	f204 337b 	addw	r3, r4, #891	; 0x37b
 8002942:	7819      	ldrb	r1, [r3, #0]
 8002944:	b921      	cbnz	r1, 8002950 <USBPD_PE_SVDM_RequestAttention+0x20>
 8002946:	6865      	ldr	r5, [r4, #4]
 8002948:	682d      	ldr	r5, [r5, #0]
 800294a:	f3c5 3100 	ubfx	r1, r5, #12, #1
 800294e:	b909      	cbnz	r1, 8002954 <USBPD_PE_SVDM_RequestAttention+0x24>
 8002950:	2003      	movs	r0, #3
 8002952:	bd32      	pop	{r1, r4, r5, pc}
 8002954:	f3c5 2102 	ubfx	r1, r5, #8, #3
 8002958:	2903      	cmp	r1, #3
 800295a:	d10a      	bne.n	8002972 <USBPD_PE_SVDM_RequestAttention+0x42>
 800295c:	2100      	movs	r1, #0
 800295e:	7059      	strb	r1, [r3, #1]
 8002960:	2184      	movs	r1, #132	; 0x84
 8002962:	7019      	strb	r1, [r3, #0]
 8002964:	2306      	movs	r3, #6
 8002966:	f504 7156 	add.w	r1, r4, #856	; 0x358
 800296a:	600b      	str	r3, [r1, #0]
 800296c:	808a      	strh	r2, [r1, #4]
 800296e:	68a1      	ldr	r1, [r4, #8]
 8002970:	e030      	b.n	80029d4 <.text_118+0x4>
 8002972:	2010      	movs	r0, #16
 8002974:	bd32      	pop	{r1, r4, r5, pc}

08002976 <.text_115>:
 8002976:	f8df 3960 	ldr.w	r3, [pc, #2400]	; 80032d8 <.text_140>
 800297a:	4604      	mov	r4, r0
 800297c:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8002980:	68e3      	ldr	r3, [r4, #12]
 8002982:	4770      	bx	lr

08002984 <USBPD_PE_UVDM_RequestMessage>:
 8002984:	b538      	push	{r3, r4, r5, lr}
 8002986:	f000 f81c 	bl	80029c2 <.text_117>
 800298a:	b90a      	cbnz	r2, 8002990 <USBPD_PE_UVDM_RequestMessage+0xc>
 800298c:	2002      	movs	r0, #2
 800298e:	bd32      	pop	{r1, r4, r5, pc}
 8002990:	f203 347b 	addw	r4, r3, #891	; 0x37b
 8002994:	7822      	ldrb	r2, [r4, #0]
 8002996:	b922      	cbnz	r2, 80029a2 <USBPD_PE_UVDM_RequestMessage+0x1e>
 8002998:	685d      	ldr	r5, [r3, #4]
 800299a:	682d      	ldr	r5, [r5, #0]
 800299c:	f3c5 3200 	ubfx	r2, r5, #12, #1
 80029a0:	b90a      	cbnz	r2, 80029a6 <USBPD_PE_UVDM_RequestMessage+0x22>
 80029a2:	2003      	movs	r0, #3
 80029a4:	bd32      	pop	{r1, r4, r5, pc}
 80029a6:	f3c5 32c0 	ubfx	r2, r5, #15, #1
 80029aa:	b90a      	cbnz	r2, 80029b0 <USBPD_PE_UVDM_RequestMessage+0x2c>
 80029ac:	000a      	movs	r2, r1
 80029ae:	d106      	bne.n	80029be <USBPD_PE_UVDM_RequestMessage+0x3a>
 80029b0:	f3c5 2202 	ubfx	r2, r5, #8, #3
 80029b4:	2a03      	cmp	r2, #3
 80029b6:	d102      	bne.n	80029be <USBPD_PE_UVDM_RequestMessage+0x3a>
 80029b8:	7061      	strb	r1, [r4, #1]
 80029ba:	2186      	movs	r1, #134	; 0x86
 80029bc:	e008      	b.n	80029d0 <.text_118>
 80029be:	2010      	movs	r0, #16
 80029c0:	bd32      	pop	{r1, r4, r5, pc}

080029c2 <.text_117>:
 80029c2:	f8df 2914 	ldr.w	r2, [pc, #2324]	; 80032d8 <.text_140>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	4770      	bx	lr

080029d0 <.text_118>:
 80029d0:	7021      	strb	r1, [r4, #0]
 80029d2:	6899      	ldr	r1, [r3, #8]
 80029d4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80029d6:	4790      	blx	r2
 80029d8:	2000      	movs	r0, #0
 80029da:	bd32      	pop	{r1, r4, r5, pc}

080029dc <USBPD_PE_Request_HardReset>:
 80029dc:	b580      	push	{r7, lr}
 80029de:	f8df 1554 	ldr.w	r1, [pc, #1364]	; 8002f34 <.text_135>
 80029e2:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80029e6:	220f      	movs	r2, #15
 80029e8:	6849      	ldr	r1, [r1, #4]
 80029ea:	f881 237b 	strb.w	r2, [r1, #891]	; 0x37b
 80029ee:	6889      	ldr	r1, [r1, #8]
 80029f0:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80029f2:	4790      	blx	r2
 80029f4:	2000      	movs	r0, #0
 80029f6:	bd02      	pop	{r1, pc}

080029f8 <USBPD_PE_Request_CableReset>:
 80029f8:	b538      	push	{r3, r4, r5, lr}
 80029fa:	f8df 1538 	ldr.w	r1, [pc, #1336]	; 8002f34 <.text_135>
 80029fe:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8002a02:	f248 3508 	movw	r5, #33544	; 0x8308
 8002a06:	684a      	ldr	r2, [r1, #4]
 8002a08:	6853      	ldr	r3, [r2, #4]
 8002a0a:	681c      	ldr	r4, [r3, #0]
 8002a0c:	f248 7108 	movw	r1, #34568	; 0x8708
 8002a10:	400c      	ands	r4, r1
 8002a12:	42ac      	cmp	r4, r5
 8002a14:	d105      	bne.n	8002a22 <USBPD_PE_Request_CableReset+0x2a>
 8002a16:	6891      	ldr	r1, [r2, #8]
 8002a18:	2399      	movs	r3, #153	; 0x99
 8002a1a:	f882 337b 	strb.w	r3, [r2, #891]	; 0x37b
 8002a1e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002a20:	4790      	blx	r2
 8002a22:	2010      	movs	r0, #16
 8002a24:	bd32      	pop	{r1, r4, r5, pc}
	...

08002a28 <USBPD_PE_Request_CtrlMessage>:
 8002a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a2c:	f000 f916 	bl	8002c5c <.text_126>
 8002a30:	b923      	cbnz	r3, 8002a3c <USBPD_PE_Request_CtrlMessage+0x14>
 8002a32:	686f      	ldr	r7, [r5, #4]
 8002a34:	683f      	ldr	r7, [r7, #0]
 8002a36:	f3c7 3300 	ubfx	r3, r7, #12, #1
 8002a3a:	b90b      	cbnz	r3, 8002a40 <USBPD_PE_Request_CtrlMessage+0x18>
 8002a3c:	2003      	movs	r0, #3
 8002a3e:	e024      	b.n	8002a8a <USBPD_PE_Request_CtrlMessage+0x62>
 8002a40:	1e89      	subs	r1, r1, #2
 8002a42:	2914      	cmp	r1, #20
 8002a44:	f505 7369 	add.w	r3, r5, #932	; 0x3a4
 8002a48:	f240 7e07 	movw	lr, #1799	; 0x707
 8002a4c:	f240 3802 	movw	r8, #770	; 0x302
 8002a50:	f240 7903 	movw	r9, #1795	; 0x703
 8002a54:	f200 80b4 	bhi.w	8002bc0 <USBPD_PE_Request_CtrlMessage+0x198>
 8002a58:	e8df f001 	tbb	[pc, r1]
 8002a5c:	a3b2b20b 	.word	0xa3b2b20b
 8002a60:	302919b2 	.word	0x302919b2
 8002a64:	51b24737 	.word	0x51b24737
 8002a68:	54b2b2b2 	.word	0x54b2b2b2
 8002a6c:	9284766a 	.word	0x9284766a
 8002a70:	005f      	.short	0x005f
 8002a72:	f3c7 0180 	ubfx	r1, r7, #2, #1
 8002a76:	b139      	cbz	r1, 8002a88 <USBPD_PE_Request_CtrlMessage+0x60>
 8002a78:	805c      	strh	r4, [r3, #2]
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	7071      	strb	r1, [r6, #1]
 8002a7e:	2196      	movs	r1, #150	; 0x96
 8002a80:	7031      	strb	r1, [r6, #0]
 8002a82:	2400      	movs	r4, #0
 8002a84:	f000 f8a7 	bl	8002bd6 <.text_124>
 8002a88:	4620      	mov	r0, r4
 8002a8a:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
 8002a8e:	f000 f89e 	bl	8002bce <.text_123>
 8002a92:	d1f9      	bne.n	8002a88 <USBPD_PE_Request_CtrlMessage+0x60>
 8002a94:	6829      	ldr	r1, [r5, #0]
 8002a96:	684a      	ldr	r2, [r1, #4]
 8002a98:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 8002a9c:	b919      	cbnz	r1, 8002aa6 <USBPD_PE_Request_CtrlMessage+0x7e>
 8002a9e:	f3c7 0180 	ubfx	r1, r7, #2, #1
 8002aa2:	2900      	cmp	r1, #0
 8002aa4:	d1f0      	bne.n	8002a88 <USBPD_PE_Request_CtrlMessage+0x60>
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	7071      	strb	r1, [r6, #1]
 8002aaa:	211a      	movs	r1, #26
 8002aac:	e7e8      	b.n	8002a80 <USBPD_PE_Request_CtrlMessage+0x58>
 8002aae:	f000 f88e 	bl	8002bce <.text_123>
 8002ab2:	d1e9      	bne.n	8002a88 <USBPD_PE_Request_CtrlMessage+0x60>
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	7071      	strb	r1, [r6, #1]
 8002ab8:	2118      	movs	r1, #24
 8002aba:	e7e1      	b.n	8002a80 <USBPD_PE_Request_CtrlMessage+0x58>
 8002abc:	f000 f887 	bl	8002bce <.text_123>
 8002ac0:	d1e2      	bne.n	8002a88 <USBPD_PE_Request_CtrlMessage+0x60>
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	7071      	strb	r1, [r6, #1]
 8002ac6:	2194      	movs	r1, #148	; 0x94
 8002ac8:	e7da      	b.n	8002a80 <USBPD_PE_Request_CtrlMessage+0x58>
 8002aca:	f000 f880 	bl	8002bce <.text_123>
 8002ace:	d1db      	bne.n	8002a88 <USBPD_PE_Request_CtrlMessage+0x60>
 8002ad0:	6829      	ldr	r1, [r5, #0]
 8002ad2:	684a      	ldr	r2, [r1, #4]
 8002ad4:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 8002ad8:	2900      	cmp	r1, #0
 8002ada:	d0d5      	beq.n	8002a88 <USBPD_PE_Request_CtrlMessage+0x60>
 8002adc:	210a      	movs	r1, #10
 8002ade:	7019      	strb	r1, [r3, #0]
 8002ae0:	2108      	movs	r1, #8
 8002ae2:	f000 f870 	bl	8002bc6 <.text_122+0x2>
 8002ae6:	211e      	movs	r1, #30
 8002ae8:	e7ca      	b.n	8002a80 <USBPD_PE_Request_CtrlMessage+0x58>
 8002aea:	68aa      	ldr	r2, [r5, #8]
 8002aec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002aee:	2900      	cmp	r1, #0
 8002af0:	d0ca      	beq.n	8002a88 <USBPD_PE_Request_CtrlMessage+0x60>
 8002af2:	2210      	movs	r2, #16
 8002af4:	805a      	strh	r2, [r3, #2]
 8002af6:	2100      	movs	r1, #0
 8002af8:	7071      	strb	r1, [r6, #1]
 8002afa:	21a2      	movs	r1, #162	; 0xa2
 8002afc:	e7c0      	b.n	8002a80 <USBPD_PE_Request_CtrlMessage+0x58>
 8002afe:	7072      	strb	r2, [r6, #1]
 8002b00:	2111      	movs	r1, #17
 8002b02:	e7bd      	b.n	8002a80 <USBPD_PE_Request_CtrlMessage+0x58>
 8002b04:	ea0e 0707 	and.w	r7, lr, r7
 8002b08:	4547      	cmp	r7, r8
 8002b0a:	d1bd      	bne.n	8002a88 <USBPD_PE_Request_CtrlMessage+0x60>
 8002b0c:	2111      	movs	r1, #17
 8002b0e:	7019      	strb	r1, [r3, #0]
 8002b10:	210a      	movs	r1, #10
 8002b12:	f000 f858 	bl	8002bc6 <.text_122+0x2>
 8002b16:	212e      	movs	r1, #46	; 0x2e
 8002b18:	e7b2      	b.n	8002a80 <USBPD_PE_Request_CtrlMessage+0x58>
 8002b1a:	ea0e 0707 	and.w	r7, lr, r7
 8002b1e:	f240 3106 	movw	r1, #774	; 0x306
 8002b22:	428f      	cmp	r7, r1
 8002b24:	d1b0      	bne.n	8002a88 <USBPD_PE_Request_CtrlMessage+0x60>
 8002b26:	2116      	movs	r1, #22
 8002b28:	7019      	strb	r1, [r3, #0]
 8002b2a:	f240 110f 	movw	r1, #271	; 0x10f
 8002b2e:	e7f0      	b.n	8002b12 <USBPD_PE_Request_CtrlMessage+0xea>
 8002b30:	ea09 0707 	and.w	r7, r9, r7
 8002b34:	4547      	cmp	r7, r8
 8002b36:	d1a7      	bne.n	8002a88 <USBPD_PE_Request_CtrlMessage+0x60>
 8002b38:	212e      	movs	r1, #46	; 0x2e
 8002b3a:	7031      	strb	r1, [r6, #0]
 8002b3c:	2400      	movs	r4, #0
 8002b3e:	2112      	movs	r1, #18
 8002b40:	7019      	strb	r1, [r3, #0]
 8002b42:	f000 f83f 	bl	8002bc4 <.text_122>
 8002b46:	e79d      	b.n	8002a84 <USBPD_PE_Request_CtrlMessage+0x5c>
 8002b48:	ea0e 0707 	and.w	r7, lr, r7
 8002b4c:	4547      	cmp	r7, r8
 8002b4e:	d19b      	bne.n	8002a88 <USBPD_PE_Request_CtrlMessage+0x60>
 8002b50:	6829      	ldr	r1, [r5, #0]
 8002b52:	890a      	ldrh	r2, [r1, #8]
 8002b54:	f3c2 0140 	ubfx	r1, r2, #1, #1
 8002b58:	2900      	cmp	r1, #0
 8002b5a:	d095      	beq.n	8002a88 <USBPD_PE_Request_CtrlMessage+0x60>
 8002b5c:	2113      	movs	r1, #19
 8002b5e:	7019      	strb	r1, [r3, #0]
 8002b60:	2109      	movs	r1, #9
 8002b62:	e7be      	b.n	8002ae2 <USBPD_PE_Request_CtrlMessage+0xba>
 8002b64:	ea0e 0707 	and.w	r7, lr, r7
 8002b68:	4547      	cmp	r7, r8
 8002b6a:	d18d      	bne.n	8002a88 <USBPD_PE_Request_CtrlMessage+0x60>
 8002b6c:	6829      	ldr	r1, [r5, #0]
 8002b6e:	890a      	ldrh	r2, [r1, #8]
 8002b70:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8002b74:	2900      	cmp	r1, #0
 8002b76:	d087      	beq.n	8002a88 <USBPD_PE_Request_CtrlMessage+0x60>
 8002b78:	f000 f824 	bl	8002bc4 <.text_122>
 8002b7c:	2165      	movs	r1, #101	; 0x65
 8002b7e:	e77f      	b.n	8002a80 <USBPD_PE_Request_CtrlMessage+0x58>
 8002b80:	ea09 0707 	and.w	r7, r9, r7
 8002b84:	4547      	cmp	r7, r8
 8002b86:	d1f0      	bne.n	8002b6a <USBPD_PE_Request_CtrlMessage+0x142>
 8002b88:	6829      	ldr	r1, [r5, #0]
 8002b8a:	890f      	ldrh	r7, [r1, #8]
 8002b8c:	f3c7 11c0 	ubfx	r1, r7, #7, #1
 8002b90:	2900      	cmp	r1, #0
 8002b92:	d0f0      	beq.n	8002b76 <USBPD_PE_Request_CtrlMessage+0x14e>
 8002b94:	7072      	strb	r2, [r6, #1]
 8002b96:	f240 110d 	movw	r1, #269	; 0x10d
 8002b9a:	8059      	strh	r1, [r3, #2]
 8002b9c:	2115      	movs	r1, #21
 8002b9e:	7019      	strb	r1, [r3, #0]
 8002ba0:	e7b9      	b.n	8002b16 <USBPD_PE_Request_CtrlMessage+0xee>
 8002ba2:	f000 f814 	bl	8002bce <.text_123>
 8002ba6:	d10c      	bne.n	8002bc2 <USBPD_PE_Request_CtrlMessage+0x19a>
 8002ba8:	6829      	ldr	r1, [r5, #0]
 8002baa:	684f      	ldr	r7, [r1, #4]
 8002bac:	f3c7 1180 	ubfx	r1, r7, #6, #1
 8002bb0:	2900      	cmp	r1, #0
 8002bb2:	d006      	beq.n	8002bc2 <USBPD_PE_Request_CtrlMessage+0x19a>
 8002bb4:	7072      	strb	r2, [r6, #1]
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	8059      	strh	r1, [r3, #2]
 8002bba:	2105      	movs	r1, #5
 8002bbc:	7019      	strb	r1, [r3, #0]
 8002bbe:	e7aa      	b.n	8002b16 <USBPD_PE_Request_CtrlMessage+0xee>
 8002bc0:	2410      	movs	r4, #16
 8002bc2:	e761      	b.n	8002a88 <USBPD_PE_Request_CtrlMessage+0x60>

08002bc4 <.text_122>:
 8002bc4:	210b      	movs	r1, #11
 8002bc6:	8059      	strh	r1, [r3, #2]
 8002bc8:	2100      	movs	r1, #0
 8002bca:	7071      	strb	r1, [r6, #1]
 8002bcc:	4770      	bx	lr

08002bce <.text_123>:
 8002bce:	f3c7 2102 	ubfx	r1, r7, #8, #3
 8002bd2:	2903      	cmp	r1, #3
 8002bd4:	4770      	bx	lr

08002bd6 <.text_124>:
 8002bd6:	68a9      	ldr	r1, [r5, #8]
 8002bd8:	6a8a      	ldr	r2, [r1, #40]	; 0x28

08002bda <__iar_annotation$$tailcall>:
 8002bda:	4710      	bx	r2

08002bdc <USBPD_PE_Request_DataMessage>:
 8002bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bde:	f000 f83d 	bl	8002c5c <.text_126>
 8002be2:	b923      	cbnz	r3, 8002bee <USBPD_PE_Request_DataMessage+0x12>
 8002be4:	686f      	ldr	r7, [r5, #4]
 8002be6:	683f      	ldr	r7, [r7, #0]
 8002be8:	f3c7 3300 	ubfx	r3, r7, #12, #1
 8002bec:	b90b      	cbnz	r3, 8002bf2 <USBPD_PE_Request_DataMessage+0x16>
 8002bee:	2003      	movs	r0, #3
 8002bf0:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8002bf2:	2901      	cmp	r1, #1
 8002bf4:	f505 7366 	add.w	r3, r5, #920	; 0x398
 8002bf8:	f240 3c02 	movw	ip, #770	; 0x302
 8002bfc:	f240 7e03 	movw	lr, #1795	; 0x703
 8002c00:	d004      	beq.n	8002c0c <USBPD_PE_Request_DataMessage+0x30>
 8002c02:	2906      	cmp	r1, #6
 8002c04:	d010      	beq.n	8002c28 <USBPD_PE_Request_DataMessage+0x4c>
 8002c06:	2907      	cmp	r1, #7
 8002c08:	d019      	beq.n	8002c3e <USBPD_PE_Request_DataMessage+0x62>
 8002c0a:	e025      	b.n	8002c58 <USBPD_PE_Request_DataMessage+0x7c>
 8002c0c:	f3c7 0180 	ubfx	r1, r7, #2, #1
 8002c10:	b141      	cbz	r1, 8002c24 <USBPD_PE_Request_DataMessage+0x48>
 8002c12:	2101      	movs	r1, #1
 8002c14:	81d9      	strh	r1, [r3, #14]
 8002c16:	2100      	movs	r1, #0
 8002c18:	7071      	strb	r1, [r6, #1]
 8002c1a:	2107      	movs	r1, #7
 8002c1c:	7031      	strb	r1, [r6, #0]
 8002c1e:	2400      	movs	r4, #0
 8002c20:	f7ff ffd9 	bl	8002bd6 <.text_124>
 8002c24:	4620      	mov	r0, r4
 8002c26:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8002c28:	ea0e 0707 	and.w	r7, lr, r7
 8002c2c:	4567      	cmp	r7, ip
 8002c2e:	d1f9      	bne.n	8002c24 <USBPD_PE_Request_DataMessage+0x48>
 8002c30:	2400      	movs	r4, #0
 8002c32:	7074      	strb	r4, [r6, #1]
 8002c34:	6811      	ldr	r1, [r2, #0]
 8002c36:	6019      	str	r1, [r3, #0]
 8002c38:	212b      	movs	r1, #43	; 0x2b
 8002c3a:	7031      	strb	r1, [r6, #0]
 8002c3c:	e7f0      	b.n	8002c20 <USBPD_PE_Request_DataMessage+0x44>
 8002c3e:	ea0e 0707 	and.w	r7, lr, r7
 8002c42:	4567      	cmp	r7, ip
 8002c44:	d1ee      	bne.n	8002c24 <USBPD_PE_Request_DataMessage+0x48>
 8002c46:	6811      	ldr	r1, [r2, #0]
 8002c48:	6019      	str	r1, [r3, #0]
 8002c4a:	f240 110d 	movw	r1, #269	; 0x10d
 8002c4e:	81d9      	strh	r1, [r3, #14]
 8002c50:	2100      	movs	r1, #0
 8002c52:	7071      	strb	r1, [r6, #1]
 8002c54:	2162      	movs	r1, #98	; 0x62
 8002c56:	e7e1      	b.n	8002c1c <USBPD_PE_Request_DataMessage+0x40>
 8002c58:	2410      	movs	r4, #16
 8002c5a:	e7e3      	b.n	8002c24 <USBPD_PE_Request_DataMessage+0x48>

08002c5c <.text_126>:
 8002c5c:	f8df 3678 	ldr.w	r3, [pc, #1656]	; 80032d8 <.text_140>
 8002c60:	4604      	mov	r4, r0
 8002c62:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8002c66:	f205 367b 	addw	r6, r5, #891	; 0x37b
 8002c6a:	2402      	movs	r4, #2
 8002c6c:	7833      	ldrb	r3, [r6, #0]
 8002c6e:	4770      	bx	lr

08002c70 <USBPD_PE_Send_Request>:
 8002c70:	b570      	push	{r4, r5, r6, lr}
 8002c72:	f8df 3664 	ldr.w	r3, [pc, #1636]	; 80032d8 <.text_140>
 8002c76:	4604      	mov	r4, r0
 8002c78:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8002c7c:	f204 357b 	addw	r5, r4, #891	; 0x37b
 8002c80:	782b      	ldrb	r3, [r5, #0]
 8002c82:	b923      	cbnz	r3, 8002c8e <USBPD_PE_Send_Request+0x1e>
 8002c84:	6866      	ldr	r6, [r4, #4]
 8002c86:	6836      	ldr	r6, [r6, #0]
 8002c88:	f3c6 3300 	ubfx	r3, r6, #12, #1
 8002c8c:	b90b      	cbnz	r3, 8002c92 <USBPD_PE_Send_Request+0x22>
 8002c8e:	2003      	movs	r0, #3
 8002c90:	bd70      	pop	{r4, r5, r6, pc}
 8002c92:	f240 7304 	movw	r3, #1796	; 0x704
 8002c96:	401e      	ands	r6, r3
 8002c98:	f5b6 7f40 	cmp.w	r6, #768	; 0x300
 8002c9c:	d10d      	bne.n	8002cba <USBPD_PE_Send_Request+0x4a>
 8002c9e:	2645      	movs	r6, #69	; 0x45
 8002ca0:	702e      	strb	r6, [r5, #0]
 8002ca2:	6161      	str	r1, [r4, #20]
 8002ca4:	6921      	ldr	r1, [r4, #16]
 8002ca6:	f362 0183 	bfi	r1, r2, #2, #2
 8002caa:	6121      	str	r1, [r4, #16]
 8002cac:	2100      	movs	r1, #0
 8002cae:	7069      	strb	r1, [r5, #1]
 8002cb0:	68a1      	ldr	r1, [r4, #8]
 8002cb2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002cb4:	4790      	blx	r2
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	bd70      	pop	{r4, r5, r6, pc}
 8002cba:	2002      	movs	r0, #2
 8002cbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08002cc0 <USBPD_PE_SendExtendedMessage>:
 8002cc0:	e92d 4bfc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, fp, lr}
 8002cc4:	4683      	mov	fp, r0
 8002cc6:	460f      	mov	r7, r1
 8002cc8:	f8df 060c 	ldr.w	r0, [pc, #1548]	; 80032d8 <.text_140>
 8002ccc:	4659      	mov	r1, fp
 8002cce:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 8002cd2:	f894 037b 	ldrb.w	r0, [r4, #891]	; 0x37b
 8002cd6:	4691      	mov	r9, r2
 8002cd8:	4698      	mov	r8, r3
 8002cda:	b920      	cbnz	r0, 8002ce6 <USBPD_PE_SendExtendedMessage+0x26>
 8002cdc:	6861      	ldr	r1, [r4, #4]
 8002cde:	6809      	ldr	r1, [r1, #0]
 8002ce0:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8002ce4:	b908      	cbnz	r0, 8002cea <USBPD_PE_SendExtendedMessage+0x2a>
 8002ce6:	2003      	movs	r0, #3
 8002ce8:	e05e      	b.n	8002da8 <USBPD_PE_SendExtendedMessage+0xe8>
 8002cea:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8002cee:	2803      	cmp	r0, #3
 8002cf0:	d10a      	bne.n	8002d08 <USBPD_PE_SendExtendedMessage+0x48>
 8002cf2:	f001 0103 	and.w	r1, r1, #3
 8002cf6:	2901      	cmp	r1, #1
 8002cf8:	bf98      	it	ls
 8002cfa:	2001      	movls	r0, #1
 8002cfc:	d954      	bls.n	8002da8 <USBPD_PE_SendExtendedMessage+0xe8>
 8002cfe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002d00:	f240 1005 	movw	r0, #261	; 0x105
 8002d04:	4285      	cmp	r5, r0
 8002d06:	d301      	bcc.n	8002d0c <USBPD_PE_SendExtendedMessage+0x4c>
 8002d08:	2002      	movs	r0, #2
 8002d0a:	e04d      	b.n	8002da8 <USBPD_PE_SendExtendedMessage+0xe8>
 8002d0c:	6920      	ldr	r0, [r4, #16]
 8002d0e:	f020 0010 	bic.w	r0, r0, #16
 8002d12:	6120      	str	r0, [r4, #16]
 8002d14:	f1a9 0003 	sub.w	r0, r9, #3
 8002d18:	2808      	cmp	r0, #8
 8002d1a:	d828      	bhi.n	8002d6e <USBPD_PE_SendExtendedMessage+0xae>
 8002d1c:	e8df f000 	tbb	[pc, r0]
 8002d20:	1b271705 	.word	0x1b271705
 8002d24:	220c1d27 	.word	0x220c1d27
 8002d28:	000c      	.short	0x000c
 8002d2a:	210c      	movs	r1, #12
 8002d2c:	f8a4 13a6 	strh.w	r1, [r4, #934]	; 0x3a6
 8002d30:	6920      	ldr	r0, [r4, #16]
 8002d32:	f040 0010 	orr.w	r0, r0, #16
 8002d36:	6120      	str	r0, [r4, #16]
 8002d38:	0028      	movs	r0, r5
 8002d3a:	d026      	beq.n	8002d8a <USBPD_PE_SendExtendedMessage+0xca>
 8002d3c:	4658      	mov	r0, fp
 8002d3e:	f001 ffc6 	bl	8004cce <PE_Get_UnchunkedSupport>
 8002d42:	2600      	movs	r6, #0
 8002d44:	2801      	cmp	r0, #1
 8002d46:	bf08      	it	eq
 8002d48:	2604      	moveq	r6, #4
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	e018      	b.n	8002d80 <USBPD_PE_SendExtendedMessage+0xc0>
 8002d4e:	200d      	movs	r0, #13
 8002d50:	f8a4 03a6 	strh.w	r0, [r4, #934]	; 0x3a6
 8002d54:	e7ec      	b.n	8002d30 <USBPD_PE_SendExtendedMessage+0x70>
 8002d56:	210e      	movs	r1, #14
 8002d58:	e7e8      	b.n	8002d2c <USBPD_PE_SendExtendedMessage+0x6c>
 8002d5a:	f240 110b 	movw	r1, #267	; 0x10b
 8002d5e:	f8a4 13a6 	strh.w	r1, [r4, #934]	; 0x3a6
 8002d62:	e7e9      	b.n	8002d38 <USBPD_PE_SendExtendedMessage+0x78>
 8002d64:	f44f 7086 	mov.w	r0, #268	; 0x10c
 8002d68:	f8a4 03a6 	strh.w	r0, [r4, #934]	; 0x3a6
 8002d6c:	e7e4      	b.n	8002d38 <USBPD_PE_SendExtendedMessage+0x78>
 8002d6e:	2010      	movs	r0, #16
 8002d70:	e01a      	b.n	8002da8 <USBPD_PE_SendExtendedMessage+0xe8>
 8002d72:	1832      	adds	r2, r6, r0
 8002d74:	f818 1000 	ldrb.w	r1, [r8, r0]
 8002d78:	4422      	add	r2, r4
 8002d7a:	1c40      	adds	r0, r0, #1
 8002d7c:	f882 1248 	strb.w	r1, [r2, #584]	; 0x248
 8002d80:	42a8      	cmp	r0, r5
 8002d82:	d3f6      	bcc.n	8002d72 <USBPD_PE_SendExtendedMessage+0xb2>
 8002d84:	f8a4 5352 	strh.w	r5, [r4, #850]	; 0x352
 8002d88:	e002      	b.n	8002d90 <USBPD_PE_SendExtendedMessage+0xd0>
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f8a4 0352 	strh.w	r0, [r4, #850]	; 0x352
 8002d90:	f204 307b 	addw	r0, r4, #891	; 0x37b
 8002d94:	2131      	movs	r1, #49	; 0x31
 8002d96:	7047      	strb	r7, [r0, #1]
 8002d98:	f884 93a3 	strb.w	r9, [r4, #931]	; 0x3a3
 8002d9c:	7001      	strb	r1, [r0, #0]
 8002d9e:	4658      	mov	r0, fp
 8002da0:	68a1      	ldr	r1, [r4, #8]
 8002da2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002da4:	4790      	blx	r2
 8002da6:	2000      	movs	r0, #0
 8002da8:	e8bd 8bf6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, fp, pc}

08002dac <PE_Send_SRCCapabilities>:
 8002dac:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8002dae:	4604      	mov	r4, r0
 8002db0:	460d      	mov	r5, r1
 8002db2:	211e      	movs	r1, #30
 8002db4:	f104 001e 	add.w	r0, r4, #30
 8002db8:	f012 fe6c 	bl	8015a94 <__aeabi_memclr>
 8002dbc:	68a6      	ldr	r6, [r4, #8]
 8002dbe:	7c20      	ldrb	r0, [r4, #16]
 8002dc0:	6977      	ldr	r7, [r6, #20]
 8002dc2:	ab02      	add	r3, sp, #8
 8002dc4:	f104 0220 	add.w	r2, r4, #32
 8002dc8:	2100      	movs	r1, #0
 8002dca:	f002 fc2d 	bl	8005628 <.text_242>
 8002dce:	9e02      	ldr	r6, [sp, #8]
 8002dd0:	1cb6      	adds	r6, r6, #2
 8002dd2:	b2f6      	uxtb	r6, r6
 8002dd4:	9501      	str	r5, [sp, #4]
 8002dd6:	9600      	str	r6, [sp, #0]
 8002dd8:	f104 031e 	add.w	r3, r4, #30
 8002ddc:	7c20      	ldrb	r0, [r4, #16]
 8002dde:	f000 f809 	bl	8002df4 <.text_130>
 8002de2:	f002 ff59 	bl	8005c98 <USBPD_PRL_SendMessage>
 8002de6:	2803      	cmp	r0, #3
 8002de8:	d103      	bne.n	8002df2 <PE_Send_SRCCapabilities+0x46>
 8002dea:	f000 f808 	bl	8002dfe <.text_131>
 8002dee:	d1f1      	bne.n	8002dd4 <PE_Send_SRCCapabilities+0x28>
 8002df0:	2010      	movs	r0, #16
 8002df2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08002df4 <.text_130>:
 8002df4:	2201      	movs	r2, #1
 8002df6:	2100      	movs	r1, #0
 8002df8:	f000 0001 	and.w	r0, r0, #1
 8002dfc:	4770      	bx	lr

08002dfe <.text_131>:
 8002dfe:	6860      	ldr	r0, [r4, #4]
 8002e00:	6801      	ldr	r1, [r0, #0]
 8002e02:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8002e06:	2800      	cmp	r0, #0
 8002e08:	4770      	bx	lr

08002e0a <PE_Send_CtrlMessage>:
 8002e0a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8002e0e:	4606      	mov	r6, r0
 8002e10:	9c08      	ldr	r4, [sp, #32]
 8002e12:	461d      	mov	r5, r3
 8002e14:	2002      	movs	r0, #2
 8002e16:	4688      	mov	r8, r1
 8002e18:	4617      	mov	r7, r2
 8002e1a:	9401      	str	r4, [sp, #4]
 8002e1c:	9000      	str	r0, [sp, #0]
 8002e1e:	f106 031e 	add.w	r3, r6, #30
 8002e22:	e006      	b.n	8002e32 <PE_Send_CtrlMessage+0x28>
 8002e24:	2102      	movs	r1, #2
 8002e26:	9100      	str	r1, [sp, #0]
 8002e28:	9401      	str	r4, [sp, #4]
 8002e2a:	f106 031e 	add.w	r3, r6, #30
 8002e2e:	463a      	mov	r2, r7
 8002e30:	4641      	mov	r1, r8
 8002e32:	7c30      	ldrb	r0, [r6, #16]
 8002e34:	f002 f823 	bl	8004e7e <.text_232>
 8002e38:	2803      	cmp	r0, #3
 8002e3a:	d10f      	bne.n	8002e5c <PE_Send_CtrlMessage+0x52>
 8002e3c:	6870      	ldr	r0, [r6, #4]
 8002e3e:	f7ff ffdf 	bl	8002e00 <.text_131+0x2>
 8002e42:	d1ef      	bne.n	8002e24 <PE_Send_CtrlMessage+0x1a>
 8002e44:	2100      	movs	r1, #0
 8002e46:	f886 137f 	strb.w	r1, [r6, #895]	; 0x37f
 8002e4a:	2010      	movs	r0, #16
 8002e4c:	e004      	b.n	8002e58 <PE_Send_CtrlMessage+0x4e>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	9500      	str	r5, [sp, #0]
 8002e52:	4630      	mov	r0, r6
 8002e54:	f002 f817 	bl	8004e86 <PE_CheckSendMessageStatus>
 8002e58:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}
 8002e5c:	2f0d      	cmp	r7, #13
 8002e5e:	4641      	mov	r1, r8
 8002e60:	bf0c      	ite	eq
 8002e62:	2201      	moveq	r2, #1
 8002e64:	2200      	movne	r2, #0
 8002e66:	e7f2      	b.n	8002e4e <PE_Send_CtrlMessage+0x44>

08002e68 <PE_Send_DataMessage>:
 8002e68:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8002e6c:	4604      	mov	r4, r0
 8002e6e:	9f08      	ldr	r7, [sp, #32]
 8002e70:	460d      	mov	r5, r1
 8002e72:	4690      	mov	r8, r2
 8002e74:	2000      	movs	r0, #0
 8002e76:	e010      	b.n	8002e9a <PE_Send_DataMessage+0x32>
 8002e78:	2100      	movs	r1, #0
 8002e7a:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 8002e7e:	681e      	ldr	r6, [r3, #0]
 8002e80:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 8002e84:	fa26 f60e 	lsr.w	r6, r6, lr
 8002e88:	eb02 0e01 	add.w	lr, r2, r1
 8002e8c:	1c49      	adds	r1, r1, #1
 8002e8e:	2904      	cmp	r1, #4
 8002e90:	f88e 6020 	strb.w	r6, [lr, #32]
 8002e94:	d3f3      	bcc.n	8002e7e <PE_Send_DataMessage+0x16>
 8002e96:	1d1b      	adds	r3, r3, #4
 8002e98:	1c40      	adds	r0, r0, #1
 8002e9a:	42b8      	cmp	r0, r7
 8002e9c:	d3ec      	bcc.n	8002e78 <PE_Send_DataMessage+0x10>
 8002e9e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002ea0:	00bf      	lsls	r7, r7, #2
 8002ea2:	1cbf      	adds	r7, r7, #2
 8002ea4:	9601      	str	r6, [sp, #4]
 8002ea6:	b2b8      	uxth	r0, r7
 8002ea8:	9000      	str	r0, [sp, #0]
 8002eaa:	f104 031e 	add.w	r3, r4, #30
 8002eae:	7c20      	ldrb	r0, [r4, #16]
 8002eb0:	4642      	mov	r2, r8
 8002eb2:	4629      	mov	r1, r5
 8002eb4:	f001 ffe3 	bl	8004e7e <.text_232>
 8002eb8:	2803      	cmp	r0, #3
 8002eba:	d104      	bne.n	8002ec6 <PE_Send_DataMessage+0x5e>
 8002ebc:	f7ff ff9f 	bl	8002dfe <.text_131>
 8002ec0:	d1f0      	bne.n	8002ea4 <PE_Send_DataMessage+0x3c>
 8002ec2:	2010      	movs	r0, #16
 8002ec4:	e007      	b.n	8002ed6 <PE_Send_DataMessage+0x6e>
 8002ec6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002ec8:	9100      	str	r1, [sp, #0]
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2200      	movs	r2, #0
 8002ece:	4629      	mov	r1, r5
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	f001 ffd8 	bl	8004e86 <PE_CheckSendMessageStatus>
 8002ed6:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

08002eda <PE_Send_HARDRESET>:
 8002eda:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8002edc:	4604      	mov	r4, r0
 8002ede:	4e15      	ldr	r6, [pc, #84]	; (8002f34 <.text_135>)
 8002ee0:	f8d4 5394 	ldr.w	r5, [r4, #916]	; 0x394
 8002ee4:	7830      	ldrb	r0, [r6, #0]
 8002ee6:	0781      	lsls	r1, r0, #30
 8002ee8:	d506      	bpl.n	8002ef8 <PE_Send_HARDRESET+0x1e>
 8002eea:	f001 fdc1 	bl	8004a70 <.text_212>
 8002eee:	7c21      	ldrb	r1, [r4, #16]
 8002ef0:	68f6      	ldr	r6, [r6, #12]
 8002ef2:	221f      	movs	r2, #31
 8002ef4:	f001 fe5f 	bl	8004bb6 <.text_218>
 8002ef8:	f001 fa62 	bl	80043c0 <.text_189>
 8002efc:	211f      	movs	r1, #31
 8002efe:	f000 ff69 	bl	8003dd4 <.text_164+0x6>
 8002f02:	f002 fb7e 	bl	8005602 <.text_239>
 8002f06:	f000 f817 	bl	8002f38 <.text_136>
 8002f0a:	f241 7671 	movw	r6, #6001	; 0x1771
 8002f0e:	2803      	cmp	r0, #3
 8002f10:	d10c      	bne.n	8002f2c <PE_Send_HARDRESET+0x52>
 8002f12:	f8d4 0394 	ldr.w	r0, [r4, #916]	; 0x394
 8002f16:	1b40      	subs	r0, r0, r5
 8002f18:	42b0      	cmp	r0, r6
 8002f1a:	d208      	bcs.n	8002f2e <PE_Send_HARDRESET+0x54>
 8002f1c:	6860      	ldr	r0, [r4, #4]
 8002f1e:	6801      	ldr	r1, [r0, #0]
 8002f20:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8002f24:	b118      	cbz	r0, 8002f2e <PE_Send_HARDRESET+0x54>
 8002f26:	f000 f807 	bl	8002f38 <.text_136>
 8002f2a:	e7f0      	b.n	8002f0e <PE_Send_HARDRESET+0x34>
 8002f2c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002f2e:	2004      	movs	r0, #4
 8002f30:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

08002f34 <.text_135>:
 8002f34:	200000d0 	.word	0x200000d0

08002f38 <.text_136>:
 8002f38:	7c20      	ldrb	r0, [r4, #16]
 8002f3a:	2105      	movs	r1, #5
 8002f3c:	f000 0001 	and.w	r0, r0, #1
 8002f40:	f003 b816 	b.w	8005f70 <USBPD_PRL_ResetRequestProcess>

08002f44 <PE_PerformSoftReset>:
 8002f44:	b510      	push	{r4, lr}
 8002f46:	4604      	mov	r4, r0
 8002f48:	6860      	ldr	r0, [r4, #4]
 8002f4a:	6801      	ldr	r1, [r0, #0]
 8002f4c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8002f50:	b138      	cbz	r0, 8002f62 <PE_PerformSoftReset+0x1e>
 8002f52:	2100      	movs	r1, #0
 8002f54:	7661      	strb	r1, [r4, #25]
 8002f56:	2101      	movs	r1, #1
 8002f58:	7c20      	ldrb	r0, [r4, #16]
 8002f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f5e:	f001 b838 	b.w	8003fd2 <.text_185>
 8002f62:	7c20      	ldrb	r0, [r4, #16]
 8002f64:	f7fe fa00 	bl	8001368 <.text_37+0x2>
 8002f68:	2000      	movs	r0, #0
 8002f6a:	7620      	strb	r0, [r4, #24]
 8002f6c:	bd10      	pop	{r4, pc}

08002f6e <PE_Receive_SVDM>:
 8002f6e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8002f70:	f500 745e 	add.w	r4, r0, #888	; 0x378
 8002f74:	8b61      	ldrh	r1, [r4, #26]
 8002f76:	0b09      	lsrs	r1, r1, #12
 8002f78:	f001 0107 	and.w	r1, r1, #7
 8002f7c:	1e4a      	subs	r2, r1, #1
 8002f7e:	7aa1      	ldrb	r1, [r4, #10]
 8002f80:	7022      	strb	r2, [r4, #0]
 8002f82:	2900      	cmp	r1, #0
 8002f84:	d16f      	bne.n	8003066 <PE_Receive_SVDM+0xf8>
 8002f86:	e013      	b.n	8002fb0 <PE_Receive_SVDM+0x42>
 8002f88:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8002f8c:	f502 72a3 	add.w	r2, r2, #326	; 0x146
 8002f90:	7813      	ldrb	r3, [r2, #0]
 8002f92:	7855      	ldrb	r5, [r2, #1]
 8002f94:	7896      	ldrb	r6, [r2, #2]
 8002f96:	78d2      	ldrb	r2, [r2, #3]
 8002f98:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 8002f9c:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 8002fa0:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8002fa4:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8002fa8:	1c49      	adds	r1, r1, #1
 8002faa:	f8c5 3360 	str.w	r3, [r5, #864]	; 0x360
 8002fae:	b2c9      	uxtb	r1, r1
 8002fb0:	7825      	ldrb	r5, [r4, #0]
 8002fb2:	42a9      	cmp	r1, r5
 8002fb4:	dbe8      	blt.n	8002f88 <PE_Receive_SVDM+0x1a>
 8002fb6:	f500 7255 	add.w	r2, r0, #852	; 0x354
 8002fba:	f248 0319 	movw	r3, #32793	; 0x8019
 8002fbe:	7816      	ldrb	r6, [r2, #0]
 8002fc0:	f006 061f 	and.w	r6, r6, #31
 8002fc4:	1e76      	subs	r6, r6, #1
 8002fc6:	f248 010f 	movw	r1, #32783	; 0x800f
 8002fca:	d00d      	beq.n	8002fe8 <PE_Receive_SVDM+0x7a>
 8002fcc:	1e76      	subs	r6, r6, #1
 8002fce:	d01f      	beq.n	8003010 <PE_Receive_SVDM+0xa2>
 8002fd0:	1e76      	subs	r6, r6, #1
 8002fd2:	d023      	beq.n	800301c <PE_Receive_SVDM+0xae>
 8002fd4:	1e76      	subs	r6, r6, #1
 8002fd6:	d027      	beq.n	8003028 <PE_Receive_SVDM+0xba>
 8002fd8:	1e76      	subs	r6, r6, #1
 8002fda:	d02b      	beq.n	8003034 <PE_Receive_SVDM+0xc6>
 8002fdc:	1e76      	subs	r6, r6, #1
 8002fde:	d02f      	beq.n	8003040 <PE_Receive_SVDM+0xd2>
 8002fe0:	3e0a      	subs	r6, #10
 8002fe2:	2e0f      	cmp	r6, #15
 8002fe4:	d939      	bls.n	800305a <PE_Receive_SVDM+0xec>
 8002fe6:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8002fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fec:	8383      	strh	r3, [r0, #28]
 8002fee:	6840      	ldr	r0, [r0, #4]
 8002ff0:	6812      	ldr	r2, [r2, #0]
 8002ff2:	6803      	ldr	r3, [r0, #0]
 8002ff4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002ff8:	f3c2 3241 	ubfx	r2, r2, #13, #2
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	bfb8      	it	lt
 8003000:	4613      	movlt	r3, r2
 8003002:	6802      	ldr	r2, [r0, #0]
 8003004:	f363 1245 	bfi	r2, r3, #5, #1
 8003008:	6002      	str	r2, [r0, #0]
 800300a:	81a1      	strh	r1, [r4, #12]
 800300c:	2075      	movs	r0, #117	; 0x75
 800300e:	e029      	b.n	8003064 <PE_Receive_SVDM+0xf6>
 8003010:	f44f 7281 	mov.w	r2, #258	; 0x102
 8003014:	8382      	strh	r2, [r0, #28]
 8003016:	81a1      	strh	r1, [r4, #12]
 8003018:	2076      	movs	r0, #118	; 0x76
 800301a:	e023      	b.n	8003064 <PE_Receive_SVDM+0xf6>
 800301c:	f240 1203 	movw	r2, #259	; 0x103
 8003020:	8382      	strh	r2, [r0, #28]
 8003022:	81a1      	strh	r1, [r4, #12]
 8003024:	2078      	movs	r0, #120	; 0x78
 8003026:	e01d      	b.n	8003064 <PE_Receive_SVDM+0xf6>
 8003028:	f44f 7182 	mov.w	r1, #260	; 0x104
 800302c:	8381      	strh	r1, [r0, #28]
 800302e:	81a3      	strh	r3, [r4, #12]
 8003030:	2079      	movs	r0, #121	; 0x79
 8003032:	e017      	b.n	8003064 <PE_Receive_SVDM+0xf6>
 8003034:	f240 1105 	movw	r1, #261	; 0x105
 8003038:	8381      	strh	r1, [r0, #28]
 800303a:	81a3      	strh	r3, [r4, #12]
 800303c:	207a      	movs	r0, #122	; 0x7a
 800303e:	e011      	b.n	8003064 <PE_Receive_SVDM+0xf6>
 8003040:	68c1      	ldr	r1, [r0, #12]
 8003042:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8003044:	b13b      	cbz	r3, 8003056 <PE_Receive_SVDM+0xe8>
 8003046:	7c00      	ldrb	r0, [r0, #16]
 8003048:	68d2      	ldr	r2, [r2, #12]
 800304a:	0029      	movs	r1, r5
 800304c:	bf18      	it	ne
 800304e:	2101      	movne	r1, #1
 8003050:	f000 0001 	and.w	r0, r0, #1
 8003054:	4798      	blx	r3
 8003056:	2003      	movs	r0, #3
 8003058:	e004      	b.n	8003064 <PE_Receive_SVDM+0xf6>
 800305a:	f44f 7285 	mov.w	r2, #266	; 0x10a
 800305e:	8382      	strh	r2, [r0, #28]
 8003060:	81a1      	strh	r1, [r4, #12]
 8003062:	207b      	movs	r0, #123	; 0x7b
 8003064:	71e0      	strb	r0, [r4, #7]
 8003066:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08003068 <PE_StateMachine_VDMCable>:
 8003068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800306c:	b089      	sub	sp, #36	; 0x24
 800306e:	2702      	movs	r7, #2
 8003070:	4605      	mov	r5, r0
 8003072:	4689      	mov	r9, r1
 8003074:	f895 037f 	ldrb.w	r0, [r5, #895]	; 0x37f
 8003078:	2805      	cmp	r0, #5
 800307a:	f505 7661 	add.w	r6, r5, #900	; 0x384
 800307e:	f248 042d 	movw	r4, #32813	; 0x802d
 8003082:	d002      	beq.n	800308a <PE_StateMachine_VDMCable+0x22>
 8003084:	289a      	cmp	r0, #154	; 0x9a
 8003086:	d068      	beq.n	800315a <PE_StateMachine_VDMCable+0xf2>
 8003088:	e121      	b.n	80032ce <PE_StateMachine_VDMCable+0x266>
 800308a:	6868      	ldr	r0, [r5, #4]
 800308c:	7801      	ldrb	r1, [r0, #0]
 800308e:	7c28      	ldrb	r0, [r5, #16]
 8003090:	f001 0103 	and.w	r1, r1, #3
 8003094:	f000 0001 	and.w	r0, r0, #1
 8003098:	f001 fdcb 	bl	8004c32 <PE_ExtRevisionInteroperability_Cable>
 800309c:	f8d5 1354 	ldr.w	r1, [r5, #852]	; 0x354
 80030a0:	686a      	ldr	r2, [r5, #4]
 80030a2:	0949      	lsrs	r1, r1, #5
 80030a4:	0149      	lsls	r1, r1, #5
 80030a6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80030aa:	f041 0101 	orr.w	r1, r1, #1
 80030ae:	f8c5 1354 	str.w	r1, [r5, #852]	; 0x354
 80030b2:	6810      	ldr	r0, [r2, #0]
 80030b4:	f3c0 1340 	ubfx	r3, r0, #5, #1
 80030b8:	f649 003f 	movw	r0, #38975	; 0x983f
 80030bc:	4001      	ands	r1, r0
 80030be:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
 80030c2:	f041 417f 	orr.w	r1, r1, #4278190080	; 0xff000000
 80030c6:	f8c5 1354 	str.w	r1, [r5, #852]	; 0x354
 80030ca:	f505 7355 	add.w	r3, r5, #852	; 0x354
 80030ce:	6810      	ldr	r0, [r2, #0]
 80030d0:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80030d4:	2800      	cmp	r0, #0
 80030d6:	bf1d      	ittte	ne
 80030d8:	6928      	ldrne	r0, [r5, #16]
 80030da:	0840      	lsrne	r0, r0, #1
 80030dc:	f000 0001 	andne.w	r0, r0, #1
 80030e0:	2002      	moveq	r0, #2
 80030e2:	9002      	str	r0, [sp, #8]
 80030e4:	2101      	movs	r1, #1
 80030e6:	209a      	movs	r0, #154	; 0x9a
 80030e8:	9001      	str	r0, [sp, #4]
 80030ea:	9100      	str	r1, [sp, #0]
 80030ec:	220f      	movs	r2, #15
 80030ee:	f000 ff0e 	bl	8003f0e <.text_179>
 80030f2:	b958      	cbnz	r0, 800310c <PE_StateMachine_VDMCable+0xa4>
 80030f4:	6928      	ldr	r0, [r5, #16]
 80030f6:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 80030fa:	6128      	str	r0, [r5, #16]
 80030fc:	f240 1101 	movw	r1, #257	; 0x101
 8003100:	83a9      	strh	r1, [r5, #28]
 8003102:	f248 001e 	movw	r0, #32798	; 0x801e
 8003106:	80b0      	strh	r0, [r6, #4]
 8003108:	271e      	movs	r7, #30
 800310a:	e0e0      	b.n	80032ce <PE_StateMachine_VDMCable+0x266>
 800310c:	2809      	cmp	r0, #9
 800310e:	d0fc      	beq.n	800310a <PE_StateMachine_VDMCable+0xa2>
 8003110:	7ea8      	ldrb	r0, [r5, #26]
 8003112:	2815      	cmp	r0, #21
 8003114:	bf38      	it	cc
 8003116:	80b4      	strhcc	r4, [r6, #4]
 8003118:	d308      	bcc.n	800312c <PE_StateMachine_VDMCable+0xc4>
 800311a:	68e8      	ldr	r0, [r5, #12]
 800311c:	6944      	ldr	r4, [r0, #20]
 800311e:	b12c      	cbz	r4, 800312c <PE_StateMachine_VDMCable+0xc4>
 8003120:	7c28      	ldrb	r0, [r5, #16]
 8003122:	2300      	movs	r3, #0
 8003124:	2205      	movs	r2, #5
 8003126:	f001 fd3c 	bl	8004ba2 <.text_216+0x2>
 800312a:	47a0      	blx	r4
 800312c:	f000 f8f5 	bl	800331a <.text_146+0x4>
 8003130:	d069      	beq.n	8003206 <PE_StateMachine_VDMCable+0x19e>
 8003132:	8831      	ldrh	r1, [r6, #0]
 8003134:	0448      	lsls	r0, r1, #17
 8003136:	d00c      	beq.n	8003152 <PE_StateMachine_VDMCable+0xea>
 8003138:	2008      	movs	r0, #8
 800313a:	f885 037f 	strb.w	r0, [r5, #895]	; 0x37f
 800313e:	8830      	ldrh	r0, [r6, #0]
 8003140:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8003144:	282d      	cmp	r0, #45	; 0x2d
 8003146:	bf2e      	itee	cs
 8003148:	272d      	movcs	r7, #45	; 0x2d
 800314a:	8837      	ldrhcc	r7, [r6, #0]
 800314c:	f3c7 070e 	ubfxcc	r7, r7, #0, #15
 8003150:	e0bd      	b.n	80032ce <PE_StateMachine_VDMCable+0x266>
 8003152:	2007      	movs	r0, #7
 8003154:	f885 037f 	strb.w	r0, [r5, #895]	; 0x37f
 8003158:	e0b9      	b.n	80032ce <PE_StateMachine_VDMCable+0x266>
 800315a:	f899 2000 	ldrb.w	r2, [r9]
 800315e:	89f1      	ldrh	r1, [r6, #14]
 8003160:	f8df 8ba8 	ldr.w	r8, [pc, #2984]	; 8003d0c <.text_148>
 8003164:	2a12      	cmp	r2, #18
 8003166:	d155      	bne.n	8003214 <PE_StateMachine_VDMCable+0x1ac>
 8003168:	0bc8      	lsrs	r0, r1, #15
 800316a:	d153      	bne.n	8003214 <PE_StateMachine_VDMCable+0x1ac>
 800316c:	f000 fe10 	bl	8003d90 <.text_161>
 8003170:	d050      	beq.n	8003214 <PE_StateMachine_VDMCable+0x1ac>
 8003172:	f001 001f 	and.w	r0, r1, #31
 8003176:	280f      	cmp	r0, #15
 8003178:	d14c      	bne.n	8003214 <PE_StateMachine_VDMCable+0x1ac>
 800317a:	2114      	movs	r1, #20
 800317c:	f889 1000 	strb.w	r1, [r9]
 8003180:	7c28      	ldrb	r0, [r5, #16]
 8003182:	f001 f92f 	bl	80043e4 <.text_192+0x2>
 8003186:	f000 fdd1 	bl	8003d2c <.text_152>
 800318a:	d1e5      	bne.n	8003158 <PE_StateMachine_VDMCable+0xf0>
 800318c:	f000 fdd4 	bl	8003d38 <.text_153>
 8003190:	d0e2      	beq.n	8003158 <PE_StateMachine_VDMCable+0xf0>
 8003192:	89f0      	ldrh	r0, [r6, #14]
 8003194:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8003198:	f001 fcfe 	bl	8004b98 <.text_215>
 800319c:	f001 fd49 	bl	8004c32 <PE_ExtRevisionInteroperability_Cable>
 80031a0:	f000 f8ac 	bl	80032fc <.text_144>
 80031a4:	68e9      	ldr	r1, [r5, #12]
 80031a6:	6948      	ldr	r0, [r1, #20]
 80031a8:	2800      	cmp	r0, #0
 80031aa:	d02a      	beq.n	8003202 <PE_StateMachine_VDMCable+0x19a>
 80031ac:	2c01      	cmp	r4, #1
 80031ae:	d11b      	bne.n	80031e8 <PE_StateMachine_VDMCable+0x180>
 80031b0:	7c28      	ldrb	r0, [r5, #16]
 80031b2:	aa03      	add	r2, sp, #12
 80031b4:	f505 71a3 	add.w	r1, r5, #326	; 0x146
 80031b8:	f000 0001 	and.w	r0, r0, #1
 80031bc:	f001 fd92 	bl	8004ce4 <PE_SVDM_CheckIdentity>
 80031c0:	b990      	cbnz	r0, 80031e8 <PE_StateMachine_VDMCable+0x180>
 80031c2:	68ec      	ldr	r4, [r5, #12]
 80031c4:	7c28      	ldrb	r0, [r5, #16]
 80031c6:	6967      	ldr	r7, [r4, #20]
 80031c8:	ab03      	add	r3, sp, #12
 80031ca:	2201      	movs	r2, #1
 80031cc:	f001 fce9 	bl	8004ba2 <.text_216+0x2>
 80031d0:	47b8      	blx	r7
 80031d2:	f898 0000 	ldrb.w	r0, [r8]
 80031d6:	0781      	lsls	r1, r0, #30
 80031d8:	d504      	bpl.n	80031e4 <PE_StateMachine_VDMCable+0x17c>
 80031da:	f000 f895 	bl	8003308 <.text_145>
 80031de:	2252      	movs	r2, #82	; 0x52
 80031e0:	f000 f881 	bl	80032e6 <.text_142+0x2>
 80031e4:	2152      	movs	r1, #82	; 0x52
 80031e6:	e008      	b.n	80031fa <PE_StateMachine_VDMCable+0x192>
 80031e8:	f898 0000 	ldrb.w	r0, [r8]
 80031ec:	0781      	lsls	r1, r0, #30
 80031ee:	d503      	bpl.n	80031f8 <PE_StateMachine_VDMCable+0x190>
 80031f0:	f000 f88a 	bl	8003308 <.text_145>
 80031f4:	f000 f876 	bl	80032e4 <.text_142>
 80031f8:	211b      	movs	r1, #27
 80031fa:	68aa      	ldr	r2, [r5, #8]
 80031fc:	7c28      	ldrb	r0, [r5, #16]
 80031fe:	f000 fde8 	bl	8003dd2 <.text_164+0x4>
 8003202:	f000 f888 	bl	8003316 <.text_146>
 8003206:	d03f      	beq.n	8003288 <PE_StateMachine_VDMCable+0x220>
 8003208:	2107      	movs	r1, #7
 800320a:	2700      	movs	r7, #0
 800320c:	f885 137f 	strb.w	r1, [r5, #895]	; 0x37f
 8003210:	83af      	strh	r7, [r5, #28]
 8003212:	e05c      	b.n	80032ce <PE_StateMachine_VDMCable+0x266>
 8003214:	f001 011f 	and.w	r1, r1, #31
 8003218:	2910      	cmp	r1, #16
 800321a:	d122      	bne.n	8003262 <PE_StateMachine_VDMCable+0x1fa>
 800321c:	f000 f86e 	bl	80032fc <.text_144>
 8003220:	f000 fddb 	bl	8003dda <.text_165>
 8003224:	f000 f877 	bl	8003316 <.text_146>
 8003228:	d104      	bne.n	8003234 <PE_StateMachine_VDMCable+0x1cc>
 800322a:	2103      	movs	r1, #3
 800322c:	f885 137f 	strb.w	r1, [r5, #895]	; 0x37f
 8003230:	2700      	movs	r7, #0
 8003232:	e004      	b.n	800323e <PE_StateMachine_VDMCable+0x1d6>
 8003234:	2007      	movs	r0, #7
 8003236:	2700      	movs	r7, #0
 8003238:	f885 037f 	strb.w	r0, [r5, #895]	; 0x37f
 800323c:	83af      	strh	r7, [r5, #28]
 800323e:	f898 0000 	ldrb.w	r0, [r8]
 8003242:	0781      	lsls	r1, r0, #30
 8003244:	d507      	bpl.n	8003256 <PE_StateMachine_VDMCable+0x1ee>
 8003246:	9700      	str	r7, [sp, #0]
 8003248:	2300      	movs	r3, #0
 800324a:	7c29      	ldrb	r1, [r5, #16]
 800324c:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8003250:	2259      	movs	r2, #89	; 0x59
 8003252:	f000 f848 	bl	80032e6 <.text_142+0x2>
 8003256:	f000 f841 	bl	80032dc <.text_141>
 800325a:	2159      	movs	r1, #89	; 0x59
 800325c:	f000 fdba 	bl	8003dd4 <.text_164+0x6>
 8003260:	e035      	b.n	80032ce <PE_StateMachine_VDMCable+0x266>
 8003262:	88b0      	ldrh	r0, [r6, #4]
 8003264:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003268:	d131      	bne.n	80032ce <PE_StateMachine_VDMCable+0x266>
 800326a:	f000 f847 	bl	80032fc <.text_144>
 800326e:	2000      	movs	r0, #0
 8003270:	80b0      	strh	r0, [r6, #4]
 8003272:	6868      	ldr	r0, [r5, #4]
 8003274:	6801      	ldr	r1, [r0, #0]
 8003276:	f3c1 2202 	ubfx	r2, r1, #8, #3
 800327a:	2a03      	cmp	r2, #3
 800327c:	d109      	bne.n	8003292 <PE_StateMachine_VDMCable+0x22a>
 800327e:	68e8      	ldr	r0, [r5, #12]
 8003280:	6944      	ldr	r4, [r0, #20]
 8003282:	b10c      	cbz	r4, 8003288 <PE_StateMachine_VDMCable+0x220>
 8003284:	f000 f833 	bl	80032ee <.text_143>
 8003288:	2003      	movs	r0, #3
 800328a:	f885 037f 	strb.w	r0, [r5, #895]	; 0x37f
 800328e:	2700      	movs	r7, #0
 8003290:	e01d      	b.n	80032ce <PE_StateMachine_VDMCable+0x266>
 8003292:	f3c1 41c1 	ubfx	r1, r1, #19, #2
 8003296:	2902      	cmp	r1, #2
 8003298:	d10e      	bne.n	80032b8 <PE_StateMachine_VDMCable+0x250>
 800329a:	6802      	ldr	r2, [r0, #0]
 800329c:	2101      	movs	r1, #1
 800329e:	f361 42d4 	bfi	r2, r1, #19, #2
 80032a2:	6002      	str	r2, [r0, #0]
 80032a4:	272d      	movs	r7, #45	; 0x2d
 80032a6:	f001 fc77 	bl	8004b98 <.text_215>
 80032aa:	f002 fccc 	bl	8005c46 <USBPD_PRL_CBL_SetHeaderSpecification>
 80032ae:	80b4      	strh	r4, [r6, #4]
 80032b0:	2008      	movs	r0, #8
 80032b2:	f885 037f 	strb.w	r0, [r5, #895]	; 0x37f
 80032b6:	e008      	b.n	80032ca <PE_StateMachine_VDMCable+0x262>
 80032b8:	68e8      	ldr	r0, [r5, #12]
 80032ba:	6944      	ldr	r4, [r0, #20]
 80032bc:	b10c      	cbz	r4, 80032c2 <PE_StateMachine_VDMCable+0x25a>
 80032be:	f000 f816 	bl	80032ee <.text_143>
 80032c2:	2007      	movs	r0, #7
 80032c4:	f885 037f 	strb.w	r0, [r5, #895]	; 0x37f
 80032c8:	2700      	movs	r7, #0
 80032ca:	2000      	movs	r0, #0
 80032cc:	83a8      	strh	r0, [r5, #28]
 80032ce:	4638      	mov	r0, r7
 80032d0:	b009      	add	sp, #36	; 0x24
 80032d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080032d8 <.text_140>:
 80032d8:	200000d4 	.word	0x200000d4

080032dc <.text_141>:
 80032dc:	68aa      	ldr	r2, [r5, #8]
 80032de:	7c28      	ldrb	r0, [r5, #16]
 80032e0:	68d3      	ldr	r3, [r2, #12]
 80032e2:	4770      	bx	lr

080032e4 <.text_142>:
 80032e4:	221b      	movs	r2, #27
 80032e6:	f001 0101 	and.w	r1, r1, #1
 80032ea:	2009      	movs	r0, #9

080032ec <__iar_annotation$$tailcall>:
 80032ec:	4720      	bx	r4

080032ee <.text_143>:
 80032ee:	7c28      	ldrb	r0, [r5, #16]
 80032f0:	2300      	movs	r3, #0
 80032f2:	2204      	movs	r2, #4
 80032f4:	2101      	movs	r1, #1
 80032f6:	f000 0001 	and.w	r0, r0, #1

080032fa <__iar_annotation$$tailcall>:
 80032fa:	4720      	bx	r4

080032fc <.text_144>:
 80032fc:	7c28      	ldrb	r0, [r5, #16]
 80032fe:	2100      	movs	r1, #0
 8003300:	f000 0001 	and.w	r0, r0, #1
 8003304:	f002 bcbc 	b.w	8005c80 <USBPD_PRL_CableCapable>

08003308 <.text_145>:
 8003308:	2100      	movs	r1, #0
 800330a:	9100      	str	r1, [sp, #0]
 800330c:	2300      	movs	r3, #0
 800330e:	7c29      	ldrb	r1, [r5, #16]
 8003310:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8003314:	4770      	bx	lr

08003316 <.text_146>:
 8003316:	2000      	movs	r0, #0
 8003318:	80b0      	strh	r0, [r6, #4]
 800331a:	6868      	ldr	r0, [r5, #4]
 800331c:	6801      	ldr	r1, [r0, #0]
 800331e:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8003322:	2803      	cmp	r0, #3
 8003324:	4770      	bx	lr

08003326 <PE_StateMachine_VDM>:
 8003326:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800332a:	4605      	mov	r5, r0
 800332c:	f505 775e 	add.w	r7, r5, #888	; 0x378
 8003330:	b090      	sub	sp, #64	; 0x40
 8003332:	79f8      	ldrb	r0, [r7, #7]
 8003334:	4689      	mov	r9, r1
 8003336:	f1a0 0175 	sub.w	r1, r0, #117	; 0x75
 800333a:	2907      	cmp	r1, #7
 800333c:	f04f 0802 	mov.w	r8, #2
 8003340:	d204      	bcs.n	800334c <PE_StateMachine_VDM+0x26>
 8003342:	f899 2000 	ldrb.w	r2, [r9]
 8003346:	2a14      	cmp	r2, #20
 8003348:	f040 84b9 	bne.w	8003cbe <PE_StateMachine_VDM+0x998>
 800334c:	2875      	cmp	r0, #117	; 0x75
 800334e:	f505 7655 	add.w	r6, r5, #852	; 0x354
 8003352:	f8df a9b8 	ldr.w	sl, [pc, #2488]	; 8003d0c <.text_148>
 8003356:	f248 041e 	movw	r4, #32798	; 0x801e
 800335a:	f44f 7b85 	mov.w	fp, #266	; 0x10a
 800335e:	d038      	beq.n	80033d2 <PE_StateMachine_VDM+0xac>
 8003360:	2876      	cmp	r0, #118	; 0x76
 8003362:	d079      	beq.n	8003458 <PE_StateMachine_VDM+0x132>
 8003364:	2877      	cmp	r0, #119	; 0x77
 8003366:	f000 80cd 	beq.w	8003504 <PE_StateMachine_VDM+0x1de>
 800336a:	2878      	cmp	r0, #120	; 0x78
 800336c:	f000 810b 	beq.w	8003586 <PE_StateMachine_VDM+0x260>
 8003370:	2879      	cmp	r0, #121	; 0x79
 8003372:	f000 814e 	beq.w	8003612 <PE_StateMachine_VDM+0x2ec>
 8003376:	287a      	cmp	r0, #122	; 0x7a
 8003378:	f000 8169 	beq.w	800364e <PE_StateMachine_VDM+0x328>
 800337c:	287b      	cmp	r0, #123	; 0x7b
 800337e:	f000 819d 	beq.w	80036bc <PE_StateMachine_VDM+0x396>
 8003382:	287d      	cmp	r0, #125	; 0x7d
 8003384:	f000 81d4 	beq.w	8003730 <PE_StateMachine_VDM+0x40a>
 8003388:	287f      	cmp	r0, #127	; 0x7f
 800338a:	f000 8230 	beq.w	80037ee <PE_StateMachine_VDM+0x4c8>
 800338e:	2881      	cmp	r0, #129	; 0x81
 8003390:	f000 8284 	beq.w	800389c <PE_StateMachine_VDM+0x576>
 8003394:	2882      	cmp	r0, #130	; 0x82
 8003396:	f000 8309 	beq.w	80039ac <PE_StateMachine_VDM+0x686>
 800339a:	2883      	cmp	r0, #131	; 0x83
 800339c:	f000 835e 	beq.w	8003a5c <PE_StateMachine_VDM+0x736>
 80033a0:	2884      	cmp	r0, #132	; 0x84
 80033a2:	f000 846a 	beq.w	8003c7a <PE_StateMachine_VDM+0x954>
 80033a6:	2885      	cmp	r0, #133	; 0x85
 80033a8:	f000 83c3 	beq.w	8003b32 <PE_StateMachine_VDM+0x80c>
 80033ac:	2887      	cmp	r0, #135	; 0x87
 80033ae:	f000 81e4 	beq.w	800377a <PE_StateMachine_VDM+0x454>
 80033b2:	2889      	cmp	r0, #137	; 0x89
 80033b4:	f000 823c 	beq.w	8003830 <PE_StateMachine_VDM+0x50a>
 80033b8:	288b      	cmp	r0, #139	; 0x8b
 80033ba:	f000 8295 	beq.w	80038e8 <PE_StateMachine_VDM+0x5c2>
 80033be:	288c      	cmp	r0, #140	; 0x8c
 80033c0:	f000 8312 	beq.w	80039e8 <PE_StateMachine_VDM+0x6c2>
 80033c4:	288d      	cmp	r0, #141	; 0x8d
 80033c6:	f000 8370 	beq.w	8003aaa <PE_StateMachine_VDM+0x784>
 80033ca:	288f      	cmp	r0, #143	; 0x8f
 80033cc:	f000 83e1 	beq.w	8003b92 <PE_StateMachine_VDM+0x86c>
 80033d0:	e151      	b.n	8003676 <PE_StateMachine_VDM+0x350>
 80033d2:	f000 fca2 	bl	8003d1a <.text_150>
 80033d6:	d041      	beq.n	800345c <PE_StateMachine_VDM+0x136>
 80033d8:	6831      	ldr	r1, [r6, #0]
 80033da:	f364 0104 	bfi	r1, r4, #0, #5
 80033de:	f000 fd4c 	bl	8003e7a <.text_171>
 80033e2:	bf1c      	itt	ne
 80033e4:	68e8      	ldrne	r0, [r5, #12]
 80033e6:	2800      	cmpne	r0, #0
 80033e8:	d02b      	beq.n	8003442 <PE_StateMachine_VDM+0x11c>
 80033ea:	6802      	ldr	r2, [r0, #0]
 80033ec:	b34a      	cbz	r2, 8003442 <PE_StateMachine_VDM+0x11c>
 80033ee:	0c09      	lsrs	r1, r1, #16
 80033f0:	f5b1 4f7f 	cmp.w	r1, #65280	; 0xff00
 80033f4:	d125      	bne.n	8003442 <PE_StateMachine_VDM+0x11c>
 80033f6:	7c28      	ldrb	r0, [r5, #16]
 80033f8:	a902      	add	r1, sp, #8
 80033fa:	f000 0001 	and.w	r0, r0, #1
 80033fe:	4790      	blx	r2
 8003400:	2803      	cmp	r0, #3
 8003402:	d002      	beq.n	800340a <PE_StateMachine_VDM+0xe4>
 8003404:	280f      	cmp	r0, #15
 8003406:	d003      	beq.n	8003410 <PE_StateMachine_VDM+0xea>
 8003408:	e01b      	b.n	8003442 <PE_StateMachine_VDM+0x11c>
 800340a:	f000 fc99 	bl	8003d40 <.text_154>
 800340e:	e01a      	b.n	8003446 <PE_StateMachine_VDM+0x120>
 8003410:	f000 fca6 	bl	8003d60 <.text_157>
 8003414:	a808      	add	r0, sp, #32
 8003416:	9902      	ldr	r1, [sp, #8]
 8003418:	6041      	str	r1, [r0, #4]
 800341a:	2404      	movs	r4, #4
 800341c:	9903      	ldr	r1, [sp, #12]
 800341e:	6081      	str	r1, [r0, #8]
 8003420:	9904      	ldr	r1, [sp, #16]
 8003422:	60c1      	str	r1, [r0, #12]
 8003424:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8003428:	07ca      	lsls	r2, r1, #31
 800342a:	d502      	bpl.n	8003432 <PE_StateMachine_VDM+0x10c>
 800342c:	9a05      	ldr	r2, [sp, #20]
 800342e:	6102      	str	r2, [r0, #16]
 8003430:	2405      	movs	r4, #5
 8003432:	f3c1 0140 	ubfx	r1, r1, #1, #1
 8003436:	b131      	cbz	r1, 8003446 <PE_StateMachine_VDM+0x120>
 8003438:	9906      	ldr	r1, [sp, #24]
 800343a:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 800343e:	1c64      	adds	r4, r4, #1
 8003440:	e001      	b.n	8003446 <PE_StateMachine_VDM+0x120>
 8003442:	f000 fc88 	bl	8003d56 <.text_156>
 8003446:	2100      	movs	r1, #0
 8003448:	6830      	ldr	r0, [r6, #0]
 800344a:	9008      	str	r0, [sp, #32]
 800344c:	2203      	movs	r2, #3
 800344e:	9102      	str	r1, [sp, #8]
 8003450:	9201      	str	r2, [sp, #4]
 8003452:	9400      	str	r4, [sp, #0]
 8003454:	ab08      	add	r3, sp, #32
 8003456:	e166      	b.n	8003726 <PE_StateMachine_VDM+0x400>
 8003458:	f000 fc5f 	bl	8003d1a <.text_150>
 800345c:	f000 8408 	beq.w	8003c70 <PE_StateMachine_VDM+0x94a>
 8003460:	6831      	ldr	r1, [r6, #0]
 8003462:	f368 0104 	bfi	r1, r8, #0, #5
 8003466:	f000 fc97 	bl	8003d98 <.text_162>
 800346a:	6869      	ldr	r1, [r5, #4]
 800346c:	780a      	ldrb	r2, [r1, #0]
 800346e:	f002 020b 	and.w	r2, r2, #11
 8003472:	2a09      	cmp	r2, #9
 8003474:	bf1e      	ittt	ne
 8003476:	68e9      	ldrne	r1, [r5, #12]
 8003478:	684b      	ldrne	r3, [r1, #4]
 800347a:	2b00      	cmpne	r3, #0
 800347c:	d037      	beq.n	80034ee <PE_StateMachine_VDM+0x1c8>
 800347e:	0c00      	lsrs	r0, r0, #16
 8003480:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 8003484:	d133      	bne.n	80034ee <PE_StateMachine_VDM+0x1c8>
 8003486:	7c28      	ldrb	r0, [r5, #16]
 8003488:	f205 3279 	addw	r2, r5, #889	; 0x379
 800348c:	a903      	add	r1, sp, #12
 800348e:	f000 0001 	and.w	r0, r0, #1
 8003492:	4798      	blx	r3
 8003494:	2803      	cmp	r0, #3
 8003496:	d026      	beq.n	80034e6 <PE_StateMachine_VDM+0x1c0>
 8003498:	280f      	cmp	r0, #15
 800349a:	d128      	bne.n	80034ee <PE_StateMachine_VDM+0x1c8>
 800349c:	f000 fc60 	bl	8003d60 <.text_157>
 80034a0:	a804      	add	r0, sp, #16
 80034a2:	211c      	movs	r1, #28
 80034a4:	f012 faf6 	bl	8015a94 <__aeabi_memclr>
 80034a8:	2400      	movs	r4, #0
 80034aa:	2200      	movs	r2, #0
 80034ac:	7878      	ldrb	r0, [r7, #1]
 80034ae:	4282      	cmp	r2, r0
 80034b0:	bf38      	it	cc
 80034b2:	2a0c      	cmpcc	r2, #12
 80034b4:	f080 8405 	bcs.w	8003cc2 <PE_StateMachine_VDM+0x99c>
 80034b8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80034bc:	1c64      	adds	r4, r4, #1
 80034be:	0850      	lsrs	r0, r2, #1
 80034c0:	a905      	add	r1, sp, #20
 80034c2:	07d3      	lsls	r3, r2, #31
 80034c4:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 80034c8:	f83c c012 	ldrh.w	ip, [ip, r2, lsl #1]
 80034cc:	bf54      	ite	pl
 80034ce:	ea43 430c 	orrpl.w	r3, r3, ip, lsl #16
 80034d2:	ea4c 0303 	orrmi.w	r3, ip, r3
 80034d6:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 80034da:	1c52      	adds	r2, r2, #1
 80034dc:	e7e6      	b.n	80034ac <PE_StateMachine_VDM+0x186>
 80034de:	0864      	lsrs	r4, r4, #1
 80034e0:	6830      	ldr	r0, [r6, #0]
 80034e2:	1ca4      	adds	r4, r4, #2
 80034e4:	e001      	b.n	80034ea <PE_StateMachine_VDM+0x1c4>
 80034e6:	f000 fc2b 	bl	8003d40 <.text_154>
 80034ea:	9004      	str	r0, [sp, #16]
 80034ec:	e002      	b.n	80034f4 <PE_StateMachine_VDM+0x1ce>
 80034ee:	f000 fc32 	bl	8003d56 <.text_156>
 80034f2:	9104      	str	r1, [sp, #16]
 80034f4:	2100      	movs	r1, #0
 80034f6:	2203      	movs	r2, #3
 80034f8:	b2e4      	uxtb	r4, r4
 80034fa:	9102      	str	r1, [sp, #8]
 80034fc:	9201      	str	r2, [sp, #4]
 80034fe:	9400      	str	r4, [sp, #0]
 8003500:	ab04      	add	r3, sp, #16
 8003502:	e110      	b.n	8003726 <PE_StateMachine_VDM+0x400>
 8003504:	f000 fc0e 	bl	8003d24 <.text_151>
 8003508:	d0a8      	beq.n	800345c <PE_StateMachine_VDM+0x136>
 800350a:	6831      	ldr	r1, [r6, #0]
 800350c:	f368 0104 	bfi	r1, r8, #0, #5
 8003510:	6031      	str	r1, [r6, #0]
 8003512:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8003516:	f360 411f 	bfi	r1, r0, #16, #16
 800351a:	f000 fc3d 	bl	8003d98 <.text_162>
 800351e:	2001      	movs	r0, #1
 8003520:	6831      	ldr	r1, [r6, #0]
 8003522:	f360 1187 	bfi	r1, r0, #6, #2
 8003526:	6031      	str	r1, [r6, #0]
 8003528:	aa03      	add	r2, sp, #12
 800352a:	68eb      	ldr	r3, [r5, #12]
 800352c:	7c28      	ldrb	r0, [r5, #16]
 800352e:	685c      	ldr	r4, [r3, #4]
 8003530:	a904      	add	r1, sp, #16
 8003532:	f000 0001 	and.w	r0, r0, #1
 8003536:	47a0      	blx	r4
 8003538:	211c      	movs	r1, #28
 800353a:	a805      	add	r0, sp, #20
 800353c:	f012 faaa 	bl	8015a94 <__aeabi_memclr>
 8003540:	2000      	movs	r0, #0
 8003542:	2100      	movs	r1, #0
 8003544:	787a      	ldrb	r2, [r7, #1]
 8003546:	4291      	cmp	r1, r2
 8003548:	bf38      	it	cc
 800354a:	290c      	cmpcc	r1, #12
 800354c:	f080 83d0 	bcs.w	8003cf0 <PE_StateMachine_VDM+0x9ca>
 8003550:	9e04      	ldr	r6, [sp, #16]
 8003552:	1c40      	adds	r0, r0, #1
 8003554:	084a      	lsrs	r2, r1, #1
 8003556:	ab06      	add	r3, sp, #24
 8003558:	07cc      	lsls	r4, r1, #31
 800355a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800355e:	f836 6011 	ldrh.w	r6, [r6, r1, lsl #1]
 8003562:	bf54      	ite	pl
 8003564:	ea44 4406 	orrpl.w	r4, r4, r6, lsl #16
 8003568:	4334      	orrmi	r4, r6
 800356a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800356e:	1c49      	adds	r1, r1, #1
 8003570:	e7e8      	b.n	8003544 <PE_StateMachine_VDM+0x21e>
 8003572:	0600      	lsls	r0, r0, #24
 8003574:	0e40      	lsrs	r0, r0, #25
 8003576:	1c80      	adds	r0, r0, #2
 8003578:	2100      	movs	r1, #0
 800357a:	2203      	movs	r2, #3
 800357c:	b2c0      	uxtb	r0, r0
 800357e:	9102      	str	r1, [sp, #8]
 8003580:	9201      	str	r2, [sp, #4]
 8003582:	9000      	str	r0, [sp, #0]
 8003584:	e043      	b.n	800360e <PE_StateMachine_VDM+0x2e8>
 8003586:	f000 fbcd 	bl	8003d24 <.text_151>
 800358a:	f04f 0901 	mov.w	r9, #1
 800358e:	d060      	beq.n	8003652 <PE_StateMachine_VDM+0x32c>
 8003590:	6831      	ldr	r1, [r6, #0]
 8003592:	2003      	movs	r0, #3
 8003594:	f360 0104 	bfi	r1, r0, #0, #5
 8003598:	f000 fc6f 	bl	8003e7a <.text_171>
 800359c:	bf1e      	ittt	ne
 800359e:	68e8      	ldrne	r0, [r5, #12]
 80035a0:	6884      	ldrne	r4, [r0, #8]
 80035a2:	2c00      	cmpne	r4, #0
 80035a4:	d027      	beq.n	80035f6 <PE_StateMachine_VDM+0x2d0>
 80035a6:	7c28      	ldrb	r0, [r5, #16]
 80035a8:	ab03      	add	r3, sp, #12
 80035aa:	aa04      	add	r2, sp, #16
 80035ac:	0c09      	lsrs	r1, r1, #16
 80035ae:	f000 0001 	and.w	r0, r0, #1
 80035b2:	47a0      	blx	r4
 80035b4:	2803      	cmp	r0, #3
 80035b6:	d002      	beq.n	80035be <PE_StateMachine_VDM+0x298>
 80035b8:	280f      	cmp	r0, #15
 80035ba:	d004      	beq.n	80035c6 <PE_StateMachine_VDM+0x2a0>
 80035bc:	e01b      	b.n	80035f6 <PE_StateMachine_VDM+0x2d0>
 80035be:	6831      	ldr	r1, [r6, #0]
 80035c0:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 80035c4:	e01a      	b.n	80035fc <PE_StateMachine_VDM+0x2d6>
 80035c6:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80035ca:	b1a0      	cbz	r0, 80035f6 <PE_StateMachine_VDM+0x2d0>
 80035cc:	2807      	cmp	r0, #7
 80035ce:	d212      	bcs.n	80035f6 <PE_StateMachine_VDM+0x2d0>
 80035d0:	6832      	ldr	r2, [r6, #0]
 80035d2:	f369 1287 	bfi	r2, r9, #6, #2
 80035d6:	6032      	str	r2, [r6, #0]
 80035d8:	2100      	movs	r1, #0
 80035da:	ac06      	add	r4, sp, #24
 80035dc:	4281      	cmp	r1, r0
 80035de:	d20e      	bcs.n	80035fe <PE_StateMachine_VDM+0x2d8>
 80035e0:	9a04      	ldr	r2, [sp, #16]
 80035e2:	6813      	ldr	r3, [r2, #0]
 80035e4:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
 80035e8:	f109 0901 	add.w	r9, r9, #1
 80035ec:	9a04      	ldr	r2, [sp, #16]
 80035ee:	1d13      	adds	r3, r2, #4
 80035f0:	9304      	str	r3, [sp, #16]
 80035f2:	1c49      	adds	r1, r1, #1
 80035f4:	e7f2      	b.n	80035dc <PE_StateMachine_VDM+0x2b6>
 80035f6:	6831      	ldr	r1, [r6, #0]
 80035f8:	f368 1187 	bfi	r1, r8, #6, #2
 80035fc:	6031      	str	r1, [r6, #0]
 80035fe:	6830      	ldr	r0, [r6, #0]
 8003600:	2100      	movs	r1, #0
 8003602:	2203      	movs	r2, #3
 8003604:	9005      	str	r0, [sp, #20]
 8003606:	9102      	str	r1, [sp, #8]
 8003608:	9201      	str	r2, [sp, #4]
 800360a:	f8cd 9000 	str.w	r9, [sp]
 800360e:	ab05      	add	r3, sp, #20
 8003610:	e089      	b.n	8003726 <PE_StateMachine_VDM+0x400>
 8003612:	f000 fb87 	bl	8003d24 <.text_151>
 8003616:	d01c      	beq.n	8003652 <PE_StateMachine_VDM+0x32c>
 8003618:	6831      	ldr	r1, [r6, #0]
 800361a:	2004      	movs	r0, #4
 800361c:	f000 fc19 	bl	8003e52 <.text_170>
 8003620:	2800      	cmp	r0, #0
 8003622:	d120      	bne.n	8003666 <PE_StateMachine_VDM+0x340>
 8003624:	68e8      	ldr	r0, [r5, #12]
 8003626:	68c3      	ldr	r3, [r0, #12]
 8003628:	b1eb      	cbz	r3, 8003666 <PE_StateMachine_VDM+0x340>
 800362a:	f000 fbaa 	bl	8003d82 <.text_160>
 800362e:	4798      	blx	r3
 8003630:	2803      	cmp	r0, #3
 8003632:	d02f      	beq.n	8003694 <PE_StateMachine_VDM+0x36e>
 8003634:	280f      	cmp	r0, #15
 8003636:	d131      	bne.n	800369c <PE_StateMachine_VDM+0x376>
 8003638:	f000 fb87 	bl	8003d4a <.text_155>
 800363c:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8003640:	6929      	ldr	r1, [r5, #16]
 8003642:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 8003646:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
 800364a:	6129      	str	r1, [r5, #16]
 800364c:	e02a      	b.n	80036a4 <PE_StateMachine_VDM+0x37e>
 800364e:	f000 fb69 	bl	8003d24 <.text_151>
 8003652:	f000 830d 	beq.w	8003c70 <PE_StateMachine_VDM+0x94a>
 8003656:	6831      	ldr	r1, [r6, #0]
 8003658:	2005      	movs	r0, #5
 800365a:	f000 fbfa 	bl	8003e52 <.text_170>
 800365e:	b910      	cbnz	r0, 8003666 <PE_StateMachine_VDM+0x340>
 8003660:	68e8      	ldr	r0, [r5, #12]
 8003662:	6903      	ldr	r3, [r0, #16]
 8003664:	b943      	cbnz	r3, 8003678 <PE_StateMachine_VDM+0x352>
 8003666:	6868      	ldr	r0, [r5, #4]
 8003668:	7801      	ldrb	r1, [r0, #0]
 800366a:	f001 0103 	and.w	r1, r1, #3
 800366e:	2902      	cmp	r1, #2
 8003670:	d114      	bne.n	800369c <PE_StateMachine_VDM+0x376>
 8003672:	2001      	movs	r0, #1
 8003674:	71f8      	strb	r0, [r7, #7]
 8003676:	e322      	b.n	8003cbe <PE_StateMachine_VDM+0x998>
 8003678:	f000 fb83 	bl	8003d82 <.text_160>
 800367c:	4798      	blx	r3
 800367e:	2803      	cmp	r0, #3
 8003680:	d008      	beq.n	8003694 <PE_StateMachine_VDM+0x36e>
 8003682:	280f      	cmp	r0, #15
 8003684:	d10a      	bne.n	800369c <PE_StateMachine_VDM+0x376>
 8003686:	f000 fb60 	bl	8003d4a <.text_155>
 800368a:	6928      	ldr	r0, [r5, #16]
 800368c:	f020 00e0 	bic.w	r0, r0, #224	; 0xe0
 8003690:	6128      	str	r0, [r5, #16]
 8003692:	e007      	b.n	80036a4 <PE_StateMachine_VDM+0x37e>
 8003694:	6831      	ldr	r1, [r6, #0]
 8003696:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 800369a:	e002      	b.n	80036a2 <PE_StateMachine_VDM+0x37c>
 800369c:	6831      	ldr	r1, [r6, #0]
 800369e:	f368 1187 	bfi	r1, r8, #6, #2
 80036a2:	6031      	str	r1, [r6, #0]
 80036a4:	2103      	movs	r1, #3
 80036a6:	2000      	movs	r0, #0
 80036a8:	9101      	str	r1, [sp, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	9002      	str	r0, [sp, #8]
 80036ae:	9200      	str	r2, [sp, #0]
 80036b0:	4633      	mov	r3, r6
 80036b2:	7ab9      	ldrb	r1, [r7, #10]
 80036b4:	220f      	movs	r2, #15
 80036b6:	f000 fc2a 	bl	8003f0e <.text_179>
 80036ba:	e300      	b.n	8003cbe <PE_StateMachine_VDM+0x998>
 80036bc:	f000 fb2d 	bl	8003d1a <.text_150>
 80036c0:	d0c7      	beq.n	8003652 <PE_StateMachine_VDM+0x32c>
 80036c2:	68e9      	ldr	r1, [r5, #12]
 80036c4:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 80036c8:	f1bc 0f00 	cmp.w	ip, #0
 80036cc:	d020      	beq.n	8003710 <PE_StateMachine_VDM+0x3ea>
 80036ce:	7831      	ldrb	r1, [r6, #0]
 80036d0:	7c28      	ldrb	r0, [r5, #16]
 80036d2:	f505 7958 	add.w	r9, r5, #864	; 0x360
 80036d6:	464b      	mov	r3, r9
 80036d8:	463a      	mov	r2, r7
 80036da:	f001 011f 	and.w	r1, r1, #31
 80036de:	f000 0001 	and.w	r0, r0, #1
 80036e2:	47e0      	blx	ip
 80036e4:	2803      	cmp	r0, #3
 80036e6:	d010      	beq.n	800370a <PE_StateMachine_VDM+0x3e4>
 80036e8:	280f      	cmp	r0, #15
 80036ea:	d111      	bne.n	8003710 <PE_StateMachine_VDM+0x3ea>
 80036ec:	f000 fb38 	bl	8003d60 <.text_157>
 80036f0:	2000      	movs	r0, #0
 80036f2:	aa04      	add	r2, sp, #16
 80036f4:	7839      	ldrb	r1, [r7, #0]
 80036f6:	4288      	cmp	r0, r1
 80036f8:	bf3f      	itttt	cc
 80036fa:	f859 1020 	ldrcc.w	r1, [r9, r0, lsl #2]
 80036fe:	f842 1020 	strcc.w	r1, [r2, r0, lsl #2]
 8003702:	1c64      	addcc	r4, r4, #1
 8003704:	1c40      	addcc	r0, r0, #1
 8003706:	d3f5      	bcc.n	80036f4 <PE_StateMachine_VDM+0x3ce>
 8003708:	e004      	b.n	8003714 <PE_StateMachine_VDM+0x3ee>
 800370a:	f000 fb19 	bl	8003d40 <.text_154>
 800370e:	e001      	b.n	8003714 <PE_StateMachine_VDM+0x3ee>
 8003710:	f000 fb21 	bl	8003d56 <.text_156>
 8003714:	2100      	movs	r1, #0
 8003716:	6830      	ldr	r0, [r6, #0]
 8003718:	2203      	movs	r2, #3
 800371a:	b2e4      	uxtb	r4, r4
 800371c:	9003      	str	r0, [sp, #12]
 800371e:	9102      	str	r1, [sp, #8]
 8003720:	9201      	str	r2, [sp, #4]
 8003722:	9400      	str	r4, [sp, #0]
 8003724:	ab03      	add	r3, sp, #12
 8003726:	7ab9      	ldrb	r1, [r7, #10]
 8003728:	220f      	movs	r2, #15
 800372a:	f000 fbe9 	bl	8003f00 <.text_177>
 800372e:	e2c6      	b.n	8003cbe <PE_StateMachine_VDM+0x998>
 8003730:	6831      	ldr	r1, [r6, #0]
 8003732:	2001      	movs	r0, #1
 8003734:	f360 0104 	bfi	r1, r0, #0, #5
 8003738:	f000 fb2e 	bl	8003d98 <.text_162>
 800373c:	4633      	mov	r3, r6
 800373e:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8003742:	6030      	str	r0, [r6, #0]
 8003744:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8003748:	6030      	str	r0, [r6, #0]
 800374a:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 800374e:	6831      	ldr	r1, [r6, #0]
 8003750:	f360 411f 	bfi	r1, r0, #16, #16
 8003754:	6031      	str	r1, [r6, #0]
 8003756:	f001 ffdb 	bl	8005710 <.text_255+0x2>
 800375a:	bf1d      	ittte	ne
 800375c:	6928      	ldrne	r0, [r5, #16]
 800375e:	0840      	lsrne	r0, r0, #1
 8003760:	f000 0001 	andne.w	r0, r0, #1
 8003764:	2002      	moveq	r0, #2
 8003766:	9002      	str	r0, [sp, #8]
 8003768:	2101      	movs	r1, #1
 800376a:	2087      	movs	r0, #135	; 0x87
 800376c:	f000 fbcb 	bl	8003f06 <.text_178>
 8003770:	2800      	cmp	r0, #0
 8003772:	d1dc      	bne.n	800372e <PE_StateMachine_VDM+0x408>
 8003774:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003778:	e0b1      	b.n	80038de <PE_StateMachine_VDM+0x5b8>
 800377a:	f000 fb98 	bl	8003eae <.text_173>
 800377e:	d16a      	bne.n	8003856 <PE_StateMachine_VDM+0x530>
 8003780:	8b79      	ldrh	r1, [r7, #26]
 8003782:	0bc8      	lsrs	r0, r1, #15
 8003784:	d167      	bne.n	8003856 <PE_StateMachine_VDM+0x530>
 8003786:	f000 fb03 	bl	8003d90 <.text_161>
 800378a:	d068      	beq.n	800385e <PE_StateMachine_VDM+0x538>
 800378c:	f000 fb3f 	bl	8003e0e <.text_168>
 8003790:	d161      	bne.n	8003856 <PE_StateMachine_VDM+0x530>
 8003792:	f000 fb22 	bl	8003dda <.text_165>
 8003796:	f000 fac9 	bl	8003d2c <.text_152>
 800379a:	d15c      	bne.n	8003856 <PE_StateMachine_VDM+0x530>
 800379c:	f000 facc 	bl	8003d38 <.text_153>
 80037a0:	d05d      	beq.n	800385e <PE_StateMachine_VDM+0x538>
 80037a2:	68e9      	ldr	r1, [r5, #12]
 80037a4:	6948      	ldr	r0, [r1, #20]
 80037a6:	2800      	cmp	r0, #0
 80037a8:	d05e      	beq.n	8003868 <PE_StateMachine_VDM+0x542>
 80037aa:	2c01      	cmp	r4, #1
 80037ac:	d116      	bne.n	80037dc <PE_StateMachine_VDM+0x4b6>
 80037ae:	f000 fae1 	bl	8003d74 <.text_159>
 80037b2:	f001 fa97 	bl	8004ce4 <PE_SVDM_CheckIdentity>
 80037b6:	b988      	cbnz	r0, 80037dc <PE_StateMachine_VDM+0x4b6>
 80037b8:	68ec      	ldr	r4, [r5, #12]
 80037ba:	7c28      	ldrb	r0, [r5, #16]
 80037bc:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80037c0:	ab02      	add	r3, sp, #8
 80037c2:	f7ff fb17 	bl	8002df4 <.text_130>
 80037c6:	47c0      	blx	r8
 80037c8:	f000 faa3 	bl	8003d12 <.text_149+0x2>
 80037cc:	d504      	bpl.n	80037d8 <PE_StateMachine_VDM+0x4b2>
 80037ce:	f000 fb8a 	bl	8003ee6 <.text_175>
 80037d2:	2251      	movs	r2, #81	; 0x51
 80037d4:	f7ff fd87 	bl	80032e6 <.text_142+0x2>
 80037d8:	2151      	movs	r1, #81	; 0x51
 80037da:	e0e2      	b.n	80039a2 <PE_StateMachine_VDM+0x67c>
 80037dc:	f000 fa99 	bl	8003d12 <.text_149+0x2>
 80037e0:	d503      	bpl.n	80037ea <PE_StateMachine_VDM+0x4c4>
 80037e2:	f000 fb80 	bl	8003ee6 <.text_175>
 80037e6:	f7ff fd7d 	bl	80032e4 <.text_142>
 80037ea:	211b      	movs	r1, #27
 80037ec:	e0d9      	b.n	80039a2 <PE_StateMachine_VDM+0x67c>
 80037ee:	f000 fabc 	bl	8003d6a <.text_158>
 80037f2:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 80037f6:	f368 0104 	bfi	r1, r8, #0, #5
 80037fa:	6031      	str	r1, [r6, #0]
 80037fc:	4633      	mov	r3, r6
 80037fe:	f360 411f 	bfi	r1, r0, #16, #16
 8003802:	6031      	str	r1, [r6, #0]
 8003804:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8003808:	f000 fad4 	bl	8003db4 <.text_163>
 800380c:	f001 ff7f 	bl	800570e <.text_255>
 8003810:	bf1d      	ittte	ne
 8003812:	6928      	ldrne	r0, [r5, #16]
 8003814:	0840      	lsrne	r0, r0, #1
 8003816:	f000 0001 	andne.w	r0, r0, #1
 800381a:	2002      	moveq	r0, #2
 800381c:	9002      	str	r0, [sp, #8]
 800381e:	2101      	movs	r1, #1
 8003820:	2089      	movs	r0, #137	; 0x89
 8003822:	f000 fb70 	bl	8003f06 <.text_178>
 8003826:	2800      	cmp	r0, #0
 8003828:	d15d      	bne.n	80038e6 <PE_StateMachine_VDM+0x5c0>
 800382a:	f44f 7081 	mov.w	r0, #258	; 0x102
 800382e:	e056      	b.n	80038de <PE_StateMachine_VDM+0x5b8>
 8003830:	f000 fb3d 	bl	8003eae <.text_173>
 8003834:	d10f      	bne.n	8003856 <PE_StateMachine_VDM+0x530>
 8003836:	8b79      	ldrh	r1, [r7, #26]
 8003838:	0bc8      	lsrs	r0, r1, #15
 800383a:	d10c      	bne.n	8003856 <PE_StateMachine_VDM+0x530>
 800383c:	f000 faa8 	bl	8003d90 <.text_161>
 8003840:	d00d      	beq.n	800385e <PE_StateMachine_VDM+0x538>
 8003842:	f000 fae4 	bl	8003e0e <.text_168>
 8003846:	d106      	bne.n	8003856 <PE_StateMachine_VDM+0x530>
 8003848:	f000 fac7 	bl	8003dda <.text_165>
 800384c:	f895 0142 	ldrb.w	r0, [r5, #322]	; 0x142
 8003850:	f000 011f 	and.w	r1, r0, #31
 8003854:	2902      	cmp	r1, #2
 8003856:	f040 8162 	bne.w	8003b1e <PE_StateMachine_VDM+0x7f8>
 800385a:	f000 fa6d 	bl	8003d38 <.text_153>
 800385e:	f000 815e 	beq.w	8003b1e <PE_StateMachine_VDM+0x7f8>
 8003862:	68e9      	ldr	r1, [r5, #12]
 8003864:	6988      	ldr	r0, [r1, #24]
 8003866:	2800      	cmp	r0, #0
 8003868:	f000 81d9 	beq.w	8003c1e <PE_StateMachine_VDM+0x8f8>
 800386c:	f000 fa82 	bl	8003d74 <.text_159>
 8003870:	f001 faa1 	bl	8004db6 <PE_SVDM_CheckSVIDs>
 8003874:	4622      	mov	r2, r4
 8003876:	68ec      	ldr	r4, [r5, #12]
 8003878:	7c28      	ldrb	r0, [r5, #16]
 800387a:	7ab9      	ldrb	r1, [r7, #10]
 800387c:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8003880:	ab02      	add	r3, sp, #8
 8003882:	f000 0001 	and.w	r0, r0, #1
 8003886:	47c0      	blx	r8
 8003888:	f000 fa43 	bl	8003d12 <.text_149+0x2>
 800388c:	d504      	bpl.n	8003898 <PE_StateMachine_VDM+0x572>
 800388e:	f000 fb2a 	bl	8003ee6 <.text_175>
 8003892:	2253      	movs	r2, #83	; 0x53
 8003894:	f7ff fd27 	bl	80032e6 <.text_142+0x2>
 8003898:	2153      	movs	r1, #83	; 0x53
 800389a:	e082      	b.n	80039a2 <PE_StateMachine_VDM+0x67c>
 800389c:	f000 fa65 	bl	8003d6a <.text_158>
 80038a0:	2003      	movs	r0, #3
 80038a2:	f360 0104 	bfi	r1, r0, #0, #5
 80038a6:	6031      	str	r1, [r6, #0]
 80038a8:	4633      	mov	r3, r6
 80038aa:	8930      	ldrh	r0, [r6, #8]
 80038ac:	f360 411f 	bfi	r1, r0, #16, #16
 80038b0:	6031      	str	r1, [r6, #0]
 80038b2:	6830      	ldr	r0, [r6, #0]
 80038b4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80038b8:	f000 fa7c 	bl	8003db4 <.text_163>
 80038bc:	f001 ff27 	bl	800570e <.text_255>
 80038c0:	bf1d      	ittte	ne
 80038c2:	6928      	ldrne	r0, [r5, #16]
 80038c4:	0840      	lsrne	r0, r0, #1
 80038c6:	f000 0001 	andne.w	r0, r0, #1
 80038ca:	2002      	moveq	r0, #2
 80038cc:	9002      	str	r0, [sp, #8]
 80038ce:	2101      	movs	r1, #1
 80038d0:	208b      	movs	r0, #139	; 0x8b
 80038d2:	f000 fb18 	bl	8003f06 <.text_178>
 80038d6:	2800      	cmp	r0, #0
 80038d8:	d105      	bne.n	80038e6 <PE_StateMachine_VDM+0x5c0>
 80038da:	f240 1003 	movw	r0, #259	; 0x103
 80038de:	83a8      	strh	r0, [r5, #28]
 80038e0:	81bc      	strh	r4, [r7, #12]
 80038e2:	f04f 081e 	mov.w	r8, #30
 80038e6:	e1ea      	b.n	8003cbe <PE_StateMachine_VDM+0x998>
 80038e8:	f000 fae1 	bl	8003eae <.text_173>
 80038ec:	d1b3      	bne.n	8003856 <PE_StateMachine_VDM+0x530>
 80038ee:	8b79      	ldrh	r1, [r7, #26]
 80038f0:	0bc8      	lsrs	r0, r1, #15
 80038f2:	d1b0      	bne.n	8003856 <PE_StateMachine_VDM+0x530>
 80038f4:	f000 fa4c 	bl	8003d90 <.text_161>
 80038f8:	d0b1      	beq.n	800385e <PE_StateMachine_VDM+0x538>
 80038fa:	f000 fa88 	bl	8003e0e <.text_168>
 80038fe:	d1aa      	bne.n	8003856 <PE_StateMachine_VDM+0x530>
 8003900:	f000 fa6b 	bl	8003dda <.text_165>
 8003904:	f895 0142 	ldrb.w	r0, [r5, #322]	; 0x142
 8003908:	f000 011f 	and.w	r1, r0, #31
 800390c:	2903      	cmp	r1, #3
 800390e:	d1a2      	bne.n	8003856 <PE_StateMachine_VDM+0x530>
 8003910:	f000 fa12 	bl	8003d38 <.text_153>
 8003914:	d0a3      	beq.n	800385e <PE_StateMachine_VDM+0x538>
 8003916:	68e9      	ldr	r1, [r5, #12]
 8003918:	69c8      	ldr	r0, [r1, #28]
 800391a:	2800      	cmp	r0, #0
 800391c:	d045      	beq.n	80039aa <PE_StateMachine_VDM+0x684>
 800391e:	7c28      	ldrb	r0, [r5, #16]
 8003920:	6832      	ldr	r2, [r6, #0]
 8003922:	f10a 0104 	add.w	r1, sl, #4
 8003926:	f000 0001 	and.w	r0, r0, #1
 800392a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800392e:	f8b1 0392 	ldrh.w	r0, [r1, #914]	; 0x392
 8003932:	0b00      	lsrs	r0, r0, #12
 8003934:	f000 0007 	and.w	r0, r0, #7
 8003938:	1e40      	subs	r0, r0, #1
 800393a:	2100      	movs	r1, #0
 800393c:	0c12      	lsrs	r2, r2, #16
 800393e:	0600      	lsls	r0, r0, #24
 8003940:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8003944:	9102      	str	r1, [sp, #8]
 8003946:	186a      	adds	r2, r5, r1
 8003948:	f502 72a3 	add.w	r2, r2, #326	; 0x146
 800394c:	7813      	ldrb	r3, [r2, #0]
 800394e:	7856      	ldrb	r6, [r2, #1]
 8003950:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 8003954:	7896      	ldrb	r6, [r2, #2]
 8003956:	78d2      	ldrb	r2, [r2, #3]
 8003958:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 800395c:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8003960:	ae03      	add	r6, sp, #12
 8003962:	9a02      	ldr	r2, [sp, #8]
 8003964:	f846 3022 	str.w	r3, [r6, r2, lsl #2]
 8003968:	1d09      	adds	r1, r1, #4
 800396a:	9b02      	ldr	r3, [sp, #8]
 800396c:	b2c9      	uxtb	r1, r1
 800396e:	1c5b      	adds	r3, r3, #1
 8003970:	ebb1 5f90 	cmp.w	r1, r0, lsr #22
 8003974:	9302      	str	r3, [sp, #8]
 8003976:	d3e6      	bcc.n	8003946 <PE_StateMachine_VDM+0x620>
 8003978:	ab02      	add	r3, sp, #8
 800397a:	68ee      	ldr	r6, [r5, #12]
 800397c:	7c28      	ldrb	r0, [r5, #16]
 800397e:	7ab9      	ldrb	r1, [r7, #10]
 8003980:	f8d6 c01c 	ldr.w	ip, [r6, #28]
 8003984:	4622      	mov	r2, r4
 8003986:	f000 0001 	and.w	r0, r0, #1
 800398a:	47e0      	blx	ip
 800398c:	2c01      	cmp	r4, #1
 800398e:	d10c      	bne.n	80039aa <PE_StateMachine_VDM+0x684>
 8003990:	f000 f9bf 	bl	8003d12 <.text_149+0x2>
 8003994:	d504      	bpl.n	80039a0 <PE_StateMachine_VDM+0x67a>
 8003996:	f000 faa6 	bl	8003ee6 <.text_175>
 800399a:	2254      	movs	r2, #84	; 0x54
 800399c:	f7ff fca3 	bl	80032e6 <.text_142+0x2>
 80039a0:	2154      	movs	r1, #84	; 0x54
 80039a2:	68aa      	ldr	r2, [r5, #8]
 80039a4:	7c28      	ldrb	r0, [r5, #16]
 80039a6:	f000 fa14 	bl	8003dd2 <.text_164+0x4>
 80039aa:	e138      	b.n	8003c1e <PE_StateMachine_VDM+0x8f8>
 80039ac:	f000 f9dd 	bl	8003d6a <.text_158>
 80039b0:	2004      	movs	r0, #4
 80039b2:	f001 fe90 	bl	80056d6 <.text_254>
 80039b6:	bf1d      	ittte	ne
 80039b8:	6928      	ldrne	r0, [r5, #16]
 80039ba:	0840      	lsrne	r0, r0, #1
 80039bc:	f000 0001 	andne.w	r0, r0, #1
 80039c0:	2002      	moveq	r0, #2
 80039c2:	9002      	str	r0, [sp, #8]
 80039c4:	2101      	movs	r1, #1
 80039c6:	208c      	movs	r0, #140	; 0x8c
 80039c8:	f000 fa9d 	bl	8003f06 <.text_178>
 80039cc:	2800      	cmp	r0, #0
 80039ce:	d16b      	bne.n	8003aa8 <PE_StateMachine_VDM+0x782>
 80039d0:	f44f 7082 	mov.w	r0, #260	; 0x104
 80039d4:	f000 f99c 	bl	8003d10 <.text_149>
 80039d8:	d504      	bpl.n	80039e4 <PE_StateMachine_VDM+0x6be>
 80039da:	f000 fa84 	bl	8003ee6 <.text_175>
 80039de:	2234      	movs	r2, #52	; 0x34
 80039e0:	f7ff fc81 	bl	80032e6 <.text_142+0x2>
 80039e4:	2134      	movs	r1, #52	; 0x34
 80039e6:	e056      	b.n	8003a96 <PE_StateMachine_VDM+0x770>
 80039e8:	7ab8      	ldrb	r0, [r7, #10]
 80039ea:	f04f 0b34 	mov.w	fp, #52	; 0x34
 80039ee:	f000 fa5f 	bl	8003eb0 <.text_173+0x2>
 80039f2:	d15f      	bne.n	8003ab4 <PE_StateMachine_VDM+0x78e>
 80039f4:	8b79      	ldrh	r1, [r7, #26]
 80039f6:	0bc8      	lsrs	r0, r1, #15
 80039f8:	d15c      	bne.n	8003ab4 <PE_StateMachine_VDM+0x78e>
 80039fa:	f000 f9c9 	bl	8003d90 <.text_161>
 80039fe:	d05f      	beq.n	8003ac0 <PE_StateMachine_VDM+0x79a>
 8003a00:	f000 fa05 	bl	8003e0e <.text_168>
 8003a04:	d156      	bne.n	8003ab4 <PE_StateMachine_VDM+0x78e>
 8003a06:	f000 f9e8 	bl	8003dda <.text_165>
 8003a0a:	f000 fa49 	bl	8003ea0 <.text_172>
 8003a0e:	2904      	cmp	r1, #4
 8003a10:	d150      	bne.n	8003ab4 <PE_StateMachine_VDM+0x78e>
 8003a12:	f000 f991 	bl	8003d38 <.text_153>
 8003a16:	d053      	beq.n	8003ac0 <PE_StateMachine_VDM+0x79a>
 8003a18:	2c01      	cmp	r4, #1
 8003a1a:	d006      	beq.n	8003a2a <PE_StateMachine_VDM+0x704>
 8003a1c:	d30a      	bcc.n	8003a34 <PE_StateMachine_VDM+0x70e>
 8003a1e:	2c03      	cmp	r4, #3
 8003a20:	d006      	beq.n	8003a30 <PE_StateMachine_VDM+0x70a>
 8003a22:	bf38      	it	cc
 8003a24:	f04f 0b36 	movcc.w	fp, #54	; 0x36
 8003a28:	e004      	b.n	8003a34 <PE_StateMachine_VDM+0x70e>
 8003a2a:	f04f 0b35 	mov.w	fp, #53	; 0x35
 8003a2e:	e001      	b.n	8003a34 <PE_StateMachine_VDM+0x70e>
 8003a30:	f04f 0b37 	mov.w	fp, #55	; 0x37
 8003a34:	f000 f96d 	bl	8003d12 <.text_149+0x2>
 8003a38:	d501      	bpl.n	8003a3e <PE_StateMachine_VDM+0x718>
 8003a3a:	f000 fa49 	bl	8003ed0 <.text_174>
 8003a3e:	f7ff fc4d 	bl	80032dc <.text_141>
 8003a42:	4659      	mov	r1, fp
 8003a44:	f000 f9c6 	bl	8003dd4 <.text_164+0x6>
 8003a48:	68e8      	ldr	r0, [r5, #12]
 8003a4a:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8003a4e:	f1b8 0f00 	cmp.w	r8, #0
 8003a52:	d002      	beq.n	8003a5a <PE_StateMachine_VDM+0x734>
 8003a54:	f000 f9d0 	bl	8003df8 <.text_167>
 8003a58:	47c0      	blx	r8
 8003a5a:	e0e0      	b.n	8003c1e <PE_StateMachine_VDM+0x8f8>
 8003a5c:	f000 f985 	bl	8003d6a <.text_158>
 8003a60:	2005      	movs	r0, #5
 8003a62:	f001 fe38 	bl	80056d6 <.text_254>
 8003a66:	bf1d      	ittte	ne
 8003a68:	6928      	ldrne	r0, [r5, #16]
 8003a6a:	0840      	lsrne	r0, r0, #1
 8003a6c:	f000 0001 	andne.w	r0, r0, #1
 8003a70:	2002      	moveq	r0, #2
 8003a72:	9002      	str	r0, [sp, #8]
 8003a74:	2101      	movs	r1, #1
 8003a76:	208d      	movs	r0, #141	; 0x8d
 8003a78:	f000 fa45 	bl	8003f06 <.text_178>
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d113      	bne.n	8003aa8 <PE_StateMachine_VDM+0x782>
 8003a80:	f240 1005 	movw	r0, #261	; 0x105
 8003a84:	f000 f944 	bl	8003d10 <.text_149>
 8003a88:	d504      	bpl.n	8003a94 <PE_StateMachine_VDM+0x76e>
 8003a8a:	f000 fa2c 	bl	8003ee6 <.text_175>
 8003a8e:	2255      	movs	r2, #85	; 0x55
 8003a90:	f7ff fc29 	bl	80032e6 <.text_142+0x2>
 8003a94:	2155      	movs	r1, #85	; 0x55
 8003a96:	68aa      	ldr	r2, [r5, #8]
 8003a98:	7c28      	ldrb	r0, [r5, #16]
 8003a9a:	f000 f99a 	bl	8003dd2 <.text_164+0x4>
 8003a9e:	f248 0032 	movw	r0, #32818	; 0x8032
 8003aa2:	81b8      	strh	r0, [r7, #12]
 8003aa4:	f04f 0832 	mov.w	r8, #50	; 0x32
 8003aa8:	e109      	b.n	8003cbe <PE_StateMachine_VDM+0x998>
 8003aaa:	7ab8      	ldrb	r0, [r7, #10]
 8003aac:	f04f 0b55 	mov.w	fp, #85	; 0x55
 8003ab0:	f000 f9fe 	bl	8003eb0 <.text_173+0x2>
 8003ab4:	d133      	bne.n	8003b1e <PE_StateMachine_VDM+0x7f8>
 8003ab6:	8b79      	ldrh	r1, [r7, #26]
 8003ab8:	0bc8      	lsrs	r0, r1, #15
 8003aba:	d130      	bne.n	8003b1e <PE_StateMachine_VDM+0x7f8>
 8003abc:	f000 f968 	bl	8003d90 <.text_161>
 8003ac0:	d02d      	beq.n	8003b1e <PE_StateMachine_VDM+0x7f8>
 8003ac2:	f000 f9a4 	bl	8003e0e <.text_168>
 8003ac6:	d12a      	bne.n	8003b1e <PE_StateMachine_VDM+0x7f8>
 8003ac8:	f000 f987 	bl	8003dda <.text_165>
 8003acc:	f000 f9e8 	bl	8003ea0 <.text_172>
 8003ad0:	2905      	cmp	r1, #5
 8003ad2:	d124      	bne.n	8003b1e <PE_StateMachine_VDM+0x7f8>
 8003ad4:	f3c0 1481 	ubfx	r4, r0, #6, #2
 8003ad8:	b30c      	cbz	r4, 8003b1e <PE_StateMachine_VDM+0x7f8>
 8003ada:	2c01      	cmp	r4, #1
 8003adc:	d006      	beq.n	8003aec <PE_StateMachine_VDM+0x7c6>
 8003ade:	d30a      	bcc.n	8003af6 <PE_StateMachine_VDM+0x7d0>
 8003ae0:	2c03      	cmp	r4, #3
 8003ae2:	d006      	beq.n	8003af2 <PE_StateMachine_VDM+0x7cc>
 8003ae4:	bf38      	it	cc
 8003ae6:	f04f 0b57 	movcc.w	fp, #87	; 0x57
 8003aea:	e004      	b.n	8003af6 <PE_StateMachine_VDM+0x7d0>
 8003aec:	f04f 0b56 	mov.w	fp, #86	; 0x56
 8003af0:	e001      	b.n	8003af6 <PE_StateMachine_VDM+0x7d0>
 8003af2:	f04f 0b58 	mov.w	fp, #88	; 0x58
 8003af6:	f000 f90c 	bl	8003d12 <.text_149+0x2>
 8003afa:	d501      	bpl.n	8003b00 <PE_StateMachine_VDM+0x7da>
 8003afc:	f000 f9e8 	bl	8003ed0 <.text_174>
 8003b00:	f7ff fbec 	bl	80032dc <.text_141>
 8003b04:	4659      	mov	r1, fp
 8003b06:	f000 f965 	bl	8003dd4 <.text_164+0x6>
 8003b0a:	68e8      	ldr	r0, [r5, #12]
 8003b0c:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 8003b10:	f1b8 0f00 	cmp.w	r8, #0
 8003b14:	d002      	beq.n	8003b1c <PE_StateMachine_VDM+0x7f6>
 8003b16:	f000 f96f 	bl	8003df8 <.text_167>
 8003b1a:	47c0      	blx	r8
 8003b1c:	e07f      	b.n	8003c1e <PE_StateMachine_VDM+0x8f8>
 8003b1e:	7eb8      	ldrb	r0, [r7, #26]
 8003b20:	f000 001f 	and.w	r0, r0, #31
 8003b24:	2810      	cmp	r0, #16
 8003b26:	f000 8082 	beq.w	8003c2e <PE_StateMachine_VDM+0x908>
 8003b2a:	f000 f8fb 	bl	8003d24 <.text_151>
 8003b2e:	d1bb      	bne.n	8003aa8 <PE_StateMachine_VDM+0x782>
 8003b30:	e09e      	b.n	8003c70 <PE_StateMachine_VDM+0x94a>
 8003b32:	2100      	movs	r1, #0
 8003b34:	f88d 100c 	strb.w	r1, [sp, #12]
 8003b38:	6830      	ldr	r0, [r6, #0]
 8003b3a:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8003b3e:	6030      	str	r0, [r6, #0]
 8003b40:	6831      	ldr	r1, [r6, #0]
 8003b42:	f000 f968 	bl	8003e16 <.text_169>
 8003b46:	f8d1 c030 	ldr.w	ip, [r1, #48]	; 0x30
 8003b4a:	f1bc 0f00 	cmp.w	ip, #0
 8003b4e:	d00a      	beq.n	8003b66 <PE_StateMachine_VDM+0x840>
 8003b50:	a805      	add	r0, sp, #20
 8003b52:	9000      	str	r0, [sp, #0]
 8003b54:	ab03      	add	r3, sp, #12
 8003b56:	7832      	ldrb	r2, [r6, #0]
 8003b58:	7c28      	ldrb	r0, [r5, #16]
 8003b5a:	7ab9      	ldrb	r1, [r7, #10]
 8003b5c:	f002 021f 	and.w	r2, r2, #31
 8003b60:	f000 0001 	and.w	r0, r0, #1
 8003b64:	47e0      	blx	ip
 8003b66:	f000 f940 	bl	8003dea <.text_166>
 8003b6a:	f001 fdd1 	bl	8005710 <.text_255+0x2>
 8003b6e:	bf1d      	ittte	ne
 8003b70:	6928      	ldrne	r0, [r5, #16]
 8003b72:	0840      	lsrne	r0, r0, #1
 8003b74:	f000 0001 	andne.w	r0, r0, #1
 8003b78:	2002      	moveq	r0, #2
 8003b7a:	9002      	str	r0, [sp, #8]
 8003b7c:	208f      	movs	r0, #143	; 0x8f
 8003b7e:	f000 f9b9 	bl	8003ef4 <.text_176>
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d104      	bne.n	8003b90 <PE_StateMachine_VDM+0x86a>
 8003b86:	f8a5 b01c 	strh.w	fp, [r5, #28]
 8003b8a:	81bc      	strh	r4, [r7, #12]
 8003b8c:	f04f 081e 	mov.w	r8, #30
 8003b90:	e093      	b.n	8003cba <PE_StateMachine_VDM+0x994>
 8003b92:	8b78      	ldrh	r0, [r7, #26]
 8003b94:	0b00      	lsrs	r0, r0, #12
 8003b96:	f000 0007 	and.w	r0, r0, #7
 8003b9a:	1e41      	subs	r1, r0, #1
 8003b9c:	f88d 1004 	strb.w	r1, [sp, #4]
 8003ba0:	f000 f985 	bl	8003eae <.text_173>
 8003ba4:	d13e      	bne.n	8003c24 <PE_StateMachine_VDM+0x8fe>
 8003ba6:	8b79      	ldrh	r1, [r7, #26]
 8003ba8:	0bc8      	lsrs	r0, r1, #15
 8003baa:	d13b      	bne.n	8003c24 <PE_StateMachine_VDM+0x8fe>
 8003bac:	f000 f8f0 	bl	8003d90 <.text_161>
 8003bb0:	d038      	beq.n	8003c24 <PE_StateMachine_VDM+0x8fe>
 8003bb2:	f000 f92c 	bl	8003e0e <.text_168>
 8003bb6:	d135      	bne.n	8003c24 <PE_StateMachine_VDM+0x8fe>
 8003bb8:	f000 f90f 	bl	8003dda <.text_165>
 8003bbc:	f895 2142 	ldrb.w	r2, [r5, #322]	; 0x142
 8003bc0:	6871      	ldr	r1, [r6, #4]
 8003bc2:	f002 001f 	and.w	r0, r2, #31
 8003bc6:	4288      	cmp	r0, r1
 8003bc8:	d12c      	bne.n	8003c24 <PE_StateMachine_VDM+0x8fe>
 8003bca:	f3c2 1081 	ubfx	r0, r2, #6, #2
 8003bce:	b348      	cbz	r0, 8003c24 <PE_StateMachine_VDM+0x8fe>
 8003bd0:	68e9      	ldr	r1, [r5, #12]
 8003bd2:	6b88      	ldr	r0, [r1, #56]	; 0x38
 8003bd4:	b318      	cbz	r0, 8003c1e <PE_StateMachine_VDM+0x8f8>
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	a90a      	add	r1, sp, #40	; 0x28
 8003bda:	e010      	b.n	8003bfe <PE_StateMachine_VDM+0x8d8>
 8003bdc:	eb05 0380 	add.w	r3, r5, r0, lsl #2
 8003be0:	f503 73a3 	add.w	r3, r3, #326	; 0x146
 8003be4:	781c      	ldrb	r4, [r3, #0]
 8003be6:	785e      	ldrb	r6, [r3, #1]
 8003be8:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 8003bec:	789e      	ldrb	r6, [r3, #2]
 8003bee:	78db      	ldrb	r3, [r3, #3]
 8003bf0:	eb04 4406 	add.w	r4, r4, r6, lsl #16
 8003bf4:	eb04 6403 	add.w	r4, r4, r3, lsl #24
 8003bf8:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
 8003bfc:	1c40      	adds	r0, r0, #1
 8003bfe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003c02:	4298      	cmp	r0, r3
 8003c04:	d3ea      	bcc.n	8003bdc <PE_StateMachine_VDM+0x8b6>
 8003c06:	a80a      	add	r0, sp, #40	; 0x28
 8003c08:	9000      	str	r0, [sp, #0]
 8003c0a:	ab01      	add	r3, sp, #4
 8003c0c:	68ec      	ldr	r4, [r5, #12]
 8003c0e:	7c28      	ldrb	r0, [r5, #16]
 8003c10:	7ab9      	ldrb	r1, [r7, #10]
 8003c12:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003c14:	f002 021f 	and.w	r2, r2, #31
 8003c18:	f000 0001 	and.w	r0, r0, #1
 8003c1c:	47a8      	blx	r5
 8003c1e:	2000      	movs	r0, #0
 8003c20:	81b8      	strh	r0, [r7, #12]
 8003c22:	e025      	b.n	8003c70 <PE_StateMachine_VDM+0x94a>
 8003c24:	7eb8      	ldrb	r0, [r7, #26]
 8003c26:	f000 001f 	and.w	r0, r0, #31
 8003c2a:	2810      	cmp	r0, #16
 8003c2c:	d11d      	bne.n	8003c6a <PE_StateMachine_VDM+0x944>
 8003c2e:	2114      	movs	r1, #20
 8003c30:	f889 1000 	strb.w	r1, [r9]
 8003c34:	f04f 0800 	mov.w	r8, #0
 8003c38:	7c28      	ldrb	r0, [r5, #16]
 8003c3a:	f000 fbd3 	bl	80043e4 <.text_192+0x2>
 8003c3e:	2000      	movs	r0, #0
 8003c40:	81b8      	strh	r0, [r7, #12]
 8003c42:	2003      	movs	r0, #3
 8003c44:	71f8      	strb	r0, [r7, #7]
 8003c46:	f000 f864 	bl	8003d12 <.text_149+0x2>
 8003c4a:	d508      	bpl.n	8003c5e <PE_StateMachine_VDM+0x938>
 8003c4c:	f8cd 8000 	str.w	r8, [sp]
 8003c50:	2300      	movs	r3, #0
 8003c52:	7c29      	ldrb	r1, [r5, #16]
 8003c54:	f8da 400c 	ldr.w	r4, [sl, #12]
 8003c58:	2259      	movs	r2, #89	; 0x59
 8003c5a:	f7ff fb44 	bl	80032e6 <.text_142+0x2>
 8003c5e:	f7ff fb3d 	bl	80032dc <.text_141>
 8003c62:	2159      	movs	r1, #89	; 0x59
 8003c64:	f000 f8b6 	bl	8003dd4 <.text_164+0x6>
 8003c68:	e029      	b.n	8003cbe <PE_StateMachine_VDM+0x998>
 8003c6a:	f000 f85b 	bl	8003d24 <.text_151>
 8003c6e:	d126      	bne.n	8003cbe <PE_StateMachine_VDM+0x998>
 8003c70:	2103      	movs	r1, #3
 8003c72:	71f9      	strb	r1, [r7, #7]
 8003c74:	f04f 0800 	mov.w	r8, #0
 8003c78:	e021      	b.n	8003cbe <PE_StateMachine_VDM+0x998>
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f88d 000c 	strb.w	r0, [sp, #12]
 8003c80:	f000 f873 	bl	8003d6a <.text_158>
 8003c84:	f000 f8c7 	bl	8003e16 <.text_169>
 8003c88:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003c8a:	b12b      	cbz	r3, 8003c98 <PE_StateMachine_VDM+0x972>
 8003c8c:	7c28      	ldrb	r0, [r5, #16]
 8003c8e:	aa05      	add	r2, sp, #20
 8003c90:	a903      	add	r1, sp, #12
 8003c92:	f000 0001 	and.w	r0, r0, #1
 8003c96:	4798      	blx	r3
 8003c98:	f000 f8a7 	bl	8003dea <.text_166>
 8003c9c:	f001 fd38 	bl	8005710 <.text_255+0x2>
 8003ca0:	bf1d      	ittte	ne
 8003ca2:	6928      	ldrne	r0, [r5, #16]
 8003ca4:	0840      	lsrne	r0, r0, #1
 8003ca6:	f000 0001 	andne.w	r0, r0, #1
 8003caa:	2002      	moveq	r0, #2
 8003cac:	9002      	str	r0, [sp, #8]
 8003cae:	2003      	movs	r0, #3
 8003cb0:	f000 f920 	bl	8003ef4 <.text_176>
 8003cb4:	b908      	cbnz	r0, 8003cba <PE_StateMachine_VDM+0x994>
 8003cb6:	f8a5 b01c 	strh.w	fp, [r5, #28]
 8003cba:	2000      	movs	r0, #0
 8003cbc:	70f8      	strb	r0, [r7, #3]
 8003cbe:	4640      	mov	r0, r8
 8003cc0:	e128      	b.n	8003f14 <.text_180>
 8003cc2:	1b00      	subs	r0, r0, r4
 8003cc4:	b2e4      	uxtb	r4, r4
 8003cc6:	2c0c      	cmp	r4, #12
 8003cc8:	7078      	strb	r0, [r7, #1]
 8003cca:	f47f ac08 	bne.w	80034de <PE_StateMachine_VDM+0x1b8>
 8003cce:	6830      	ldr	r0, [r6, #0]
 8003cd0:	9004      	str	r0, [sp, #16]
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	2277      	movs	r2, #119	; 0x77
 8003cd6:	2007      	movs	r0, #7
 8003cd8:	9102      	str	r1, [sp, #8]
 8003cda:	9201      	str	r2, [sp, #4]
 8003cdc:	9000      	str	r0, [sp, #0]
 8003cde:	ab04      	add	r3, sp, #16
 8003ce0:	7ab9      	ldrb	r1, [r7, #10]
 8003ce2:	220f      	movs	r2, #15
 8003ce4:	f000 f90c 	bl	8003f00 <.text_177>
 8003ce8:	f248 000f 	movw	r0, #32783	; 0x800f
 8003cec:	81b8      	strh	r0, [r7, #12]
 8003cee:	e7e6      	b.n	8003cbe <PE_StateMachine_VDM+0x998>
 8003cf0:	b2c1      	uxtb	r1, r0
 8003cf2:	1a12      	subs	r2, r2, r0
 8003cf4:	290c      	cmp	r1, #12
 8003cf6:	707a      	strb	r2, [r7, #1]
 8003cf8:	f47f ac3b 	bne.w	8003572 <PE_StateMachine_VDM+0x24c>
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	2177      	movs	r1, #119	; 0x77
 8003d00:	2207      	movs	r2, #7
 8003d02:	9002      	str	r0, [sp, #8]
 8003d04:	9101      	str	r1, [sp, #4]
 8003d06:	9200      	str	r2, [sp, #0]
 8003d08:	ab05      	add	r3, sp, #20
 8003d0a:	e7e9      	b.n	8003ce0 <PE_StateMachine_VDM+0x9ba>

08003d0c <.text_148>:
 8003d0c:	200000d0 	.word	0x200000d0

08003d10 <.text_149>:
 8003d10:	83a8      	strh	r0, [r5, #28]
 8003d12:	f89a 0000 	ldrb.w	r0, [sl]
 8003d16:	0781      	lsls	r1, r0, #30
 8003d18:	4770      	bx	lr

08003d1a <.text_150>:
 8003d1a:	89b8      	ldrh	r0, [r7, #12]
 8003d1c:	2401      	movs	r4, #1
 8003d1e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003d22:	4770      	bx	lr

08003d24 <.text_151>:
 8003d24:	89b8      	ldrh	r0, [r7, #12]
 8003d26:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003d2a:	4770      	bx	lr

08003d2c <.text_152>:
 8003d2c:	f895 0142 	ldrb.w	r0, [r5, #322]	; 0x142
 8003d30:	f000 011f 	and.w	r1, r0, #31
 8003d34:	2901      	cmp	r1, #1
 8003d36:	4770      	bx	lr

08003d38 <.text_153>:
 8003d38:	f3c0 1481 	ubfx	r4, r0, #6, #2
 8003d3c:	2c00      	cmp	r4, #0
 8003d3e:	4770      	bx	lr

08003d40 <.text_154>:
 8003d40:	6830      	ldr	r0, [r6, #0]
 8003d42:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 8003d46:	6030      	str	r0, [r6, #0]
 8003d48:	4770      	bx	lr

08003d4a <.text_155>:
 8003d4a:	6831      	ldr	r1, [r6, #0]
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	f360 1187 	bfi	r1, r0, #6, #2
 8003d52:	6031      	str	r1, [r6, #0]
 8003d54:	4770      	bx	lr

08003d56 <.text_156>:
 8003d56:	6831      	ldr	r1, [r6, #0]
 8003d58:	f368 1187 	bfi	r1, r8, #6, #2
 8003d5c:	6031      	str	r1, [r6, #0]
 8003d5e:	4770      	bx	lr

08003d60 <.text_157>:
 8003d60:	6831      	ldr	r1, [r6, #0]
 8003d62:	f364 1187 	bfi	r1, r4, #6, #2
 8003d66:	6031      	str	r1, [r6, #0]
 8003d68:	4770      	bx	lr

08003d6a <.text_158>:
 8003d6a:	6831      	ldr	r1, [r6, #0]
 8003d6c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8003d70:	6031      	str	r1, [r6, #0]
 8003d72:	4770      	bx	lr

08003d74 <.text_159>:
 8003d74:	7c28      	ldrb	r0, [r5, #16]
 8003d76:	aa02      	add	r2, sp, #8
 8003d78:	f505 71a3 	add.w	r1, r5, #326	; 0x146
 8003d7c:	f000 0001 	and.w	r0, r0, #1
 8003d80:	4770      	bx	lr

08003d82 <.text_160>:
 8003d82:	7c28      	ldrb	r0, [r5, #16]
 8003d84:	f3c1 2202 	ubfx	r2, r1, #8, #3
 8003d88:	0c09      	lsrs	r1, r1, #16
 8003d8a:	f000 0001 	and.w	r0, r0, #1
 8003d8e:	4770      	bx	lr

08003d90 <.text_161>:
 8003d90:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8003d94:	2800      	cmp	r0, #0
 8003d96:	4770      	bx	lr

08003d98 <.text_162>:
 8003d98:	6031      	str	r1, [r6, #0]
 8003d9a:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
 8003d9e:	6030      	str	r0, [r6, #0]
 8003da0:	f420 40c0 	bic.w	r0, r0, #24576	; 0x6000
 8003da4:	6869      	ldr	r1, [r5, #4]
 8003da6:	680a      	ldr	r2, [r1, #0]
 8003da8:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8003dac:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
 8003db0:	6030      	str	r0, [r6, #0]
 8003db2:	4770      	bx	lr

08003db4 <.text_163>:
 8003db4:	6030      	str	r0, [r6, #0]
 8003db6:	f420 40c0 	bic.w	r0, r0, #24576	; 0x6000
 8003dba:	6869      	ldr	r1, [r5, #4]
 8003dbc:	680a      	ldr	r2, [r1, #0]
 8003dbe:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8003dc2:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
 8003dc6:	6030      	str	r0, [r6, #0]
 8003dc8:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8003dcc:	4770      	bx	lr

08003dce <.text_164>:
 8003dce:	68a2      	ldr	r2, [r4, #8]
 8003dd0:	7c20      	ldrb	r0, [r4, #16]
 8003dd2:	68d3      	ldr	r3, [r2, #12]
 8003dd4:	f000 0001 	and.w	r0, r0, #1

08003dd8 <__iar_annotation$$tailcall>:
 8003dd8:	4718      	bx	r3

08003dda <.text_165>:
 8003dda:	2014      	movs	r0, #20
 8003ddc:	f889 0000 	strb.w	r0, [r9]
 8003de0:	7c28      	ldrb	r0, [r5, #16]
 8003de2:	f000 0001 	and.w	r0, r0, #1
 8003de6:	f002 b94f 	b.w	8006088 <USBPD_PRL_EnableRX>

08003dea <.text_166>:
 8003dea:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003dee:	1c40      	adds	r0, r0, #1
 8003df0:	f88d 000c 	strb.w	r0, [sp, #12]
 8003df4:	ab04      	add	r3, sp, #16
 8003df6:	4770      	bx	lr

08003df8 <.text_167>:
 8003df8:	6833      	ldr	r3, [r6, #0]
 8003dfa:	f3c3 2002 	ubfx	r0, r3, #8, #3
 8003dfe:	9000      	str	r0, [sp, #0]
 8003e00:	0c1b      	lsrs	r3, r3, #16
 8003e02:	7c28      	ldrb	r0, [r5, #16]
 8003e04:	7ab9      	ldrb	r1, [r7, #10]
 8003e06:	4622      	mov	r2, r4
 8003e08:	f000 0001 	and.w	r0, r0, #1
 8003e0c:	4770      	bx	lr

08003e0e <.text_168>:
 8003e0e:	f001 011f 	and.w	r1, r1, #31
 8003e12:	290f      	cmp	r1, #15
 8003e14:	4770      	bx	lr

08003e16 <.text_169>:
 8003e16:	6870      	ldr	r0, [r6, #4]
 8003e18:	f360 0104 	bfi	r1, r0, #0, #5
 8003e1c:	6031      	str	r1, [r6, #0]
 8003e1e:	8930      	ldrh	r0, [r6, #8]
 8003e20:	f360 411f 	bfi	r1, r0, #16, #16
 8003e24:	6031      	str	r1, [r6, #0]
 8003e26:	6830      	ldr	r0, [r6, #0]
 8003e28:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8003e2c:	6030      	str	r0, [r6, #0]
 8003e2e:	f420 40c0 	bic.w	r0, r0, #24576	; 0x6000
 8003e32:	6869      	ldr	r1, [r5, #4]
 8003e34:	680a      	ldr	r2, [r1, #0]
 8003e36:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8003e3a:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
 8003e3e:	6030      	str	r0, [r6, #0]
 8003e40:	2001      	movs	r0, #1
 8003e42:	6831      	ldr	r1, [r6, #0]
 8003e44:	f360 210a 	bfi	r1, r0, #8, #3
 8003e48:	6031      	str	r1, [r6, #0]
 8003e4a:	6830      	ldr	r0, [r6, #0]
 8003e4c:	9004      	str	r0, [sp, #16]
 8003e4e:	68e9      	ldr	r1, [r5, #12]
 8003e50:	4770      	bx	lr

08003e52 <.text_170>:
 8003e52:	f360 0104 	bfi	r1, r0, #0, #5
 8003e56:	6031      	str	r1, [r6, #0]
 8003e58:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003e5c:	6031      	str	r1, [r6, #0]
 8003e5e:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
 8003e62:	6868      	ldr	r0, [r5, #4]
 8003e64:	6802      	ldr	r2, [r0, #0]
 8003e66:	f3c2 1040 	ubfx	r0, r2, #5, #1
 8003e6a:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8003e6e:	6031      	str	r1, [r6, #0]
 8003e70:	6868      	ldr	r0, [r5, #4]
 8003e72:	6802      	ldr	r2, [r0, #0]
 8003e74:	f3c2 00c0 	ubfx	r0, r2, #3, #1
 8003e78:	4770      	bx	lr

08003e7a <.text_171>:
 8003e7a:	6031      	str	r1, [r6, #0]
 8003e7c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003e80:	6031      	str	r1, [r6, #0]
 8003e82:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
 8003e86:	6868      	ldr	r0, [r5, #4]
 8003e88:	6802      	ldr	r2, [r0, #0]
 8003e8a:	f3c2 1040 	ubfx	r0, r2, #5, #1
 8003e8e:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8003e92:	6031      	str	r1, [r6, #0]
 8003e94:	6868      	ldr	r0, [r5, #4]
 8003e96:	7802      	ldrb	r2, [r0, #0]
 8003e98:	f002 020b 	and.w	r2, r2, #11
 8003e9c:	2a09      	cmp	r2, #9
 8003e9e:	4770      	bx	lr

08003ea0 <.text_172>:
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	83a8      	strh	r0, [r5, #28]
 8003ea4:	f895 0142 	ldrb.w	r0, [r5, #322]	; 0x142
 8003ea8:	f000 011f 	and.w	r1, r0, #31
 8003eac:	4770      	bx	lr

08003eae <.text_173>:
 8003eae:	7ab8      	ldrb	r0, [r7, #10]
 8003eb0:	b138      	cbz	r0, 8003ec2 <.text_173+0x14>
 8003eb2:	2802      	cmp	r0, #2
 8003eb4:	d001      	beq.n	8003eba <.text_173+0xc>
 8003eb6:	d302      	bcc.n	8003ebe <.text_173+0x10>
 8003eb8:	e005      	b.n	8003ec6 <.text_173+0x18>
 8003eba:	2013      	movs	r0, #19
 8003ebc:	e004      	b.n	8003ec8 <.text_173+0x1a>
 8003ebe:	2012      	movs	r0, #18
 8003ec0:	e002      	b.n	8003ec8 <.text_173+0x1a>
 8003ec2:	2011      	movs	r0, #17
 8003ec4:	e000      	b.n	8003ec8 <.text_173+0x1a>
 8003ec6:	2014      	movs	r0, #20
 8003ec8:	f899 1000 	ldrb.w	r1, [r9]
 8003ecc:	4281      	cmp	r1, r0
 8003ece:	4770      	bx	lr

08003ed0 <.text_174>:
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	9100      	str	r1, [sp, #0]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	7c29      	ldrb	r1, [r5, #16]
 8003ed8:	f8da 800c 	ldr.w	r8, [sl, #12]
 8003edc:	465a      	mov	r2, fp
 8003ede:	f001 0101 	and.w	r1, r1, #1
 8003ee2:	2009      	movs	r0, #9

08003ee4 <__iar_annotation$$tailcall>:
 8003ee4:	4740      	bx	r8

08003ee6 <.text_175>:
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	9100      	str	r1, [sp, #0]
 8003eea:	2300      	movs	r3, #0
 8003eec:	7c29      	ldrb	r1, [r5, #16]
 8003eee:	f8da 400c 	ldr.w	r4, [sl, #12]
 8003ef2:	4770      	bx	lr

08003ef4 <.text_176>:
 8003ef4:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003ef8:	9100      	str	r1, [sp, #0]
 8003efa:	9001      	str	r0, [sp, #4]
 8003efc:	220f      	movs	r2, #15
 8003efe:	7ab9      	ldrb	r1, [r7, #10]

08003f00 <.text_177>:
 8003f00:	4628      	mov	r0, r5
 8003f02:	f7fe bfb1 	b.w	8002e68 <PE_Send_DataMessage>

08003f06 <.text_178>:
 8003f06:	9100      	str	r1, [sp, #0]
 8003f08:	9001      	str	r0, [sp, #4]
 8003f0a:	220f      	movs	r2, #15
 8003f0c:	7ab9      	ldrb	r1, [r7, #10]

08003f0e <.text_179>:
 8003f0e:	4628      	mov	r0, r5
 8003f10:	f7fe bfaa 	b.w	8002e68 <PE_Send_DataMessage>

08003f14 <.text_180>:
 8003f14:	b011      	add	sp, #68	; 0x44
 8003f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003f1a <PE_StateMachine_UVDM>:
 8003f1a:	b570      	push	{r4, r5, r6, lr}
 8003f1c:	2914      	cmp	r1, #20
 8003f1e:	b08c      	sub	sp, #48	; 0x30
 8003f20:	4604      	mov	r4, r0
 8003f22:	d139      	bne.n	8003f98 <PE_StateMachine_UVDM+0x7e>
 8003f24:	68e0      	ldr	r0, [r4, #12]
 8003f26:	2800      	cmp	r0, #0
 8003f28:	bf1c      	itt	ne
 8003f2a:	6bc0      	ldrne	r0, [r0, #60]	; 0x3c
 8003f2c:	2800      	cmpne	r0, #0
 8003f2e:	d033      	beq.n	8003f98 <PE_StateMachine_UVDM+0x7e>
 8003f30:	2100      	movs	r1, #0
 8003f32:	f88d 100c 	strb.w	r1, [sp, #12]
 8003f36:	ab06      	add	r3, sp, #24
 8003f38:	68e5      	ldr	r5, [r4, #12]
 8003f3a:	7c20      	ldrb	r0, [r4, #16]
 8003f3c:	6bee      	ldr	r6, [r5, #60]	; 0x3c
 8003f3e:	aa03      	add	r2, sp, #12
 8003f40:	a904      	add	r1, sp, #16
 8003f42:	f000 0001 	and.w	r0, r0, #1
 8003f46:	47b0      	blx	r6
 8003f48:	9804      	ldr	r0, [sp, #16]
 8003f4a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8003f4e:	9004      	str	r0, [sp, #16]
 8003f50:	f204 357b 	addw	r5, r4, #891	; 0x37b
 8003f54:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003f58:	1c40      	adds	r0, r0, #1
 8003f5a:	f88d 000c 	strb.w	r0, [sp, #12]
 8003f5e:	ab05      	add	r3, sp, #20
 8003f60:	9804      	ldr	r0, [sp, #16]
 8003f62:	9005      	str	r0, [sp, #20]
 8003f64:	6860      	ldr	r0, [r4, #4]
 8003f66:	f001 fbd4 	bl	8005712 <.text_255+0x4>
 8003f6a:	bf1d      	ittte	ne
 8003f6c:	6920      	ldrne	r0, [r4, #16]
 8003f6e:	0840      	lsrne	r0, r0, #1
 8003f70:	f000 0001 	andne.w	r0, r0, #1
 8003f74:	2002      	moveq	r0, #2
 8003f76:	9002      	str	r0, [sp, #8]
 8003f78:	2003      	movs	r0, #3
 8003f7a:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003f7e:	9100      	str	r1, [sp, #0]
 8003f80:	9001      	str	r0, [sp, #4]
 8003f82:	220f      	movs	r2, #15
 8003f84:	79e9      	ldrb	r1, [r5, #7]
 8003f86:	4620      	mov	r0, r4
 8003f88:	f7fe ff6e 	bl	8002e68 <PE_Send_DataMessage>
 8003f8c:	b910      	cbnz	r0, 8003f94 <PE_StateMachine_UVDM+0x7a>
 8003f8e:	f240 1009 	movw	r0, #265	; 0x109
 8003f92:	83a0      	strh	r0, [r4, #28]
 8003f94:	2000      	movs	r0, #0
 8003f96:	7028      	strb	r0, [r5, #0]
 8003f98:	2002      	movs	r0, #2
 8003f9a:	b00c      	add	sp, #48	; 0x30
 8003f9c:	bd70      	pop	{r4, r5, r6, pc}

08003f9e <PE_Get_DataRole>:
 8003f9e:	f8df 1ccc 	ldr.w	r1, [pc, #3276]	; 8004c6c <.text_221>
 8003fa2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8003fa6:	6841      	ldr	r1, [r0, #4]
 8003fa8:	6848      	ldr	r0, [r1, #4]
 8003faa:	6802      	ldr	r2, [r0, #0]
 8003fac:	f3c2 00c0 	ubfx	r0, r2, #3, #1
 8003fb0:	4770      	bx	lr

08003fb2 <PE_Get_SpecRevision>:
 8003fb2:	f8df 1cb8 	ldr.w	r1, [pc, #3256]	; 8004c6c <.text_221>
 8003fb6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8003fba:	6841      	ldr	r1, [r0, #4]
 8003fbc:	6848      	ldr	r0, [r1, #4]
 8003fbe:	7800      	ldrb	r0, [r0, #0]
 8003fc0:	f000 0003 	and.w	r0, r0, #3
 8003fc4:	4770      	bx	lr

08003fc6 <PE_ChangePowerRole>:
 8003fc6:	6842      	ldr	r2, [r0, #4]
 8003fc8:	6813      	ldr	r3, [r2, #0]
 8003fca:	f361 0382 	bfi	r3, r1, #2, #1
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	7c00      	ldrb	r0, [r0, #16]

08003fd2 <.text_185>:
 8003fd2:	f000 0001 	and.w	r0, r0, #1
 8003fd6:	f001 be18 	b.w	8005c0a <USBPD_PRL_SetHeaderPowerRole>

08003fda <PE_Check_RxEvent>:
 8003fda:	b081      	sub	sp, #4
 8003fdc:	4601      	mov	r1, r0
 8003fde:	f201 327d 	addw	r2, r1, #893	; 0x37d
 8003fe2:	2014      	movs	r0, #20
 8003fe4:	7811      	ldrb	r1, [r2, #0]
 8003fe6:	b1d1      	cbz	r1, 800401e <PE_Check_RxEvent+0x44>
 8003fe8:	7813      	ldrb	r3, [r2, #0]
 8003fea:	0699      	lsls	r1, r3, #26
 8003fec:	bf58      	it	pl
 8003fee:	2003      	movpl	r0, #3
 8003ff0:	d515      	bpl.n	800401e <PE_Check_RxEvent+0x44>
 8003ff2:	7811      	ldrb	r1, [r2, #0]
 8003ff4:	f001 011f 	and.w	r1, r1, #31
 8003ff8:	2901      	cmp	r1, #1
 8003ffa:	d004      	beq.n	8004006 <PE_Check_RxEvent+0x2c>
 8003ffc:	2902      	cmp	r1, #2
 8003ffe:	d006      	beq.n	800400e <PE_Check_RxEvent+0x34>
 8004000:	2904      	cmp	r1, #4
 8004002:	d007      	beq.n	8004014 <PE_Check_RxEvent+0x3a>
 8004004:	e009      	b.n	800401a <PE_Check_RxEvent+0x40>
 8004006:	2300      	movs	r3, #0
 8004008:	2011      	movs	r0, #17
 800400a:	7113      	strb	r3, [r2, #4]
 800400c:	e005      	b.n	800401a <PE_Check_RxEvent+0x40>
 800400e:	2012      	movs	r0, #18
 8004010:	2101      	movs	r1, #1
 8004012:	e001      	b.n	8004018 <PE_Check_RxEvent+0x3e>
 8004014:	2013      	movs	r0, #19
 8004016:	2102      	movs	r1, #2
 8004018:	7111      	strb	r1, [r2, #4]
 800401a:	2100      	movs	r1, #0
 800401c:	7011      	strb	r1, [r2, #0]
 800401e:	b001      	add	sp, #4
 8004020:	4770      	bx	lr

08004022 <PE_Check_AMSConflict>:
 8004022:	b538      	push	{r3, r4, r5, lr}
 8004024:	4604      	mov	r4, r0
 8004026:	f24f 001f 	movw	r0, #61471	; 0xf01f
 800402a:	f8b4 1392 	ldrh.w	r1, [r4, #914]	; 0x392
 800402e:	4001      	ands	r1, r0
 8004030:	290d      	cmp	r1, #13
 8004032:	d103      	bne.n	800403c <PE_Check_AMSConflict+0x1a>
 8004034:	2210      	movs	r2, #16
 8004036:	f884 237f 	strb.w	r2, [r4, #895]	; 0x37f
 800403a:	e030      	b.n	800409e <PE_Check_AMSConflict+0x7c>
 800403c:	f9b4 001c 	ldrsh.w	r0, [r4, #28]
 8004040:	b328      	cbz	r0, 800408e <PE_Check_AMSConflict+0x6c>
 8004042:	1e40      	subs	r0, r0, #1
 8004044:	2801      	cmp	r0, #1
 8004046:	d909      	bls.n	800405c <PE_Check_AMSConflict+0x3a>
 8004048:	1e80      	subs	r0, r0, #2
 800404a:	d025      	beq.n	8004098 <PE_Check_AMSConflict+0x76>
 800404c:	1e40      	subs	r0, r0, #1
 800404e:	d026      	beq.n	800409e <PE_Check_AMSConflict+0x7c>
 8004050:	1e40      	subs	r0, r0, #1
 8004052:	280b      	cmp	r0, #11
 8004054:	d902      	bls.n	800405c <PE_Check_AMSConflict+0x3a>
 8004056:	380c      	subs	r0, #12
 8004058:	d019      	beq.n	800408e <PE_Check_AMSConflict+0x6c>
 800405a:	e001      	b.n	8004060 <PE_Check_AMSConflict+0x3e>
 800405c:	2011      	movs	r0, #17
 800405e:	e01c      	b.n	800409a <PE_Check_AMSConflict+0x78>
 8004060:	f8df 5c08 	ldr.w	r5, [pc, #3080]	; 8004c6c <.text_221>
 8004064:	7828      	ldrb	r0, [r5, #0]
 8004066:	0781      	lsls	r1, r0, #30
 8004068:	d504      	bpl.n	8004074 <PE_Check_AMSConflict+0x52>
 800406a:	f000 fbfb 	bl	8004864 <.text_204>
 800406e:	225c      	movs	r2, #92	; 0x5c
 8004070:	f000 fbf4 	bl	800485c <.text_203+0x2>
 8004074:	f000 f9a4 	bl	80043c0 <.text_189>
 8004078:	215c      	movs	r1, #92	; 0x5c
 800407a:	f7ff feab 	bl	8003dd4 <.text_164+0x6>
 800407e:	6861      	ldr	r1, [r4, #4]
 8004080:	680a      	ldr	r2, [r1, #0]
 8004082:	f240 7004 	movw	r0, #1796	; 0x704
 8004086:	4002      	ands	r2, r0
 8004088:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800408c:	d104      	bne.n	8004098 <PE_Check_AMSConflict+0x76>
 800408e:	2103      	movs	r1, #3
 8004090:	f884 137f 	strb.w	r1, [r4, #895]	; 0x37f
 8004094:	2000      	movs	r0, #0
 8004096:	bd32      	pop	{r1, r4, r5, pc}
 8004098:	200f      	movs	r0, #15
 800409a:	f884 037f 	strb.w	r0, [r4, #895]	; 0x37f
 800409e:	2015      	movs	r0, #21
 80040a0:	bd32      	pop	{r1, r4, r5, pc}
	...

080040a4 <PE_Check_ControlMessage>:
 80040a4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 80040a8:	4688      	mov	r8, r1
 80040aa:	4604      	mov	r4, r0
 80040ac:	f504 7661 	add.w	r6, r4, #900	; 0x384
 80040b0:	f8df 7bb8 	ldr.w	r7, [pc, #3000]	; 8004c6c <.text_221>
 80040b4:	7bb1      	ldrb	r1, [r6, #14]
 80040b6:	7838      	ldrb	r0, [r7, #0]
 80040b8:	68fd      	ldr	r5, [r7, #12]
 80040ba:	f001 011f 	and.w	r1, r1, #31
 80040be:	1e49      	subs	r1, r1, #1
 80040c0:	2915      	cmp	r1, #21
 80040c2:	f000 0002 	and.w	r0, r0, #2
 80040c6:	f200 8173 	bhi.w	80043b0 <PE_Check_ControlMessage+0x30c>
 80040ca:	e8df f011 	tbh	[pc, r1, lsl #1]
 80040ce:	0177      	.short	0x0177
 80040d0:	016f0016 	.word	0x016f0016
 80040d4:	0038016f 	.word	0x0038016f
 80040d8:	0040016f 	.word	0x0040016f
 80040dc:	00ad00cf 	.word	0x00ad00cf
 80040e0:	00a3008a 	.word	0x00a3008a
 80040e4:	0029016f 	.word	0x0029016f
 80040e8:	01710171 	.word	0x01710171
 80040ec:	00f00161 	.word	0x00f00161
 80040f0:	015e012c 	.word	0x015e012c
 80040f4:	0157013f 	.word	0x0157013f
 80040f8:	010e      	.short	0x010e
 80040fa:	f000 f96c 	bl	80043d6 <.text_191+0x2>
 80040fe:	f040 815d 	bne.w	80043bc <PE_Check_ControlMessage+0x318>
 8004102:	2202      	movs	r2, #2
 8004104:	83a2      	strh	r2, [r4, #28]
 8004106:	b120      	cbz	r0, 8004112 <PE_Check_ControlMessage+0x6e>
 8004108:	f001 facf 	bl	80056aa <.text_251>
 800410c:	222b      	movs	r2, #43	; 0x2b
 800410e:	f000 fba5 	bl	800485c <.text_203+0x2>
 8004112:	f000 f955 	bl	80043c0 <.text_189>
 8004116:	212b      	movs	r1, #43	; 0x2b
 8004118:	f7ff fe5c 	bl	8003dd4 <.text_164+0x6>
 800411c:	2098      	movs	r0, #152	; 0x98
 800411e:	e14b      	b.n	80043b8 <PE_Check_ControlMessage+0x314>
 8004120:	2103      	movs	r1, #3
 8004122:	83a1      	strh	r1, [r4, #28]
 8004124:	b120      	cbz	r0, 8004130 <PE_Check_ControlMessage+0x8c>
 8004126:	f001 fac0 	bl	80056aa <.text_251>
 800412a:	2232      	movs	r2, #50	; 0x32
 800412c:	f000 fb96 	bl	800485c <.text_203+0x2>
 8004130:	f000 f946 	bl	80043c0 <.text_189>
 8004134:	2132      	movs	r1, #50	; 0x32
 8004136:	f7ff fe4d 	bl	8003dd4 <.text_164+0x6>
 800413a:	2010      	movs	r0, #16
 800413c:	e13c      	b.n	80043b8 <PE_Check_ControlMessage+0x314>
 800413e:	b120      	cbz	r0, 800414a <PE_Check_ControlMessage+0xa6>
 8004140:	f001 fab3 	bl	80056aa <.text_251>
 8004144:	2233      	movs	r2, #51	; 0x33
 8004146:	f000 fb89 	bl	800485c <.text_203+0x2>
 800414a:	2133      	movs	r1, #51	; 0x33
 800414c:	e127      	b.n	800439e <PE_Check_ControlMessage+0x2fa>
 800414e:	2106      	movs	r1, #6
 8004150:	f000 f940 	bl	80043d4 <.text_191>
 8004154:	d03d      	beq.n	80041d2 <PE_Check_ControlMessage+0x12e>
 8004156:	b120      	cbz	r0, 8004162 <PE_Check_ControlMessage+0xbe>
 8004158:	f001 faa7 	bl	80056aa <.text_251>
 800415c:	220c      	movs	r2, #12
 800415e:	f000 fb7d 	bl	800485c <.text_203+0x2>
 8004162:	f000 f92d 	bl	80043c0 <.text_189>
 8004166:	210c      	movs	r1, #12
 8004168:	f7ff fe34 	bl	8003dd4 <.text_164+0x6>
 800416c:	2014      	movs	r0, #20
 800416e:	f888 0000 	strb.w	r0, [r8]
 8004172:	f000 f936 	bl	80043e2 <.text_192>
 8004176:	2100      	movs	r1, #0
 8004178:	4620      	mov	r0, r4
 800417a:	f7fe fe17 	bl	8002dac <PE_Send_SRCCapabilities>
 800417e:	2805      	cmp	r0, #5
 8004180:	d002      	beq.n	8004188 <PE_Check_ControlMessage+0xe4>
 8004182:	2000      	movs	r0, #0
 8004184:	83a0      	strh	r0, [r4, #28]
 8004186:	e111      	b.n	80043ac <PE_Check_ControlMessage+0x308>
 8004188:	6860      	ldr	r0, [r4, #4]
 800418a:	f7fe f9f5 	bl	8002578 <.text_98>
 800418e:	d00e      	beq.n	80041ae <PE_Check_ControlMessage+0x10a>
 8004190:	f000 f91a 	bl	80043c8 <.text_190>
 8004194:	7838      	ldrb	r0, [r7, #0]
 8004196:	0781      	lsls	r1, r0, #30
 8004198:	d504      	bpl.n	80041a4 <PE_Check_ControlMessage+0x100>
 800419a:	f001 fa8b 	bl	80056b4 <.text_252>
 800419e:	225a      	movs	r2, #90	; 0x5a
 80041a0:	f000 fb5c 	bl	800485c <.text_203+0x2>
 80041a4:	f000 f90c 	bl	80043c0 <.text_189>
 80041a8:	215a      	movs	r1, #90	; 0x5a
 80041aa:	f7ff fe13 	bl	8003dd4 <.text_164+0x6>
 80041ae:	2001      	movs	r0, #1
 80041b0:	83a0      	strh	r0, [r4, #28]
 80041b2:	f248 001b 	movw	r0, #32795	; 0x801b
 80041b6:	8030      	strh	r0, [r6, #0]
 80041b8:	2016      	movs	r0, #22
 80041ba:	f884 037f 	strb.w	r0, [r4, #895]	; 0x37f
 80041be:	7838      	ldrb	r0, [r7, #0]
 80041c0:	0781      	lsls	r1, r0, #30
 80041c2:	d504      	bpl.n	80041ce <PE_Check_ControlMessage+0x12a>
 80041c4:	f001 fa76 	bl	80056b4 <.text_252>
 80041c8:	220f      	movs	r2, #15
 80041ca:	f000 fb47 	bl	800485c <.text_203+0x2>
 80041ce:	210f      	movs	r1, #15
 80041d0:	e0e5      	b.n	800439e <PE_Check_ControlMessage+0x2fa>
 80041d2:	6820      	ldr	r0, [r4, #0]
 80041d4:	6841      	ldr	r1, [r0, #4]
 80041d6:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 80041da:	b108      	cbz	r0, 80041e0 <PE_Check_ControlMessage+0x13c>
 80041dc:	204c      	movs	r0, #76	; 0x4c
 80041de:	e0eb      	b.n	80043b8 <PE_Check_ControlMessage+0x314>
 80041e0:	e05f      	b.n	80042a2 <PE_Check_ControlMessage+0x1fe>
 80041e2:	6821      	ldr	r1, [r4, #0]
 80041e4:	684a      	ldr	r2, [r1, #4]
 80041e6:	f3c2 01c0 	ubfx	r1, r2, #3, #1
 80041ea:	b181      	cbz	r1, 800420e <PE_Check_ControlMessage+0x16a>
 80041ec:	2122      	movs	r1, #34	; 0x22
 80041ee:	f884 137f 	strb.w	r1, [r4, #895]	; 0x37f
 80041f2:	b120      	cbz	r0, 80041fe <PE_Check_ControlMessage+0x15a>
 80041f4:	f001 fa59 	bl	80056aa <.text_251>
 80041f8:	223c      	movs	r2, #60	; 0x3c
 80041fa:	f000 fb2f 	bl	800485c <.text_203+0x2>
 80041fe:	f000 f8df 	bl	80043c0 <.text_189>
 8004202:	213c      	movs	r1, #60	; 0x3c
 8004204:	f7ff fde6 	bl	8003dd4 <.text_164+0x6>
 8004208:	2008      	movs	r0, #8
 800420a:	83a0      	strh	r0, [r4, #28]
 800420c:	e0d6      	b.n	80043bc <PE_Check_ControlMessage+0x318>
 800420e:	f001 facf 	bl	80057b0 <.text_260>
 8004212:	e049      	b.n	80042a8 <PE_Check_ControlMessage+0x204>
 8004214:	68a1      	ldr	r1, [r4, #8]
 8004216:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8004218:	b118      	cbz	r0, 8004222 <PE_Check_ControlMessage+0x17e>
 800421a:	2110      	movs	r1, #16
 800421c:	83a1      	strh	r1, [r4, #28]
 800421e:	209d      	movs	r0, #157	; 0x9d
 8004220:	e0ca      	b.n	80043b8 <PE_Check_ControlMessage+0x314>
 8004222:	f001 fac5 	bl	80057b0 <.text_260>
 8004226:	e03f      	b.n	80042a8 <PE_Check_ControlMessage+0x204>
 8004228:	b120      	cbz	r0, 8004234 <PE_Check_ControlMessage+0x190>
 800422a:	f001 fa3e 	bl	80056aa <.text_251>
 800422e:	2223      	movs	r2, #35	; 0x23
 8004230:	f000 fb14 	bl	800485c <.text_203+0x2>
 8004234:	f000 f8c4 	bl	80043c0 <.text_189>
 8004238:	2123      	movs	r1, #35	; 0x23
 800423a:	f7ff fdcb 	bl	8003dd4 <.text_164+0x6>
 800423e:	6920      	ldr	r0, [r4, #16]
 8004240:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8004244:	b108      	cbz	r0, 800424a <PE_Check_ControlMessage+0x1a6>
 8004246:	200f      	movs	r0, #15
 8004248:	e0b6      	b.n	80043b8 <PE_Check_ControlMessage+0x314>
 800424a:	68a1      	ldr	r1, [r4, #8]
 800424c:	6b88      	ldr	r0, [r1, #56]	; 0x38
 800424e:	b948      	cbnz	r0, 8004264 <PE_Check_ControlMessage+0x1c0>
 8004250:	6861      	ldr	r1, [r4, #4]
 8004252:	7808      	ldrb	r0, [r1, #0]
 8004254:	f000 0003 	and.w	r0, r0, #3
 8004258:	2802      	cmp	r0, #2
 800425a:	d126      	bne.n	80042aa <PE_Check_ControlMessage+0x206>
 800425c:	2101      	movs	r1, #1
 800425e:	f884 137f 	strb.w	r1, [r4, #895]	; 0x37f
 8004262:	e0ab      	b.n	80043bc <PE_Check_ControlMessage+0x318>
 8004264:	200f      	movs	r0, #15
 8004266:	83a0      	strh	r0, [r4, #28]
 8004268:	2093      	movs	r0, #147	; 0x93
 800426a:	e0a5      	b.n	80043b8 <PE_Check_ControlMessage+0x314>
 800426c:	6861      	ldr	r1, [r4, #4]
 800426e:	680a      	ldr	r2, [r1, #0]
 8004270:	f3c2 2102 	ubfx	r1, r2, #8, #3
 8004274:	2903      	cmp	r1, #3
 8004276:	d114      	bne.n	80042a2 <PE_Check_ControlMessage+0x1fe>
 8004278:	f3c2 0180 	ubfx	r1, r2, #2, #1
 800427c:	b121      	cbz	r1, 8004288 <PE_Check_ControlMessage+0x1e4>
 800427e:	6821      	ldr	r1, [r4, #0]
 8004280:	684b      	ldr	r3, [r1, #4]
 8004282:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 8004286:	b161      	cbz	r1, 80042a2 <PE_Check_ControlMessage+0x1fe>
 8004288:	2107      	movs	r1, #7
 800428a:	83a1      	strh	r1, [r4, #28]
 800428c:	211d      	movs	r1, #29
 800428e:	f884 137f 	strb.w	r1, [r4, #895]	; 0x37f
 8004292:	b120      	cbz	r0, 800429e <PE_Check_ControlMessage+0x1fa>
 8004294:	f001 fa09 	bl	80056aa <.text_251>
 8004298:	2206      	movs	r2, #6
 800429a:	f000 fadf 	bl	800485c <.text_203+0x2>
 800429e:	2106      	movs	r1, #6
 80042a0:	e07d      	b.n	800439e <PE_Check_ControlMessage+0x2fa>
 80042a2:	f002 0203 	and.w	r2, r2, #3
 80042a6:	2a02      	cmp	r2, #2
 80042a8:	d006      	beq.n	80042b8 <PE_Check_ControlMessage+0x214>
 80042aa:	202a      	movs	r0, #42	; 0x2a
 80042ac:	e084      	b.n	80043b8 <PE_Check_ControlMessage+0x314>
 80042ae:	6822      	ldr	r2, [r4, #0]
 80042b0:	8911      	ldrh	r1, [r2, #8]
 80042b2:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 80042b6:	2900      	cmp	r1, #0
 80042b8:	d07d      	beq.n	80043b6 <PE_Check_ControlMessage+0x312>
 80042ba:	6861      	ldr	r1, [r4, #4]
 80042bc:	680b      	ldr	r3, [r1, #0]
 80042be:	f3c3 0180 	ubfx	r1, r3, #2, #1
 80042c2:	2900      	cmp	r1, #0
 80042c4:	bf02      	ittt	eq
 80042c6:	6851      	ldreq	r1, [r2, #4]
 80042c8:	f3c1 01c0 	ubfxeq	r1, r1, #3, #1
 80042cc:	2900      	cmpeq	r1, #0
 80042ce:	d072      	beq.n	80043b6 <PE_Check_ControlMessage+0x312>
 80042d0:	210a      	movs	r1, #10
 80042d2:	83a1      	strh	r1, [r4, #28]
 80042d4:	2163      	movs	r1, #99	; 0x63
 80042d6:	f884 137f 	strb.w	r1, [r4, #895]	; 0x37f
 80042da:	b120      	cbz	r0, 80042e6 <PE_Check_ControlMessage+0x242>
 80042dc:	f001 f9e5 	bl	80056aa <.text_251>
 80042e0:	2246      	movs	r2, #70	; 0x46
 80042e2:	f000 fabb 	bl	800485c <.text_203+0x2>
 80042e6:	2146      	movs	r1, #70	; 0x46
 80042e8:	e059      	b.n	800439e <PE_Check_ControlMessage+0x2fa>
 80042ea:	6822      	ldr	r2, [r4, #0]
 80042ec:	8911      	ldrh	r1, [r2, #8]
 80042ee:	f3c1 21c0 	ubfx	r1, r1, #11, #1
 80042f2:	2900      	cmp	r1, #0
 80042f4:	d05f      	beq.n	80043b6 <PE_Check_ControlMessage+0x312>
 80042f6:	6861      	ldr	r1, [r4, #4]
 80042f8:	680b      	ldr	r3, [r1, #0]
 80042fa:	f3c3 0180 	ubfx	r1, r3, #2, #1
 80042fe:	b121      	cbz	r1, 800430a <PE_Check_ControlMessage+0x266>
 8004300:	6851      	ldr	r1, [r2, #4]
 8004302:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8004306:	2900      	cmp	r1, #0
 8004308:	d055      	beq.n	80043b6 <PE_Check_ControlMessage+0x312>
 800430a:	f240 110f 	movw	r1, #271	; 0x10f
 800430e:	83a1      	strh	r1, [r4, #28]
 8004310:	2164      	movs	r1, #100	; 0x64
 8004312:	f884 137f 	strb.w	r1, [r4, #895]	; 0x37f
 8004316:	b120      	cbz	r0, 8004322 <PE_Check_ControlMessage+0x27e>
 8004318:	f001 f9c7 	bl	80056aa <.text_251>
 800431c:	2260      	movs	r2, #96	; 0x60
 800431e:	f000 fa9d 	bl	800485c <.text_203+0x2>
 8004322:	2160      	movs	r1, #96	; 0x60
 8004324:	e03b      	b.n	800439e <PE_Check_ControlMessage+0x2fa>
 8004326:	6821      	ldr	r1, [r4, #0]
 8004328:	890a      	ldrh	r2, [r1, #8]
 800432a:	f3c2 1140 	ubfx	r1, r2, #5, #1
 800432e:	2900      	cmp	r1, #0
 8004330:	d041      	beq.n	80043b6 <PE_Check_ControlMessage+0x312>
 8004332:	210b      	movs	r1, #11
 8004334:	83a1      	strh	r1, [r4, #28]
 8004336:	2130      	movs	r1, #48	; 0x30
 8004338:	f884 137f 	strb.w	r1, [r4, #895]	; 0x37f
 800433c:	b120      	cbz	r0, 8004348 <PE_Check_ControlMessage+0x2a4>
 800433e:	f001 f9b4 	bl	80056aa <.text_251>
 8004342:	224d      	movs	r2, #77	; 0x4d
 8004344:	f000 fa8a 	bl	800485c <.text_203+0x2>
 8004348:	214d      	movs	r1, #77	; 0x4d
 800434a:	e028      	b.n	800439e <PE_Check_ControlMessage+0x2fa>
 800434c:	6821      	ldr	r1, [r4, #0]
 800434e:	890a      	ldrh	r2, [r1, #8]
 8004350:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8004354:	2900      	cmp	r1, #0
 8004356:	d02e      	beq.n	80043b6 <PE_Check_ControlMessage+0x312>
 8004358:	210b      	movs	r1, #11
 800435a:	f000 f83b 	bl	80043d4 <.text_191>
 800435e:	bf19      	ittee	ne
 8004360:	222d      	movne	r2, #45	; 0x2d
 8004362:	f884 237f 	strbne.w	r2, [r4, #895]	; 0x37f
 8004366:	2111      	moveq	r1, #17
 8004368:	f884 137f 	strbeq.w	r1, [r4, #895]	; 0x37f
 800436c:	b120      	cbz	r0, 8004378 <PE_Check_ControlMessage+0x2d4>
 800436e:	f001 f99c 	bl	80056aa <.text_251>
 8004372:	2249      	movs	r2, #73	; 0x49
 8004374:	f000 fa72 	bl	800485c <.text_203+0x2>
 8004378:	2149      	movs	r1, #73	; 0x49
 800437a:	e010      	b.n	800439e <PE_Check_ControlMessage+0x2fa>
 800437c:	6820      	ldr	r0, [r4, #0]
 800437e:	8901      	ldrh	r1, [r0, #8]
 8004380:	f3c1 10c0 	ubfx	r0, r1, #7, #1
 8004384:	b1b8      	cbz	r0, 80043b6 <PE_Check_ControlMessage+0x312>
 8004386:	202f      	movs	r0, #47	; 0x2f
 8004388:	e016      	b.n	80043b8 <PE_Check_ControlMessage+0x314>
 800438a:	2009      	movs	r0, #9
 800438c:	83a0      	strh	r0, [r4, #28]
 800438e:	e012      	b.n	80043b6 <PE_Check_ControlMessage+0x312>
 8004390:	b120      	cbz	r0, 800439c <PE_Check_ControlMessage+0x2f8>
 8004392:	f001 f98a 	bl	80056aa <.text_251>
 8004396:	2259      	movs	r2, #89	; 0x59
 8004398:	f000 fa60 	bl	800485c <.text_203+0x2>
 800439c:	2159      	movs	r1, #89	; 0x59
 800439e:	68a2      	ldr	r2, [r4, #8]
 80043a0:	68d3      	ldr	r3, [r2, #12]
 80043a2:	7c20      	ldrb	r0, [r4, #16]
 80043a4:	b002      	add	sp, #8
 80043a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043aa:	e23e      	b.n	800482a <.text_198>
 80043ac:	2011      	movs	r0, #17
 80043ae:	e003      	b.n	80043b8 <PE_Check_ControlMessage+0x314>
 80043b0:	f001 f9fe 	bl	80057b0 <.text_260>
 80043b4:	d102      	bne.n	80043bc <PE_Check_ControlMessage+0x318>
 80043b6:	2001      	movs	r0, #1
 80043b8:	f884 037f 	strb.w	r0, [r4, #895]	; 0x37f
 80043bc:	e8bd 81f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, pc}

080043c0 <.text_189>:
 80043c0:	68a2      	ldr	r2, [r4, #8]
 80043c2:	7c20      	ldrb	r0, [r4, #16]
 80043c4:	68d3      	ldr	r3, [r2, #12]
 80043c6:	4770      	bx	lr

080043c8 <.text_190>:
 80043c8:	6802      	ldr	r2, [r0, #0]
 80043ca:	2104      	movs	r1, #4
 80043cc:	f361 220a 	bfi	r2, r1, #8, #3
 80043d0:	6002      	str	r2, [r0, #0]
 80043d2:	4770      	bx	lr

080043d4 <.text_191>:
 80043d4:	83a1      	strh	r1, [r4, #28]
 80043d6:	6861      	ldr	r1, [r4, #4]
 80043d8:	680a      	ldr	r2, [r1, #0]
 80043da:	f3c2 0180 	ubfx	r1, r2, #2, #1
 80043de:	2900      	cmp	r1, #0
 80043e0:	4770      	bx	lr

080043e2 <.text_192>:
 80043e2:	7c20      	ldrb	r0, [r4, #16]
 80043e4:	f000 0001 	and.w	r0, r0, #1
 80043e8:	f001 be4e 	b.w	8006088 <USBPD_PRL_EnableRX>

080043ec <PE_Check_DataMessage>:
 80043ec:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80043ee:	4604      	mov	r4, r0
 80043f0:	f504 7764 	add.w	r7, r4, #912	; 0x390
 80043f4:	2502      	movs	r5, #2
 80043f6:	8879      	ldrh	r1, [r7, #2]
 80043f8:	f001 001f 	and.w	r0, r1, #31
 80043fc:	2801      	cmp	r0, #1
 80043fe:	f504 76a1 	add.w	r6, r4, #322	; 0x142
 8004402:	d029      	beq.n	8004458 <PE_Check_DataMessage+0x6c>
 8004404:	2802      	cmp	r0, #2
 8004406:	d009      	beq.n	800441c <PE_Check_DataMessage+0x30>
 8004408:	2803      	cmp	r0, #3
 800440a:	d03d      	beq.n	8004488 <PE_Check_DataMessage+0x9c>
 800440c:	2806      	cmp	r0, #6
 800440e:	d074      	beq.n	80044fa <PE_Check_DataMessage+0x10e>
 8004410:	2807      	cmp	r0, #7
 8004412:	f000 8082 	beq.w	800451a <PE_Check_DataMessage+0x12e>
 8004416:	280f      	cmp	r0, #15
 8004418:	d06a      	beq.n	80044f0 <PE_Check_DataMessage+0x104>
 800441a:	e087      	b.n	800452c <PE_Check_DataMessage+0x140>
 800441c:	7830      	ldrb	r0, [r6, #0]
 800441e:	7871      	ldrb	r1, [r6, #1]
 8004420:	78b2      	ldrb	r2, [r6, #2]
 8004422:	eb00 2001 	add.w	r0, r0, r1, lsl #8
 8004426:	78f1      	ldrb	r1, [r6, #3]
 8004428:	eb00 4002 	add.w	r0, r0, r2, lsl #16
 800442c:	eb00 6001 	add.w	r0, r0, r1, lsl #24
 8004430:	9000      	str	r0, [sp, #0]
 8004432:	6860      	ldr	r0, [r4, #4]
 8004434:	f001 f96d 	bl	8005712 <.text_255+0x4>
 8004438:	d07b      	beq.n	8004532 <PE_Check_DataMessage+0x146>
 800443a:	68a6      	ldr	r6, [r4, #8]
 800443c:	7c20      	ldrb	r0, [r4, #16]
 800443e:	f8d6 c018 	ldr.w	ip, [r6, #24]
 8004442:	f000 f878 	bl	8004536 <.text_194>
 8004446:	2001      	movs	r0, #1
 8004448:	83a0      	strh	r0, [r4, #28]
 800444a:	8838      	ldrh	r0, [r7, #0]
 800444c:	0441      	lsls	r1, r0, #17
 800444e:	bf1c      	itt	ne
 8004450:	2100      	movne	r1, #0
 8004452:	8039      	strhne	r1, [r7, #0]
 8004454:	2009      	movs	r0, #9
 8004456:	e06a      	b.n	800452e <PE_Check_DataMessage+0x142>
 8004458:	6860      	ldr	r0, [r4, #4]
 800445a:	6802      	ldr	r2, [r0, #0]
 800445c:	f3c2 0080 	ubfx	r0, r2, #2, #1
 8004460:	2800      	cmp	r0, #0
 8004462:	d166      	bne.n	8004532 <PE_Check_DataMessage+0x146>
 8004464:	7c20      	ldrb	r0, [r4, #16]
 8004466:	f000 f86c 	bl	8004542 <.text_195>
 800446a:	4632      	mov	r2, r6
 800446c:	68a6      	ldr	r6, [r4, #8]
 800446e:	8878      	ldrh	r0, [r7, #2]
 8004470:	69b7      	ldr	r7, [r6, #24]
 8004472:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8004476:	7c20      	ldrb	r0, [r4, #16]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	2104      	movs	r1, #4
 800447c:	f000 f9ea 	bl	8004854 <.text_202>
 8004480:	2001      	movs	r0, #1
 8004482:	83a0      	strh	r0, [r4, #28]
 8004484:	2044      	movs	r0, #68	; 0x44
 8004486:	e052      	b.n	800452e <PE_Check_DataMessage+0x142>
 8004488:	2000      	movs	r0, #0
 800448a:	9001      	str	r0, [sp, #4]
 800448c:	9000      	str	r0, [sp, #0]
 800448e:	466b      	mov	r3, sp
 8004490:	7830      	ldrb	r0, [r6, #0]
 8004492:	7871      	ldrb	r1, [r6, #1]
 8004494:	eb00 2701 	add.w	r7, r0, r1, lsl #8
 8004498:	78b0      	ldrb	r0, [r6, #2]
 800449a:	78f1      	ldrb	r1, [r6, #3]
 800449c:	68a6      	ldr	r6, [r4, #8]
 800449e:	f8d6 c014 	ldr.w	ip, [r6, #20]
 80044a2:	eb07 4700 	add.w	r7, r7, r0, lsl #16
 80044a6:	7c20      	ldrb	r0, [r4, #16]
 80044a8:	eb07 6701 	add.w	r7, r7, r1, lsl #24
 80044ac:	aa01      	add	r2, sp, #4
 80044ae:	2103      	movs	r1, #3
 80044b0:	f001 f8bd 	bl	800562e <.text_243>
 80044b4:	9800      	ldr	r0, [sp, #0]
 80044b6:	2804      	cmp	r0, #4
 80044b8:	bf01      	itttt	eq
 80044ba:	6860      	ldreq	r0, [r4, #4]
 80044bc:	6801      	ldreq	r1, [r0, #0]
 80044be:	f3c1 2002 	ubfxeq	r0, r1, #8, #3
 80044c2:	2803      	cmpeq	r0, #3
 80044c4:	d112      	bne.n	80044ec <PE_Check_DataMessage+0x100>
 80044c6:	9801      	ldr	r0, [sp, #4]
 80044c8:	f241 3188 	movw	r1, #5000	; 0x1388
 80044cc:	4288      	cmp	r0, r1
 80044ce:	d10d      	bne.n	80044ec <PE_Check_DataMessage+0x100>
 80044d0:	0f3f      	lsrs	r7, r7, #28
 80044d2:	d003      	beq.n	80044dc <PE_Check_DataMessage+0xf0>
 80044d4:	2f05      	cmp	r7, #5
 80044d6:	d005      	beq.n	80044e4 <PE_Check_DataMessage+0xf8>
 80044d8:	2f08      	cmp	r7, #8
 80044da:	d105      	bne.n	80044e8 <PE_Check_DataMessage+0xfc>
 80044dc:	2129      	movs	r1, #41	; 0x29
 80044de:	f884 137f 	strb.w	r1, [r4, #895]	; 0x37f
 80044e2:	e026      	b.n	8004532 <PE_Check_DataMessage+0x146>
 80044e4:	2027      	movs	r0, #39	; 0x27
 80044e6:	e022      	b.n	800452e <PE_Check_DataMessage+0x142>
 80044e8:	202a      	movs	r0, #42	; 0x2a
 80044ea:	e020      	b.n	800452e <PE_Check_DataMessage+0x142>
 80044ec:	2003      	movs	r0, #3
 80044ee:	e01e      	b.n	800452e <PE_Check_DataMessage+0x142>
 80044f0:	4620      	mov	r0, r4
 80044f2:	f000 f82b 	bl	800454c <PE_Check_DataMessageVDM>
 80044f6:	4605      	mov	r5, r0
 80044f8:	e01b      	b.n	8004532 <PE_Check_DataMessage+0x146>
 80044fa:	6820      	ldr	r0, [r4, #0]
 80044fc:	8901      	ldrh	r1, [r0, #8]
 80044fe:	f3c1 1000 	ubfx	r0, r1, #4, #1
 8004502:	b140      	cbz	r0, 8004516 <PE_Check_DataMessage+0x12a>
 8004504:	4632      	mov	r2, r6
 8004506:	f000 f99b 	bl	8004840 <.text_200>
 800450a:	2304      	movs	r3, #4
 800450c:	210b      	movs	r1, #11
 800450e:	f000 f9a1 	bl	8004854 <.text_202>
 8004512:	202c      	movs	r0, #44	; 0x2c
 8004514:	e00b      	b.n	800452e <PE_Check_DataMessage+0x142>
 8004516:	2001      	movs	r0, #1
 8004518:	e009      	b.n	800452e <PE_Check_DataMessage+0x142>
 800451a:	6820      	ldr	r0, [r4, #0]
 800451c:	8901      	ldrh	r1, [r0, #8]
 800451e:	f3c1 2000 	ubfx	r0, r1, #8, #1
 8004522:	2800      	cmp	r0, #0
 8004524:	bf0c      	ite	eq
 8004526:	2001      	moveq	r0, #1
 8004528:	203d      	movne	r0, #61	; 0x3d
 800452a:	e000      	b.n	800452e <PE_Check_DataMessage+0x142>
 800452c:	2011      	movs	r0, #17
 800452e:	f884 037f 	strb.w	r0, [r4, #895]	; 0x37f
 8004532:	4628      	mov	r0, r5
 8004534:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08004536 <.text_194>:
 8004536:	2304      	movs	r3, #4
 8004538:	466a      	mov	r2, sp
 800453a:	2106      	movs	r1, #6
 800453c:	f000 0001 	and.w	r0, r0, #1

08004540 <__iar_annotation$$tailcall>:
 8004540:	4760      	bx	ip

08004542 <.text_195>:
 8004542:	f3c1 1181 	ubfx	r1, r1, #6, #2
 8004546:	f000 0001 	and.w	r0, r0, #1
 800454a:	e338      	b.n	8004bbe <PE_ExtRevisionInteroperability>

0800454c <PE_Check_DataMessageVDM>:
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454e:	2402      	movs	r4, #2
 8004550:	4606      	mov	r6, r0
 8004552:	f506 755e 	add.w	r5, r6, #888	; 0x378
 8004556:	6830      	ldr	r0, [r6, #0]
 8004558:	6841      	ldr	r1, [r0, #4]
 800455a:	f3c1 1040 	ubfx	r0, r1, #5, #1
 800455e:	2800      	cmp	r0, #0
 8004560:	bf04      	itt	eq
 8004562:	68f0      	ldreq	r0, [r6, #12]
 8004564:	2800      	cmpeq	r0, #0
 8004566:	d108      	bne.n	800457a <PE_Check_DataMessageVDM+0x2e>
 8004568:	6871      	ldr	r1, [r6, #4]
 800456a:	7808      	ldrb	r0, [r1, #0]
 800456c:	f000 0003 	and.w	r0, r0, #3
 8004570:	2802      	cmp	r0, #2
 8004572:	d15f      	bne.n	8004634 <PE_Check_DataMessageVDM+0xe8>
 8004574:	2101      	movs	r1, #1
 8004576:	71e9      	strb	r1, [r5, #7]
 8004578:	e05c      	b.n	8004634 <PE_Check_DataMessageVDM+0xe8>
 800457a:	f506 71a1 	add.w	r1, r6, #322	; 0x142
 800457e:	7808      	ldrb	r0, [r1, #0]
 8004580:	784a      	ldrb	r2, [r1, #1]
 8004582:	788b      	ldrb	r3, [r1, #2]
 8004584:	78c9      	ldrb	r1, [r1, #3]
 8004586:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 800458a:	eb00 4003 	add.w	r0, r0, r3, lsl #16
 800458e:	eb00 6001 	add.w	r0, r0, r1, lsl #24
 8004592:	4601      	mov	r1, r0
 8004594:	0bca      	lsrs	r2, r1, #15
 8004596:	f012 0201 	ands.w	r2, r2, #1
 800459a:	d017      	beq.n	80045cc <PE_Check_DataMessageVDM+0x80>
 800459c:	2a01      	cmp	r2, #1
 800459e:	d149      	bne.n	8004634 <PE_Check_DataMessageVDM+0xe8>
 80045a0:	f8c6 1354 	str.w	r1, [r6, #852]	; 0x354
 80045a4:	f3c0 1081 	ubfx	r0, r0, #6, #2
 80045a8:	b948      	cbnz	r0, 80045be <PE_Check_DataMessageVDM+0x72>
 80045aa:	6830      	ldr	r0, [r6, #0]
 80045ac:	6841      	ldr	r1, [r0, #4]
 80045ae:	f3c1 2000 	ubfx	r0, r1, #8, #1
 80045b2:	b120      	cbz	r0, 80045be <PE_Check_DataMessageVDM+0x72>
 80045b4:	4630      	mov	r0, r6
 80045b6:	f7fe fcda 	bl	8002f6e <PE_Receive_SVDM>
 80045ba:	2405      	movs	r4, #5
 80045bc:	e03a      	b.n	8004634 <PE_Check_DataMessageVDM+0xe8>
 80045be:	6870      	ldr	r0, [r6, #4]
 80045c0:	7801      	ldrb	r1, [r0, #0]
 80045c2:	f001 0103 	and.w	r1, r1, #3
 80045c6:	2902      	cmp	r1, #2
 80045c8:	d134      	bne.n	8004634 <PE_Check_DataMessageVDM+0xe8>
 80045ca:	e031      	b.n	8004630 <PE_Check_DataMessageVDM+0xe4>
 80045cc:	68f0      	ldr	r0, [r6, #12]
 80045ce:	2800      	cmp	r0, #0
 80045d0:	bf1c      	itt	ne
 80045d2:	6c00      	ldrne	r0, [r0, #64]	; 0x40
 80045d4:	2800      	cmpne	r0, #0
 80045d6:	d02b      	beq.n	8004630 <PE_Check_DataMessageVDM+0xe4>
 80045d8:	8b6a      	ldrh	r2, [r5, #26]
 80045da:	0b12      	lsrs	r2, r2, #12
 80045dc:	f002 0207 	and.w	r2, r2, #7
 80045e0:	1e50      	subs	r0, r2, #1
 80045e2:	7028      	strb	r0, [r5, #0]
 80045e4:	f506 7358 	add.w	r3, r6, #864	; 0x360
 80045e8:	2000      	movs	r0, #0
 80045ea:	e012      	b.n	8004612 <PE_Check_DataMessageVDM+0xc6>
 80045ec:	eb06 0280 	add.w	r2, r6, r0, lsl #2
 80045f0:	f502 72a3 	add.w	r2, r2, #326	; 0x146
 80045f4:	7817      	ldrb	r7, [r2, #0]
 80045f6:	f892 c001 	ldrb.w	ip, [r2, #1]
 80045fa:	f892 e002 	ldrb.w	lr, [r2, #2]
 80045fe:	78d2      	ldrb	r2, [r2, #3]
 8004600:	eb07 270c 	add.w	r7, r7, ip, lsl #8
 8004604:	eb07 470e 	add.w	r7, r7, lr, lsl #16
 8004608:	eb07 6702 	add.w	r7, r7, r2, lsl #24
 800460c:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 8004610:	1c40      	adds	r0, r0, #1
 8004612:	782a      	ldrb	r2, [r5, #0]
 8004614:	4290      	cmp	r0, r2
 8004616:	d3e9      	bcc.n	80045ec <PE_Check_DataMessageVDM+0xa0>
 8004618:	7c30      	ldrb	r0, [r6, #16]
 800461a:	68f6      	ldr	r6, [r6, #12]
 800461c:	6c37      	ldr	r7, [r6, #64]	; 0x40
 800461e:	462a      	mov	r2, r5
 8004620:	f000 0001 	and.w	r0, r0, #1
 8004624:	47b8      	blx	r7
 8004626:	b918      	cbnz	r0, 8004630 <PE_Check_DataMessageVDM+0xe4>
 8004628:	2003      	movs	r0, #3
 800462a:	71e8      	strb	r0, [r5, #7]
 800462c:	2400      	movs	r4, #0
 800462e:	e001      	b.n	8004634 <PE_Check_DataMessageVDM+0xe8>
 8004630:	2001      	movs	r0, #1
 8004632:	71e8      	strb	r0, [r5, #7]
 8004634:	4620      	mov	r0, r4
 8004636:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004638 <PE_Check_ExtendedMessage>:
 8004638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463a:	4604      	mov	r4, r0
 800463c:	f504 70a1 	add.w	r0, r4, #322	; 0x142
 8004640:	7801      	ldrb	r1, [r0, #0]
 8004642:	7840      	ldrb	r0, [r0, #1]
 8004644:	eb01 2200 	add.w	r2, r1, r0, lsl #8
 8004648:	f504 7161 	add.w	r1, r4, #900	; 0x384
 800464c:	7b88      	ldrb	r0, [r1, #14]
 800464e:	838a      	strh	r2, [r1, #28]
 8004650:	f000 001f 	and.w	r0, r0, #31
 8004654:	7788      	strb	r0, [r1, #30]
 8004656:	f3c2 20c3 	ubfx	r0, r2, #11, #4
 800465a:	2800      	cmp	r0, #0
 800465c:	bf1e      	ittt	ne
 800465e:	f3c2 2080 	ubfxne	r0, r2, #10, #1
 8004662:	2800      	cmpne	r0, #0
 8004664:	2034      	movne	r0, #52	; 0x34
 8004666:	d127      	bne.n	80046b8 <PE_Check_ExtendedMessage+0x80>
 8004668:	0410      	lsls	r0, r2, #16
 800466a:	0fc0      	lsrs	r0, r0, #31
 800466c:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8004670:	d10d      	bne.n	800468e <PE_Check_ExtendedMessage+0x56>
 8004672:	f8a4 3350 	strh.w	r3, [r4, #848]	; 0x350
 8004676:	f8b4 2350 	ldrh.w	r2, [r4, #848]	; 0x350
 800467a:	4290      	cmp	r0, r2
 800467c:	bf3f      	itttt	cc
 800467e:	1822      	addcc	r2, r4, r0
 8004680:	f892 3144 	ldrbcc.w	r3, [r2, #324]	; 0x144
 8004684:	f882 303c 	strbcc.w	r3, [r2, #60]	; 0x3c
 8004688:	1c40      	addcc	r0, r0, #1
 800468a:	d3f4      	bcc.n	8004676 <PE_Check_ExtendedMessage+0x3e>
 800468c:	e09e      	b.n	80047cc <PE_Check_ExtendedMessage+0x194>
 800468e:	f412 4ff8 	tst.w	r2, #31744	; 0x7c00
 8004692:	d106      	bne.n	80046a2 <PE_Check_ExtendedMessage+0x6a>
 8004694:	89c8      	ldrh	r0, [r1, #14]
 8004696:	f3c0 3002 	ubfx	r0, r0, #12, #3
 800469a:	2806      	cmp	r0, #6
 800469c:	d9f6      	bls.n	800468c <PE_Check_ExtendedMessage+0x54>
 800469e:	2b1b      	cmp	r3, #27
 80046a0:	d3f4      	bcc.n	800468c <PE_Check_ExtendedMessage+0x54>
 80046a2:	f3c2 2080 	ubfx	r0, r2, #10, #1
 80046a6:	2800      	cmp	r0, #0
 80046a8:	d1f0      	bne.n	800468c <PE_Check_ExtendedMessage+0x54>
 80046aa:	f8b4 0350 	ldrh.w	r0, [r4, #848]	; 0x350
 80046ae:	4298      	cmp	r0, r3
 80046b0:	d2ec      	bcs.n	800468c <PE_Check_ExtendedMessage+0x54>
 80046b2:	2000      	movs	r0, #0
 80046b4:	8008      	strh	r0, [r1, #0]
 80046b6:	2037      	movs	r0, #55	; 0x37
 80046b8:	e085      	b.n	80047c6 <PE_Check_ExtendedMessage+0x18e>
 80046ba:	f000 f8c1 	bl	8004840 <.text_200>
 80046be:	2318      	movs	r3, #24
 80046c0:	2113      	movs	r1, #19
 80046c2:	f000 f8c7 	bl	8004854 <.text_202>
 80046c6:	f000 f8bf 	bl	8004848 <.text_201>
 80046ca:	d504      	bpl.n	80046d6 <PE_Check_ExtendedMessage+0x9e>
 80046cc:	f000 f8ca 	bl	8004864 <.text_204>
 80046d0:	2262      	movs	r2, #98	; 0x62
 80046d2:	f000 f8c3 	bl	800485c <.text_203+0x2>
 80046d6:	2162      	movs	r1, #98	; 0x62
 80046d8:	e0a2      	b.n	8004820 <PE_Check_ExtendedMessage+0x1e8>
 80046da:	f000 f8b1 	bl	8004840 <.text_200>
 80046de:	2306      	movs	r3, #6
 80046e0:	2109      	movs	r1, #9
 80046e2:	f000 f8b7 	bl	8004854 <.text_202>
 80046e6:	f000 f8af 	bl	8004848 <.text_201>
 80046ea:	d504      	bpl.n	80046f6 <PE_Check_ExtendedMessage+0xbe>
 80046ec:	f000 f8ba 	bl	8004864 <.text_204>
 80046f0:	224e      	movs	r2, #78	; 0x4e
 80046f2:	f000 f8b3 	bl	800485c <.text_203+0x2>
 80046f6:	214e      	movs	r1, #78	; 0x4e
 80046f8:	e092      	b.n	8004820 <PE_Check_ExtendedMessage+0x1e8>
 80046fa:	68a0      	ldr	r0, [r4, #8]
 80046fc:	6905      	ldr	r5, [r0, #16]
 80046fe:	2d00      	cmp	r5, #0
 8004700:	d060      	beq.n	80047c4 <PE_Check_ExtendedMessage+0x18c>
 8004702:	f000 f895 	bl	8004830 <.text_199>
 8004706:	2038      	movs	r0, #56	; 0x38
 8004708:	e05d      	b.n	80047c6 <PE_Check_ExtendedMessage+0x18e>
 800470a:	1ecb      	subs	r3, r1, #3
 800470c:	2b08      	cmp	r3, #8
 800470e:	d859      	bhi.n	80047c4 <PE_Check_ExtendedMessage+0x18c>
 8004710:	e8df f003 	tbb	[pc, r3]
 8004714:	19580f05 	.word	0x19580f05
 8004718:	29423458 	.word	0x29423458
 800471c:	002e      	.short	0x002e
 800471e:	68a5      	ldr	r5, [r4, #8]
 8004720:	7c20      	ldrb	r0, [r4, #16]
 8004722:	69ae      	ldr	r6, [r5, #24]
 8004724:	2301      	movs	r3, #1
 8004726:	2110      	movs	r1, #16
 8004728:	f000 0001 	and.w	r0, r0, #1
 800472c:	47b0      	blx	r6
 800472e:	203a      	movs	r0, #58	; 0x3a
 8004730:	e049      	b.n	80047c6 <PE_Check_ExtendedMessage+0x18e>
 8004732:	68a5      	ldr	r5, [r4, #8]
 8004734:	7c20      	ldrb	r0, [r4, #16]
 8004736:	69ae      	ldr	r6, [r5, #24]
 8004738:	2301      	movs	r3, #1
 800473a:	210e      	movs	r1, #14
 800473c:	f000 0001 	and.w	r0, r0, #1
 8004740:	47b0      	blx	r6
 8004742:	203b      	movs	r0, #59	; 0x3b
 8004744:	e03f      	b.n	80047c6 <PE_Check_ExtendedMessage+0x18e>
 8004746:	6820      	ldr	r0, [r4, #0]
 8004748:	8901      	ldrh	r1, [r0, #8]
 800474a:	f3c1 1080 	ubfx	r0, r1, #6, #1
 800474e:	2800      	cmp	r0, #0
 8004750:	d038      	beq.n	80047c4 <PE_Check_ExtendedMessage+0x18c>
 8004752:	68a5      	ldr	r5, [r4, #8]
 8004754:	7c20      	ldrb	r0, [r4, #16]
 8004756:	69ae      	ldr	r6, [r5, #24]
 8004758:	2302      	movs	r3, #2
 800475a:	210c      	movs	r1, #12
 800475c:	f000 0001 	and.w	r0, r0, #1
 8004760:	47b0      	blx	r6
 8004762:	203c      	movs	r0, #60	; 0x3c
 8004764:	e02f      	b.n	80047c6 <PE_Check_ExtendedMessage+0x18e>
 8004766:	6820      	ldr	r0, [r4, #0]
 8004768:	8902      	ldrh	r2, [r0, #8]
 800476a:	f3c2 2080 	ubfx	r0, r2, #10, #1
 800476e:	e009      	b.n	8004784 <PE_Check_ExtendedMessage+0x14c>
 8004770:	68a0      	ldr	r0, [r4, #8]
 8004772:	6905      	ldr	r5, [r0, #16]
 8004774:	b34d      	cbz	r5, 80047ca <PE_Check_ExtendedMessage+0x192>
 8004776:	f000 f85b 	bl	8004830 <.text_199>
 800477a:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800477c:	6820      	ldr	r0, [r4, #0]
 800477e:	8902      	ldrh	r2, [r0, #8]
 8004780:	f3c2 2040 	ubfx	r0, r2, #9, #1
 8004784:	2800      	cmp	r0, #0
 8004786:	bf1e      	ittt	ne
 8004788:	68a2      	ldrne	r2, [r4, #8]
 800478a:	6910      	ldrne	r0, [r2, #16]
 800478c:	2800      	cmpne	r0, #0
 800478e:	d10d      	bne.n	80047ac <PE_Check_ExtendedMessage+0x174>
 8004790:	2101      	movs	r1, #1
 8004792:	f884 137f 	strb.w	r1, [r4, #895]	; 0x37f
 8004796:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8004798:	6820      	ldr	r0, [r4, #0]
 800479a:	8902      	ldrh	r2, [r0, #8]
 800479c:	f3c2 2040 	ubfx	r0, r2, #9, #1
 80047a0:	2800      	cmp	r0, #0
 80047a2:	bf1e      	ittt	ne
 80047a4:	68a2      	ldrne	r2, [r4, #8]
 80047a6:	6910      	ldrne	r0, [r2, #16]
 80047a8:	2800      	cmpne	r0, #0
 80047aa:	d00e      	beq.n	80047ca <PE_Check_ExtendedMessage+0x192>
 80047ac:	68a5      	ldr	r5, [r4, #8]
 80047ae:	7c20      	ldrb	r0, [r4, #16]
 80047b0:	f8b4 3350 	ldrh.w	r3, [r4, #848]	; 0x350
 80047b4:	692e      	ldr	r6, [r5, #16]
 80047b6:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80047ba:	f000 0001 	and.w	r0, r0, #1
 80047be:	47b0      	blx	r6
 80047c0:	2003      	movs	r0, #3
 80047c2:	e000      	b.n	80047c6 <PE_Check_ExtendedMessage+0x18e>
 80047c4:	2001      	movs	r0, #1
 80047c6:	f884 037f 	strb.w	r0, [r4, #895]	; 0x37f
 80047ca:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80047cc:	f9b4 001c 	ldrsh.w	r0, [r4, #28]
 80047d0:	7f89      	ldrb	r1, [r1, #30]
 80047d2:	2800      	cmp	r0, #0
 80047d4:	f504 72a2 	add.w	r2, r4, #324	; 0x144
 80047d8:	d097      	beq.n	800470a <PE_Check_ExtendedMessage+0xd2>
 80047da:	2901      	cmp	r1, #1
 80047dc:	f8df 548c 	ldr.w	r5, [pc, #1164]	; 8004c6c <.text_221>
 80047e0:	d00f      	beq.n	8004802 <PE_Check_ExtendedMessage+0x1ca>
 80047e2:	2902      	cmp	r1, #2
 80047e4:	f43f af79 	beq.w	80046da <PE_Check_ExtendedMessage+0xa2>
 80047e8:	2905      	cmp	r1, #5
 80047ea:	bf18      	it	ne
 80047ec:	2907      	cmpne	r1, #7
 80047ee:	d002      	beq.n	80047f6 <PE_Check_ExtendedMessage+0x1be>
 80047f0:	290d      	cmp	r1, #13
 80047f2:	bf18      	it	ne
 80047f4:	290e      	cmpne	r1, #14
 80047f6:	f43f af80 	beq.w	80046fa <PE_Check_ExtendedMessage+0xc2>
 80047fa:	290f      	cmp	r1, #15
 80047fc:	f43f af5d 	beq.w	80046ba <PE_Check_ExtendedMessage+0x82>
 8004800:	e7e0      	b.n	80047c4 <PE_Check_ExtendedMessage+0x18c>
 8004802:	f000 f81d 	bl	8004840 <.text_200>
 8004806:	2318      	movs	r3, #24
 8004808:	2108      	movs	r1, #8
 800480a:	f000 f823 	bl	8004854 <.text_202>
 800480e:	f000 f81b 	bl	8004848 <.text_201>
 8004812:	d504      	bpl.n	800481e <PE_Check_ExtendedMessage+0x1e6>
 8004814:	f000 f826 	bl	8004864 <.text_204>
 8004818:	2247      	movs	r2, #71	; 0x47
 800481a:	f000 f81f 	bl	800485c <.text_203+0x2>
 800481e:	2147      	movs	r1, #71	; 0x47
 8004820:	68a2      	ldr	r2, [r4, #8]
 8004822:	68d3      	ldr	r3, [r2, #12]
 8004824:	7c20      	ldrb	r0, [r4, #16]
 8004826:	e8bd 40f4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, lr}

0800482a <.text_198>:
 800482a:	f000 0001 	and.w	r0, r0, #1

0800482e <__iar_annotation$$tailcall>:
 800482e:	4718      	bx	r3

08004830 <.text_199>:
 8004830:	7c20      	ldrb	r0, [r4, #16]
 8004832:	f8b4 3350 	ldrh.w	r3, [r4, #848]	; 0x350
 8004836:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800483a:	f000 0001 	and.w	r0, r0, #1

0800483e <__iar_annotation$$tailcall>:
 800483e:	4728      	bx	r5

08004840 <.text_200>:
 8004840:	68a6      	ldr	r6, [r4, #8]
 8004842:	7c20      	ldrb	r0, [r4, #16]
 8004844:	69b7      	ldr	r7, [r6, #24]
 8004846:	4770      	bx	lr

08004848 <.text_201>:
 8004848:	2003      	movs	r0, #3
 800484a:	f884 037f 	strb.w	r0, [r4, #895]	; 0x37f
 800484e:	7828      	ldrb	r0, [r5, #0]
 8004850:	0781      	lsls	r1, r0, #30
 8004852:	4770      	bx	lr

08004854 <.text_202>:
 8004854:	f000 0001 	and.w	r0, r0, #1

08004858 <__iar_annotation$$tailcall>:
 8004858:	4738      	bx	r7

0800485a <.text_203>:
 800485a:	223b      	movs	r2, #59	; 0x3b
 800485c:	f001 0101 	and.w	r1, r1, #1
 8004860:	2009      	movs	r0, #9

08004862 <__iar_annotation$$tailcall>:
 8004862:	4728      	bx	r5

08004864 <.text_204>:
 8004864:	2100      	movs	r1, #0
 8004866:	9100      	str	r1, [sp, #0]
 8004868:	2300      	movs	r3, #0
 800486a:	7c21      	ldrb	r1, [r4, #16]
 800486c:	68ed      	ldr	r5, [r5, #12]
 800486e:	4770      	bx	lr

08004870 <PE_PRL_HardResetReceived>:
 8004870:	b570      	push	{r4, r5, r6, lr}
 8004872:	4604      	mov	r4, r0
 8004874:	f8df 0590 	ldr.w	r0, [pc, #1424]	; 8004e08 <.text_228>
 8004878:	4621      	mov	r1, r4
 800487a:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 800487e:	f205 367d 	addw	r6, r5, #893	; 0x37d
 8004882:	2000      	movs	r0, #0
 8004884:	7030      	strb	r0, [r6, #0]
 8004886:	4620      	mov	r0, r4
 8004888:	f001 fbd7 	bl	800603a <USBPD_PRL_Reset>
 800488c:	6869      	ldr	r1, [r5, #4]
 800488e:	680a      	ldr	r2, [r1, #0]
 8004890:	f3c2 0080 	ubfx	r0, r2, #2, #1
 8004894:	2800      	cmp	r0, #0
 8004896:	bf11      	iteee	ne
 8004898:	2014      	movne	r0, #20
 800489a:	f042 0210 	orreq.w	r2, r2, #16
 800489e:	600a      	streq	r2, [r1, #0]
 80048a0:	203f      	moveq	r0, #63	; 0x3f
 80048a2:	70b0      	strb	r0, [r6, #2]
 80048a4:	2001      	movs	r0, #1
 80048a6:	6929      	ldr	r1, [r5, #16]
 80048a8:	f360 2109 	bfi	r1, r0, #8, #2
 80048ac:	6129      	str	r1, [r5, #16]
 80048ae:	4620      	mov	r0, r4
 80048b0:	68a9      	ldr	r1, [r5, #8]
 80048b2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80048b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

080048b8 <__iar_annotation$$tailcall>:
 80048b8:	4710      	bx	r2

080048ba <PE_PRL_BistCompleted>:
 80048ba:	4770      	bx	lr

080048bc <PE_Reset>:
 80048bc:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 80048c0:	4680      	mov	r8, r0
 80048c2:	f8df 6548 	ldr.w	r6, [pc, #1352]	; 8004e0c <.text_229>
 80048c6:	460c      	mov	r4, r1
 80048c8:	1d30      	adds	r0, r6, #4
 80048ca:	4641      	mov	r1, r8
 80048cc:	f850 7021 	ldr.w	r7, [r0, r1, lsl #2]
 80048d0:	2000      	movs	r0, #0
 80048d2:	9001      	str	r0, [sp, #4]
 80048d4:	f7fc fd93 	bl	80013fe <.text_47>
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	680a      	ldr	r2, [r1, #0]
 80048dc:	f3c2 2002 	ubfx	r0, r2, #8, #3
 80048e0:	b170      	cbz	r0, 8004900 <PE_Reset+0x44>
 80048e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048e6:	600a      	str	r2, [r1, #0]
 80048e8:	7830      	ldrb	r0, [r6, #0]
 80048ea:	0781      	lsls	r1, r0, #30
 80048ec:	d506      	bpl.n	80048fc <PE_Reset+0x40>
 80048ee:	f000 f8bf 	bl	8004a70 <.text_212>
 80048f2:	7c39      	ldrb	r1, [r7, #16]
 80048f4:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80048f8:	f000 f8b5 	bl	8004a66 <.text_211>
 80048fc:	f000 f8ac 	bl	8004a58 <.text_210>
 8004900:	6939      	ldr	r1, [r7, #16]
 8004902:	f021 0102 	bic.w	r1, r1, #2
 8004906:	6139      	str	r1, [r7, #16]
 8004908:	2000      	movs	r0, #0
 800490a:	83b8      	strh	r0, [r7, #28]
 800490c:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 8004910:	f207 357b 	addw	r5, r7, #891	; 0x37b
 8004914:	6139      	str	r1, [r7, #16]
 8004916:	7828      	ldrb	r0, [r5, #0]
 8004918:	b168      	cbz	r0, 8004936 <PE_Reset+0x7a>
 800491a:	2200      	movs	r2, #0
 800491c:	702a      	strb	r2, [r5, #0]
 800491e:	7832      	ldrb	r2, [r6, #0]
 8004920:	0790      	lsls	r0, r2, #30
 8004922:	d506      	bpl.n	8004932 <PE_Reset+0x76>
 8004924:	f7fd fd1d 	bl	8002362 <.text_83>
 8004928:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800492c:	225b      	movs	r2, #91	; 0x5b
 800492e:	f000 f89b 	bl	8004a68 <.text_211+0x2>
 8004932:	f000 f88a 	bl	8004a4a <.text_209>
 8004936:	0020      	movs	r0, r4
 8004938:	d106      	bne.n	8004948 <PE_Reset+0x8c>
 800493a:	2000      	movs	r0, #0
 800493c:	7638      	strb	r0, [r7, #24]
 800493e:	76b8      	strb	r0, [r7, #26]
 8004940:	6938      	ldr	r0, [r7, #16]
 8004942:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
 8004946:	6138      	str	r0, [r7, #16]
 8004948:	2100      	movs	r1, #0
 800494a:	70a9      	strb	r1, [r5, #2]
 800494c:	71e9      	strb	r1, [r5, #7]
 800494e:	7069      	strb	r1, [r5, #1]
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	6801      	ldr	r1, [r0, #0]
 8004954:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004958:	b1e8      	cbz	r0, 8004996 <PE_Reset+0xda>
 800495a:	6839      	ldr	r1, [r7, #0]
 800495c:	790b      	ldrb	r3, [r1, #4]
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	2201      	movs	r2, #1
 8004964:	2101      	movs	r1, #1
 8004966:	4640      	mov	r0, r8
 8004968:	f001 f93c 	bl	8005be4 <USBPD_PRL_SetHeader>
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	6801      	ldr	r1, [r0, #0]
 8004970:	f041 0108 	orr.w	r1, r1, #8
 8004974:	6001      	str	r1, [r0, #0]
 8004976:	2002      	movs	r0, #2
 8004978:	7128      	strb	r0, [r5, #4]
 800497a:	2304      	movs	r3, #4
 800497c:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8004980:	f8dc 9018 	ldr.w	r9, [ip, #24]
 8004984:	aa01      	add	r2, sp, #4
 8004986:	2102      	movs	r1, #2
 8004988:	4640      	mov	r0, r8
 800498a:	47c8      	blx	r9
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	6801      	ldr	r1, [r0, #0]
 8004990:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004994:	bb10      	cbnz	r0, 80049dc <PE_Reset+0x120>
 8004996:	6839      	ldr	r1, [r7, #0]
 8004998:	790b      	ldrb	r3, [r1, #4]
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	2200      	movs	r2, #0
 80049a0:	2100      	movs	r1, #0
 80049a2:	4640      	mov	r0, r8
 80049a4:	f001 f91e 	bl	8005be4 <USBPD_PRL_SetHeader>
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	6801      	ldr	r1, [r0, #0]
 80049ac:	f021 0108 	bic.w	r1, r1, #8
 80049b0:	6001      	str	r1, [r0, #0]
 80049b2:	b90c      	cbnz	r4, 80049b8 <PE_Reset+0xfc>
 80049b4:	203e      	movs	r0, #62	; 0x3e
 80049b6:	7128      	strb	r0, [r5, #4]
 80049b8:	2000      	movs	r0, #0
 80049ba:	70e8      	strb	r0, [r5, #3]
 80049bc:	f000 f8f5 	bl	8004baa <.text_217>
 80049c0:	68bc      	ldr	r4, [r7, #8]
 80049c2:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80049c6:	2107      	movs	r1, #7
 80049c8:	4640      	mov	r0, r8
 80049ca:	47e0      	blx	ip
 80049cc:	68bc      	ldr	r4, [r7, #8]
 80049ce:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80049d2:	2304      	movs	r3, #4
 80049d4:	aa01      	add	r2, sp, #4
 80049d6:	2102      	movs	r1, #2
 80049d8:	4640      	mov	r0, r8
 80049da:	47e0      	blx	ip
 80049dc:	f000 f82e 	bl	8004a3c <.text_208>
 80049e0:	0892      	lsrs	r2, r2, #2
 80049e2:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
 80049e6:	6008      	str	r0, [r1, #0]
 80049e8:	6838      	ldr	r0, [r7, #0]
 80049ea:	7901      	ldrb	r1, [r0, #4]
 80049ec:	f001 0103 	and.w	r1, r1, #3
 80049f0:	4640      	mov	r0, r8
 80049f2:	f001 f928 	bl	8005c46 <USBPD_PRL_CBL_SetHeaderSpecification>
 80049f6:	f000 f821 	bl	8004a3c <.text_208>
 80049fa:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 80049fe:	ea42 42c0 	orr.w	r2, r2, r0, lsl #19
 8004a02:	600a      	str	r2, [r1, #0]
 8004a04:	f507 7054 	add.w	r0, r7, #848	; 0x350
 8004a08:	2100      	movs	r1, #0
 8004a0a:	8001      	strh	r1, [r0, #0]
 8004a0c:	8041      	strh	r1, [r0, #2]
 8004a0e:	f507 7061 	add.w	r0, r7, #900	; 0x384
 8004a12:	210e      	movs	r1, #14
 8004a14:	f011 f83e 	bl	8015a94 <__aeabi_memclr>
 8004a18:	68f4      	ldr	r4, [r6, #12]
 8004a1a:	b154      	cbz	r4, 8004a32 <PE_Reset+0x176>
 8004a1c:	7830      	ldrb	r0, [r6, #0]
 8004a1e:	07c1      	lsls	r1, r0, #31
 8004a20:	d507      	bpl.n	8004a32 <PE_Reset+0x176>
 8004a22:	792a      	ldrb	r2, [r5, #4]
 8004a24:	7968      	ldrb	r0, [r5, #5]
 8004a26:	4290      	cmp	r0, r2
 8004a28:	d003      	beq.n	8004a32 <PE_Reset+0x176>
 8004a2a:	716a      	strb	r2, [r5, #5]
 8004a2c:	f000 f824 	bl	8004a78 <.text_213>
 8004a30:	47a0      	blx	r4
 8004a32:	4640      	mov	r0, r8
 8004a34:	f001 fb01 	bl	800603a <USBPD_PRL_Reset>
 8004a38:	e8bd 83f7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, pc}

08004a3c <.text_208>:
 8004a3c:	6838      	ldr	r0, [r7, #0]
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	7900      	ldrb	r0, [r0, #4]
 8004a42:	680a      	ldr	r2, [r1, #0]
 8004a44:	f000 0003 	and.w	r0, r0, #3
 8004a48:	4770      	bx	lr

08004a4a <.text_209>:
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	7c38      	ldrb	r0, [r7, #16]
 8004a4e:	68d3      	ldr	r3, [r2, #12]
 8004a50:	215b      	movs	r1, #91	; 0x5b
 8004a52:	f000 0001 	and.w	r0, r0, #1

08004a56 <__iar_annotation$$tailcall>:
 8004a56:	4718      	bx	r3

08004a58 <.text_210>:
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	7c38      	ldrb	r0, [r7, #16]
 8004a5c:	68d3      	ldr	r3, [r2, #12]
 8004a5e:	215a      	movs	r1, #90	; 0x5a
 8004a60:	f000 0001 	and.w	r0, r0, #1

08004a64 <__iar_annotation$$tailcall>:
 8004a64:	4718      	bx	r3

08004a66 <.text_211>:
 8004a66:	225a      	movs	r2, #90	; 0x5a
 8004a68:	f001 0101 	and.w	r1, r1, #1
 8004a6c:	2009      	movs	r0, #9

08004a6e <__iar_annotation$$tailcall>:
 8004a6e:	4760      	bx	ip

08004a70 <.text_212>:
 8004a70:	2100      	movs	r1, #0
 8004a72:	9100      	str	r1, [sp, #0]
 8004a74:	2300      	movs	r3, #0
 8004a76:	4770      	bx	lr

08004a78 <.text_213>:
 8004a78:	2000      	movs	r0, #0
 8004a7a:	9000      	str	r0, [sp, #0]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	7c39      	ldrb	r1, [r7, #16]
 8004a80:	f001 0101 	and.w	r1, r1, #1
 8004a84:	2004      	movs	r0, #4
 8004a86:	4770      	bx	lr

08004a88 <PE_ResetDuringSwap>:
 8004a88:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8004a8a:	4605      	mov	r5, r0
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	9001      	str	r0, [sp, #4]
 8004a90:	2400      	movs	r4, #0
 8004a92:	6868      	ldr	r0, [r5, #4]
 8004a94:	f8df 6374 	ldr.w	r6, [pc, #884]	; 8004e0c <.text_229>
 8004a98:	6801      	ldr	r1, [r0, #0]
 8004a9a:	f3c1 2102 	ubfx	r1, r1, #8, #3
 8004a9e:	2901      	cmp	r1, #1
 8004aa0:	d015      	beq.n	8004ace <PE_ResetDuringSwap+0x46>
 8004aa2:	6802      	ldr	r2, [r0, #0]
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	f361 220a 	bfi	r2, r1, #8, #3
 8004aaa:	6002      	str	r2, [r0, #0]
 8004aac:	7830      	ldrb	r0, [r6, #0]
 8004aae:	0781      	lsls	r1, r0, #30
 8004ab0:	d508      	bpl.n	8004ac4 <PE_ResetDuringSwap+0x3c>
 8004ab2:	9400      	str	r4, [sp, #0]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	7c29      	ldrb	r1, [r5, #16]
 8004ab8:	68f7      	ldr	r7, [r6, #12]
 8004aba:	225a      	movs	r2, #90	; 0x5a
 8004abc:	f001 0101 	and.w	r1, r1, #1
 8004ac0:	2009      	movs	r0, #9
 8004ac2:	47b8      	blx	r7
 8004ac4:	f7fe fc0a 	bl	80032dc <.text_141>
 8004ac8:	215a      	movs	r1, #90	; 0x5a
 8004aca:	f7ff f983 	bl	8003dd4 <.text_164+0x6>
 8004ace:	f205 377b 	addw	r7, r5, #891	; 0x37b
 8004ad2:	70fc      	strb	r4, [r7, #3]
 8004ad4:	71fc      	strb	r4, [r7, #7]
 8004ad6:	7838      	ldrb	r0, [r7, #0]
 8004ad8:	b178      	cbz	r0, 8004afa <PE_ResetDuringSwap+0x72>
 8004ada:	703c      	strb	r4, [r7, #0]
 8004adc:	7831      	ldrb	r1, [r6, #0]
 8004ade:	0788      	lsls	r0, r1, #30
 8004ae0:	d506      	bpl.n	8004af0 <PE_ResetDuringSwap+0x68>
 8004ae2:	9400      	str	r4, [sp, #0]
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	7c29      	ldrb	r1, [r5, #16]
 8004ae8:	68f6      	ldr	r6, [r6, #12]
 8004aea:	225b      	movs	r2, #91	; 0x5b
 8004aec:	f000 f863 	bl	8004bb6 <.text_218>
 8004af0:	f7fe fbf4 	bl	80032dc <.text_141>
 8004af4:	215b      	movs	r1, #91	; 0x5b
 8004af6:	f7ff f96d 	bl	8003dd4 <.text_164+0x6>
 8004afa:	f000 fe09 	bl	8005710 <.text_255+0x2>
 8004afe:	f000 f84b 	bl	8004b98 <.text_215>
 8004b02:	d011      	beq.n	8004b28 <PE_ResetDuringSwap+0xa0>
 8004b04:	f7ff fa4b 	bl	8003f9e <PE_Get_DataRole>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	6868      	ldr	r0, [r5, #4]
 8004b0c:	7803      	ldrb	r3, [r0, #0]
 8004b0e:	7c28      	ldrb	r0, [r5, #16]
 8004b10:	f003 0303 	and.w	r3, r3, #3
 8004b14:	f000 f845 	bl	8004ba2 <.text_216+0x2>
 8004b18:	f001 f864 	bl	8005be4 <USBPD_PRL_SetHeader>
 8004b1c:	2002      	movs	r0, #2
 8004b1e:	7138      	strb	r0, [r7, #4]
 8004b20:	6868      	ldr	r0, [r5, #4]
 8004b22:	f7fc fc6d 	bl	8001400 <.text_47+0x2>
 8004b26:	e017      	b.n	8004b58 <PE_ResetDuringSwap+0xd0>
 8004b28:	f7ff fa39 	bl	8003f9e <PE_Get_DataRole>
 8004b2c:	6869      	ldr	r1, [r5, #4]
 8004b2e:	780b      	ldrb	r3, [r1, #0]
 8004b30:	4602      	mov	r2, r0
 8004b32:	7c28      	ldrb	r0, [r5, #16]
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	2100      	movs	r1, #0
 8004b3a:	f000 0001 	and.w	r0, r0, #1
 8004b3e:	f001 f851 	bl	8005be4 <USBPD_PRL_SetHeader>
 8004b42:	203e      	movs	r0, #62	; 0x3e
 8004b44:	7138      	strb	r0, [r7, #4]
 8004b46:	f000 f830 	bl	8004baa <.text_217>
 8004b4a:	68ae      	ldr	r6, [r5, #8]
 8004b4c:	7c28      	ldrb	r0, [r5, #16]
 8004b4e:	69b7      	ldr	r7, [r6, #24]
 8004b50:	2107      	movs	r1, #7
 8004b52:	f000 0001 	and.w	r0, r0, #1
 8004b56:	47b8      	blx	r7
 8004b58:	68ae      	ldr	r6, [r5, #8]
 8004b5a:	7c28      	ldrb	r0, [r5, #16]
 8004b5c:	69b7      	ldr	r7, [r6, #24]
 8004b5e:	2304      	movs	r3, #4
 8004b60:	aa01      	add	r2, sp, #4
 8004b62:	2102      	movs	r1, #2
 8004b64:	f000 0001 	and.w	r0, r0, #1
 8004b68:	47b8      	blx	r7
 8004b6a:	f8b5 0388 	ldrh.w	r0, [r5, #904]	; 0x388
 8004b6e:	0441      	lsls	r1, r0, #17
 8004b70:	bf1c      	itt	ne
 8004b72:	f8b5 4388 	ldrhne.w	r4, [r5, #904]	; 0x388
 8004b76:	f3c4 040e 	ubfxne	r4, r4, #0, #15
 8004b7a:	210e      	movs	r1, #14
 8004b7c:	f505 7061 	add.w	r0, r5, #900	; 0x384
 8004b80:	f010 ff88 	bl	8015a94 <__aeabi_memclr>
 8004b84:	b11c      	cbz	r4, 8004b8e <PE_ResetDuringSwap+0x106>
 8004b86:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8004b8a:	f8a5 4388 	strh.w	r4, [r5, #904]	; 0x388
 8004b8e:	f000 f803 	bl	8004b98 <.text_215>
 8004b92:	f001 fa52 	bl	800603a <USBPD_PRL_Reset>
 8004b96:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08004b98 <.text_215>:
 8004b98:	7c28      	ldrb	r0, [r5, #16]
 8004b9a:	f000 0001 	and.w	r0, r0, #1
 8004b9e:	4770      	bx	lr

08004ba0 <.text_216>:
 8004ba0:	7c20      	ldrb	r0, [r4, #16]
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	f000 0001 	and.w	r0, r0, #1
 8004ba8:	4770      	bx	lr

08004baa <.text_217>:
 8004baa:	2304      	movs	r3, #4
 8004bac:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8004bb0:	9000      	str	r0, [sp, #0]
 8004bb2:	466a      	mov	r2, sp
 8004bb4:	4770      	bx	lr

08004bb6 <.text_218>:
 8004bb6:	f001 0101 	and.w	r1, r1, #1
 8004bba:	2009      	movs	r0, #9

08004bbc <__iar_annotation$$tailcall>:
 8004bbc:	4730      	bx	r6

08004bbe <PE_ExtRevisionInteroperability>:
 8004bbe:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8004bc0:	4c92      	ldr	r4, [pc, #584]	; (8004e0c <.text_229>)
 8004bc2:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8004bc6:	686a      	ldr	r2, [r5, #4]
 8004bc8:	6853      	ldr	r3, [r2, #4]
 8004bca:	781e      	ldrb	r6, [r3, #0]
 8004bcc:	f006 0603 	and.w	r6, r6, #3
 8004bd0:	428e      	cmp	r6, r1
 8004bd2:	d02d      	beq.n	8004c30 <PE_ExtRevisionInteroperability+0x72>
 8004bd4:	42b1      	cmp	r1, r6
 8004bd6:	bfa8      	it	ge
 8004bd8:	4631      	movge	r1, r6
 8004bda:	681e      	ldr	r6, [r3, #0]
 8004bdc:	f361 0601 	bfi	r6, r1, #0, #2
 8004be0:	601e      	str	r6, [r3, #0]
 8004be2:	6851      	ldr	r1, [r2, #4]
 8004be4:	680b      	ldr	r3, [r1, #0]
 8004be6:	f003 0603 	and.w	r6, r3, #3
 8004bea:	2e01      	cmp	r6, #1
 8004bec:	bf0c      	ite	eq
 8004bee:	2600      	moveq	r6, #0
 8004bf0:	2601      	movne	r6, #1
 8004bf2:	f023 0320 	bic.w	r3, r3, #32
 8004bf6:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
 8004bfa:	600b      	str	r3, [r1, #0]
 8004bfc:	6852      	ldr	r2, [r2, #4]
 8004bfe:	7811      	ldrb	r1, [r2, #0]
 8004c00:	f001 0103 	and.w	r1, r1, #3
 8004c04:	f001 f815 	bl	8005c32 <USBPD_PRL_SetHeaderSpecification>
 8004c08:	7820      	ldrb	r0, [r4, #0]
 8004c0a:	0781      	lsls	r1, r0, #30
 8004c0c:	d507      	bpl.n	8004c1e <PE_ExtRevisionInteroperability+0x60>
 8004c0e:	f7ff ff2f 	bl	8004a70 <.text_212>
 8004c12:	6868      	ldr	r0, [r5, #4]
 8004c14:	7c01      	ldrb	r1, [r0, #16]
 8004c16:	68e4      	ldr	r4, [r4, #12]
 8004c18:	2238      	movs	r2, #56	; 0x38
 8004c1a:	f7fe fb64 	bl	80032e6 <.text_142+0x2>
 8004c1e:	686a      	ldr	r2, [r5, #4]
 8004c20:	7c10      	ldrb	r0, [r2, #16]
 8004c22:	6892      	ldr	r2, [r2, #8]
 8004c24:	68d3      	ldr	r3, [r2, #12]
 8004c26:	b002      	add	sp, #8
 8004c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c2c:	2138      	movs	r1, #56	; 0x38
 8004c2e:	e5fc      	b.n	800482a <.text_198>
 8004c30:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08004c32 <PE_ExtRevisionInteroperability_Cable>:
 8004c32:	b558      	push	{r3, r4, r6, lr}
 8004c34:	4a0d      	ldr	r2, [pc, #52]	; (8004c6c <.text_221>)
 8004c36:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8004c3a:	6852      	ldr	r2, [r2, #4]
 8004c3c:	6853      	ldr	r3, [r2, #4]
 8004c3e:	681c      	ldr	r4, [r3, #0]
 8004c40:	f3c4 46c1 	ubfx	r6, r4, #19, #2
 8004c44:	428e      	cmp	r6, r1
 8004c46:	d010      	beq.n	8004c6a <PE_ExtRevisionInteroperability_Cable+0x38>
 8004c48:	f004 0403 	and.w	r4, r4, #3
 8004c4c:	42a1      	cmp	r1, r4
 8004c4e:	bfa8      	it	ge
 8004c50:	4621      	movge	r1, r4
 8004c52:	681c      	ldr	r4, [r3, #0]
 8004c54:	f361 44d4 	bfi	r4, r1, #19, #2
 8004c58:	601c      	str	r4, [r3, #0]
 8004c5a:	6851      	ldr	r1, [r2, #4]
 8004c5c:	680a      	ldr	r2, [r1, #0]
 8004c5e:	f3c2 41c1 	ubfx	r1, r2, #19, #2
 8004c62:	e8bd 4054 	ldmia.w	sp!, {r2, r4, r6, lr}
 8004c66:	f000 bfee 	b.w	8005c46 <USBPD_PRL_CBL_SetHeaderSpecification>
 8004c6a:	bd51      	pop	{r0, r4, r6, pc}

08004c6c <.text_221>:
 8004c6c:	200000d0 	.word	0x200000d0

08004c70 <PE_PRL_PostReceiveEvent>:
 8004c70:	b510      	push	{r4, lr}
 8004c72:	4c66      	ldr	r4, [pc, #408]	; (8004e0c <.text_229>)
 8004c74:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8004c78:	2904      	cmp	r1, #4
 8004c7a:	6864      	ldr	r4, [r4, #4]
 8004c7c:	d80e      	bhi.n	8004c9c <PE_PRL_PostReceiveEvent+0x2c>
 8004c7e:	e8df f001 	tbb	[pc, r1]
 8004c82:	0503      	.short	0x0503
 8004c84:	000b0907 	.word	0x000b0907
 8004c88:	2101      	movs	r1, #1
 8004c8a:	e008      	b.n	8004c9e <PE_PRL_PostReceiveEvent+0x2e>
 8004c8c:	2102      	movs	r1, #2
 8004c8e:	e006      	b.n	8004c9e <PE_PRL_PostReceiveEvent+0x2e>
 8004c90:	2104      	movs	r1, #4
 8004c92:	e004      	b.n	8004c9e <PE_PRL_PostReceiveEvent+0x2e>
 8004c94:	2108      	movs	r1, #8
 8004c96:	e002      	b.n	8004c9e <PE_PRL_PostReceiveEvent+0x2e>
 8004c98:	2110      	movs	r1, #16
 8004c9a:	e000      	b.n	8004c9e <PE_PRL_PostReceiveEvent+0x2e>
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	f884 137d 	strb.w	r1, [r4, #893]	; 0x37d
 8004ca2:	8811      	ldrh	r1, [r2, #0]
 8004ca4:	f8a4 1392 	strh.w	r1, [r4, #914]	; 0x392
 8004ca8:	b91b      	cbnz	r3, 8004cb2 <PE_PRL_PostReceiveEvent+0x42>
 8004caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cae:	f001 b9fa 	b.w	80060a6 <USBPD_PRL_DisableRX>
 8004cb2:	bd10      	pop	{r4, pc}

08004cb4 <PE_PRL_PostReceiveEventComplete>:
 8004cb4:	4955      	ldr	r1, [pc, #340]	; (8004e0c <.text_229>)
 8004cb6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8004cba:	6849      	ldr	r1, [r1, #4]
 8004cbc:	f891 237d 	ldrb.w	r2, [r1, #893]	; 0x37d
 8004cc0:	f042 0220 	orr.w	r2, r2, #32
 8004cc4:	f881 237d 	strb.w	r2, [r1, #893]	; 0x37d
 8004cc8:	6889      	ldr	r1, [r1, #8]
 8004cca:	6a8a      	ldr	r2, [r1, #40]	; 0x28

08004ccc <__iar_annotation$$tailcall>:
 8004ccc:	4710      	bx	r2

08004cce <PE_Get_UnchunkedSupport>:
 8004cce:	494f      	ldr	r1, [pc, #316]	; (8004e0c <.text_229>)
 8004cd0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8004cd4:	6841      	ldr	r1, [r0, #4]
 8004cd6:	6848      	ldr	r0, [r1, #4]
 8004cd8:	6800      	ldr	r0, [r0, #0]
 8004cda:	0c80      	lsrs	r0, r0, #18
 8004cdc:	f000 0001 	and.w	r0, r0, #1
 8004ce0:	4770      	bx	lr
	...

08004ce4 <PE_SVDM_CheckIdentity>:
 8004ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ce6:	4c49      	ldr	r4, [pc, #292]	; (8004e0c <.text_229>)
 8004ce8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004cec:	2300      	movs	r3, #0
 8004cee:	6840      	ldr	r0, [r0, #4]
 8004cf0:	f8b0 4392 	ldrh.w	r4, [r0, #914]	; 0x392
 8004cf4:	0b24      	lsrs	r4, r4, #12
 8004cf6:	f004 0407 	and.w	r4, r4, #7
 8004cfa:	1e64      	subs	r4, r4, #1
 8004cfc:	b2e4      	uxtb	r4, r4
 8004cfe:	2c02      	cmp	r4, #2
 8004d00:	d94a      	bls.n	8004d98 <PE_SVDM_CheckIdentity+0xb4>
 8004d02:	780d      	ldrb	r5, [r1, #0]
 8004d04:	784e      	ldrb	r6, [r1, #1]
 8004d06:	788f      	ldrb	r7, [r1, #2]
 8004d08:	eb05 2506 	add.w	r5, r5, r6, lsl #8
 8004d0c:	78ce      	ldrb	r6, [r1, #3]
 8004d0e:	eb05 4507 	add.w	r5, r5, r7, lsl #16
 8004d12:	eb05 6506 	add.w	r5, r5, r6, lsl #24
 8004d16:	6015      	str	r5, [r2, #0]
 8004d18:	790f      	ldrb	r7, [r1, #4]
 8004d1a:	794e      	ldrb	r6, [r1, #5]
 8004d1c:	eb07 2706 	add.w	r7, r7, r6, lsl #8
 8004d20:	798e      	ldrb	r6, [r1, #6]
 8004d22:	eb07 4706 	add.w	r7, r7, r6, lsl #16
 8004d26:	79ce      	ldrb	r6, [r1, #7]
 8004d28:	eb07 6706 	add.w	r7, r7, r6, lsl #24
 8004d2c:	6057      	str	r7, [r2, #4]
 8004d2e:	1ee4      	subs	r4, r4, #3
 8004d30:	7a0e      	ldrb	r6, [r1, #8]
 8004d32:	7a4f      	ldrb	r7, [r1, #9]
 8004d34:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 8004d38:	7a8f      	ldrb	r7, [r1, #10]
 8004d3a:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 8004d3e:	7acf      	ldrb	r7, [r1, #11]
 8004d40:	b2e4      	uxtb	r4, r4
 8004d42:	eb06 6607 	add.w	r6, r6, r7, lsl #24
 8004d46:	2c00      	cmp	r4, #0
 8004d48:	6096      	str	r6, [r2, #8]
 8004d4a:	d026      	beq.n	8004d9a <PE_SVDM_CheckIdentity+0xb6>
 8004d4c:	7d14      	ldrb	r4, [r2, #20]
 8004d4e:	0eee      	lsrs	r6, r5, #27
 8004d50:	f006 0607 	and.w	r6, r6, #7
 8004d54:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8004d58:	2e05      	cmp	r6, #5
 8004d5a:	7514      	strb	r4, [r2, #20]
 8004d5c:	d810      	bhi.n	8004d80 <PE_SVDM_CheckIdentity+0x9c>
 8004d5e:	e8df f006 	tbb	[pc, r6]
 8004d62:	1010      	.short	0x1010
 8004d64:	09030310 	.word	0x09030310
 8004d68:	f044 0401 	orr.w	r4, r4, #1
 8004d6c:	f000 f817 	bl	8004d9e <.text_226>
 8004d70:	60d4      	str	r4, [r2, #12]
 8004d72:	e006      	b.n	8004d82 <PE_SVDM_CheckIdentity+0x9e>
 8004d74:	f044 0402 	orr.w	r4, r4, #2
 8004d78:	f000 f811 	bl	8004d9e <.text_226>
 8004d7c:	6114      	str	r4, [r2, #16]
 8004d7e:	e000      	b.n	8004d82 <PE_SVDM_CheckIdentity+0x9e>
 8004d80:	2302      	movs	r3, #2
 8004d82:	f8b0 0392 	ldrh.w	r0, [r0, #914]	; 0x392
 8004d86:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8004d8a:	2802      	cmp	r0, #2
 8004d8c:	d305      	bcc.n	8004d9a <PE_SVDM_CheckIdentity+0xb6>
 8004d8e:	0ded      	lsrs	r5, r5, #23
 8004d90:	f005 0507 	and.w	r5, r5, #7
 8004d94:	2d04      	cmp	r5, #4
 8004d96:	d900      	bls.n	8004d9a <PE_SVDM_CheckIdentity+0xb6>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d9e <.text_226>:
 8004d9e:	7514      	strb	r4, [r2, #20]
 8004da0:	7b4e      	ldrb	r6, [r1, #13]
 8004da2:	7b0c      	ldrb	r4, [r1, #12]
 8004da4:	7b8f      	ldrb	r7, [r1, #14]
 8004da6:	7bc9      	ldrb	r1, [r1, #15]
 8004da8:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 8004dac:	eb04 4407 	add.w	r4, r4, r7, lsl #16
 8004db0:	eb04 6401 	add.w	r4, r4, r1, lsl #24
 8004db4:	4770      	bx	lr

08004db6 <PE_SVDM_CheckSVIDs>:
 8004db6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004db8:	4b14      	ldr	r3, [pc, #80]	; (8004e0c <.text_229>)
 8004dba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004dbe:	2400      	movs	r4, #0
 8004dc0:	6843      	ldr	r3, [r0, #4]
 8004dc2:	f8b3 0392 	ldrh.w	r0, [r3, #914]	; 0x392
 8004dc6:	7614      	strb	r4, [r2, #24]
 8004dc8:	0b00      	lsrs	r0, r0, #12
 8004dca:	f000 0007 	and.w	r0, r0, #7
 8004dce:	1e43      	subs	r3, r0, #1
 8004dd0:	061b      	lsls	r3, r3, #24
 8004dd2:	2500      	movs	r5, #0
 8004dd4:	7654      	strb	r4, [r2, #25]
 8004dd6:	f000 f81b 	bl	8004e10 <.text_230>
 8004dda:	bf19      	ittee	ne
 8004ddc:	1c76      	addne	r6, r6, #1
 8004dde:	7616      	strbne	r6, [r2, #24]
 8004de0:	2501      	moveq	r5, #1
 8004de2:	7655      	strbeq	r5, [r2, #25]
 8004de4:	1ca4      	adds	r4, r4, #2
 8004de6:	b2e4      	uxtb	r4, r4
 8004de8:	f000 f812 	bl	8004e10 <.text_230>
 8004dec:	bf19      	ittee	ne
 8004dee:	1c76      	addne	r6, r6, #1
 8004df0:	7616      	strbne	r6, [r2, #24]
 8004df2:	2501      	moveq	r5, #1
 8004df4:	7655      	strbeq	r5, [r2, #25]
 8004df6:	1ca4      	adds	r4, r4, #2
 8004df8:	b2e4      	uxtb	r4, r4
 8004dfa:	ebb4 5f93 	cmp.w	r4, r3, lsr #22
 8004dfe:	d201      	bcs.n	8004e04 <PE_SVDM_CheckSVIDs+0x4e>
 8004e00:	0028      	movs	r0, r5
 8004e02:	d0e8      	beq.n	8004dd6 <PE_SVDM_CheckSVIDs+0x20>
 8004e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004e08 <.text_228>:
 8004e08:	200000d4 	.word	0x200000d4

08004e0c <.text_229>:
 8004e0c:	200000d0 	.word	0x200000d0

08004e10 <.text_230>:
 8004e10:	1c4e      	adds	r6, r1, #1
 8004e12:	5d08      	ldrb	r0, [r1, r4]
 8004e14:	5d36      	ldrb	r6, [r6, r4]
 8004e16:	7e17      	ldrb	r7, [r2, #24]
 8004e18:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8004e1c:	f822 0017 	strh.w	r0, [r2, r7, lsl #1]
 8004e20:	7e16      	ldrb	r6, [r2, #24]
 8004e22:	4630      	mov	r0, r6
 8004e24:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	4770      	bx	lr

08004e2c <PE_Send_ExtendedMessage>:
 8004e2c:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 8004e30:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004e32:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004e34:	9601      	str	r6, [sp, #4]
 8004e36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	460d      	mov	r5, r1
 8004e3e:	4699      	mov	r9, r3
 8004e40:	4690      	mov	r8, r2
 8004e42:	9700      	str	r7, [sp, #0]
 8004e44:	e004      	b.n	8004e50 <PE_Send_ExtendedMessage+0x24>
 8004e46:	9601      	str	r6, [sp, #4]
 8004e48:	9700      	str	r7, [sp, #0]
 8004e4a:	464b      	mov	r3, r9
 8004e4c:	4642      	mov	r2, r8
 8004e4e:	4629      	mov	r1, r5
 8004e50:	7c20      	ldrb	r0, [r4, #16]
 8004e52:	f000 f814 	bl	8004e7e <.text_232>
 8004e56:	2803      	cmp	r0, #3
 8004e58:	d107      	bne.n	8004e6a <PE_Send_ExtendedMessage+0x3e>
 8004e5a:	f7fd ffd0 	bl	8002dfe <.text_131>
 8004e5e:	d1f2      	bne.n	8004e46 <PE_Send_ExtendedMessage+0x1a>
 8004e60:	2111      	movs	r1, #17
 8004e62:	f884 137f 	strb.w	r1, [r4, #895]	; 0x37f
 8004e66:	2010      	movs	r0, #16
 8004e68:	e007      	b.n	8004e7a <PE_Send_ExtendedMessage+0x4e>
 8004e6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e6c:	9200      	str	r2, [sp, #0]
 8004e6e:	4603      	mov	r3, r0
 8004e70:	4629      	mov	r1, r5
 8004e72:	2200      	movs	r2, #0
 8004e74:	4620      	mov	r0, r4
 8004e76:	f000 f806 	bl	8004e86 <PE_CheckSendMessageStatus>
 8004e7a:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

08004e7e <.text_232>:
 8004e7e:	f000 0001 	and.w	r0, r0, #1
 8004e82:	f000 bf09 	b.w	8005c98 <USBPD_PRL_SendMessage>

08004e86 <PE_CheckSendMessageStatus>:
 8004e86:	b538      	push	{r3, r4, r5, lr}
 8004e88:	6905      	ldr	r5, [r0, #16]
 8004e8a:	2410      	movs	r4, #16
 8004e8c:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8004e90:	2b05      	cmp	r3, #5
 8004e92:	6105      	str	r5, [r0, #16]
 8004e94:	d00a      	beq.n	8004eac <PE_CheckSendMessageStatus+0x26>
 8004e96:	2b06      	cmp	r3, #6
 8004e98:	d011      	beq.n	8004ebe <PE_CheckSendMessageStatus+0x38>
 8004e9a:	2b07      	cmp	r3, #7
 8004e9c:	d013      	beq.n	8004ec6 <PE_CheckSendMessageStatus+0x40>
 8004e9e:	2b09      	cmp	r3, #9
 8004ea0:	bf02      	ittt	eq
 8004ea2:	f445 5580 	orreq.w	r5, r5, #4096	; 0x1000
 8004ea6:	6105      	streq	r5, [r0, #16]
 8004ea8:	2409      	moveq	r4, #9
 8004eaa:	e01e      	b.n	8004eea <PE_CheckSendMessageStatus+0x64>
 8004eac:	9904      	ldr	r1, [sp, #16]
 8004eae:	f880 137f 	strb.w	r1, [r0, #895]	; 0x37f
 8004eb2:	2400      	movs	r4, #0
 8004eb4:	6901      	ldr	r1, [r0, #16]
 8004eb6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8004eba:	6101      	str	r1, [r0, #16]
 8004ebc:	e015      	b.n	8004eea <PE_CheckSendMessageStatus+0x64>
 8004ebe:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 8004ec2:	6105      	str	r5, [r0, #16]
 8004ec4:	e011      	b.n	8004eea <PE_CheckSendMessageStatus+0x64>
 8004ec6:	b129      	cbz	r1, 8004ed4 <PE_CheckSendMessageStatus+0x4e>
 8004ec8:	2a01      	cmp	r2, #1
 8004eca:	bf08      	it	eq
 8004ecc:	2199      	moveq	r1, #153	; 0x99
 8004ece:	d00a      	beq.n	8004ee6 <PE_CheckSendMessageStatus+0x60>
 8004ed0:	2407      	movs	r4, #7
 8004ed2:	e00a      	b.n	8004eea <PE_CheckSendMessageStatus+0x64>
 8004ed4:	6841      	ldr	r1, [r0, #4]
 8004ed6:	680b      	ldr	r3, [r1, #0]
 8004ed8:	f3c3 2102 	ubfx	r1, r3, #8, #3
 8004edc:	2904      	cmp	r1, #4
 8004ede:	bf16      	itet	ne
 8004ee0:	2a01      	cmpne	r2, #1
 8004ee2:	210f      	moveq	r1, #15
 8004ee4:	2111      	movne	r1, #17
 8004ee6:	f880 137f 	strb.w	r1, [r0, #895]	; 0x37f
 8004eea:	4620      	mov	r0, r4
 8004eec:	bd32      	pop	{r1, r4, r5, pc}

08004eee <PE_SubStateMachine_ExtendedMessages>:
 8004eee:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef2:	4606      	mov	r6, r0
 8004ef4:	f506 755f 	add.w	r5, r6, #892	; 0x37c
 8004ef8:	2402      	movs	r4, #2
 8004efa:	78e9      	ldrb	r1, [r5, #3]
 8004efc:	2931      	cmp	r1, #49	; 0x31
 8004efe:	f506 7a12 	add.w	sl, r6, #584	; 0x248
 8004f02:	f206 3ba2 	addw	fp, r6, #930	; 0x3a2
 8004f06:	f506 7754 	add.w	r7, r6, #848	; 0x350
 8004f0a:	f248 001b 	movw	r0, #32795	; 0x801b
 8004f0e:	d013      	beq.n	8004f38 <PE_SubStateMachine_ExtendedMessages+0x4a>
 8004f10:	2933      	cmp	r1, #51	; 0x33
 8004f12:	d068      	beq.n	8004fe6 <PE_SubStateMachine_ExtendedMessages+0xf8>
 8004f14:	2934      	cmp	r1, #52	; 0x34
 8004f16:	d06e      	beq.n	8004ff6 <PE_SubStateMachine_ExtendedMessages+0x108>
 8004f18:	2935      	cmp	r1, #53	; 0x35
 8004f1a:	f000 809a 	beq.w	8005052 <PE_SubStateMachine_ExtendedMessages+0x164>
 8004f1e:	2936      	cmp	r1, #54	; 0x36
 8004f20:	f000 80ae 	beq.w	8005080 <PE_SubStateMachine_ExtendedMessages+0x192>
 8004f24:	2937      	cmp	r1, #55	; 0x37
 8004f26:	f000 80af 	beq.w	8005088 <PE_SubStateMachine_ExtendedMessages+0x19a>
 8004f2a:	2938      	cmp	r1, #56	; 0x38
 8004f2c:	bf01      	itttt	eq
 8004f2e:	2003      	moveq	r0, #3
 8004f30:	70e8      	strbeq	r0, [r5, #3]
 8004f32:	2400      	moveq	r4, #0
 8004f34:	803c      	strheq	r4, [r7, #0]
 8004f36:	e0ce      	b.n	80050d6 <PE_SubStateMachine_ExtendedMessages+0x1e8>
 8004f38:	f04f 0900 	mov.w	r9, #0
 8004f3c:	f8a7 9000 	strh.w	r9, [r7]
 8004f40:	f106 081e 	add.w	r8, r6, #30
 8004f44:	f000 f8d2 	bl	80050ec <.text_235>
 8004f48:	2801      	cmp	r0, #1
 8004f4a:	d112      	bne.n	8004f72 <PE_SubStateMachine_ExtendedMessages+0x84>
 8004f4c:	f206 204a 	addw	r0, r6, #586	; 0x24a
 8004f50:	46d0      	mov	r8, sl
 8004f52:	f880 9000 	strb.w	r9, [r0]
 8004f56:	f880 9001 	strb.w	r9, [r0, #1]
 8004f5a:	6930      	ldr	r0, [r6, #16]
 8004f5c:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8004f60:	b360      	cbz	r0, 8004fbc <PE_SubStateMachine_ExtendedMessages+0xce>
 8004f62:	6870      	ldr	r0, [r6, #4]
 8004f64:	f000 fbd5 	bl	8005712 <.text_255+0x4>
 8004f68:	bf14      	ite	ne
 8004f6a:	f04f 0901 	movne.w	r9, #1
 8004f6e:	46a1      	moveq	r9, r4
 8004f70:	e022      	b.n	8004fb8 <PE_SubStateMachine_ExtendedMessages+0xca>
 8004f72:	f886 9020 	strb.w	r9, [r6, #32]
 8004f76:	f886 9021 	strb.w	r9, [r6, #33]	; 0x21
 8004f7a:	f000 f8b7 	bl	80050ec <.text_235>
 8004f7e:	b928      	cbnz	r0, 8004f8c <PE_SubStateMachine_ExtendedMessages+0x9e>
 8004f80:	f896 0021 	ldrb.w	r0, [r6, #33]	; 0x21
 8004f84:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8004f88:	f886 0021 	strb.w	r0, [r6, #33]	; 0x21
 8004f8c:	f106 0222 	add.w	r2, r6, #34	; 0x22
 8004f90:	8878      	ldrh	r0, [r7, #2]
 8004f92:	281b      	cmp	r0, #27
 8004f94:	4648      	mov	r0, r9
 8004f96:	d306      	bcc.n	8004fa6 <PE_SubStateMachine_ExtendedMessages+0xb8>
 8004f98:	f81a 1000 	ldrb.w	r1, [sl, r0]
 8004f9c:	5411      	strb	r1, [r2, r0]
 8004f9e:	1c40      	adds	r0, r0, #1
 8004fa0:	281a      	cmp	r0, #26
 8004fa2:	d3f9      	bcc.n	8004f98 <PE_SubStateMachine_ExtendedMessages+0xaa>
 8004fa4:	e7d9      	b.n	8004f5a <PE_SubStateMachine_ExtendedMessages+0x6c>
 8004fa6:	8879      	ldrh	r1, [r7, #2]
 8004fa8:	4288      	cmp	r0, r1
 8004faa:	bf3e      	ittt	cc
 8004fac:	f81a 1000 	ldrbcc.w	r1, [sl, r0]
 8004fb0:	5411      	strbcc	r1, [r2, r0]
 8004fb2:	1c40      	addcc	r0, r0, #1
 8004fb4:	d3f7      	bcc.n	8004fa6 <PE_SubStateMachine_ExtendedMessages+0xb8>
 8004fb6:	e7d0      	b.n	8004f5a <PE_SubStateMachine_ExtendedMessages+0x6c>
 8004fb8:	2033      	movs	r0, #51	; 0x33
 8004fba:	e000      	b.n	8004fbe <PE_SubStateMachine_ExtendedMessages+0xd0>
 8004fbc:	2003      	movs	r0, #3
 8004fbe:	9001      	str	r0, [sp, #4]
 8004fc0:	f8cd 9008 	str.w	r9, [sp, #8]
 8004fc4:	4643      	mov	r3, r8
 8004fc6:	8878      	ldrh	r0, [r7, #2]
 8004fc8:	1d00      	adds	r0, r0, #4
 8004fca:	b280      	uxth	r0, r0
 8004fcc:	9000      	str	r0, [sp, #0]
 8004fce:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8004fd2:	7829      	ldrb	r1, [r5, #0]
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	f7ff ff29 	bl	8004e2c <PE_Send_ExtendedMessage>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	d17b      	bne.n	80050d6 <PE_SubStateMachine_ExtendedMessages+0x1e8>
 8004fde:	f8bb 0004 	ldrh.w	r0, [fp, #4]
 8004fe2:	83b0      	strh	r0, [r6, #28]
 8004fe4:	e077      	b.n	80050d6 <PE_SubStateMachine_ExtendedMessages+0x1e8>
 8004fe6:	8128      	strh	r0, [r5, #8]
 8004fe8:	241b      	movs	r4, #27
 8004fea:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8004fee:	2804      	cmp	r0, #4
 8004ff0:	d148      	bne.n	8005084 <PE_SubStateMachine_ExtendedMessages+0x196>
 8004ff2:	2174      	movs	r1, #116	; 0x74
 8004ff4:	e06e      	b.n	80050d4 <PE_SubStateMachine_ExtendedMessages+0x1e6>
 8004ff6:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 8004ff8:	887b      	ldrh	r3, [r7, #2]
 8004ffa:	f3c0 22c3 	ubfx	r2, r0, #11, #4
 8004ffe:	4611      	mov	r1, r2
 8005000:	201a      	movs	r0, #26
 8005002:	4341      	muls	r1, r0
 8005004:	4299      	cmp	r1, r3
 8005006:	da01      	bge.n	800500c <PE_SubStateMachine_ExtendedMessages+0x11e>
 8005008:	2a0a      	cmp	r2, #10
 800500a:	d301      	bcc.n	8005010 <PE_SubStateMachine_ExtendedMessages+0x122>
 800500c:	2003      	movs	r0, #3
 800500e:	e01d      	b.n	800504c <PE_SubStateMachine_ExtendedMessages+0x15e>
 8005010:	1a58      	subs	r0, r3, r1
 8005012:	281a      	cmp	r0, #26
 8005014:	bf3a      	itte	cc
 8005016:	1a5b      	subcc	r3, r3, r1
 8005018:	b2db      	uxtbcc	r3, r3
 800501a:	231a      	movcs	r3, #26
 800501c:	2000      	movs	r0, #0
 800501e:	f106 0422 	add.w	r4, r6, #34	; 0x22
 8005022:	e004      	b.n	800502e <PE_SubStateMachine_ExtendedMessages+0x140>
 8005024:	1842      	adds	r2, r0, r1
 8005026:	f81a 2002 	ldrb.w	r2, [sl, r2]
 800502a:	5422      	strb	r2, [r4, r0]
 800502c:	1c40      	adds	r0, r0, #1
 800502e:	4298      	cmp	r0, r3
 8005030:	d3f8      	bcc.n	8005024 <PE_SubStateMachine_ExtendedMessages+0x136>
 8005032:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 8005034:	7c30      	ldrb	r0, [r6, #16]
 8005036:	887a      	ldrh	r2, [r7, #2]
 8005038:	0ac9      	lsrs	r1, r1, #11
 800503a:	f106 031e 	add.w	r3, r6, #30
 800503e:	f001 010f 	and.w	r1, r1, #15
 8005042:	f000 0001 	and.w	r0, r0, #1
 8005046:	f001 fad3 	bl	80065f0 <USBPD_PRL_PrepareExtendedTxChunkSending>
 800504a:	2035      	movs	r0, #53	; 0x35
 800504c:	70e8      	strb	r0, [r5, #3]
 800504e:	2400      	movs	r4, #0
 8005050:	e041      	b.n	80050d6 <PE_SubStateMachine_ExtendedMessages+0x1e8>
 8005052:	6930      	ldr	r0, [r6, #16]
 8005054:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8005058:	2800      	cmp	r0, #0
 800505a:	bf14      	ite	ne
 800505c:	2036      	movne	r0, #54	; 0x36
 800505e:	2003      	moveq	r0, #3
 8005060:	2100      	movs	r1, #0
 8005062:	9001      	str	r0, [sp, #4]
 8005064:	9102      	str	r1, [sp, #8]
 8005066:	f106 031e 	add.w	r3, r6, #30
 800506a:	8878      	ldrh	r0, [r7, #2]
 800506c:	9000      	str	r0, [sp, #0]
 800506e:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8005072:	7969      	ldrb	r1, [r5, #5]
 8005074:	4630      	mov	r0, r6
 8005076:	f7ff fed9 	bl	8004e2c <PE_Send_ExtendedMessage>
 800507a:	2000      	movs	r0, #0
 800507c:	8038      	strh	r0, [r7, #0]
 800507e:	e02a      	b.n	80050d6 <PE_SubStateMachine_ExtendedMessages+0x1e8>
 8005080:	8128      	strh	r0, [r5, #8]
 8005082:	241b      	movs	r4, #27
 8005084:	2039      	movs	r0, #57	; 0x39
 8005086:	e004      	b.n	8005092 <PE_SubStateMachine_ExtendedMessages+0x1a4>
 8005088:	8929      	ldrh	r1, [r5, #8]
 800508a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800508e:	d102      	bne.n	8005096 <PE_SubStateMachine_ExtendedMessages+0x1a8>
 8005090:	200f      	movs	r0, #15
 8005092:	70e8      	strb	r0, [r5, #3]
 8005094:	e01f      	b.n	80050d6 <PE_SubStateMachine_ExtendedMessages+0x1e8>
 8005096:	8128      	strh	r0, [r5, #8]
 8005098:	f106 011e 	add.w	r1, r6, #30
 800509c:	7c30      	ldrb	r0, [r6, #16]
 800509e:	f000 0001 	and.w	r0, r0, #1
 80050a2:	f001 facb 	bl	800663c <USBPD_PRL_PrepareChunkRequest>
 80050a6:	241b      	movs	r4, #27
 80050a8:	2000      	movs	r0, #0
 80050aa:	2106      	movs	r1, #6
 80050ac:	9001      	str	r0, [sp, #4]
 80050ae:	9100      	str	r1, [sp, #0]
 80050b0:	f89b 2000 	ldrb.w	r2, [fp]
 80050b4:	7c30      	ldrb	r0, [r6, #16]
 80050b6:	7969      	ldrb	r1, [r5, #5]
 80050b8:	f106 031e 	add.w	r3, r6, #30
 80050bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050c0:	f7ff fedd 	bl	8004e7e <.text_232>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d108      	bne.n	80050dc <PE_SubStateMachine_ExtendedMessages+0x1ee>
 80050ca:	6870      	ldr	r0, [r6, #4]
 80050cc:	f7fd fe98 	bl	8002e00 <.text_131+0x2>
 80050d0:	d1ea      	bne.n	80050a8 <PE_SubStateMachine_ExtendedMessages+0x1ba>
 80050d2:	2111      	movs	r1, #17
 80050d4:	70e9      	strb	r1, [r5, #3]
 80050d6:	4620      	mov	r0, r4
 80050d8:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050dc:	2039      	movs	r0, #57	; 0x39
 80050de:	9000      	str	r0, [sp, #0]
 80050e0:	2200      	movs	r2, #0
 80050e2:	7969      	ldrb	r1, [r5, #5]
 80050e4:	4630      	mov	r0, r6
 80050e6:	f7ff fece 	bl	8004e86 <PE_CheckSendMessageStatus>
 80050ea:	e7f4      	b.n	80050d6 <PE_SubStateMachine_ExtendedMessages+0x1e8>

080050ec <.text_235>:
 80050ec:	7c30      	ldrb	r0, [r6, #16]
 80050ee:	f000 0001 	and.w	r0, r0, #1
 80050f2:	e5ec      	b.n	8004cce <PE_Get_UnchunkedSupport>

080050f4 <PE_SubStateMachine_Generic>:
 80050f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050f8:	b08b      	sub	sp, #44	; 0x2c
 80050fa:	4689      	mov	r9, r1
 80050fc:	4604      	mov	r4, r0
 80050fe:	f8df 7998 	ldr.w	r7, [pc, #2456]	; 8005a98 <.text_263>
 8005102:	f894 137f 	ldrb.w	r1, [r4, #895]	; 0x37f
 8005106:	7838      	ldrb	r0, [r7, #0]
 8005108:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800510c:	2602      	movs	r6, #2
 800510e:	2901      	cmp	r1, #1
 8005110:	f000 0002 	and.w	r0, r0, #2
 8005114:	f504 7561 	add.w	r5, r4, #900	; 0x384
 8005118:	f248 081b 	movw	r8, #32795	; 0x801b
 800511c:	f000 8197 	beq.w	800544e <PE_SubStateMachine_Generic+0x35a>
 8005120:	2918      	cmp	r1, #24
 8005122:	d068      	beq.n	80051f6 <PE_SubStateMachine_Generic+0x102>
 8005124:	2919      	cmp	r1, #25
 8005126:	f000 8082 	beq.w	800522e <PE_SubStateMachine_Generic+0x13a>
 800512a:	291d      	cmp	r1, #29
 800512c:	f000 80cc 	beq.w	80052c8 <PE_SubStateMachine_Generic+0x1d4>
 8005130:	2927      	cmp	r1, #39	; 0x27
 8005132:	f000 80e7 	beq.w	8005304 <PE_SubStateMachine_Generic+0x210>
 8005136:	2928      	cmp	r1, #40	; 0x28
 8005138:	f000 80f4 	beq.w	8005324 <PE_SubStateMachine_Generic+0x230>
 800513c:	2929      	cmp	r1, #41	; 0x29
 800513e:	f000 80fe 	beq.w	800533e <PE_SubStateMachine_Generic+0x24a>
 8005142:	292c      	cmp	r1, #44	; 0x2c
 8005144:	f000 823b 	beq.w	80055be <PE_SubStateMachine_Generic+0x4ca>
 8005148:	2930      	cmp	r1, #48	; 0x30
 800514a:	f000 81c1 	beq.w	80054d0 <PE_SubStateMachine_Generic+0x3dc>
 800514e:	293a      	cmp	r1, #58	; 0x3a
 8005150:	f000 821e 	beq.w	8005590 <PE_SubStateMachine_Generic+0x49c>
 8005154:	293b      	cmp	r1, #59	; 0x3b
 8005156:	f000 8202 	beq.w	800555e <PE_SubStateMachine_Generic+0x46a>
 800515a:	293c      	cmp	r1, #60	; 0x3c
 800515c:	f000 81f2 	beq.w	8005544 <PE_SubStateMachine_Generic+0x450>
 8005160:	2963      	cmp	r1, #99	; 0x63
 8005162:	f000 8185 	beq.w	8005470 <PE_SubStateMachine_Generic+0x37c>
 8005166:	2964      	cmp	r1, #100	; 0x64
 8005168:	f000 819a 	beq.w	80054a0 <PE_SubStateMachine_Generic+0x3ac>
 800516c:	2974      	cmp	r1, #116	; 0x74
 800516e:	f000 81c9 	beq.w	8005504 <PE_SubStateMachine_Generic+0x410>
 8005172:	2993      	cmp	r1, #147	; 0x93
 8005174:	f000 80f6 	beq.w	8005364 <PE_SubStateMachine_Generic+0x270>
 8005178:	2994      	cmp	r1, #148	; 0x94
 800517a:	f000 80f8 	beq.w	800536e <PE_SubStateMachine_Generic+0x27a>
 800517e:	2995      	cmp	r1, #149	; 0x95
 8005180:	f000 8110 	beq.w	80053a4 <PE_SubStateMachine_Generic+0x2b0>
 8005184:	2999      	cmp	r1, #153	; 0x99
 8005186:	f040 8224 	bne.w	80055d2 <PE_SubStateMachine_Generic+0x4de>
 800518a:	6862      	ldr	r2, [r4, #4]
 800518c:	6813      	ldr	r3, [r2, #0]
 800518e:	f248 7108 	movw	r1, #34568	; 0x8708
 8005192:	400b      	ands	r3, r1
 8005194:	f248 3608 	movw	r6, #33544	; 0x8308
 8005198:	42b3      	cmp	r3, r6
 800519a:	d124      	bne.n	80051e6 <PE_SubStateMachine_Generic+0xf2>
 800519c:	692e      	ldr	r6, [r5, #16]
 800519e:	b120      	cbz	r0, 80051aa <PE_SubStateMachine_Generic+0xb6>
 80051a0:	f000 fa83 	bl	80056aa <.text_251>
 80051a4:	225e      	movs	r2, #94	; 0x5e
 80051a6:	f7ff fc5f 	bl	8004a68 <.text_211+0x2>
 80051aa:	f7ff f909 	bl	80043c0 <.text_189>
 80051ae:	215e      	movs	r1, #94	; 0x5e
 80051b0:	f7fe fe10 	bl	8003dd4 <.text_164+0x6>
 80051b4:	f000 fa25 	bl	8005602 <.text_239>
 80051b8:	7c20      	ldrb	r0, [r4, #16]
 80051ba:	2106      	movs	r1, #6
 80051bc:	f7fd febe 	bl	8002f3c <.text_136+0x4>
 80051c0:	f241 7771 	movw	r7, #6001	; 0x1771
 80051c4:	2803      	cmp	r0, #3
 80051c6:	f040 820b 	bne.w	80055e0 <PE_SubStateMachine_Generic+0x4ec>
 80051ca:	6928      	ldr	r0, [r5, #16]
 80051cc:	1b80      	subs	r0, r0, r6
 80051ce:	42b8      	cmp	r0, r7
 80051d0:	f080 8206 	bcs.w	80055e0 <PE_SubStateMachine_Generic+0x4ec>
 80051d4:	f7fd fe13 	bl	8002dfe <.text_131>
 80051d8:	f000 8202 	beq.w	80055e0 <PE_SubStateMachine_Generic+0x4ec>
 80051dc:	7c20      	ldrb	r0, [r4, #16]
 80051de:	2106      	movs	r1, #6
 80051e0:	f7fd feac 	bl	8002f3c <.text_136+0x4>
 80051e4:	e7ee      	b.n	80051c4 <PE_SubStateMachine_Generic+0xd0>
 80051e6:	b120      	cbz	r0, 80051f2 <PE_SubStateMachine_Generic+0xfe>
 80051e8:	f000 fa5f 	bl	80056aa <.text_251>
 80051ec:	221a      	movs	r2, #26
 80051ee:	f7ff fc3b 	bl	8004a68 <.text_211+0x2>
 80051f2:	211a      	movs	r1, #26
 80051f4:	e1ea      	b.n	80055cc <PE_SubStateMachine_Generic+0x4d8>
 80051f6:	6860      	ldr	r0, [r4, #4]
 80051f8:	f000 fa8b 	bl	8005712 <.text_255+0x4>
 80051fc:	bf1d      	ittte	ne
 80051fe:	6920      	ldrne	r0, [r4, #16]
 8005200:	0840      	lsrne	r0, r0, #1
 8005202:	f000 0001 	andne.w	r0, r0, #1
 8005206:	2002      	moveq	r0, #2
 8005208:	9000      	str	r0, [sp, #0]
 800520a:	2319      	movs	r3, #25
 800520c:	2208      	movs	r2, #8
 800520e:	f000 fa89 	bl	8005724 <.text_257+0x2>
 8005212:	2800      	cmp	r0, #0
 8005214:	f040 81e0 	bne.w	80055d8 <PE_SubStateMachine_Generic+0x4e4>
 8005218:	2007      	movs	r0, #7
 800521a:	f000 f9e4 	bl	80055e6 <.text_237>
 800521e:	d504      	bpl.n	800522a <PE_SubStateMachine_Generic+0x136>
 8005220:	f000 fa48 	bl	80056b4 <.text_252>
 8005224:	2205      	movs	r2, #5
 8005226:	f7ff fb19 	bl	800485c <.text_203+0x2>
 800522a:	2105      	movs	r1, #5
 800522c:	e167      	b.n	80054fe <PE_SubStateMachine_Generic+0x40a>
 800522e:	f899 0000 	ldrb.w	r0, [r9]
 8005232:	2811      	cmp	r0, #17
 8005234:	d144      	bne.n	80052c0 <PE_SubStateMachine_Generic+0x1cc>
 8005236:	89e9      	ldrh	r1, [r5, #14]
 8005238:	0bc8      	lsrs	r0, r1, #15
 800523a:	d124      	bne.n	8005286 <PE_SubStateMachine_Generic+0x192>
 800523c:	f3c1 3302 	ubfx	r3, r1, #12, #3
 8005240:	0018      	movs	r0, r3
 8005242:	d020      	beq.n	8005286 <PE_SubStateMachine_Generic+0x192>
 8005244:	f001 011f 	and.w	r1, r1, #31
 8005248:	2904      	cmp	r1, #4
 800524a:	d11c      	bne.n	8005286 <PE_SubStateMachine_Generic+0x192>
 800524c:	68a6      	ldr	r6, [r4, #8]
 800524e:	7c20      	ldrb	r0, [r4, #16]
 8005250:	f8d6 c018 	ldr.w	ip, [r6, #24]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	f504 72a1 	add.w	r2, r4, #322	; 0x142
 800525a:	2105      	movs	r1, #5
 800525c:	f000 0001 	and.w	r0, r0, #1
 8005260:	47e0      	blx	ip
 8005262:	f000 f9e7 	bl	8005634 <.text_244>
 8005266:	f000 f9d9 	bl	800561c <.text_241>
 800526a:	d507      	bpl.n	800527c <PE_SubStateMachine_Generic+0x188>
 800526c:	9600      	str	r6, [sp, #0]
 800526e:	2300      	movs	r3, #0
 8005270:	7c21      	ldrb	r1, [r4, #16]
 8005272:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8005276:	2207      	movs	r2, #7
 8005278:	f7ff fbf6 	bl	8004a68 <.text_211+0x2>
 800527c:	f7ff f8a0 	bl	80043c0 <.text_189>
 8005280:	2107      	movs	r1, #7
 8005282:	f7fe fda7 	bl	8003dd4 <.text_164+0x6>
 8005286:	89e8      	ldrh	r0, [r5, #14]
 8005288:	f410 4f70 	tst.w	r0, #61440	; 0xf000
 800528c:	d118      	bne.n	80052c0 <PE_SubStateMachine_Generic+0x1cc>
 800528e:	f000 001f 	and.w	r0, r0, #31
 8005292:	2804      	cmp	r0, #4
 8005294:	bf18      	it	ne
 8005296:	2810      	cmpne	r0, #16
 8005298:	d112      	bne.n	80052c0 <PE_SubStateMachine_Generic+0x1cc>
 800529a:	f000 f9cb 	bl	8005634 <.text_244>
 800529e:	f000 f9bd 	bl	800561c <.text_241>
 80052a2:	d508      	bpl.n	80052b6 <PE_SubStateMachine_Generic+0x1c2>
 80052a4:	9600      	str	r6, [sp, #0]
 80052a6:	2300      	movs	r3, #0
 80052a8:	7c21      	ldrb	r1, [r4, #16]
 80052aa:	68ff      	ldr	r7, [r7, #12]
 80052ac:	2208      	movs	r2, #8
 80052ae:	f001 0101 	and.w	r1, r1, #1
 80052b2:	2009      	movs	r0, #9
 80052b4:	47b8      	blx	r7
 80052b6:	f7ff f883 	bl	80043c0 <.text_189>
 80052ba:	2108      	movs	r1, #8
 80052bc:	f7fe fd8a 	bl	8003dd4 <.text_164+0x6>
 80052c0:	f000 fbec 	bl	8005a9c <.text_264>
 80052c4:	d12d      	bne.n	8005322 <PE_SubStateMachine_Generic+0x22e>
 80052c6:	e138      	b.n	800553a <PE_SubStateMachine_Generic+0x446>
 80052c8:	68a5      	ldr	r5, [r4, #8]
 80052ca:	7c20      	ldrb	r0, [r4, #16]
 80052cc:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80052d0:	ab03      	add	r3, sp, #12
 80052d2:	aa04      	add	r2, sp, #16
 80052d4:	2101      	movs	r1, #1
 80052d6:	f000 f9aa 	bl	800562e <.text_243>
 80052da:	9a03      	ldr	r2, [sp, #12]
 80052dc:	f000 f9ca 	bl	8005674 <.text_248>
 80052e0:	ab04      	add	r3, sp, #16
 80052e2:	2204      	movs	r2, #4
 80052e4:	2100      	movs	r1, #0
 80052e6:	4620      	mov	r0, r4
 80052e8:	f7fd fdbe 	bl	8002e68 <PE_Send_DataMessage>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d118      	bne.n	8005322 <PE_SubStateMachine_Generic+0x22e>
 80052f0:	7838      	ldrb	r0, [r7, #0]
 80052f2:	0781      	lsls	r1, r0, #30
 80052f4:	d504      	bpl.n	8005300 <PE_SubStateMachine_Generic+0x20c>
 80052f6:	f000 f9dd 	bl	80056b4 <.text_252>
 80052fa:	220a      	movs	r2, #10
 80052fc:	f7ff faae 	bl	800485c <.text_203+0x2>
 8005300:	210a      	movs	r1, #10
 8005302:	e0fc      	b.n	80054fe <PE_SubStateMachine_Generic+0x40a>
 8005304:	2011      	movs	r0, #17
 8005306:	83a0      	strh	r0, [r4, #28]
 8005308:	2105      	movs	r1, #5
 800530a:	7c20      	ldrb	r0, [r4, #16]
 800530c:	f000 0001 	and.w	r0, r0, #1
 8005310:	f000 fe86 	bl	8006020 <USBDPD_PRL_BistCarrierEyeMode>
 8005314:	2028      	movs	r0, #40	; 0x28
 8005316:	f884 037f 	strb.w	r0, [r4, #895]	; 0x37f
 800531a:	263a      	movs	r6, #58	; 0x3a
 800531c:	f248 003a 	movw	r0, #32826	; 0x803a
 8005320:	8128      	strh	r0, [r5, #8]
 8005322:	e159      	b.n	80055d8 <PE_SubStateMachine_Generic+0x4e4>
 8005324:	8928      	ldrh	r0, [r5, #8]
 8005326:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800532a:	d1fa      	bne.n	8005322 <PE_SubStateMachine_Generic+0x22e>
 800532c:	7c20      	ldrb	r0, [r4, #16]
 800532e:	2105      	movs	r1, #5
 8005330:	f000 0001 	and.w	r0, r0, #1
 8005334:	f000 fe7a 	bl	800602c <USBDPD_PRL_BistCarrierEyeModeExit>
 8005338:	2000      	movs	r0, #0
 800533a:	8128      	strh	r0, [r5, #8]
 800533c:	e0fd      	b.n	800553a <PE_SubStateMachine_Generic+0x446>
 800533e:	f899 0000 	ldrb.w	r0, [r9]
 8005342:	2811      	cmp	r0, #17
 8005344:	d10b      	bne.n	800535e <PE_SubStateMachine_Generic+0x26a>
 8005346:	89e9      	ldrh	r1, [r5, #14]
 8005348:	0bc8      	lsrs	r0, r1, #15
 800534a:	d108      	bne.n	800535e <PE_SubStateMachine_Generic+0x26a>
 800534c:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8005350:	b128      	cbz	r0, 800535e <PE_SubStateMachine_Generic+0x26a>
 8005352:	f001 011f 	and.w	r1, r1, #31
 8005356:	2903      	cmp	r1, #3
 8005358:	d101      	bne.n	800535e <PE_SubStateMachine_Generic+0x26a>
 800535a:	f000 f978 	bl	800564e <.text_246>
 800535e:	2011      	movs	r0, #17
 8005360:	83a0      	strh	r0, [r4, #28]
 8005362:	e139      	b.n	80055d8 <PE_SubStateMachine_Generic+0x4e4>
 8005364:	4620      	mov	r0, r4
 8005366:	f000 f9e1 	bl	800572c <PE_SubStateMachine_ReceiveDRS>
 800536a:	4606      	mov	r6, r0
 800536c:	e134      	b.n	80055d8 <PE_SubStateMachine_Generic+0x4e4>
 800536e:	6860      	ldr	r0, [r4, #4]
 8005370:	f000 f9cf 	bl	8005712 <.text_255+0x4>
 8005374:	bf1d      	ittte	ne
 8005376:	6920      	ldrne	r0, [r4, #16]
 8005378:	0840      	lsrne	r0, r0, #1
 800537a:	f000 0001 	andne.w	r0, r0, #1
 800537e:	2002      	moveq	r0, #2
 8005380:	9000      	str	r0, [sp, #0]
 8005382:	2395      	movs	r3, #149	; 0x95
 8005384:	2209      	movs	r2, #9
 8005386:	f000 f9cd 	bl	8005724 <.text_257+0x2>
 800538a:	2800      	cmp	r0, #0
 800538c:	d1ee      	bne.n	800536c <PE_SubStateMachine_Generic+0x278>
 800538e:	200f      	movs	r0, #15
 8005390:	f000 f929 	bl	80055e6 <.text_237>
 8005394:	d504      	bpl.n	80053a0 <PE_SubStateMachine_Generic+0x2ac>
 8005396:	f000 f98d 	bl	80056b4 <.text_252>
 800539a:	2222      	movs	r2, #34	; 0x22
 800539c:	f7ff fa5e 	bl	800485c <.text_203+0x2>
 80053a0:	2122      	movs	r1, #34	; 0x22
 80053a2:	e0ac      	b.n	80054fe <PE_SubStateMachine_Generic+0x40a>
 80053a4:	8829      	ldrh	r1, [r5, #0]
 80053a6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80053aa:	d0c7      	beq.n	800533c <PE_SubStateMachine_Generic+0x248>
 80053ac:	f899 2000 	ldrb.w	r2, [r9]
 80053b0:	2a14      	cmp	r2, #20
 80053b2:	d00d      	beq.n	80053d0 <PE_SubStateMachine_Generic+0x2dc>
 80053b4:	89e9      	ldrh	r1, [r5, #14]
 80053b6:	f411 4f70 	tst.w	r1, #61440	; 0xf000
 80053ba:	d109      	bne.n	80053d0 <PE_SubStateMachine_Generic+0x2dc>
 80053bc:	f001 021f 	and.w	r2, r1, #31
 80053c0:	2a03      	cmp	r2, #3
 80053c2:	d006      	beq.n	80053d2 <PE_SubStateMachine_Generic+0x2de>
 80053c4:	2a04      	cmp	r2, #4
 80053c6:	bf18      	it	ne
 80053c8:	2a0c      	cmpne	r2, #12
 80053ca:	d021      	beq.n	8005410 <PE_SubStateMachine_Generic+0x31c>
 80053cc:	2a10      	cmp	r2, #16
 80053ce:	d032      	beq.n	8005436 <PE_SubStateMachine_Generic+0x342>
 80053d0:	e102      	b.n	80055d8 <PE_SubStateMachine_Generic+0x4e4>
 80053d2:	6862      	ldr	r2, [r4, #4]
 80053d4:	6813      	ldr	r3, [r2, #0]
 80053d6:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 80053da:	b951      	cbnz	r1, 80053f2 <PE_SubStateMachine_Generic+0x2fe>
 80053dc:	f043 0308 	orr.w	r3, r3, #8
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	b120      	cbz	r0, 80053ee <PE_SubStateMachine_Generic+0x2fa>
 80053e4:	f000 f961 	bl	80056aa <.text_251>
 80053e8:	2225      	movs	r2, #37	; 0x25
 80053ea:	f7ff fb3d 	bl	8004a68 <.text_211+0x2>
 80053ee:	2125      	movs	r1, #37	; 0x25
 80053f0:	e009      	b.n	8005406 <PE_SubStateMachine_Generic+0x312>
 80053f2:	f023 0308 	bic.w	r3, r3, #8
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	b120      	cbz	r0, 8005404 <PE_SubStateMachine_Generic+0x310>
 80053fa:	f000 f956 	bl	80056aa <.text_251>
 80053fe:	2224      	movs	r2, #36	; 0x24
 8005400:	f7ff fb32 	bl	8004a68 <.text_211+0x2>
 8005404:	2124      	movs	r1, #36	; 0x24
 8005406:	f7fe fce2 	bl	8003dce <.text_164>
 800540a:	f000 f9d7 	bl	80057bc <.text_261>
 800540e:	e01b      	b.n	8005448 <PE_SubStateMachine_Generic+0x354>
 8005410:	b148      	cbz	r0, 8005426 <PE_SubStateMachine_Generic+0x332>
 8005412:	f001 011f 	and.w	r1, r1, #31
 8005416:	290c      	cmp	r1, #12
 8005418:	bf0c      	ite	eq
 800541a:	2226      	moveq	r2, #38	; 0x26
 800541c:	2227      	movne	r2, #39	; 0x27
 800541e:	f000 f944 	bl	80056aa <.text_251>
 8005422:	f7ff fb21 	bl	8004a68 <.text_211+0x2>
 8005426:	7ba8      	ldrb	r0, [r5, #14]
 8005428:	f000 001f 	and.w	r0, r0, #31
 800542c:	280c      	cmp	r0, #12
 800542e:	bf14      	ite	ne
 8005430:	2127      	movne	r1, #39	; 0x27
 8005432:	2126      	moveq	r1, #38	; 0x26
 8005434:	e006      	b.n	8005444 <PE_SubStateMachine_Generic+0x350>
 8005436:	b120      	cbz	r0, 8005442 <PE_SubStateMachine_Generic+0x34e>
 8005438:	f000 f937 	bl	80056aa <.text_251>
 800543c:	2228      	movs	r2, #40	; 0x28
 800543e:	f7ff fb13 	bl	8004a68 <.text_211+0x2>
 8005442:	2128      	movs	r1, #40	; 0x28
 8005444:	f7fe fcc3 	bl	8003dce <.text_164>
 8005448:	f000 f8fd 	bl	8005646 <.text_245>
 800544c:	e0c4      	b.n	80055d8 <PE_SubStateMachine_Generic+0x4e4>
 800544e:	f000 f9ab 	bl	80057a8 <.text_259>
 8005452:	2210      	movs	r2, #16
 8005454:	f000 f966 	bl	8005724 <.text_257+0x2>
 8005458:	2800      	cmp	r0, #0
 800545a:	d1f7      	bne.n	800544c <PE_SubStateMachine_Generic+0x358>
 800545c:	7838      	ldrb	r0, [r7, #0]
 800545e:	0781      	lsls	r1, r0, #30
 8005460:	d504      	bpl.n	800546c <PE_SubStateMachine_Generic+0x378>
 8005462:	f000 f927 	bl	80056b4 <.text_252>
 8005466:	2259      	movs	r2, #89	; 0x59
 8005468:	f7ff f9f8 	bl	800485c <.text_203+0x2>
 800546c:	2159      	movs	r1, #89	; 0x59
 800546e:	e046      	b.n	80054fe <PE_SubStateMachine_Generic+0x40a>
 8005470:	f000 f907 	bl	8005682 <.text_249>
 8005474:	2108      	movs	r1, #8
 8005476:	f000 f8da 	bl	800562e <.text_243>
 800547a:	f000 f90c 	bl	8005696 <.text_250>
 800547e:	f000 f8c5 	bl	800560c <.text_240>
 8005482:	f000 f8ec 	bl	800565e <.text_247>
 8005486:	2201      	movs	r2, #1
 8005488:	f000 f948 	bl	800571c <.text_256>
 800548c:	7838      	ldrb	r0, [r7, #0]
 800548e:	0781      	lsls	r1, r0, #30
 8005490:	d504      	bpl.n	800549c <PE_SubStateMachine_Generic+0x3a8>
 8005492:	f000 f90f 	bl	80056b4 <.text_252>
 8005496:	2248      	movs	r2, #72	; 0x48
 8005498:	f7ff f9e0 	bl	800485c <.text_203+0x2>
 800549c:	2148      	movs	r1, #72	; 0x48
 800549e:	e02e      	b.n	80054fe <PE_SubStateMachine_Generic+0x40a>
 80054a0:	f000 f8ef 	bl	8005682 <.text_249>
 80054a4:	2113      	movs	r1, #19
 80054a6:	f000 f8c2 	bl	800562e <.text_243>
 80054aa:	f000 f8f4 	bl	8005696 <.text_250>
 80054ae:	f000 f8ad 	bl	800560c <.text_240>
 80054b2:	f000 f8d4 	bl	800565e <.text_247>
 80054b6:	220f      	movs	r2, #15
 80054b8:	f000 f930 	bl	800571c <.text_256>
 80054bc:	7838      	ldrb	r0, [r7, #0]
 80054be:	0781      	lsls	r1, r0, #30
 80054c0:	d504      	bpl.n	80054cc <PE_SubStateMachine_Generic+0x3d8>
 80054c2:	f000 f8f7 	bl	80056b4 <.text_252>
 80054c6:	2261      	movs	r2, #97	; 0x61
 80054c8:	f7ff f9c8 	bl	800485c <.text_203+0x2>
 80054cc:	2161      	movs	r1, #97	; 0x61
 80054ce:	e016      	b.n	80054fe <PE_SubStateMachine_Generic+0x40a>
 80054d0:	f000 f8d7 	bl	8005682 <.text_249>
 80054d4:	2109      	movs	r1, #9
 80054d6:	f000 f8aa 	bl	800562e <.text_243>
 80054da:	f000 f8dc 	bl	8005696 <.text_250>
 80054de:	f000 f895 	bl	800560c <.text_240>
 80054e2:	f000 f8bc 	bl	800565e <.text_247>
 80054e6:	2202      	movs	r2, #2
 80054e8:	f000 f918 	bl	800571c <.text_256>
 80054ec:	7838      	ldrb	r0, [r7, #0]
 80054ee:	0781      	lsls	r1, r0, #30
 80054f0:	d504      	bpl.n	80054fc <PE_SubStateMachine_Generic+0x408>
 80054f2:	f000 f8df 	bl	80056b4 <.text_252>
 80054f6:	224f      	movs	r2, #79	; 0x4f
 80054f8:	f7ff f9b0 	bl	800485c <.text_203+0x2>
 80054fc:	214f      	movs	r1, #79	; 0x4f
 80054fe:	f7fe fc66 	bl	8003dce <.text_164>
 8005502:	e069      	b.n	80055d8 <PE_SubStateMachine_Generic+0x4e4>
 8005504:	f899 0000 	ldrb.w	r0, [r9]
 8005508:	2814      	cmp	r0, #20
 800550a:	d013      	beq.n	8005534 <PE_SubStateMachine_Generic+0x440>
 800550c:	89e9      	ldrh	r1, [r5, #14]
 800550e:	0bc8      	lsrs	r0, r1, #15
 8005510:	d110      	bne.n	8005534 <PE_SubStateMachine_Generic+0x440>
 8005512:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8005516:	b168      	cbz	r0, 8005534 <PE_SubStateMachine_Generic+0x440>
 8005518:	f001 011f 	and.w	r1, r1, #31
 800551c:	2905      	cmp	r1, #5
 800551e:	d109      	bne.n	8005534 <PE_SubStateMachine_Generic+0x440>
 8005520:	f7ff f98e 	bl	8004840 <.text_200>
 8005524:	2304      	movs	r3, #4
 8005526:	f504 72a2 	add.w	r2, r4, #324	; 0x144
 800552a:	210f      	movs	r1, #15
 800552c:	f7ff f992 	bl	8004854 <.text_202>
 8005530:	f000 f889 	bl	8005646 <.text_245>
 8005534:	f000 fab2 	bl	8005a9c <.text_264>
 8005538:	d14e      	bne.n	80055d8 <PE_SubStateMachine_Generic+0x4e4>
 800553a:	2103      	movs	r1, #3
 800553c:	f884 137f 	strb.w	r1, [r4, #895]	; 0x37f
 8005540:	2600      	movs	r6, #0
 8005542:	e049      	b.n	80055d8 <PE_SubStateMachine_Generic+0x4e4>
 8005544:	f000 f856 	bl	80055f4 <.text_238>
 8005548:	210d      	movs	r1, #13
 800554a:	f000 f86d 	bl	8005628 <.text_242>
 800554e:	f000 f8a2 	bl	8005696 <.text_250>
 8005552:	f000 f85b 	bl	800560c <.text_240>
 8005556:	f000 f8b3 	bl	80056c0 <.text_253>
 800555a:	2207      	movs	r2, #7
 800555c:	e02c      	b.n	80055b8 <PE_SubStateMachine_Generic+0x4c4>
 800555e:	2000      	movs	r0, #0
 8005560:	9003      	str	r0, [sp, #12]
 8005562:	ab04      	add	r3, sp, #16
 8005564:	68a5      	ldr	r5, [r4, #8]
 8005566:	7c20      	ldrb	r0, [r4, #16]
 8005568:	696f      	ldr	r7, [r5, #20]
 800556a:	aa03      	add	r2, sp, #12
 800556c:	210f      	movs	r1, #15
 800556e:	f000 f85b 	bl	8005628 <.text_242>
 8005572:	9804      	ldr	r0, [sp, #16]
 8005574:	2800      	cmp	r0, #0
 8005576:	d02c      	beq.n	80055d2 <PE_SubStateMachine_Generic+0x4de>
 8005578:	2203      	movs	r2, #3
 800557a:	2001      	movs	r0, #1
 800557c:	2100      	movs	r1, #0
 800557e:	9201      	str	r2, [sp, #4]
 8005580:	9000      	str	r0, [sp, #0]
 8005582:	9102      	str	r1, [sp, #8]
 8005584:	ab03      	add	r3, sp, #12
 8005586:	2205      	movs	r2, #5
 8005588:	4620      	mov	r0, r4
 800558a:	f7fd fc6d 	bl	8002e68 <PE_Send_DataMessage>
 800558e:	e023      	b.n	80055d8 <PE_SubStateMachine_Generic+0x4e4>
 8005590:	f000 f830 	bl	80055f4 <.text_238>
 8005594:	2111      	movs	r1, #17
 8005596:	f000 f847 	bl	8005628 <.text_242>
 800559a:	9803      	ldr	r0, [sp, #12]
 800559c:	b1c8      	cbz	r0, 80055d2 <PE_SubStateMachine_Generic+0x4de>
 800559e:	2100      	movs	r1, #0
 80055a0:	7c20      	ldrb	r0, [r4, #16]
 80055a2:	f884 1020 	strb.w	r1, [r4, #32]
 80055a6:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
 80055aa:	f7ff fda0 	bl	80050ee <.text_235+0x2>
 80055ae:	f000 f82d 	bl	800560c <.text_240>
 80055b2:	f000 f885 	bl	80056c0 <.text_253>
 80055b6:	2205      	movs	r2, #5
 80055b8:	f000 f8b0 	bl	800571c <.text_256>
 80055bc:	e00c      	b.n	80055d8 <PE_SubStateMachine_Generic+0x4e4>
 80055be:	b120      	cbz	r0, 80055ca <PE_SubStateMachine_Generic+0x4d6>
 80055c0:	f000 f873 	bl	80056aa <.text_251>
 80055c4:	2250      	movs	r2, #80	; 0x50
 80055c6:	f7ff fa4f 	bl	8004a68 <.text_211+0x2>
 80055ca:	2150      	movs	r1, #80	; 0x50
 80055cc:	f7fe fbff 	bl	8003dce <.text_164>
 80055d0:	e7b3      	b.n	800553a <PE_SubStateMachine_Generic+0x446>
 80055d2:	2001      	movs	r0, #1
 80055d4:	f884 037f 	strb.w	r0, [r4, #895]	; 0x37f
 80055d8:	4630      	mov	r0, r6
 80055da:	b00b      	add	sp, #44	; 0x2c
 80055dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055e0:	f7fe feff 	bl	80043e2 <.text_192>
 80055e4:	e7a9      	b.n	800553a <PE_SubStateMachine_Generic+0x446>

080055e6 <.text_237>:
 80055e6:	83a0      	strh	r0, [r4, #28]
 80055e8:	f8a5 8000 	strh.w	r8, [r5]
 80055ec:	261b      	movs	r6, #27
 80055ee:	7838      	ldrb	r0, [r7, #0]
 80055f0:	0781      	lsls	r1, r0, #30
 80055f2:	4770      	bx	lr

080055f4 <.text_238>:
 80055f4:	68a5      	ldr	r5, [r4, #8]
 80055f6:	7c20      	ldrb	r0, [r4, #16]
 80055f8:	696f      	ldr	r7, [r5, #20]
 80055fa:	ab03      	add	r3, sp, #12
 80055fc:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8005600:	4770      	bx	lr

08005602 <.text_239>:
 8005602:	7c20      	ldrb	r0, [r4, #16]
 8005604:	f000 0001 	and.w	r0, r0, #1
 8005608:	f000 bcaa 	b.w	8005f60 <USBPD_PRL_ResetRequestReset>

0800560c <.text_240>:
 800560c:	b928      	cbnz	r0, 800561a <.text_240+0xe>
 800560e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 8005612:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8005616:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
 800561a:	4770      	bx	lr

0800561c <.text_241>:
 800561c:	2003      	movs	r0, #3
 800561e:	f884 037f 	strb.w	r0, [r4, #895]	; 0x37f
 8005622:	7838      	ldrb	r0, [r7, #0]
 8005624:	0781      	lsls	r1, r0, #30
 8005626:	4770      	bx	lr

08005628 <.text_242>:
 8005628:	f000 0001 	and.w	r0, r0, #1

0800562c <__iar_annotation$$tailcall>:
 800562c:	4738      	bx	r7

0800562e <.text_243>:
 800562e:	f000 0001 	and.w	r0, r0, #1

08005632 <__iar_annotation$$tailcall>:
 8005632:	4760      	bx	ip

08005634 <.text_244>:
 8005634:	2014      	movs	r0, #20
 8005636:	f889 0000 	strb.w	r0, [r9]
 800563a:	2600      	movs	r6, #0
 800563c:	7c20      	ldrb	r0, [r4, #16]
 800563e:	f000 0001 	and.w	r0, r0, #1
 8005642:	f000 bd21 	b.w	8006088 <USBPD_PRL_EnableRX>

08005646 <.text_245>:
 8005646:	2003      	movs	r0, #3
 8005648:	f884 037f 	strb.w	r0, [r4, #895]	; 0x37f
 800564c:	2600      	movs	r6, #0

0800564e <.text_246>:
 800564e:	2014      	movs	r0, #20
 8005650:	f889 0000 	strb.w	r0, [r9]
 8005654:	7c20      	ldrb	r0, [r4, #16]
 8005656:	f000 0001 	and.w	r0, r0, #1
 800565a:	f000 bd15 	b.w	8006088 <USBPD_PRL_EnableRX>

0800565e <.text_247>:
 800565e:	2003      	movs	r0, #3
 8005660:	9a03      	ldr	r2, [sp, #12]
 8005662:	9001      	str	r0, [sp, #4]
 8005664:	1d12      	adds	r2, r2, #4
 8005666:	b292      	uxth	r2, r2
 8005668:	2100      	movs	r1, #0
 800566a:	9200      	str	r2, [sp, #0]
 800566c:	9102      	str	r1, [sp, #8]
 800566e:	f104 031e 	add.w	r3, r4, #30
 8005672:	4770      	bx	lr

08005674 <.text_248>:
 8005674:	2000      	movs	r0, #0
 8005676:	2103      	movs	r1, #3
 8005678:	0892      	lsrs	r2, r2, #2
 800567a:	9002      	str	r0, [sp, #8]
 800567c:	9101      	str	r1, [sp, #4]
 800567e:	9200      	str	r2, [sp, #0]
 8005680:	4770      	bx	lr

08005682 <.text_249>:
 8005682:	2000      	movs	r0, #0
 8005684:	9003      	str	r0, [sp, #12]
 8005686:	ab03      	add	r3, sp, #12
 8005688:	68a5      	ldr	r5, [r4, #8]
 800568a:	7c20      	ldrb	r0, [r4, #16]
 800568c:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8005690:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8005694:	4770      	bx	lr

08005696 <.text_250>:
 8005696:	2000      	movs	r0, #0
 8005698:	f884 0020 	strb.w	r0, [r4, #32]
 800569c:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
 80056a0:	7c20      	ldrb	r0, [r4, #16]
 80056a2:	f000 0001 	and.w	r0, r0, #1
 80056a6:	f7ff bb12 	b.w	8004cce <PE_Get_UnchunkedSupport>

080056aa <.text_251>:
 80056aa:	2000      	movs	r0, #0
 80056ac:	9000      	str	r0, [sp, #0]
 80056ae:	2300      	movs	r3, #0
 80056b0:	7c21      	ldrb	r1, [r4, #16]
 80056b2:	4770      	bx	lr

080056b4 <.text_252>:
 80056b4:	2100      	movs	r1, #0
 80056b6:	9100      	str	r1, [sp, #0]
 80056b8:	2300      	movs	r3, #0
 80056ba:	7c21      	ldrb	r1, [r4, #16]
 80056bc:	68fd      	ldr	r5, [r7, #12]
 80056be:	4770      	bx	lr

080056c0 <.text_253>:
 80056c0:	2100      	movs	r1, #0
 80056c2:	9a03      	ldr	r2, [sp, #12]
 80056c4:	9102      	str	r1, [sp, #8]
 80056c6:	1d12      	adds	r2, r2, #4
 80056c8:	b292      	uxth	r2, r2
 80056ca:	9200      	str	r2, [sp, #0]
 80056cc:	2003      	movs	r0, #3
 80056ce:	9001      	str	r0, [sp, #4]
 80056d0:	f104 031e 	add.w	r3, r4, #30
 80056d4:	4770      	bx	lr

080056d6 <.text_254>:
 80056d6:	f360 0104 	bfi	r1, r0, #0, #5
 80056da:	6031      	str	r1, [r6, #0]
 80056dc:	4633      	mov	r3, r6
 80056de:	8930      	ldrh	r0, [r6, #8]
 80056e0:	f360 411f 	bfi	r1, r0, #16, #16
 80056e4:	6031      	str	r1, [r6, #0]
 80056e6:	6830      	ldr	r0, [r6, #0]
 80056e8:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80056ec:	6030      	str	r0, [r6, #0]
 80056ee:	f420 40c0 	bic.w	r0, r0, #24576	; 0x6000
 80056f2:	6869      	ldr	r1, [r5, #4]
 80056f4:	680a      	ldr	r2, [r1, #0]
 80056f6:	f3c2 1140 	ubfx	r1, r2, #5, #1
 80056fa:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
 80056fe:	6030      	str	r0, [r6, #0]
 8005700:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8005704:	6929      	ldr	r1, [r5, #16]
 8005706:	f3c1 1142 	ubfx	r1, r1, #5, #3
 800570a:	ea40 2001 	orr.w	r0, r0, r1, lsl #8

0800570e <.text_255>:
 800570e:	6030      	str	r0, [r6, #0]
 8005710:	6868      	ldr	r0, [r5, #4]
 8005712:	6801      	ldr	r1, [r0, #0]
 8005714:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8005718:	2800      	cmp	r0, #0
 800571a:	4770      	bx	lr

0800571c <.text_256>:
 800571c:	4620      	mov	r0, r4
 800571e:	f7ff bb85 	b.w	8004e2c <PE_Send_ExtendedMessage>

08005722 <.text_257>:
 8005722:	2203      	movs	r2, #3
 8005724:	2100      	movs	r1, #0
 8005726:	4620      	mov	r0, r4
 8005728:	f7fd bb6f 	b.w	8002e0a <PE_Send_CtrlMessage>

0800572c <PE_SubStateMachine_ReceiveDRS>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	4604      	mov	r4, r0
 8005730:	68a1      	ldr	r1, [r4, #8]
 8005732:	7c20      	ldrb	r0, [r4, #16]
 8005734:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8005736:	f000 0001 	and.w	r0, r0, #1
 800573a:	4790      	blx	r2
 800573c:	280a      	cmp	r0, #10
 800573e:	d12a      	bne.n	8005796 <PE_SubStateMachine_ReceiveDRS+0x6a>
 8005740:	f000 f832 	bl	80057a8 <.text_259>
 8005744:	f7ff ffed 	bl	8005722 <.text_257>
 8005748:	2800      	cmp	r0, #0
 800574a:	d12b      	bne.n	80057a4 <PE_SubStateMachine_ReceiveDRS+0x78>
 800574c:	6861      	ldr	r1, [r4, #4]
 800574e:	f8df 5348 	ldr.w	r5, [pc, #840]	; 8005a98 <.text_263>
 8005752:	680a      	ldr	r2, [r1, #0]
 8005754:	f3c2 00c0 	ubfx	r0, r2, #3, #1
 8005758:	b960      	cbnz	r0, 8005774 <PE_SubStateMachine_ReceiveDRS+0x48>
 800575a:	f042 0208 	orr.w	r2, r2, #8
 800575e:	600a      	str	r2, [r1, #0]
 8005760:	7828      	ldrb	r0, [r5, #0]
 8005762:	0781      	lsls	r1, r0, #30
 8005764:	d504      	bpl.n	8005770 <PE_SubStateMachine_ReceiveDRS+0x44>
 8005766:	f7ff f87d 	bl	8004864 <.text_204>
 800576a:	2225      	movs	r2, #37	; 0x25
 800576c:	f7ff f876 	bl	800485c <.text_203+0x2>
 8005770:	2125      	movs	r1, #37	; 0x25
 8005772:	e00b      	b.n	800578c <PE_SubStateMachine_ReceiveDRS+0x60>
 8005774:	f022 0208 	bic.w	r2, r2, #8
 8005778:	600a      	str	r2, [r1, #0]
 800577a:	7828      	ldrb	r0, [r5, #0]
 800577c:	0781      	lsls	r1, r0, #30
 800577e:	d504      	bpl.n	800578a <PE_SubStateMachine_ReceiveDRS+0x5e>
 8005780:	f7ff f870 	bl	8004864 <.text_204>
 8005784:	2224      	movs	r2, #36	; 0x24
 8005786:	f7ff f869 	bl	800485c <.text_203+0x2>
 800578a:	2124      	movs	r1, #36	; 0x24
 800578c:	f7fe fb1f 	bl	8003dce <.text_164>
 8005790:	f000 f814 	bl	80057bc <.text_261>
 8005794:	e006      	b.n	80057a4 <PE_SubStateMachine_ReceiveDRS+0x78>
 8005796:	f000 f80b 	bl	80057b0 <.text_260>
 800579a:	bf0c      	ite	eq
 800579c:	2001      	moveq	r0, #1
 800579e:	202a      	movne	r0, #42	; 0x2a
 80057a0:	f884 037f 	strb.w	r0, [r4, #895]	; 0x37f
 80057a4:	2002      	movs	r0, #2
 80057a6:	bd32      	pop	{r1, r4, r5, pc}

080057a8 <.text_259>:
 80057a8:	2000      	movs	r0, #0
 80057aa:	9000      	str	r0, [sp, #0]
 80057ac:	2303      	movs	r3, #3
 80057ae:	4770      	bx	lr

080057b0 <.text_260>:
 80057b0:	6860      	ldr	r0, [r4, #4]
 80057b2:	7801      	ldrb	r1, [r0, #0]
 80057b4:	f001 0103 	and.w	r1, r1, #3
 80057b8:	2902      	cmp	r1, #2
 80057ba:	4770      	bx	lr

080057bc <.text_261>:
 80057bc:	6860      	ldr	r0, [r4, #4]
 80057be:	6801      	ldr	r1, [r0, #0]
 80057c0:	7c20      	ldrb	r0, [r4, #16]
 80057c2:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 80057c6:	f000 0001 	and.w	r0, r0, #1
 80057ca:	f000 ba28 	b.w	8005c1e <USBPD_PRL_SetHeaderDataRole>

080057ce <PE_SubStateMachine_VconnSwap>:
 80057ce:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 80057d2:	2702      	movs	r7, #2
 80057d4:	4604      	mov	r4, r0
 80057d6:	f504 7561 	add.w	r5, r4, #900	; 0x384
 80057da:	f894 037f 	ldrb.w	r0, [r4, #895]	; 0x37f
 80057de:	4eae      	ldr	r6, [pc, #696]	; (8005a98 <.text_263>)
 80057e0:	289d      	cmp	r0, #157	; 0x9d
 80057e2:	f248 082d 	movw	r8, #32813	; 0x802d
 80057e6:	d011      	beq.n	800580c <PE_SubStateMachine_VconnSwap+0x3e>
 80057e8:	d30f      	bcc.n	800580a <PE_SubStateMachine_VconnSwap+0x3c>
 80057ea:	289f      	cmp	r0, #159	; 0x9f
 80057ec:	d069      	beq.n	80058c2 <PE_SubStateMachine_VconnSwap+0xf4>
 80057ee:	d347      	bcc.n	8005880 <PE_SubStateMachine_VconnSwap+0xb2>
 80057f0:	28a1      	cmp	r0, #161	; 0xa1
 80057f2:	f000 809d 	beq.w	8005930 <PE_SubStateMachine_VconnSwap+0x162>
 80057f6:	f0c0 808c 	bcc.w	8005912 <PE_SubStateMachine_VconnSwap+0x144>
 80057fa:	28a3      	cmp	r0, #163	; 0xa3
 80057fc:	f000 80c9 	beq.w	8005992 <PE_SubStateMachine_VconnSwap+0x1c4>
 8005800:	f0c0 80ac 	bcc.w	800595c <PE_SubStateMachine_VconnSwap+0x18e>
 8005804:	28a4      	cmp	r0, #164	; 0xa4
 8005806:	f000 8134 	beq.w	8005a72 <PE_SubStateMachine_VconnSwap+0x2a4>
 800580a:	e142      	b.n	8005a92 <PE_SubStateMachine_VconnSwap+0x2c4>
 800580c:	6861      	ldr	r1, [r4, #4]
 800580e:	680a      	ldr	r2, [r1, #0]
 8005810:	6920      	ldr	r0, [r4, #16]
 8005812:	f402 52b8 	and.w	r2, r2, #5888	; 0x1700
 8005816:	f5b2 5f98 	cmp.w	r2, #4864	; 0x1300
 800581a:	d129      	bne.n	8005870 <PE_SubStateMachine_VconnSwap+0xa2>
 800581c:	68a1      	ldr	r1, [r4, #8]
 800581e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8005820:	f000 0001 	and.w	r0, r0, #1
 8005824:	4790      	blx	r2
 8005826:	280a      	cmp	r0, #10
 8005828:	d002      	beq.n	8005830 <PE_SubStateMachine_VconnSwap+0x62>
 800582a:	280d      	cmp	r0, #13
 800582c:	d008      	beq.n	8005840 <PE_SubStateMachine_VconnSwap+0x72>
 800582e:	e019      	b.n	8005864 <PE_SubStateMachine_VconnSwap+0x96>
 8005830:	209e      	movs	r0, #158	; 0x9e
 8005832:	f884 037f 	strb.w	r0, [r4, #895]	; 0x37f
 8005836:	6920      	ldr	r0, [r4, #16]
 8005838:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 800583c:	6120      	str	r0, [r4, #16]
 800583e:	e128      	b.n	8005a92 <PE_SubStateMachine_VconnSwap+0x2c4>
 8005840:	2100      	movs	r1, #0
 8005842:	9100      	str	r1, [sp, #0]
 8005844:	2303      	movs	r3, #3
 8005846:	220c      	movs	r2, #12
 8005848:	f7ff ff6d 	bl	8005726 <.text_257+0x4>
 800584c:	2800      	cmp	r0, #0
 800584e:	d1f6      	bne.n	800583e <PE_SubStateMachine_VconnSwap+0x70>
 8005850:	7830      	ldrb	r0, [r6, #0]
 8005852:	0781      	lsls	r1, r0, #30
 8005854:	d504      	bpl.n	8005860 <PE_SubStateMachine_VconnSwap+0x92>
 8005856:	f000 f93d 	bl	8005ad4 <.text_268>
 800585a:	2240      	movs	r2, #64	; 0x40
 800585c:	f7fe fffe 	bl	800485c <.text_203+0x2>
 8005860:	2140      	movs	r1, #64	; 0x40
 8005862:	e103      	b.n	8005a6c <PE_SubStateMachine_VconnSwap+0x29e>
 8005864:	f7ff ffa0 	bl	80057a8 <.text_259>
 8005868:	2204      	movs	r2, #4
 800586a:	f7ff ff5b 	bl	8005724 <.text_257+0x2>
 800586e:	e002      	b.n	8005876 <PE_SubStateMachine_VconnSwap+0xa8>
 8005870:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8005874:	6120      	str	r0, [r4, #16]
 8005876:	2003      	movs	r0, #3
 8005878:	f884 037f 	strb.w	r0, [r4, #895]	; 0x37f
 800587c:	2700      	movs	r7, #0
 800587e:	e108      	b.n	8005a92 <PE_SubStateMachine_VconnSwap+0x2c4>
 8005880:	2000      	movs	r0, #0
 8005882:	9000      	str	r0, [sp, #0]
 8005884:	239e      	movs	r3, #158	; 0x9e
 8005886:	f7ff ff4c 	bl	8005722 <.text_257>
 800588a:	2800      	cmp	r0, #0
 800588c:	d1f7      	bne.n	800587e <PE_SubStateMachine_VconnSwap+0xb0>
 800588e:	6860      	ldr	r0, [r4, #4]
 8005890:	6801      	ldr	r1, [r0, #0]
 8005892:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8005896:	b138      	cbz	r0, 80058a8 <PE_SubStateMachine_VconnSwap+0xda>
 8005898:	219f      	movs	r1, #159	; 0x9f
 800589a:	f884 137f 	strb.w	r1, [r4, #895]	; 0x37f
 800589e:	f248 0096 	movw	r0, #32918	; 0x8096
 80058a2:	8028      	strh	r0, [r5, #0]
 80058a4:	2796      	movs	r7, #150	; 0x96
 80058a6:	e002      	b.n	80058ae <PE_SubStateMachine_VconnSwap+0xe0>
 80058a8:	20a0      	movs	r0, #160	; 0xa0
 80058aa:	f884 037f 	strb.w	r0, [r4, #895]	; 0x37f
 80058ae:	7830      	ldrb	r0, [r6, #0]
 80058b0:	0781      	lsls	r1, r0, #30
 80058b2:	d504      	bpl.n	80058be <PE_SubStateMachine_VconnSwap+0xf0>
 80058b4:	f000 f90e 	bl	8005ad4 <.text_268>
 80058b8:	223f      	movs	r2, #63	; 0x3f
 80058ba:	f7fe ffcf 	bl	800485c <.text_203+0x2>
 80058be:	213f      	movs	r1, #63	; 0x3f
 80058c0:	e0d4      	b.n	8005a6c <PE_SubStateMachine_VconnSwap+0x29e>
 80058c2:	f000 f8eb 	bl	8005a9c <.text_264>
 80058c6:	f000 80c7 	beq.w	8005a58 <PE_SubStateMachine_VconnSwap+0x28a>
 80058ca:	780a      	ldrb	r2, [r1, #0]
 80058cc:	2a11      	cmp	r2, #17
 80058ce:	bf01      	itttt	eq
 80058d0:	89eb      	ldrheq	r3, [r5, #14]
 80058d2:	f24f 001f 	movweq	r0, #61471	; 0xf01f
 80058d6:	4003      	andeq	r3, r0
 80058d8:	2b06      	cmpeq	r3, #6
 80058da:	d119      	bne.n	8005910 <PE_SubStateMachine_VconnSwap+0x142>
 80058dc:	2214      	movs	r2, #20
 80058de:	700a      	strb	r2, [r1, #0]
 80058e0:	f7fe fd7f 	bl	80043e2 <.text_192>
 80058e4:	68a0      	ldr	r0, [r4, #8]
 80058e6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80058e8:	b112      	cbz	r2, 80058f0 <PE_SubStateMachine_VconnSwap+0x122>
 80058ea:	7c20      	ldrb	r0, [r4, #16]
 80058ec:	f7fc fd1c 	bl	8002328 <.text_78+0x2>
 80058f0:	f000 f8de 	bl	8005ab0 <.text_266>
 80058f4:	d505      	bpl.n	8005902 <PE_SubStateMachine_VconnSwap+0x134>
 80058f6:	68f6      	ldr	r6, [r6, #12]
 80058f8:	9700      	str	r7, [sp, #0]
 80058fa:	2300      	movs	r3, #0
 80058fc:	2242      	movs	r2, #66	; 0x42
 80058fe:	f7ff f95a 	bl	8004bb6 <.text_218>
 8005902:	f7fe fd5d 	bl	80043c0 <.text_189>
 8005906:	2142      	movs	r1, #66	; 0x42
 8005908:	f7fe fa64 	bl	8003dd4 <.text_164+0x6>
 800590c:	80af      	strh	r7, [r5, #4]
 800590e:	76a7      	strb	r7, [r4, #26]
 8005910:	e0bf      	b.n	8005a92 <PE_SubStateMachine_VconnSwap+0x2c4>
 8005912:	68a0      	ldr	r0, [r4, #8]
 8005914:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005916:	b112      	cbz	r2, 800591e <PE_SubStateMachine_VconnSwap+0x150>
 8005918:	f7ff f942 	bl	8004ba0 <.text_216>
 800591c:	4790      	blx	r2
 800591e:	20a1      	movs	r0, #161	; 0xa1
 8005920:	f884 037f 	strb.w	r0, [r4, #895]	; 0x37f
 8005924:	f8a5 8004 	strh.w	r8, [r5, #4]
 8005928:	2000      	movs	r0, #0
 800592a:	272d      	movs	r7, #45	; 0x2d
 800592c:	76a0      	strb	r0, [r4, #26]
 800592e:	e0b0      	b.n	8005a92 <PE_SubStateMachine_VconnSwap+0x2c4>
 8005930:	f7ff ff3a 	bl	80057a8 <.text_259>
 8005934:	2206      	movs	r2, #6
 8005936:	f7ff fef5 	bl	8005724 <.text_257+0x2>
 800593a:	2800      	cmp	r0, #0
 800593c:	d1f7      	bne.n	800592e <PE_SubStateMachine_VconnSwap+0x160>
 800593e:	6921      	ldr	r1, [r4, #16]
 8005940:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8005944:	6121      	str	r1, [r4, #16]
 8005946:	7830      	ldrb	r0, [r6, #0]
 8005948:	0782      	lsls	r2, r0, #30
 800594a:	d505      	bpl.n	8005958 <PE_SubStateMachine_VconnSwap+0x18a>
 800594c:	f7fb fdd0 	bl	80014f0 <.text_51>
 8005950:	68f5      	ldr	r5, [r6, #12]
 8005952:	2242      	movs	r2, #66	; 0x42
 8005954:	f7fe ff82 	bl	800485c <.text_203+0x2>
 8005958:	2142      	movs	r1, #66	; 0x42
 800595a:	e087      	b.n	8005a6c <PE_SubStateMachine_VconnSwap+0x29e>
 800595c:	2000      	movs	r0, #0
 800595e:	9000      	str	r0, [sp, #0]
 8005960:	23a3      	movs	r3, #163	; 0xa3
 8005962:	220b      	movs	r2, #11
 8005964:	f7ff fede 	bl	8005724 <.text_257+0x2>
 8005968:	2800      	cmp	r0, #0
 800596a:	d1e0      	bne.n	800592e <PE_SubStateMachine_VconnSwap+0x160>
 800596c:	6921      	ldr	r1, [r4, #16]
 800596e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005972:	6121      	str	r1, [r4, #16]
 8005974:	f248 001b 	movw	r0, #32795	; 0x801b
 8005978:	8028      	strh	r0, [r5, #0]
 800597a:	271b      	movs	r7, #27
 800597c:	7830      	ldrb	r0, [r6, #0]
 800597e:	0782      	lsls	r2, r0, #30
 8005980:	d505      	bpl.n	800598e <PE_SubStateMachine_VconnSwap+0x1c0>
 8005982:	f7fb fdb5 	bl	80014f0 <.text_51>
 8005986:	68f5      	ldr	r5, [r6, #12]
 8005988:	223e      	movs	r2, #62	; 0x3e
 800598a:	f7fe ff67 	bl	800485c <.text_203+0x2>
 800598e:	213e      	movs	r1, #62	; 0x3e
 8005990:	e06c      	b.n	8005a6c <PE_SubStateMachine_VconnSwap+0x29e>
 8005992:	7808      	ldrb	r0, [r1, #0]
 8005994:	2811      	cmp	r0, #17
 8005996:	bf04      	itt	eq
 8005998:	89e8      	ldrheq	r0, [r5, #14]
 800599a:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 800599e:	d158      	bne.n	8005a52 <PE_SubStateMachine_VconnSwap+0x284>
 80059a0:	f000 001f 	and.w	r0, r0, #31
 80059a4:	2803      	cmp	r0, #3
 80059a6:	d006      	beq.n	80059b6 <PE_SubStateMachine_VconnSwap+0x1e8>
 80059a8:	2804      	cmp	r0, #4
 80059aa:	d028      	beq.n	80059fe <PE_SubStateMachine_VconnSwap+0x230>
 80059ac:	280c      	cmp	r0, #12
 80059ae:	d01a      	beq.n	80059e6 <PE_SubStateMachine_VconnSwap+0x218>
 80059b0:	2810      	cmp	r0, #16
 80059b2:	d030      	beq.n	8005a16 <PE_SubStateMachine_VconnSwap+0x248>
 80059b4:	e04d      	b.n	8005a52 <PE_SubStateMachine_VconnSwap+0x284>
 80059b6:	6860      	ldr	r0, [r4, #4]
 80059b8:	6802      	ldr	r2, [r0, #0]
 80059ba:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 80059be:	2800      	cmp	r0, #0
 80059c0:	bf19      	ittee	ne
 80059c2:	229f      	movne	r2, #159	; 0x9f
 80059c4:	f884 237f 	strbne.w	r2, [r4, #895]	; 0x37f
 80059c8:	20a0      	moveq	r0, #160	; 0xa0
 80059ca:	f884 037f 	strbeq.w	r0, [r4, #895]	; 0x37f
 80059ce:	f000 f87a 	bl	8005ac6 <.text_267>
 80059d2:	7830      	ldrb	r0, [r6, #0]
 80059d4:	0781      	lsls	r1, r0, #30
 80059d6:	d504      	bpl.n	80059e2 <PE_SubStateMachine_VconnSwap+0x214>
 80059d8:	f000 f882 	bl	8005ae0 <.text_269>
 80059dc:	223f      	movs	r2, #63	; 0x3f
 80059de:	f7ff f843 	bl	8004a68 <.text_211+0x2>
 80059e2:	213f      	movs	r1, #63	; 0x3f
 80059e4:	e033      	b.n	8005a4e <PE_SubStateMachine_VconnSwap+0x280>
 80059e6:	f000 f882 	bl	8005aee <.text_270>
 80059ea:	7830      	ldrb	r0, [r6, #0]
 80059ec:	0781      	lsls	r1, r0, #30
 80059ee:	d504      	bpl.n	80059fa <PE_SubStateMachine_VconnSwap+0x22c>
 80059f0:	f000 f858 	bl	8005aa4 <.text_265>
 80059f4:	2240      	movs	r2, #64	; 0x40
 80059f6:	f7ff f837 	bl	8004a68 <.text_211+0x2>
 80059fa:	2140      	movs	r1, #64	; 0x40
 80059fc:	e027      	b.n	8005a4e <PE_SubStateMachine_VconnSwap+0x280>
 80059fe:	f000 f876 	bl	8005aee <.text_270>
 8005a02:	7830      	ldrb	r0, [r6, #0]
 8005a04:	0781      	lsls	r1, r0, #30
 8005a06:	d504      	bpl.n	8005a12 <PE_SubStateMachine_VconnSwap+0x244>
 8005a08:	f000 f84c 	bl	8005aa4 <.text_265>
 8005a0c:	2241      	movs	r2, #65	; 0x41
 8005a0e:	f7ff f82b 	bl	8004a68 <.text_211+0x2>
 8005a12:	2141      	movs	r1, #65	; 0x41
 8005a14:	e01b      	b.n	8005a4e <PE_SubStateMachine_VconnSwap+0x280>
 8005a16:	6860      	ldr	r0, [r4, #4]
 8005a18:	6802      	ldr	r2, [r0, #0]
 8005a1a:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8005a1e:	b918      	cbnz	r0, 8005a28 <PE_SubStateMachine_VconnSwap+0x25a>
 8005a20:	22a4      	movs	r2, #164	; 0xa4
 8005a22:	f884 237f 	strb.w	r2, [r4, #895]	; 0x37f
 8005a26:	e007      	b.n	8005a38 <PE_SubStateMachine_VconnSwap+0x26a>
 8005a28:	6920      	ldr	r0, [r4, #16]
 8005a2a:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8005a2e:	2203      	movs	r2, #3
 8005a30:	6120      	str	r0, [r4, #16]
 8005a32:	f884 237f 	strb.w	r2, [r4, #895]	; 0x37f
 8005a36:	2700      	movs	r7, #0
 8005a38:	f000 f845 	bl	8005ac6 <.text_267>
 8005a3c:	7830      	ldrb	r0, [r6, #0]
 8005a3e:	0781      	lsls	r1, r0, #30
 8005a40:	d504      	bpl.n	8005a4c <PE_SubStateMachine_VconnSwap+0x27e>
 8005a42:	f000 f84d 	bl	8005ae0 <.text_269>
 8005a46:	2243      	movs	r2, #67	; 0x43
 8005a48:	f7ff f80e 	bl	8004a68 <.text_211+0x2>
 8005a4c:	2143      	movs	r1, #67	; 0x43
 8005a4e:	f7fe f9be 	bl	8003dce <.text_164>
 8005a52:	f000 f823 	bl	8005a9c <.text_264>
 8005a56:	d11c      	bne.n	8005a92 <PE_SubStateMachine_VconnSwap+0x2c4>
 8005a58:	f000 f82a 	bl	8005ab0 <.text_266>
 8005a5c:	d505      	bpl.n	8005a6a <PE_SubStateMachine_VconnSwap+0x29c>
 8005a5e:	68f5      	ldr	r5, [r6, #12]
 8005a60:	9700      	str	r7, [sp, #0]
 8005a62:	2300      	movs	r3, #0
 8005a64:	221c      	movs	r2, #28
 8005a66:	f7fe fef9 	bl	800485c <.text_203+0x2>
 8005a6a:	211c      	movs	r1, #28
 8005a6c:	f7fe f9af 	bl	8003dce <.text_164>
 8005a70:	e00f      	b.n	8005a92 <PE_SubStateMachine_VconnSwap+0x2c4>
 8005a72:	68a0      	ldr	r0, [r4, #8]
 8005a74:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005a76:	b112      	cbz	r2, 8005a7e <PE_SubStateMachine_VconnSwap+0x2b0>
 8005a78:	f7ff f892 	bl	8004ba0 <.text_216>
 8005a7c:	4790      	blx	r2
 8005a7e:	6920      	ldr	r0, [r4, #16]
 8005a80:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8005a84:	2103      	movs	r1, #3
 8005a86:	6120      	str	r0, [r4, #16]
 8005a88:	f884 137f 	strb.w	r1, [r4, #895]	; 0x37f
 8005a8c:	f8a5 8004 	strh.w	r8, [r5, #4]
 8005a90:	272d      	movs	r7, #45	; 0x2d
 8005a92:	4638      	mov	r0, r7
 8005a94:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

08005a98 <.text_263>:
 8005a98:	200000d0 	.word	0x200000d0

08005a9c <.text_264>:
 8005a9c:	8828      	ldrh	r0, [r5, #0]
 8005a9e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005aa2:	4770      	bx	lr

08005aa4 <.text_265>:
 8005aa4:	9700      	str	r7, [sp, #0]
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	7c21      	ldrb	r1, [r4, #16]
 8005aaa:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8005aae:	4770      	bx	lr

08005ab0 <.text_266>:
 8005ab0:	6921      	ldr	r1, [r4, #16]
 8005ab2:	2003      	movs	r0, #3
 8005ab4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8005ab8:	f884 037f 	strb.w	r0, [r4, #895]	; 0x37f
 8005abc:	6121      	str	r1, [r4, #16]
 8005abe:	2700      	movs	r7, #0
 8005ac0:	7830      	ldrb	r0, [r6, #0]
 8005ac2:	0782      	lsls	r2, r0, #30
 8005ac4:	4770      	bx	lr

08005ac6 <.text_267>:
 8005ac6:	2014      	movs	r0, #20
 8005ac8:	7008      	strb	r0, [r1, #0]
 8005aca:	7c20      	ldrb	r0, [r4, #16]
 8005acc:	f000 0001 	and.w	r0, r0, #1
 8005ad0:	f000 bada 	b.w	8006088 <USBPD_PRL_EnableRX>

08005ad4 <.text_268>:
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	9100      	str	r1, [sp, #0]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	7c21      	ldrb	r1, [r4, #16]
 8005adc:	68f5      	ldr	r5, [r6, #12]
 8005ade:	4770      	bx	lr

08005ae0 <.text_269>:
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	9100      	str	r1, [sp, #0]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	7c21      	ldrb	r1, [r4, #16]
 8005ae8:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8005aec:	4770      	bx	lr

08005aee <.text_270>:
 8005aee:	6920      	ldr	r0, [r4, #16]
 8005af0:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8005af4:	6120      	str	r0, [r4, #16]
 8005af6:	2203      	movs	r2, #3
 8005af8:	f884 237f 	strb.w	r2, [r4, #895]	; 0x37f
 8005afc:	2014      	movs	r0, #20
 8005afe:	7008      	strb	r0, [r1, #0]
 8005b00:	2700      	movs	r7, #0
 8005b02:	7c20      	ldrb	r0, [r4, #16]
 8005b04:	f000 0001 	and.w	r0, r0, #1
 8005b08:	f000 babe 	b.w	8006088 <USBPD_PRL_EnableRX>

08005b0c <USBPD_PE_ExecFastRoleSwapSignalling>:
 8005b0c:	f000 b8b6 	b.w	8005c7c <USBPD_PRL_FastRoleSwapSignalling>

08005b10 <USBPD_PRL_TimerCounter>:
 8005b10:	f8df 1b80 	ldr.w	r1, [pc, #2944]	; 8006694 <.text_42>
 8005b14:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8005b18:	b081      	sub	sp, #4
 8005b1a:	684a      	ldr	r2, [r1, #4]
 8005b1c:	7a90      	ldrb	r0, [r2, #10]
 8005b1e:	b108      	cbz	r0, 8005b24 <USBPD_PRL_TimerCounter+0x14>
 8005b20:	1e40      	subs	r0, r0, #1
 8005b22:	7290      	strb	r0, [r2, #10]
 8005b24:	6849      	ldr	r1, [r1, #4]
 8005b26:	8f88      	ldrh	r0, [r1, #60]	; 0x3c
 8005b28:	b108      	cbz	r0, 8005b2e <USBPD_PRL_TimerCounter+0x1e>
 8005b2a:	1e40      	subs	r0, r0, #1
 8005b2c:	8788      	strh	r0, [r1, #60]	; 0x3c
 8005b2e:	b001      	add	sp, #4
 8005b30:	4770      	bx	lr

08005b32 <USBPD_PRL_Init>:
 8005b32:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b36:	2801      	cmp	r0, #1
 8005b38:	4680      	mov	r8, r0
 8005b3a:	4689      	mov	r9, r1
 8005b3c:	4693      	mov	fp, r2
 8005b3e:	469a      	mov	sl, r3
 8005b40:	d84b      	bhi.n	8005bda <USBPD_PRL_Init+0xa8>
 8005b42:	2040      	movs	r0, #64	; 0x40
 8005b44:	f00f ffd6 	bl	8015af4 <malloc>
 8005b48:	f8df 1b48 	ldr.w	r1, [pc, #2888]	; 8006694 <.text_42>
 8005b4c:	eb01 0688 	add.w	r6, r1, r8, lsl #2
 8005b50:	6070      	str	r0, [r6, #4]
 8005b52:	b908      	cbnz	r0, 8005b58 <USBPD_PRL_Init+0x26>
 8005b54:	2016      	movs	r0, #22
 8005b56:	e041      	b.n	8005bdc <USBPD_PRL_Init+0xaa>
 8005b58:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8005b5a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005b5c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005b5e:	2140      	movs	r1, #64	; 0x40
 8005b60:	f00f ff98 	bl	8015a94 <__aeabi_memclr>
 8005b64:	6870      	ldr	r0, [r6, #4]
 8005b66:	2100      	movs	r1, #0
 8005b68:	7101      	strb	r1, [r0, #4]
 8005b6a:	7141      	strb	r1, [r0, #5]
 8005b6c:	6007      	str	r7, [r0, #0]
 8005b6e:	7281      	strb	r1, [r0, #10]
 8005b70:	2000      	movs	r0, #0
 8005b72:	6871      	ldr	r1, [r6, #4]
 8005b74:	72c8      	strb	r0, [r1, #11]
 8005b76:	220f      	movs	r2, #15
 8005b78:	6871      	ldr	r1, [r6, #4]
 8005b7a:	7308      	strb	r0, [r1, #12]
 8005b7c:	6871      	ldr	r1, [r6, #4]
 8005b7e:	7348      	strb	r0, [r1, #13]
 8005b80:	2103      	movs	r1, #3
 8005b82:	6870      	ldr	r0, [r6, #4]
 8005b84:	f000 f9e9 	bl	8005f5a <.text_18+0x2>
 8005b88:	6870      	ldr	r0, [r6, #4]
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	7381      	strb	r1, [r0, #14]
 8005b8e:	f64f 60ff 	movw	r0, #65279	; 0xfeff
 8005b92:	6871      	ldr	r1, [r6, #4]
 8005b94:	8b0a      	ldrh	r2, [r1, #24]
 8005b96:	f8c1 b034 	str.w	fp, [r1, #52]	; 0x34
 8005b9a:	4002      	ands	r2, r0
 8005b9c:	830a      	strh	r2, [r1, #24]
 8005b9e:	f64f 70df 	movw	r0, #65503	; 0xffdf
 8005ba2:	4002      	ands	r2, r0
 8005ba4:	830a      	strh	r2, [r1, #24]
 8005ba6:	f64f 60ff 	movw	r0, #65279	; 0xfeff
 8005baa:	8b4a      	ldrh	r2, [r1, #26]
 8005bac:	4002      	ands	r2, r0
 8005bae:	834a      	strh	r2, [r1, #26]
 8005bb0:	f64f 70df 	movw	r0, #65503	; 0xffdf
 8005bb4:	4002      	ands	r2, r0
 8005bb6:	834a      	strh	r2, [r1, #26]
 8005bb8:	2000      	movs	r0, #0
 8005bba:	630d      	str	r5, [r1, #48]	; 0x30
 8005bbc:	62cc      	str	r4, [r1, #44]	; 0x2c
 8005bbe:	73c8      	strb	r0, [r1, #15]
 8005bc0:	f8c1 9038 	str.w	r9, [r1, #56]	; 0x38
 8005bc4:	2001      	movs	r0, #1
 8005bc6:	9000      	str	r0, [sp, #0]
 8005bc8:	4653      	mov	r3, sl
 8005bca:	6870      	ldr	r0, [r6, #4]
 8005bcc:	f60f 21cc 	addw	r1, pc, #2764	; 0xacc
 8005bd0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005bd2:	4640      	mov	r0, r8
 8005bd4:	f00d fd0a 	bl	80135ec <USBPD_PHY_Init>
 8005bd8:	e000      	b.n	8005bdc <USBPD_PRL_Init+0xaa>
 8005bda:	2002      	movs	r0, #2
 8005bdc:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005be0 <USBPD_PRL_GetMemoryConsumption>:
 8005be0:	2080      	movs	r0, #128	; 0x80
 8005be2:	4770      	bx	lr

08005be4 <USBPD_PRL_SetHeader>:
 8005be4:	b510      	push	{r4, lr}
 8005be6:	f8df 4aac 	ldr.w	r4, [pc, #2732]	; 8006694 <.text_42>
 8005bea:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8005bee:	6840      	ldr	r0, [r0, #4]
 8005bf0:	8ac4      	ldrh	r4, [r0, #22]
 8005bf2:	f361 2408 	bfi	r4, r1, #8, #1
 8005bf6:	82c4      	strh	r4, [r0, #22]
 8005bf8:	8ac1      	ldrh	r1, [r0, #22]
 8005bfa:	f362 1145 	bfi	r1, r2, #5, #1
 8005bfe:	82c1      	strh	r1, [r0, #22]
 8005c00:	8ac1      	ldrh	r1, [r0, #22]
 8005c02:	f363 1187 	bfi	r1, r3, #6, #2
 8005c06:	82c1      	strh	r1, [r0, #22]
 8005c08:	bd10      	pop	{r4, pc}

08005c0a <USBPD_PRL_SetHeaderPowerRole>:
 8005c0a:	f8df 2a88 	ldr.w	r2, [pc, #2696]	; 8006694 <.text_42>
 8005c0e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8005c12:	6840      	ldr	r0, [r0, #4]
 8005c14:	8ac2      	ldrh	r2, [r0, #22]
 8005c16:	f361 2208 	bfi	r2, r1, #8, #1
 8005c1a:	82c2      	strh	r2, [r0, #22]
 8005c1c:	4770      	bx	lr

08005c1e <USBPD_PRL_SetHeaderDataRole>:
 8005c1e:	f8df 2a74 	ldr.w	r2, [pc, #2676]	; 8006694 <.text_42>
 8005c22:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8005c26:	6840      	ldr	r0, [r0, #4]
 8005c28:	8ac2      	ldrh	r2, [r0, #22]
 8005c2a:	f361 1245 	bfi	r2, r1, #5, #1
 8005c2e:	82c2      	strh	r2, [r0, #22]
 8005c30:	4770      	bx	lr

08005c32 <USBPD_PRL_SetHeaderSpecification>:
 8005c32:	f8df 2a60 	ldr.w	r2, [pc, #2656]	; 8006694 <.text_42>
 8005c36:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8005c3a:	6840      	ldr	r0, [r0, #4]
 8005c3c:	8ac2      	ldrh	r2, [r0, #22]
 8005c3e:	f361 1287 	bfi	r2, r1, #6, #2
 8005c42:	82c2      	strh	r2, [r0, #22]
 8005c44:	4770      	bx	lr

08005c46 <USBPD_PRL_CBL_SetHeaderSpecification>:
 8005c46:	f8df 2a4c 	ldr.w	r2, [pc, #2636]	; 8006694 <.text_42>
 8005c4a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8005c4e:	6840      	ldr	r0, [r0, #4]
 8005c50:	8b03      	ldrh	r3, [r0, #24]
 8005c52:	8b42      	ldrh	r2, [r0, #26]
 8005c54:	f361 1387 	bfi	r3, r1, #6, #2
 8005c58:	f361 1287 	bfi	r2, r1, #6, #2
 8005c5c:	8303      	strh	r3, [r0, #24]
 8005c5e:	8342      	strh	r2, [r0, #26]
 8005c60:	4770      	bx	lr

08005c62 <USBPD_PRL_SRCSetSinkNG>:
 8005c62:	f00d bd82 	b.w	801376a <USBPD_PHY_SetResistor_SinkTxNG>

08005c66 <USBPD_PRL_SRCReleaseSinkNG>:
 8005c66:	b510      	push	{r4, lr}
 8005c68:	4604      	mov	r4, r0
 8005c6a:	f00d fd8b 	bl	8013784 <USBPD_PHY_SetResistor_SinkTxOK>
 8005c6e:	f000 fa14 	bl	800609a <.text_26>
 8005c72:	2006      	movs	r0, #6
 8005c74:	7108      	strb	r0, [r1, #4]
 8005c76:	bd10      	pop	{r4, pc}

08005c78 <USBPD_PRL_IsResistor_SinkTxOK>:
 8005c78:	f00d bda6 	b.w	80137c8 <USBPD_PHY_IsResistor_SinkTxOk>

08005c7c <USBPD_PRL_FastRoleSwapSignalling>:
 8005c7c:	f00d bdb2 	b.w	80137e4 <USBPD_PHY_FastRoleSwapSignalling>

08005c80 <USBPD_PRL_CableCapable>:
 8005c80:	2901      	cmp	r1, #1
 8005c82:	d106      	bne.n	8005c92 <USBPD_PRL_CableCapable+0x12>
 8005c84:	f8df 1a0c 	ldr.w	r1, [pc, #2572]	; 8006694 <.text_42>
 8005c88:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8005c8c:	684a      	ldr	r2, [r1, #4]
 8005c8e:	6811      	ldr	r1, [r2, #0]
 8005c90:	e000      	b.n	8005c94 <USBPD_PRL_CableCapable+0x14>
 8005c92:	2101      	movs	r1, #1
 8005c94:	f00d bd84 	b.w	80137a0 <USBPD_PHY_SOPSupported>

08005c98 <USBPD_PRL_SendMessage>:
 8005c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c9c:	4680      	mov	r8, r0
 8005c9e:	f8df 79f4 	ldr.w	r7, [pc, #2548]	; 8006694 <.text_42>
 8005ca2:	eb07 0588 	add.w	r5, r7, r8, lsl #2
 8005ca6:	461c      	mov	r4, r3
 8005ca8:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8005cac:	f89e 3004 	ldrb.w	r3, [lr, #4]
 8005cb0:	2603      	movs	r6, #3
 8005cb2:	2b06      	cmp	r3, #6
 8005cb4:	4694      	mov	ip, r2
 8005cb6:	dd02      	ble.n	8005cbe <USBPD_PRL_SendMessage+0x26>
 8005cb8:	f89e 2009 	ldrb.w	r2, [lr, #9]
 8005cbc:	b11a      	cbz	r2, 8005cc6 <USBPD_PRL_SendMessage+0x2e>
 8005cbe:	f89e 3010 	ldrb.w	r3, [lr, #16]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d102      	bne.n	8005ccc <USBPD_PRL_SendMessage+0x34>
 8005cc6:	220e      	movs	r2, #14
 8005cc8:	f88e 2004 	strb.w	r2, [lr, #4]
 8005ccc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cd0:	f89e 0004 	ldrb.w	r0, [lr, #4]
 8005cd4:	280f      	cmp	r0, #15
 8005cd6:	4689      	mov	r9, r1
 8005cd8:	469a      	mov	sl, r3
 8005cda:	f200 812b 	bhi.w	8005f34 <USBPD_PRL_SendMessage+0x29c>
 8005cde:	e8df f010 	tbh	[pc, r0, lsl #1]
 8005ce2:	0010      	.short	0x0010
 8005ce4:	00200017 	.word	0x00200017
 8005ce8:	00280129 	.word	0x00280129
 8005cec:	00310041 	.word	0x00310041
 8005cf0:	00a00096 	.word	0x00a00096
 8005cf4:	00bb00a6 	.word	0x00bb00a6
 8005cf8:	00e000d0 	.word	0x00e000d0
 8005cfc:	01210129 	.word	0x01210129
 8005d00:	00fe      	.short	0x00fe
 8005d02:	4640      	mov	r0, r8
 8005d04:	f00d fcdb 	bl	80136be <USBPD_PHY_Reset>
 8005d08:	6869      	ldr	r1, [r5, #4]
 8005d0a:	2006      	movs	r0, #6
 8005d0c:	7108      	strb	r0, [r1, #4]
 8005d0e:	e118      	b.n	8005f42 <USBPD_PRL_SendMessage+0x2aa>
 8005d10:	4640      	mov	r0, r8
 8005d12:	f00d fd2a 	bl	801376a <USBPD_PHY_SetResistor_SinkTxNG>
 8005d16:	6868      	ldr	r0, [r5, #4]
 8005d18:	2102      	movs	r1, #2
 8005d1a:	7101      	strb	r1, [r0, #4]
 8005d1c:	2111      	movs	r1, #17
 8005d1e:	8781      	strh	r1, [r0, #60]	; 0x3c
 8005d20:	e10f      	b.n	8005f42 <USBPD_PRL_SendMessage+0x2aa>
 8005d22:	2a01      	cmp	r2, #1
 8005d24:	d1f0      	bne.n	8005d08 <USBPD_PRL_SendMessage+0x70>
 8005d26:	f8be 003c 	ldrh.w	r0, [lr, #60]	; 0x3c
 8005d2a:	b948      	cbnz	r0, 8005d40 <USBPD_PRL_SendMessage+0xa8>
 8005d2c:	6868      	ldr	r0, [r5, #4]
 8005d2e:	2105      	movs	r1, #5
 8005d30:	e0cb      	b.n	8005eca <USBPD_PRL_SendMessage+0x232>
 8005d32:	2a02      	cmp	r2, #2
 8005d34:	d1e8      	bne.n	8005d08 <USBPD_PRL_SendMessage+0x70>
 8005d36:	4640      	mov	r0, r8
 8005d38:	f00d fd46 	bl	80137c8 <USBPD_PHY_IsResistor_SinkTxOk>
 8005d3c:	2801      	cmp	r0, #1
 8005d3e:	d0f5      	beq.n	8005d2c <USBPD_PRL_SendMessage+0x94>
 8005d40:	2009      	movs	r0, #9
 8005d42:	e0ff      	b.n	8005f44 <USBPD_PRL_SendMessage+0x2ac>
 8005d44:	f10e 0016 	add.w	r0, lr, #22
 8005d48:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8005d4c:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8005d50:	2802      	cmp	r0, #2
 8005d52:	d1eb      	bne.n	8005d2c <USBPD_PRL_SendMessage+0x94>
 8005d54:	2a01      	cmp	r2, #1
 8005d56:	bf08      	it	eq
 8005d58:	2001      	moveq	r0, #1
 8005d5a:	d002      	beq.n	8005d62 <USBPD_PRL_SendMessage+0xca>
 8005d5c:	2a02      	cmp	r2, #2
 8005d5e:	d1e5      	bne.n	8005d2c <USBPD_PRL_SendMessage+0x94>
 8005d60:	2004      	movs	r0, #4
 8005d62:	e08b      	b.n	8005e7c <USBPD_PRL_SendMessage+0x1e4>
 8005d64:	20ff      	movs	r0, #255	; 0xff
 8005d66:	f10e 0216 	add.w	r2, lr, #22
 8005d6a:	f88e 0009 	strb.w	r0, [lr, #9]
 8005d6e:	f10e 0016 	add.w	r0, lr, #22
 8005d72:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8005d76:	f36c 0204 	bfi	r2, ip, #0, #5
 8005d7a:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8005d7e:	f3c2 000e 	ubfx	r0, r2, #0, #15
 8005d82:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 8005d86:	ea40 30c2 	orr.w	r0, r0, r2, lsl #15
 8005d8a:	f10e 0216 	add.w	r2, lr, #22
 8005d8e:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 8005d92:	2000      	movs	r0, #0
 8005d94:	f88e 000e 	strb.w	r0, [lr, #14]
 8005d98:	686a      	ldr	r2, [r5, #4]
 8005d9a:	f102 0016 	add.w	r0, r2, #22
 8005d9e:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8005da2:	0bc0      	lsrs	r0, r0, #15
 8005da4:	d015      	beq.n	8005dd2 <USBPD_PRL_SendMessage+0x13a>
 8005da6:	78a0      	ldrb	r0, [r4, #2]
 8005da8:	78e4      	ldrb	r4, [r4, #3]
 8005daa:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 8005dae:	8410      	strh	r0, [r2, #32]
 8005db0:	8c10      	ldrh	r0, [r2, #32]
 8005db2:	f3c0 2480 	ubfx	r4, r0, #10, #1
 8005db6:	b9cc      	cbnz	r4, 8005dec <USBPD_PRL_SendMessage+0x154>
 8005db8:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 8005dbc:	b9c0      	cbnz	r0, 8005df0 <USBPD_PRL_SendMessage+0x158>
 8005dbe:	1f18      	subs	r0, r3, #4
 8005dc0:	84d0      	strh	r0, [r2, #38]	; 0x26
 8005dc2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8005dc6:	8c13      	ldrh	r3, [r2, #32]
 8005dc8:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 8005dcc:	4318      	orrs	r0, r3
 8005dce:	8410      	strh	r0, [r2, #32]
 8005dd0:	e00e      	b.n	8005df0 <USBPD_PRL_SendMessage+0x158>
 8005dd2:	f1aa 0002 	sub.w	r0, sl, #2
 8005dd6:	0883      	lsrs	r3, r0, #2
 8005dd8:	f102 0016 	add.w	r0, r2, #22
 8005ddc:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8005de0:	f363 300e 	bfi	r0, r3, #12, #3
 8005de4:	f102 0316 	add.w	r3, r2, #22
 8005de8:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8005dec:	2000      	movs	r0, #0
 8005dee:	84d0      	strh	r0, [r2, #38]	; 0x26
 8005df0:	f1bc 0f0d 	cmp.w	ip, #13
 8005df4:	bf02      	ittt	eq
 8005df6:	f102 0016 	addeq.w	r0, r2, #22
 8005dfa:	f830 0011 	ldrheq.w	r0, [r0, r1, lsl #1]
 8005dfe:	f410 4f70 	tsteq.w	r0, #61440	; 0xf000
 8005e02:	bf19      	ittee	ne
 8005e04:	2008      	movne	r0, #8
 8005e06:	7110      	strbne	r0, [r2, #4]
 8005e08:	2107      	moveq	r1, #7
 8005e0a:	7111      	strbeq	r1, [r2, #4]
 8005e0c:	e099      	b.n	8005f42 <USBPD_PRL_SendMessage+0x2aa>
 8005e0e:	4471      	add	r1, lr
 8005e10:	2000      	movs	r0, #0
 8005e12:	72c8      	strb	r0, [r1, #11]
 8005e14:	220f      	movs	r2, #15
 8005e16:	6868      	ldr	r0, [r5, #4]
 8005e18:	f000 f89e 	bl	8005f58 <.text_18>
 8005e1c:	6868      	ldr	r0, [r5, #4]
 8005e1e:	2108      	movs	r1, #8
 8005e20:	e053      	b.n	8005eca <USBPD_PRL_SendMessage+0x232>
 8005e22:	4622      	mov	r2, r4
 8005e24:	4640      	mov	r0, r8
 8005e26:	f000 f947 	bl	80060b8 <PRL_StateTXConstructMessage>
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	e089      	b.n	8005f42 <USBPD_PRL_SendMessage+0x2aa>
 8005e2e:	f1b8 0f00 	cmp.w	r8, #0
 8005e32:	bf0c      	ite	eq
 8005e34:	2001      	moveq	r0, #1
 8005e36:	2003      	movne	r0, #3
 8005e38:	f00e fe74 	bl	8014b24 <USBPD_TIM_IsExpired>
 8005e3c:	2801      	cmp	r0, #1
 8005e3e:	d1f5      	bne.n	8005e2c <USBPD_PRL_SendMessage+0x194>
 8005e40:	f3ef 8010 	mrs	r0, PRIMASK
 8005e44:	b672      	cpsid	i
 8005e46:	6869      	ldr	r1, [r5, #4]
 8005e48:	790a      	ldrb	r2, [r1, #4]
 8005e4a:	2a09      	cmp	r2, #9
 8005e4c:	bf04      	itt	eq
 8005e4e:	230c      	moveq	r3, #12
 8005e50:	710b      	strbeq	r3, [r1, #4]
 8005e52:	f380 8810 	msr	PRIMASK, r0
 8005e56:	e074      	b.n	8005f42 <USBPD_PRL_SendMessage+0x2aa>
 8005e58:	eb0e 0001 	add.w	r0, lr, r1
 8005e5c:	f8be 201e 	ldrh.w	r2, [lr, #30]
 8005e60:	7ac1      	ldrb	r1, [r0, #11]
 8005e62:	0a53      	lsrs	r3, r2, #9
 8005e64:	f003 0307 	and.w	r3, r3, #7
 8005e68:	4299      	cmp	r1, r3
 8005e6a:	bf04      	itt	eq
 8005e6c:	f002 021f 	andeq.w	r2, r2, #31
 8005e70:	2a01      	cmpeq	r2, #1
 8005e72:	d102      	bne.n	8005e7a <USBPD_PRL_SendMessage+0x1e2>
 8005e74:	f000 f868 	bl	8005f48 <.text_17>
 8005e78:	e011      	b.n	8005e9e <USBPD_PRL_SendMessage+0x206>
 8005e7a:	200c      	movs	r0, #12
 8005e7c:	f88e 0004 	strb.w	r0, [lr, #4]
 8005e80:	e05f      	b.n	8005f42 <USBPD_PRL_SendMessage+0x2aa>
 8005e82:	eb0e 0001 	add.w	r0, lr, r1
 8005e86:	7ac1      	ldrb	r1, [r0, #11]
 8005e88:	f000 f85e 	bl	8005f48 <.text_17>
 8005e8c:	f248 70ff 	movw	r0, #34815	; 0x87ff
 8005e90:	8c0a      	ldrh	r2, [r1, #32]
 8005e92:	4002      	ands	r2, r0
 8005e94:	840a      	strh	r2, [r1, #32]
 8005e96:	f64f 30ff 	movw	r0, #64511	; 0xfbff
 8005e9a:	4002      	ands	r2, r0
 8005e9c:	840a      	strh	r2, [r1, #32]
 8005e9e:	2605      	movs	r6, #5
 8005ea0:	e04f      	b.n	8005f42 <USBPD_PRL_SendMessage+0x2aa>
 8005ea2:	f89e 000e 	ldrb.w	r0, [lr, #14]
 8005ea6:	1c40      	adds	r0, r0, #1
 8005ea8:	f88e 000e 	strb.w	r0, [lr, #14]
 8005eac:	6868      	ldr	r0, [r5, #4]
 8005eae:	f100 0216 	add.w	r2, r0, #22
 8005eb2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8005eb6:	7b82      	ldrb	r2, [r0, #14]
 8005eb8:	f3c1 1181 	ubfx	r1, r1, #6, #2
 8005ebc:	2901      	cmp	r1, #1
 8005ebe:	bf0c      	ite	eq
 8005ec0:	2103      	moveq	r1, #3
 8005ec2:	2102      	movne	r1, #2
 8005ec4:	4291      	cmp	r1, r2
 8005ec6:	d302      	bcc.n	8005ece <USBPD_PRL_SendMessage+0x236>
 8005ec8:	210f      	movs	r1, #15
 8005eca:	7101      	strb	r1, [r0, #4]
 8005ecc:	e039      	b.n	8005f42 <USBPD_PRL_SendMessage+0x2aa>
 8005ece:	2106      	movs	r1, #6
 8005ed0:	7101      	strb	r1, [r0, #4]
 8005ed2:	4640      	mov	r0, r8
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	f7ff fed3 	bl	8005c80 <USBPD_PRL_CableCapable>
 8005eda:	2607      	movs	r6, #7
 8005edc:	e031      	b.n	8005f42 <USBPD_PRL_SendMessage+0x2aa>
 8005ede:	2009      	movs	r0, #9
 8005ee0:	f88e 0004 	strb.w	r0, [lr, #4]
 8005ee4:	f242 7110 	movw	r1, #10000	; 0x2710
 8005ee8:	2002      	movs	r0, #2
 8005eea:	f88e 0014 	strb.w	r0, [lr, #20]
 8005eee:	ea5f 0008 	movs.w	r0, r8
 8005ef2:	bf0c      	ite	eq
 8005ef4:	2001      	moveq	r0, #1
 8005ef6:	2003      	movne	r0, #3
 8005ef8:	f00e fda2 	bl	8014a40 <USBPD_TIM_Start>
 8005efc:	f1b9 0f00 	cmp.w	r9, #0
 8005f00:	d001      	beq.n	8005f06 <USBPD_PRL_SendMessage+0x26e>
 8005f02:	f000 f99f 	bl	8006244 <.text_30>
 8005f06:	883b      	ldrh	r3, [r7, #0]
 8005f08:	f000 f997 	bl	800623a <.text_29>
 8005f0c:	f8df 0788 	ldr.w	r0, [pc, #1928]	; 8006698 <.text_43>
 8005f10:	6807      	ldr	r7, [r0, #0]
 8005f12:	b1b7      	cbz	r7, 8005f42 <USBPD_PRL_SendMessage+0x2aa>
 8005f14:	f8cd a000 	str.w	sl, [sp]
 8005f18:	4623      	mov	r3, r4
 8005f1a:	464a      	mov	r2, r9
 8005f1c:	4641      	mov	r1, r8
 8005f1e:	2002      	movs	r0, #2
 8005f20:	47b8      	blx	r7
 8005f22:	e00e      	b.n	8005f42 <USBPD_PRL_SendMessage+0x2aa>
 8005f24:	2006      	movs	r0, #6
 8005f26:	f88e 0004 	strb.w	r0, [lr, #4]
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	f000 f98b 	bl	8006246 <.text_30+0x2>
 8005f30:	2606      	movs	r6, #6
 8005f32:	e006      	b.n	8005f42 <USBPD_PRL_SendMessage+0x2aa>
 8005f34:	2006      	movs	r0, #6
 8005f36:	f88e 0004 	strb.w	r0, [lr, #4]
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	f000 f983 	bl	8006246 <.text_30+0x2>
 8005f40:	2610      	movs	r6, #16
 8005f42:	4630      	mov	r0, r6
 8005f44:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005f48 <.text_17>:
 8005f48:	1c49      	adds	r1, r1, #1
 8005f4a:	f001 0107 	and.w	r1, r1, #7
 8005f4e:	72c1      	strb	r1, [r0, #11]
 8005f50:	2006      	movs	r0, #6
 8005f52:	6869      	ldr	r1, [r5, #4]
 8005f54:	7108      	strb	r0, [r1, #4]
 8005f56:	4770      	bx	lr

08005f58 <.text_18>:
 8005f58:	2103      	movs	r1, #3
 8005f5a:	1d80      	adds	r0, r0, #6
 8005f5c:	f000 bba9 	b.w	80066b2 <__aeabi_memset>

08005f60 <USBPD_PRL_ResetRequestReset>:
 8005f60:	f8df 1730 	ldr.w	r1, [pc, #1840]	; 8006694 <.text_42>
 8005f64:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8005f68:	6841      	ldr	r1, [r0, #4]
 8005f6a:	2000      	movs	r0, #0
 8005f6c:	7148      	strb	r0, [r1, #5]
 8005f6e:	4770      	bx	lr

08005f70 <USBPD_PRL_ResetRequestProcess>:
 8005f70:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 8005f74:	4680      	mov	r8, r0
 8005f76:	f8df 071c 	ldr.w	r0, [pc, #1820]	; 8006694 <.text_42>
 8005f7a:	eb00 0688 	add.w	r6, r0, r8, lsl #2
 8005f7e:	460f      	mov	r7, r1
 8005f80:	6871      	ldr	r1, [r6, #4]
 8005f82:	7948      	ldrb	r0, [r1, #5]
 8005f84:	2503      	movs	r5, #3
 8005f86:	b118      	cbz	r0, 8005f90 <USBPD_PRL_ResetRequestProcess+0x20>
 8005f88:	2802      	cmp	r0, #2
 8005f8a:	d03f      	beq.n	800600c <USBPD_PRL_ResetRequestProcess+0x9c>
 8005f8c:	d330      	bcc.n	8005ff0 <USBPD_PRL_ResetRequestProcess+0x80>
 8005f8e:	e041      	b.n	8006014 <USBPD_PRL_ResetRequestProcess+0xa4>
 8005f90:	73c8      	strb	r0, [r1, #15]
 8005f92:	220f      	movs	r2, #15
 8005f94:	6871      	ldr	r1, [r6, #4]
 8005f96:	72c8      	strb	r0, [r1, #11]
 8005f98:	6871      	ldr	r1, [r6, #4]
 8005f9a:	7308      	strb	r0, [r1, #12]
 8005f9c:	2103      	movs	r1, #3
 8005f9e:	6873      	ldr	r3, [r6, #4]
 8005fa0:	7358      	strb	r0, [r3, #13]
 8005fa2:	6873      	ldr	r3, [r6, #4]
 8005fa4:	1d98      	adds	r0, r3, #6
 8005fa6:	f000 fb84 	bl	80066b2 <__aeabi_memset>
 8005faa:	6871      	ldr	r1, [r6, #4]
 8005fac:	2006      	movs	r0, #6
 8005fae:	7108      	strb	r0, [r1, #4]
 8005fb0:	2f05      	cmp	r7, #5
 8005fb2:	f8df 06e4 	ldr.w	r0, [pc, #1764]	; 8006698 <.text_43>
 8005fb6:	6804      	ldr	r4, [r0, #0]
 8005fb8:	d105      	bne.n	8005fc6 <USBPD_PRL_ResetRequestProcess+0x56>
 8005fba:	b164      	cbz	r4, 8005fd6 <USBPD_PRL_ResetRequestProcess+0x66>
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	9000      	str	r0, [sp, #0]
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	2205      	movs	r2, #5
 8005fc4:	e004      	b.n	8005fd0 <USBPD_PRL_ResetRequestProcess+0x60>
 8005fc6:	b134      	cbz	r4, 8005fd6 <USBPD_PRL_ResetRequestProcess+0x66>
 8005fc8:	2000      	movs	r0, #0
 8005fca:	9000      	str	r0, [sp, #0]
 8005fcc:	2300      	movs	r3, #0
 8005fce:	2206      	movs	r2, #6
 8005fd0:	4641      	mov	r1, r8
 8005fd2:	2002      	movs	r0, #2
 8005fd4:	47a0      	blx	r4
 8005fd6:	4639      	mov	r1, r7
 8005fd8:	4640      	mov	r0, r8
 8005fda:	f00d fb7b 	bl	80136d4 <USBPD_PHY_ResetRequest>
 8005fde:	4640      	mov	r0, r8
 8005fe0:	f000 f861 	bl	80060a6 <USBPD_PRL_DisableRX>
 8005fe4:	6870      	ldr	r0, [r6, #4]
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	7141      	strb	r1, [r0, #5]
 8005fea:	2105      	movs	r1, #5
 8005fec:	7281      	strb	r1, [r0, #10]
 8005fee:	e014      	b.n	800601a <USBPD_PRL_ResetRequestProcess+0xaa>
 8005ff0:	7bc8      	ldrb	r0, [r1, #15]
 8005ff2:	2801      	cmp	r0, #1
 8005ff4:	d104      	bne.n	8006000 <USBPD_PRL_ResetRequestProcess+0x90>
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	714a      	strb	r2, [r1, #5]
 8005ffc:	73c8      	strb	r0, [r1, #15]
 8005ffe:	e00c      	b.n	800601a <USBPD_PRL_ResetRequestProcess+0xaa>
 8006000:	7a88      	ldrb	r0, [r1, #10]
 8006002:	b950      	cbnz	r0, 800601a <USBPD_PRL_ResetRequestProcess+0xaa>
 8006004:	2200      	movs	r2, #0
 8006006:	714a      	strb	r2, [r1, #5]
 8006008:	2504      	movs	r5, #4
 800600a:	e006      	b.n	800601a <USBPD_PRL_ResetRequestProcess+0xaa>
 800600c:	2000      	movs	r0, #0
 800600e:	7148      	strb	r0, [r1, #5]
 8006010:	2500      	movs	r5, #0
 8006012:	e002      	b.n	800601a <USBPD_PRL_ResetRequestProcess+0xaa>
 8006014:	2000      	movs	r0, #0
 8006016:	7148      	strb	r0, [r1, #5]
 8006018:	2502      	movs	r5, #2
 800601a:	4628      	mov	r0, r5
 800601c:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

08006020 <USBDPD_PRL_BistCarrierEyeMode>:
 8006020:	2905      	cmp	r1, #5
 8006022:	bf08      	it	eq
 8006024:	f00d bb7f 	beq.w	8013726 <USBPD_PHY_Send_BIST_Pattern>
 8006028:	2010      	movs	r0, #16
 800602a:	4770      	bx	lr

0800602c <USBDPD_PRL_BistCarrierEyeModeExit>:
 800602c:	2905      	cmp	r1, #5
 800602e:	bf04      	itt	eq
 8006030:	2107      	moveq	r1, #7
 8006032:	f00d bb86 	beq.w	8013742 <USBPD_PHY_ExitTransmit>
 8006036:	2010      	movs	r0, #16
 8006038:	4770      	bx	lr

0800603a <USBPD_PRL_Reset>:
 800603a:	b538      	push	{r3, r4, r5, lr}
 800603c:	f000 fad3 	bl	80065e6 <.text_39>
 8006040:	2100      	movs	r1, #0
 8006042:	6868      	ldr	r0, [r5, #4]
 8006044:	7101      	strb	r1, [r0, #4]
 8006046:	7141      	strb	r1, [r0, #5]
 8006048:	7281      	strb	r1, [r0, #10]
 800604a:	2000      	movs	r0, #0
 800604c:	6869      	ldr	r1, [r5, #4]
 800604e:	72c8      	strb	r0, [r1, #11]
 8006050:	220f      	movs	r2, #15
 8006052:	6869      	ldr	r1, [r5, #4]
 8006054:	7308      	strb	r0, [r1, #12]
 8006056:	2103      	movs	r1, #3
 8006058:	686b      	ldr	r3, [r5, #4]
 800605a:	7358      	strb	r0, [r3, #13]
 800605c:	686b      	ldr	r3, [r5, #4]
 800605e:	1d98      	adds	r0, r3, #6
 8006060:	f000 fb27 	bl	80066b2 <__aeabi_memset>
 8006064:	6869      	ldr	r1, [r5, #4]
 8006066:	2000      	movs	r0, #0
 8006068:	7388      	strb	r0, [r1, #14]
 800606a:	6869      	ldr	r1, [r5, #4]
 800606c:	73c8      	strb	r0, [r1, #15]
 800606e:	6869      	ldr	r1, [r5, #4]
 8006070:	7408      	strb	r0, [r1, #16]
 8006072:	6869      	ldr	r1, [r5, #4]
 8006074:	f881 0029 	strb.w	r0, [r1, #41]	; 0x29
 8006078:	4620      	mov	r0, r4
 800607a:	f00d fb20 	bl	80136be <USBPD_PHY_Reset>
 800607e:	4620      	mov	r0, r4
 8006080:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}
 8006084:	e000      	b.n	8006088 <USBPD_PRL_EnableRX>

08006086 <USBPD_PRL_DeInit>:
 8006086:	4770      	bx	lr

08006088 <USBPD_PRL_EnableRX>:
 8006088:	b510      	push	{r4, lr}
 800608a:	4604      	mov	r4, r0
 800608c:	f00d fbb7 	bl	80137fe <USBPD_PHY_EnableRX>
 8006090:	f000 f803 	bl	800609a <.text_26>
 8006094:	2000      	movs	r0, #0
 8006096:	7408      	strb	r0, [r1, #16]
 8006098:	bd10      	pop	{r4, pc}

0800609a <.text_26>:
 800609a:	f8df 05f8 	ldr.w	r0, [pc, #1528]	; 8006694 <.text_42>
 800609e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80060a2:	6841      	ldr	r1, [r0, #4]
 80060a4:	4770      	bx	lr

080060a6 <USBPD_PRL_DisableRX>:
 80060a6:	b510      	push	{r4, lr}
 80060a8:	4604      	mov	r4, r0
 80060aa:	f00d fbb5 	bl	8013818 <USBPD_PHY_DisableRX>
 80060ae:	f7ff fff4 	bl	800609a <.text_26>
 80060b2:	2001      	movs	r0, #1
 80060b4:	7408      	strb	r0, [r1, #16]
 80060b6:	bd10      	pop	{r4, pc}

080060b8 <PRL_StateTXConstructMessage>:
 80060b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060bc:	4689      	mov	r9, r1
 80060be:	4614      	mov	r4, r2
 80060c0:	f8df 15d0 	ldr.w	r1, [pc, #1488]	; 8006694 <.text_42>
 80060c4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80060c8:	4680      	mov	r8, r0
 80060ca:	6855      	ldr	r5, [r2, #4]
 80060cc:	461e      	mov	r6, r3
 80060ce:	f105 0016 	add.w	r0, r5, #22
 80060d2:	464b      	mov	r3, r9
 80060d4:	f830 c013 	ldrh.w	ip, [r0, r3, lsl #1]
 80060d8:	ea5f 30dc 	movs.w	r0, ip, lsr #15
 80060dc:	d070      	beq.n	80061c0 <PRL_StateTXConstructMessage+0x108>
 80060de:	8c2f      	ldrh	r7, [r5, #32]
 80060e0:	f3c7 2080 	ubfx	r0, r7, #10, #1
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d164      	bne.n	80061b2 <PRL_StateTXConstructMessage+0xfa>
 80060e8:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
 80060ec:	f1be 0f1b 	cmp.w	lr, #27
 80060f0:	d301      	bcc.n	80060f6 <PRL_StateTXConstructMessage+0x3e>
 80060f2:	0bf8      	lsrs	r0, r7, #15
 80060f4:	d153      	bne.n	800619e <PRL_StateTXConstructMessage+0xe6>
 80060f6:	f3c7 20c3 	ubfx	r0, r7, #11, #4
 80060fa:	b918      	cbnz	r0, 8006104 <PRL_StateTXConstructMessage+0x4c>
 80060fc:	4638      	mov	r0, r7
 80060fe:	f36e 0008 	bfi	r0, lr, #0, #9
 8006102:	8428      	strh	r0, [r5, #32]
 8006104:	f105 0016 	add.w	r0, r5, #22
 8006108:	f830 7013 	ldrh.w	r7, [r0, r3, lsl #1]
 800610c:	f648 70ff 	movw	r0, #36863	; 0x8fff
 8006110:	4007      	ands	r7, r0
 8006112:	f105 0016 	add.w	r0, r5, #22
 8006116:	f820 7013 	strh.w	r7, [r0, r3, lsl #1]
 800611a:	8c28      	ldrh	r0, [r5, #32]
 800611c:	0bc0      	lsrs	r0, r0, #15
 800611e:	d03b      	beq.n	8006198 <PRL_StateTXConstructMessage+0xe0>
 8006120:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 8006122:	1c80      	adds	r0, r0, #2
 8006124:	0880      	lsrs	r0, r0, #2
 8006126:	0300      	lsls	r0, r0, #12
 8006128:	f400 40e0 	and.w	r0, r0, #28672	; 0x7000
 800612c:	ea40 0607 	orr.w	r6, r0, r7
 8006130:	f105 0016 	add.w	r0, r5, #22
 8006134:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 8006138:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 800613a:	1c80      	adds	r0, r0, #2
 800613c:	f010 0003 	ands.w	r0, r0, #3
 8006140:	d021      	beq.n	8006186 <PRL_StateTXConstructMessage+0xce>
 8006142:	2500      	movs	r5, #0
 8006144:	f1c0 0004 	rsb	r0, r0, #4
 8006148:	1d26      	adds	r6, r4, #4
 800614a:	e006      	b.n	800615a <PRL_StateTXConstructMessage+0xa2>
 800614c:	f8b7 c026 	ldrh.w	ip, [r7, #38]	; 0x26
 8006150:	44f4      	add	ip, lr
 8006152:	2700      	movs	r7, #0
 8006154:	f806 700c 	strb.w	r7, [r6, ip]
 8006158:	1c6d      	adds	r5, r5, #1
 800615a:	fa5f fe85 	uxtb.w	lr, r5
 800615e:	6857      	ldr	r7, [r2, #4]
 8006160:	4586      	cmp	lr, r0
 8006162:	d3f3      	bcc.n	800614c <PRL_StateTXConstructMessage+0x94>
 8006164:	f107 0016 	add.w	r0, r7, #22
 8006168:	f648 75ff 	movw	r5, #36863	; 0x8fff
 800616c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8006170:	4005      	ands	r5, r0
 8006172:	0b00      	lsrs	r0, r0, #12
 8006174:	1c40      	adds	r0, r0, #1
 8006176:	0300      	lsls	r0, r0, #12
 8006178:	f400 40e0 	and.w	r0, r0, #28672	; 0x7000
 800617c:	4328      	orrs	r0, r5
 800617e:	f107 0516 	add.w	r5, r7, #22
 8006182:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
 8006186:	6850      	ldr	r0, [r2, #4]
 8006188:	f100 0516 	add.w	r5, r0, #22
 800618c:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 8006190:	f3c5 3602 	ubfx	r6, r5, #12, #3
 8006194:	00b6      	lsls	r6, r6, #2
 8006196:	1cb6      	adds	r6, r6, #2
 8006198:	6855      	ldr	r5, [r2, #4]
 800619a:	2000      	movs	r0, #0
 800619c:	e008      	b.n	80061b0 <PRL_StateTXConstructMessage+0xf8>
 800619e:	f105 0016 	add.w	r0, r5, #22
 80061a2:	f44c 46e0 	orr.w	r6, ip, #28672	; 0x7000
 80061a6:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 80061aa:	261e      	movs	r6, #30
 80061ac:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 80061ae:	381a      	subs	r0, #26
 80061b0:	84e8      	strh	r0, [r5, #38]	; 0x26
 80061b2:	6850      	ldr	r0, [r2, #4]
 80061b4:	8c05      	ldrh	r5, [r0, #32]
 80061b6:	70a5      	strb	r5, [r4, #2]
 80061b8:	6850      	ldr	r0, [r2, #4]
 80061ba:	8c05      	ldrh	r5, [r0, #32]
 80061bc:	0a2d      	lsrs	r5, r5, #8
 80061be:	70e5      	strb	r5, [r4, #3]
 80061c0:	6850      	ldr	r0, [r2, #4]
 80061c2:	18c5      	adds	r5, r0, r3
 80061c4:	f100 0716 	add.w	r7, r0, #22
 80061c8:	7aed      	ldrb	r5, [r5, #11]
 80061ca:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 80061ce:	f365 2c4b 	bfi	ip, r5, #9, #3
 80061d2:	f100 0516 	add.w	r5, r0, #22
 80061d6:	3016      	adds	r0, #22
 80061d8:	f825 c013 	strh.w	ip, [r5, r3, lsl #1]
 80061dc:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80061e0:	7020      	strb	r0, [r4, #0]
 80061e2:	6850      	ldr	r0, [r2, #4]
 80061e4:	f100 0516 	add.w	r5, r0, #22
 80061e8:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 80061ec:	0a1b      	lsrs	r3, r3, #8
 80061ee:	7063      	strb	r3, [r4, #1]
 80061f0:	800e      	strh	r6, [r1, #0]
 80061f2:	2109      	movs	r1, #9
 80061f4:	6850      	ldr	r0, [r2, #4]
 80061f6:	7101      	strb	r1, [r0, #4]
 80061f8:	2102      	movs	r1, #2
 80061fa:	7501      	strb	r1, [r0, #20]
 80061fc:	f8df 1498 	ldr.w	r1, [pc, #1176]	; 8006698 <.text_43>
 8006200:	680d      	ldr	r5, [r1, #0]
 8006202:	b135      	cbz	r5, 8006212 <PRL_StateTXConstructMessage+0x15a>
 8006204:	b2b0      	uxth	r0, r6
 8006206:	9000      	str	r0, [sp, #0]
 8006208:	4623      	mov	r3, r4
 800620a:	464a      	mov	r2, r9
 800620c:	4641      	mov	r1, r8
 800620e:	2002      	movs	r0, #2
 8006210:	47a8      	blx	r5
 8006212:	ea5f 0008 	movs.w	r0, r8
 8006216:	bf0c      	ite	eq
 8006218:	2001      	moveq	r0, #1
 800621a:	2003      	movne	r0, #3
 800621c:	f242 7110 	movw	r1, #10000	; 0x2710
 8006220:	f00e fc0e 	bl	8014a40 <USBPD_TIM_Start>
 8006224:	ea5f 0009 	movs.w	r0, r9
 8006228:	d001      	beq.n	800622e <PRL_StateTXConstructMessage+0x176>
 800622a:	f000 f80b 	bl	8006244 <.text_30>
 800622e:	b2b3      	uxth	r3, r6
 8006230:	f000 f803 	bl	800623a <.text_29>
 8006234:	2003      	movs	r0, #3
 8006236:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

0800623a <.text_29>:
 800623a:	4622      	mov	r2, r4
 800623c:	4649      	mov	r1, r9
 800623e:	4640      	mov	r0, r8
 8006240:	f00d ba5b 	b.w	80136fa <USBPD_PHY_SendMessage>

08006244 <.text_30>:
 8006244:	2101      	movs	r1, #1
 8006246:	4640      	mov	r0, r8
 8006248:	e51a      	b.n	8005c80 <USBPD_PRL_CableCapable>

0800624a <PRL_Received>:
 800624a:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624e:	4680      	mov	r8, r0
 8006250:	f20f 405c 	addw	r0, pc, #1116	; 0x45c
 8006254:	f8df 243c 	ldr.w	r2, [pc, #1084]	; 8006694 <.text_42>
 8006258:	f8df b43c 	ldr.w	fp, [pc, #1084]	; 8006698 <.text_43>
 800625c:	f8db 5000 	ldr.w	r5, [fp]
 8006260:	460f      	mov	r7, r1
 8006262:	8801      	ldrh	r1, [r0, #0]
 8006264:	f8ad 1006 	strh.w	r1, [sp, #6]
 8006268:	eb02 0688 	add.w	r6, r2, r8, lsl #2
 800626c:	6870      	ldr	r0, [r6, #4]
 800626e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006270:	780a      	ldrb	r2, [r1, #0]
 8006272:	7849      	ldrb	r1, [r1, #1]
 8006274:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 8006278:	f8ad 2004 	strh.w	r2, [sp, #4]
 800627c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800627e:	7898      	ldrb	r0, [r3, #2]
 8006280:	78d9      	ldrb	r1, [r3, #3]
 8006282:	eb00 2901 	add.w	r9, r0, r1, lsl #8
 8006286:	ea4f 4409 	mov.w	r4, r9, lsl #16
 800628a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800628e:	0fe4      	lsrs	r4, r4, #31
 8006290:	0bc0      	lsrs	r0, r0, #15
 8006292:	f3c9 0a08 	ubfx	sl, r9, #0, #9
 8006296:	d004      	beq.n	80062a2 <PRL_Received+0x58>
 8006298:	b91c      	cbnz	r4, 80062a2 <PRL_Received+0x58>
 800629a:	b15d      	cbz	r5, 80062b4 <PRL_Received+0x6a>
 800629c:	f10a 0004 	add.w	r0, sl, #4
 80062a0:	e003      	b.n	80062aa <PRL_Received+0x60>
 80062a2:	b13d      	cbz	r5, 80062b4 <PRL_Received+0x6a>
 80062a4:	f000 f92a 	bl	80064fc <.text_32>
 80062a8:	1c80      	adds	r0, r0, #2
 80062aa:	9000      	str	r0, [sp, #0]
 80062ac:	463a      	mov	r2, r7
 80062ae:	4641      	mov	r1, r8
 80062b0:	2001      	movs	r0, #1
 80062b2:	47a8      	blx	r5
 80062b4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80062b8:	6871      	ldr	r1, [r6, #4]
 80062ba:	f24f 001f 	movw	r0, #61471	; 0xf01f
 80062be:	4002      	ands	r2, r0
 80062c0:	2a01      	cmp	r2, #1
 80062c2:	d105      	bne.n	80062d0 <PRL_Received+0x86>
 80062c4:	230a      	movs	r3, #10
 80062c6:	710b      	strb	r3, [r1, #4]
 80062c8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80062cc:	83c8      	strh	r0, [r1, #30]
 80062ce:	e113      	b.n	80064f8 <PRL_Received+0x2ae>
 80062d0:	724f      	strb	r7, [r1, #9]
 80062d2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80062d6:	4002      	ands	r2, r0
 80062d8:	2a0d      	cmp	r2, #13
 80062da:	d109      	bne.n	80062f0 <PRL_Received+0xa6>
 80062dc:	19c8      	adds	r0, r1, r7
 80062de:	2300      	movs	r3, #0
 80062e0:	72c3      	strb	r3, [r0, #11]
 80062e2:	220f      	movs	r2, #15
 80062e4:	6870      	ldr	r0, [r6, #4]
 80062e6:	f7ff fe37 	bl	8005f58 <.text_18>
 80062ea:	6870      	ldr	r0, [r6, #4]
 80062ec:	2100      	movs	r1, #0
 80062ee:	7101      	strb	r1, [r0, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80062f6:	f362 0104 	bfi	r1, r2, #0, #5
 80062fa:	f64f 60df 	movw	r0, #65247	; 0xfedf
 80062fe:	4001      	ands	r1, r0
 8006300:	0038      	movs	r0, r7
 8006302:	d109      	bne.n	8006318 <PRL_Received+0xce>
 8006304:	6870      	ldr	r0, [r6, #4]
 8006306:	8ac0      	ldrh	r0, [r0, #22]
 8006308:	f3c0 1240 	ubfx	r2, r0, #5, #1
 800630c:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8006310:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
 8006314:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8006318:	f64f 703f 	movw	r0, #65343	; 0xff3f
 800631c:	4001      	ands	r1, r0
 800631e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8006322:	6872      	ldr	r2, [r6, #4]
 8006324:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8006328:	2802      	cmp	r0, #2
 800632a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 800632e:	bf38      	it	cc
 8006330:	f041 0140 	orrcc.w	r1, r1, #64	; 0x40
 8006334:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006338:	f400 6060 	and.w	r0, r0, #3584	; 0xe00
 800633c:	4301      	orrs	r1, r0
 800633e:	7711      	strb	r1, [r2, #28]
 8006340:	0a09      	lsrs	r1, r1, #8
 8006342:	6870      	ldr	r0, [r6, #4]
 8006344:	7741      	strb	r1, [r0, #29]
 8006346:	2101      	movs	r1, #1
 8006348:	6870      	ldr	r0, [r6, #4]
 800634a:	7501      	strb	r1, [r0, #20]
 800634c:	f8db c000 	ldr.w	ip, [fp]
 8006350:	f1bc 0f00 	cmp.w	ip, #0
 8006354:	d007      	beq.n	8006366 <PRL_Received+0x11c>
 8006356:	2102      	movs	r1, #2
 8006358:	9100      	str	r1, [sp, #0]
 800635a:	f100 031c 	add.w	r3, r0, #28
 800635e:	463a      	mov	r2, r7
 8006360:	4641      	mov	r1, r8
 8006362:	2002      	movs	r0, #2
 8006364:	47e0      	blx	ip
 8006366:	6870      	ldr	r0, [r6, #4]
 8006368:	f100 021c 	add.w	r2, r0, #28
 800636c:	2302      	movs	r3, #2
 800636e:	4639      	mov	r1, r7
 8006370:	4640      	mov	r0, r8
 8006372:	f00d f9c2 	bl	80136fa <USBPD_PHY_SendMessage>
 8006376:	2800      	cmp	r0, #0
 8006378:	d135      	bne.n	80063e6 <PRL_Received+0x19c>
 800637a:	6870      	ldr	r0, [r6, #4]
 800637c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8006380:	1d81      	adds	r1, r0, #6
 8006382:	f3c2 2242 	ubfx	r2, r2, #9, #3
 8006386:	5dc9      	ldrb	r1, [r1, r7]
 8006388:	4291      	cmp	r1, r2
 800638a:	f000 80b3 	beq.w	80064f4 <PRL_Received+0x2aa>
 800638e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8006392:	0a49      	lsrs	r1, r1, #9
 8006394:	1d80      	adds	r0, r0, #6
 8006396:	f001 0107 	and.w	r1, r1, #7
 800639a:	55c1      	strb	r1, [r0, r7]
 800639c:	6871      	ldr	r1, [r6, #4]
 800639e:	f101 052c 	add.w	r5, r1, #44	; 0x2c
 80063a2:	68aa      	ldr	r2, [r5, #8]
 80063a4:	7890      	ldrb	r0, [r2, #2]
 80063a6:	78d3      	ldrb	r3, [r2, #3]
 80063a8:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80063ac:	7913      	ldrb	r3, [r2, #4]
 80063ae:	7952      	ldrb	r2, [r2, #5]
 80063b0:	eb00 4003 	add.w	r0, r0, r3, lsl #16
 80063b4:	eb00 6002 	add.w	r0, r0, r2, lsl #24
 80063b8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80063bc:	f3c2 3202 	ubfx	r2, r2, #12, #3
 80063c0:	b192      	cbz	r2, 80063e8 <PRL_Received+0x19e>
 80063c2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80063c6:	f002 021f 	and.w	r2, r2, #31
 80063ca:	2a03      	cmp	r2, #3
 80063cc:	d10c      	bne.n	80063e8 <PRL_Received+0x19e>
 80063ce:	0f00      	lsrs	r0, r0, #28
 80063d0:	2808      	cmp	r0, #8
 80063d2:	bf18      	it	ne
 80063d4:	2800      	cmpne	r0, #0
 80063d6:	d107      	bne.n	80063e8 <PRL_Received+0x19e>
 80063d8:	68ec      	ldr	r4, [r5, #12]
 80063da:	6825      	ldr	r5, [r4, #0]
 80063dc:	2301      	movs	r3, #1
 80063de:	aa01      	add	r2, sp, #4
 80063e0:	4639      	mov	r1, r7
 80063e2:	4640      	mov	r0, r8
 80063e4:	47a8      	blx	r5
 80063e6:	e087      	b.n	80064f8 <PRL_Received+0x2ae>
 80063e8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80063ec:	8488      	strh	r0, [r1, #36]	; 0x24
 80063ee:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80063f2:	0bc0      	lsrs	r0, r0, #15
 80063f4:	bf18      	it	ne
 80063f6:	2c00      	cmpne	r4, #0
 80063f8:	d072      	beq.n	80064e0 <PRL_Received+0x296>
 80063fa:	f8a1 9022 	strh.w	r9, [r1, #34]	; 0x22
 80063fe:	221a      	movs	r2, #26
 8006400:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006404:	f419 4ff8 	tst.w	r9, #31744	; 0x7c00
 8006408:	f3c9 20c3 	ubfx	r0, r9, #11, #4
 800640c:	f3c3 3302 	ubfx	r3, r3, #12, #3
 8006410:	d133      	bne.n	800647a <PRL_Received+0x230>
 8006412:	2b07      	cmp	r3, #7
 8006414:	d302      	bcc.n	800641c <PRL_Received+0x1d2>
 8006416:	f1ba 0f1a 	cmp.w	sl, #26
 800641a:	d81c      	bhi.n	8006456 <PRL_Received+0x20c>
 800641c:	2100      	movs	r1, #0
 800641e:	e00a      	b.n	8006436 <PRL_Received+0x1ec>
 8006420:	6873      	ldr	r3, [r6, #4]
 8006422:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8006424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006426:	1d1b      	adds	r3, r3, #4
 8006428:	4605      	mov	r5, r0
 800642a:	fb12 1505 	smlabb	r5, r2, r5, r1
 800642e:	5c5b      	ldrb	r3, [r3, r1]
 8006430:	5563      	strb	r3, [r4, r5]
 8006432:	1c49      	adds	r1, r1, #1
 8006434:	b289      	uxth	r1, r1
 8006436:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800643a:	f3c3 3302 	ubfx	r3, r3, #12, #3
 800643e:	009c      	lsls	r4, r3, #2
 8006440:	1ea4      	subs	r4, r4, #2
 8006442:	42a1      	cmp	r1, r4
 8006444:	d3ec      	bcc.n	8006420 <PRL_Received+0x1d6>
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	1e9b      	subs	r3, r3, #2
 800644a:	4553      	cmp	r3, sl
 800644c:	d23d      	bcs.n	80064ca <PRL_Received+0x280>
 800644e:	f000 f855 	bl	80064fc <.text_32>
 8006452:	1e80      	subs	r0, r0, #2
 8006454:	e00d      	b.n	8006472 <PRL_Received+0x228>
 8006456:	2001      	movs	r0, #1
 8006458:	f881 0029 	strb.w	r0, [r1, #41]	; 0x29
 800645c:	2000      	movs	r0, #0
 800645e:	6871      	ldr	r1, [r6, #4]
 8006460:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8006462:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8006464:	1d13      	adds	r3, r2, #4
 8006466:	5c1b      	ldrb	r3, [r3, r0]
 8006468:	540b      	strb	r3, [r1, r0]
 800646a:	1c40      	adds	r0, r0, #1
 800646c:	281a      	cmp	r0, #26
 800646e:	d3f6      	bcc.n	800645e <PRL_Received+0x214>
 8006470:	201a      	movs	r0, #26
 8006472:	6871      	ldr	r1, [r6, #4]
 8006474:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8006476:	8010      	strh	r0, [r2, #0]
 8006478:	e032      	b.n	80064e0 <PRL_Received+0x296>
 800647a:	682c      	ldr	r4, [r5, #0]
 800647c:	8824      	ldrh	r4, [r4, #0]
 800647e:	f240 1505 	movw	r5, #261	; 0x105
 8006482:	f104 0c1a 	add.w	ip, r4, #26
 8006486:	45ac      	cmp	ip, r5
 8006488:	bf3e      	ittt	cc
 800648a:	eb04 0c83 	addcc.w	ip, r4, r3, lsl #2
 800648e:	f1ac 0c02 	subcc.w	ip, ip, #2
 8006492:	45d4      	cmpcc	ip, sl
 8006494:	d20c      	bcs.n	80064b0 <PRL_Received+0x266>
 8006496:	f000 f837 	bl	8006508 <.text_33>
 800649a:	6870      	ldr	r0, [r6, #4]
 800649c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80064a0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80064a2:	880a      	ldrh	r2, [r1, #0]
 80064a4:	0a9b      	lsrs	r3, r3, #10
 80064a6:	f003 031c 	and.w	r3, r3, #28
 80064aa:	1e98      	subs	r0, r3, #2
 80064ac:	1882      	adds	r2, r0, r2
 80064ae:	e010      	b.n	80064d2 <PRL_Received+0x288>
 80064b0:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
 80064b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80064b8:	45ac      	cmp	ip, r5
 80064ba:	d20c      	bcs.n	80064d6 <PRL_Received+0x28c>
 80064bc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80064c0:	1ea4      	subs	r4, r4, #2
 80064c2:	4554      	cmp	r4, sl
 80064c4:	d307      	bcc.n	80064d6 <PRL_Received+0x28c>
 80064c6:	f000 f81f 	bl	8006508 <.text_33>
 80064ca:	6870      	ldr	r0, [r6, #4]
 80064cc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80064ce:	f3c9 0208 	ubfx	r2, r9, #0, #9
 80064d2:	800a      	strh	r2, [r1, #0]
 80064d4:	e004      	b.n	80064e0 <PRL_Received+0x296>
 80064d6:	2200      	movs	r2, #0
 80064d8:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
 80064dc:	6871      	ldr	r1, [r6, #4]
 80064de:	710a      	strb	r2, [r1, #4]
 80064e0:	4640      	mov	r0, r8
 80064e2:	6874      	ldr	r4, [r6, #4]
 80064e4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80064e6:	f8d5 8000 	ldr.w	r8, [r5]
 80064ea:	2300      	movs	r3, #0
 80064ec:	aa01      	add	r2, sp, #4
 80064ee:	4639      	mov	r1, r7
 80064f0:	47c0      	blx	r8
 80064f2:	e001      	b.n	80064f8 <PRL_Received+0x2ae>
 80064f4:	2100      	movs	r1, #0
 80064f6:	7501      	strb	r1, [r0, #20]
 80064f8:	e8bd 8ff7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080064fc <.text_32>:
 80064fc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8006500:	f3c0 3002 	ubfx	r0, r0, #12, #3
 8006504:	0080      	lsls	r0, r0, #2
 8006506:	4770      	bx	lr

08006508 <.text_33>:
 8006508:	2301      	movs	r3, #1
 800650a:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
 800650e:	2100      	movs	r1, #0
 8006510:	e00a      	b.n	8006528 <.text_33+0x20>
 8006512:	6873      	ldr	r3, [r6, #4]
 8006514:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8006516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006518:	1d1b      	adds	r3, r3, #4
 800651a:	4605      	mov	r5, r0
 800651c:	fb12 1505 	smlabb	r5, r2, r5, r1
 8006520:	5c5b      	ldrb	r3, [r3, r1]
 8006522:	5563      	strb	r3, [r4, r5]
 8006524:	1c49      	adds	r1, r1, #1
 8006526:	b289      	uxth	r1, r1
 8006528:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800652c:	f3c3 3302 	ubfx	r3, r3, #12, #3
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	1e9b      	subs	r3, r3, #2
 8006534:	4299      	cmp	r1, r3
 8006536:	d3ec      	bcc.n	8006512 <.text_33+0xa>
 8006538:	4770      	bx	lr

0800653a <PRL_ResetIndicate>:
 800653a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653c:	460e      	mov	r6, r1
 800653e:	4605      	mov	r5, r0
 8006540:	4854      	ldr	r0, [pc, #336]	; (8006694 <.text_42>)
 8006542:	eb00 0785 	add.w	r7, r0, r5, lsl #2
 8006546:	2000      	movs	r0, #0
 8006548:	6879      	ldr	r1, [r7, #4]
 800654a:	4431      	add	r1, r6
 800654c:	220f      	movs	r2, #15
 800654e:	72c8      	strb	r0, [r1, #11]
 8006550:	2103      	movs	r1, #3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	1d98      	adds	r0, r3, #6
 8006556:	f000 f8ac 	bl	80066b2 <__aeabi_memset>
 800655a:	6879      	ldr	r1, [r7, #4]
 800655c:	2006      	movs	r0, #6
 800655e:	7108      	strb	r0, [r1, #4]
 8006560:	4628      	mov	r0, r5
 8006562:	f7ff fda0 	bl	80060a6 <USBPD_PRL_DisableRX>
 8006566:	484c      	ldr	r0, [pc, #304]	; (8006698 <.text_43>)
 8006568:	6804      	ldr	r4, [r0, #0]
 800656a:	b134      	cbz	r4, 800657a <PRL_ResetIndicate+0x40>
 800656c:	2100      	movs	r1, #0
 800656e:	9100      	str	r1, [sp, #0]
 8006570:	2300      	movs	r3, #0
 8006572:	4632      	mov	r2, r6
 8006574:	4629      	mov	r1, r5
 8006576:	2001      	movs	r0, #1
 8006578:	47a0      	blx	r4
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	4631      	mov	r1, r6
 8006582:	4628      	mov	r0, r5
 8006584:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

08006588 <__iar_annotation$$tailcall>:
 8006588:	4710      	bx	r2

0800658a <USBPD_PRL_PowerSinkReset>:
 800658a:	e57d      	b.n	8006088 <USBPD_PRL_EnableRX>

0800658c <PRL_ResetCompleted>:
 800658c:	4941      	ldr	r1, [pc, #260]	; (8006694 <.text_42>)
 800658e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8006592:	6841      	ldr	r1, [r0, #4]
 8006594:	2001      	movs	r0, #1
 8006596:	73c8      	strb	r0, [r1, #15]
 8006598:	4770      	bx	lr

0800659a <PRL_BistCompleted>:
 800659a:	4602      	mov	r2, r0
 800659c:	4b3d      	ldr	r3, [pc, #244]	; (8006694 <.text_42>)
 800659e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80065a2:	6843      	ldr	r3, [r0, #4]
 80065a4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80065a6:	68c3      	ldr	r3, [r0, #12]
 80065a8:	4610      	mov	r0, r2

080065aa <__iar_annotation$$tailcall>:
 80065aa:	4718      	bx	r3

080065ac <PRL_TxCompleted>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	f000 f81a 	bl	80065e6 <.text_39>
 80065b2:	6869      	ldr	r1, [r5, #4]
 80065b4:	7d08      	ldrb	r0, [r1, #20]
 80065b6:	2801      	cmp	r0, #1
 80065b8:	d002      	beq.n	80065c0 <PRL_TxCompleted+0x14>
 80065ba:	2802      	cmp	r0, #2
 80065bc:	d005      	beq.n	80065ca <PRL_TxCompleted+0x1e>
 80065be:	e00e      	b.n	80065de <PRL_TxCompleted+0x32>
 80065c0:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80065c2:	684a      	ldr	r2, [r1, #4]
 80065c4:	4620      	mov	r0, r4
 80065c6:	4790      	blx	r2
 80065c8:	e009      	b.n	80065de <PRL_TxCompleted+0x32>
 80065ca:	4620      	mov	r0, r4
 80065cc:	f00d f86a 	bl	80136a4 <USBPD_PHY_GetRetryTimerValue>
 80065d0:	4601      	mov	r1, r0
 80065d2:	2c00      	cmp	r4, #0
 80065d4:	bf0c      	ite	eq
 80065d6:	2001      	moveq	r0, #1
 80065d8:	2003      	movne	r0, #3
 80065da:	f00e fa31 	bl	8014a40 <USBPD_TIM_Start>
 80065de:	6869      	ldr	r1, [r5, #4]
 80065e0:	2000      	movs	r0, #0
 80065e2:	7508      	strb	r0, [r1, #20]
 80065e4:	bd31      	pop	{r0, r4, r5, pc}

080065e6 <.text_39>:
 80065e6:	4604      	mov	r4, r0
 80065e8:	482a      	ldr	r0, [pc, #168]	; (8006694 <.text_42>)
 80065ea:	eb00 0584 	add.w	r5, r0, r4, lsl #2
 80065ee:	4770      	bx	lr

080065f0 <USBPD_PRL_PrepareExtendedTxChunkSending>:
 80065f0:	b530      	push	{r4, r5, lr}
 80065f2:	4c28      	ldr	r4, [pc, #160]	; (8006694 <.text_42>)
 80065f4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80065f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065fc:	6844      	ldr	r4, [r0, #4]
 80065fe:	8c25      	ldrh	r5, [r4, #32]
 8006600:	f248 30ff 	movw	r0, #33791	; 0x83ff
 8006604:	4005      	ands	r5, r0
 8006606:	8ae0      	ldrh	r0, [r4, #22]
 8006608:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800660c:	82e0      	strh	r0, [r4, #22]
 800660e:	ea45 25c1 	orr.w	r5, r5, r1, lsl #11
 8006612:	f405 457e 	and.w	r5, r5, #65024	; 0xfe00
 8006616:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8006618:	8ae1      	ldrh	r1, [r4, #22]
 800661a:	432a      	orrs	r2, r5
 800661c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006620:	f360 0104 	bfi	r1, r0, #0, #5
 8006624:	8422      	strh	r2, [r4, #32]
 8006626:	82e1      	strh	r1, [r4, #22]
 8006628:	7019      	strb	r1, [r3, #0]
 800662a:	8ae0      	ldrh	r0, [r4, #22]
 800662c:	0a00      	lsrs	r0, r0, #8
 800662e:	7058      	strb	r0, [r3, #1]
 8006630:	8c20      	ldrh	r0, [r4, #32]
 8006632:	7098      	strb	r0, [r3, #2]
 8006634:	8c20      	ldrh	r0, [r4, #32]
 8006636:	0a00      	lsrs	r0, r0, #8
 8006638:	70d8      	strb	r0, [r3, #3]
 800663a:	bd30      	pop	{r4, r5, pc}

0800663c <USBPD_PRL_PrepareChunkRequest>:
 800663c:	4a15      	ldr	r2, [pc, #84]	; (8006694 <.text_42>)
 800663e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8006642:	6840      	ldr	r0, [r0, #4]
 8006644:	8c02      	ldrh	r2, [r0, #32]
 8006646:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8006648:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800664c:	0adb      	lsrs	r3, r3, #11
 800664e:	8402      	strh	r2, [r0, #32]
 8006650:	1c5b      	adds	r3, r3, #1
 8006652:	02db      	lsls	r3, r3, #11
 8006654:	f402 4206 	and.w	r2, r2, #34304	; 0x8600
 8006658:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 800665c:	431a      	orrs	r2, r3
 800665e:	8402      	strh	r2, [r0, #32]
 8006660:	2209      	movs	r2, #9
 8006662:	8ac3      	ldrh	r3, [r0, #22]
 8006664:	f362 330f 	bfi	r3, r2, #12, #4
 8006668:	82c3      	strh	r3, [r0, #22]
 800666a:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 800666c:	f362 0304 	bfi	r3, r2, #0, #5
 8006670:	82c3      	strh	r3, [r0, #22]
 8006672:	2206      	movs	r2, #6
 8006674:	7102      	strb	r2, [r0, #4]
 8006676:	8ac2      	ldrh	r2, [r0, #22]
 8006678:	700a      	strb	r2, [r1, #0]
 800667a:	8ac2      	ldrh	r2, [r0, #22]
 800667c:	0a12      	lsrs	r2, r2, #8
 800667e:	704a      	strb	r2, [r1, #1]
 8006680:	8c02      	ldrh	r2, [r0, #32]
 8006682:	708a      	strb	r2, [r1, #2]
 8006684:	2200      	movs	r2, #0
 8006686:	8c00      	ldrh	r0, [r0, #32]
 8006688:	710a      	strb	r2, [r1, #4]
 800668a:	0a00      	lsrs	r0, r0, #8
 800668c:	70c8      	strb	r0, [r1, #3]
 800668e:	714a      	strb	r2, [r1, #5]
 8006690:	4770      	bx	lr
	...

08006694 <.text_42>:
 8006694:	200000e4 	.word	0x200000e4

08006698 <.text_43>:
 8006698:	200000dc 	.word	0x200000dc

0800669c <USBPD_PRL_Init::PRL_PhyCallbacks>:
 800669c:	0800624b 0800653b 0800658d 0800659b     Kb..;e...e...e..
 80066ac:	080065ad                                .e..

080066b0 <.text_45>:
	...

080066b2 <__aeabi_memset>:
 80066b2:	b470      	push	{r4, r5, r6}
 80066b4:	0784      	lsls	r4, r0, #30
 80066b6:	d046      	beq.n	8006746 <__aeabi_memset+0x94>
 80066b8:	1e4c      	subs	r4, r1, #1
 80066ba:	2900      	cmp	r1, #0
 80066bc:	d041      	beq.n	8006742 <__aeabi_memset+0x90>
 80066be:	b2d5      	uxtb	r5, r2
 80066c0:	4603      	mov	r3, r0
 80066c2:	e002      	b.n	80066ca <__aeabi_memset+0x18>
 80066c4:	1e61      	subs	r1, r4, #1
 80066c6:	b3e4      	cbz	r4, 8006742 <__aeabi_memset+0x90>
 80066c8:	460c      	mov	r4, r1
 80066ca:	f803 5b01 	strb.w	r5, [r3], #1
 80066ce:	0799      	lsls	r1, r3, #30
 80066d0:	d1f8      	bne.n	80066c4 <__aeabi_memset+0x12>
 80066d2:	2c03      	cmp	r4, #3
 80066d4:	d92e      	bls.n	8006734 <__aeabi_memset+0x82>
 80066d6:	b2d5      	uxtb	r5, r2
 80066d8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80066dc:	2c0f      	cmp	r4, #15
 80066de:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80066e2:	d919      	bls.n	8006718 <__aeabi_memset+0x66>
 80066e4:	4626      	mov	r6, r4
 80066e6:	f103 0110 	add.w	r1, r3, #16
 80066ea:	3e10      	subs	r6, #16
 80066ec:	2e0f      	cmp	r6, #15
 80066ee:	f841 5c10 	str.w	r5, [r1, #-16]
 80066f2:	f841 5c0c 	str.w	r5, [r1, #-12]
 80066f6:	f841 5c08 	str.w	r5, [r1, #-8]
 80066fa:	f841 5c04 	str.w	r5, [r1, #-4]
 80066fe:	f101 0110 	add.w	r1, r1, #16
 8006702:	d8f2      	bhi.n	80066ea <__aeabi_memset+0x38>
 8006704:	f1a4 0110 	sub.w	r1, r4, #16
 8006708:	f021 010f 	bic.w	r1, r1, #15
 800670c:	f004 040f 	and.w	r4, r4, #15
 8006710:	3110      	adds	r1, #16
 8006712:	2c03      	cmp	r4, #3
 8006714:	440b      	add	r3, r1
 8006716:	d90d      	bls.n	8006734 <__aeabi_memset+0x82>
 8006718:	461e      	mov	r6, r3
 800671a:	4621      	mov	r1, r4
 800671c:	3904      	subs	r1, #4
 800671e:	2903      	cmp	r1, #3
 8006720:	f846 5b04 	str.w	r5, [r6], #4
 8006724:	d8fa      	bhi.n	800671c <__aeabi_memset+0x6a>
 8006726:	1f21      	subs	r1, r4, #4
 8006728:	f021 0103 	bic.w	r1, r1, #3
 800672c:	3104      	adds	r1, #4
 800672e:	440b      	add	r3, r1
 8006730:	f004 0403 	and.w	r4, r4, #3
 8006734:	b12c      	cbz	r4, 8006742 <__aeabi_memset+0x90>
 8006736:	b2d2      	uxtb	r2, r2
 8006738:	441c      	add	r4, r3
 800673a:	f803 2b01 	strb.w	r2, [r3], #1
 800673e:	42a3      	cmp	r3, r4
 8006740:	d1fb      	bne.n	800673a <__aeabi_memset+0x88>
 8006742:	bc70      	pop	{r4, r5, r6}
 8006744:	4770      	bx	lr
 8006746:	460c      	mov	r4, r1
 8006748:	4603      	mov	r3, r0
 800674a:	e7c2      	b.n	80066d2 <__aeabi_memset+0x20>

0800674c <ili9341_device_new>:
    GPIO_TypeDef *touch_select_port, uint16_t touch_select_pin,
    GPIO_TypeDef *touch_irq_port,    uint16_t touch_irq_pin,

    ili9341_touch_support_t   touch_support,
    ili9341_touch_normalize_t touch_normalize)
{
 800674c:	b590      	push	{r4, r7, lr}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	603b      	str	r3, [r7, #0]
 8006758:	4613      	mov	r3, r2
 800675a:	80fb      	strh	r3, [r7, #6]
  ili9341_device_t *dev = NULL;
 800675c:	2300      	movs	r3, #0
 800675e:	617b      	str	r3, [r7, #20]

  if (NULL != spi_hal) {
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 80fa 	beq.w	800695c <ili9341_device_new+0x210>

    if ( (NULL != reset_port)        && IS_GPIO_PIN(reset_pin)         &&
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 80f6 	beq.w	800695c <ili9341_device_new+0x210>
 8006770:	88fb      	ldrh	r3, [r7, #6]
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 80f2 	beq.w	800695c <ili9341_device_new+0x210>
 8006778:	88fb      	ldrh	r3, [r7, #6]
 800677a:	0c1b      	lsrs	r3, r3, #16
 800677c:	041b      	lsls	r3, r3, #16
 800677e:	2b00      	cmp	r3, #0
 8006780:	f040 80ec 	bne.w	800695c <ili9341_device_new+0x210>
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 80e8 	beq.w	800695c <ili9341_device_new+0x210>
         (NULL != tft_select_port)   && IS_GPIO_PIN(tft_select_pin)    &&
 800678c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 80e4 	beq.w	800695c <ili9341_device_new+0x210>
 8006794:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006796:	0c1b      	lsrs	r3, r3, #16
 8006798:	041b      	lsls	r3, r3, #16
 800679a:	2b00      	cmp	r3, #0
 800679c:	f040 80de 	bne.w	800695c <ili9341_device_new+0x210>
 80067a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 80da 	beq.w	800695c <ili9341_device_new+0x210>
         (NULL != data_command_port) && IS_GPIO_PIN(data_command_pin)  &&
 80067a8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 80d6 	beq.w	800695c <ili9341_device_new+0x210>
 80067b0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80067b2:	0c1b      	lsrs	r3, r3, #16
 80067b4:	041b      	lsls	r3, r3, #16
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f040 80d0 	bne.w	800695c <ili9341_device_new+0x210>
 80067bc:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f2c0 80cb 	blt.w	800695c <ili9341_device_new+0x210>
         (orientation > isoNONE)     && (orientation < isoCOUNT)       ) {
 80067c6:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 80067ca:	2b03      	cmp	r3, #3
 80067cc:	f300 80c6 	bgt.w	800695c <ili9341_device_new+0x210>

      // we must either NOT support the touch interface, OR we must have valid
      // touch interface parameters
      if ( itsSupported != touch_support ||
 80067d0:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d11d      	bne.n	8006814 <ili9341_device_new+0xc8>
 80067d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 80be 	beq.w	800695c <ili9341_device_new+0x210>
           ( (NULL != touch_select_port) && IS_GPIO_PIN(touch_select_pin) &&
 80067e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 80ba 	beq.w	800695c <ili9341_device_new+0x210>
 80067e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80067ea:	0c1b      	lsrs	r3, r3, #16
 80067ec:	041b      	lsls	r3, r3, #16
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f040 80b4 	bne.w	800695c <ili9341_device_new+0x210>
 80067f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 80b0 	beq.w	800695c <ili9341_device_new+0x210>
             (NULL != touch_irq_port)    && IS_GPIO_PIN(touch_irq_pin)    )) {
 80067fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 80ab 	beq.w	800695c <ili9341_device_new+0x210>
 8006806:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800680a:	0c1b      	lsrs	r3, r3, #16
 800680c:	041b      	lsls	r3, r3, #16
 800680e:	2b00      	cmp	r3, #0
 8006810:	f040 80a4 	bne.w	800695c <ili9341_device_new+0x210>

        if (NULL != (dev = malloc(sizeof(ili9341_device_t)))) {
 8006814:	2068      	movs	r0, #104	; 0x68
 8006816:	f00f f96d 	bl	8015af4 <malloc>
 800681a:	4603      	mov	r3, r0
 800681c:	617b      	str	r3, [r7, #20]
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 809b 	beq.w	800695c <ili9341_device_new+0x210>

          dev->spi_hal              = spi_hal;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	601a      	str	r2, [r3, #0]

          dev->reset_port           = reset_port;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	605a      	str	r2, [r3, #4]
          dev->reset_pin            = reset_pin;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	88fa      	ldrh	r2, [r7, #6]
 8006836:	811a      	strh	r2, [r3, #8]
          dev->tft_select_port      = tft_select_port;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	60da      	str	r2, [r3, #12]
          dev->tft_select_pin       = tft_select_pin;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006842:	821a      	strh	r2, [r3, #16]
          dev->data_command_port    = data_command_port;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006848:	615a      	str	r2, [r3, #20]
          dev->data_command_pin     = data_command_pin;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800684e:	831a      	strh	r2, [r3, #24]

          dev->orientation          = orientation;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8006856:	769a      	strb	r2, [r3, #26]
          dev->screen_size          = ili9341_screen_size(orientation);
 8006858:	697c      	ldr	r4, [r7, #20]
 800685a:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
 800685e:	4618      	mov	r0, r3
 8006860:	f000 fc76 	bl	8007150 <ili9341_screen_size>
 8006864:	4603      	mov	r3, r0
 8006866:	61e3      	str	r3, [r4, #28]

          if (touch_support) {
 8006868:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 800686c:	2b00      	cmp	r3, #0
 800686e:	d03a      	beq.n	80068e6 <ili9341_device_new+0x19a>

            dev->touch_select_port    = touch_select_port;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006874:	621a      	str	r2, [r3, #32]
            dev->touch_select_pin     = touch_select_pin;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800687a:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->touch_irq_port       = touch_irq_port;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006880:	629a      	str	r2, [r3, #40]	; 0x28
            dev->touch_irq_pin        = touch_irq_pin;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8006888:	859a      	strh	r2, [r3, #44]	; 0x2c

            dev->touch_support        = touch_support;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8006890:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->touch_normalize      = touch_normalize;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800689a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2200      	movs	r2, #0
 80068a2:	861a      	strh	r2, [r3, #48]	; 0x30
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	2200      	movs	r2, #0
 80068a8:	865a      	strh	r2, [r3, #50]	; 0x32
            dev->touch_calibration    = itcNONE;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	22ff      	movs	r2, #255	; 0xff
 80068ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            dev->touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	3336      	adds	r3, #54	; 0x36
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	605a      	str	r2, [r3, #4]
            dev->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	3340      	adds	r3, #64	; 0x40
 80068c0:	2200      	movs	r2, #0
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	605a      	str	r2, [r3, #4]
 80068c6:	609a      	str	r2, [r3, #8]
 80068c8:	60da      	str	r2, [r3, #12]
 80068ca:	611a      	str	r2, [r3, #16]
 80068cc:	615a      	str	r2, [r3, #20]
 80068ce:	619a      	str	r2, [r3, #24]

            dev->touch_pressed        = itpNotPressed;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            dev->touch_pressed_begin  = NULL;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	2200      	movs	r2, #0
 80068dc:	661a      	str	r2, [r3, #96]	; 0x60
            dev->touch_pressed_end    = NULL;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2200      	movs	r2, #0
 80068e2:	665a      	str	r2, [r3, #100]	; 0x64
 80068e4:	e037      	b.n	8006956 <ili9341_device_new+0x20a>

          } else {

            dev->touch_select_port    = NULL;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	2200      	movs	r2, #0
 80068ea:	621a      	str	r2, [r3, #32]
            dev->touch_select_pin     = 0;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	2200      	movs	r2, #0
 80068f0:	849a      	strh	r2, [r3, #36]	; 0x24
            dev->touch_irq_port       = NULL;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2200      	movs	r2, #0
 80068f6:	629a      	str	r2, [r3, #40]	; 0x28
            dev->touch_irq_pin        = 0;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2200      	movs	r2, #0
 80068fc:	859a      	strh	r2, [r3, #44]	; 0x2c

            dev->touch_support        = touch_support;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8006904:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            dev->touch_normalize      = itnNONE;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	22ff      	movs	r2, #255	; 0xff
 800690c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
            dev->touch_coordinate     = (ili9341_two_dimension_t){ {0U}, {0U} };
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2200      	movs	r2, #0
 8006914:	861a      	strh	r2, [r3, #48]	; 0x30
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2200      	movs	r2, #0
 800691a:	865a      	strh	r2, [r3, #50]	; 0x32
            dev->touch_calibration    = itcNONE;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	22ff      	movs	r2, #255	; 0xff
 8006920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            dev->touch_scalar         = (ili9341_scalar_calibrator_t){ {{0U}, {0U}}, {{0U}, {0U}} };
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	3336      	adds	r3, #54	; 0x36
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	605a      	str	r2, [r3, #4]
            dev->touch_3point         = (ili9341_3point_calibrator_t){ {{0U}, {0U}}, 0, 0, 0.0F, 0.0F, 0.0F, 0.0F };
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	3340      	adds	r3, #64	; 0x40
 8006932:	2200      	movs	r2, #0
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	605a      	str	r2, [r3, #4]
 8006938:	609a      	str	r2, [r3, #8]
 800693a:	60da      	str	r2, [r3, #12]
 800693c:	611a      	str	r2, [r3, #16]
 800693e:	615a      	str	r2, [r3, #20]
 8006940:	619a      	str	r2, [r3, #24]

            dev->touch_pressed        = itpNONE;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	22ff      	movs	r2, #255	; 0xff
 8006946:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            dev->touch_pressed_begin  = NULL;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2200      	movs	r2, #0
 800694e:	661a      	str	r2, [r3, #96]	; 0x60
            dev->touch_pressed_end    = NULL;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2200      	movs	r2, #0
 8006954:	665a      	str	r2, [r3, #100]	; 0x64
          }

          ili9341_initialize(dev);
 8006956:	6978      	ldr	r0, [r7, #20]
 8006958:	f000 fa9c 	bl	8006e94 <ili9341_initialize>
        }
      }
    }
  }

  return dev;
 800695c:	697b      	ldr	r3, [r7, #20]
}
 800695e:	4618      	mov	r0, r3
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	bd90      	pop	{r4, r7, pc}

08006966 <ili9341_touch_interrupt>:

void ili9341_touch_interrupt(ili9341_device_t *dev)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  uint16_t x_pos;
  uint16_t y_pos;

  // read the new/incoming state of the touch screen
  ili9341_touch_pressed_t pressed =
 800696e:	f107 020a 	add.w	r2, r7, #10
 8006972:	f107 030c 	add.w	r3, r7, #12
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f895 	bl	8006aa8 <ili9341_touch_coordinate>
 800697e:	4603      	mov	r3, r0
 8006980:	73fb      	strb	r3, [r7, #15]
      ili9341_touch_coordinate(dev, &x_pos, &y_pos);

  // switch path based on existing/prior state of the touch screen. note this
  // requires the touch interrupt GPIO EXTI be set to detect both falling and
  // rising edges.
  switch (dev->touch_pressed) {
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 8006988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800698c:	db29      	blt.n	80069e2 <ili9341_touch_interrupt+0x7c>
 800698e:	2b00      	cmp	r3, #0
 8006990:	dd02      	ble.n	8006998 <ili9341_touch_interrupt+0x32>
 8006992:	2b01      	cmp	r3, #1
 8006994:	d00f      	beq.n	80069b6 <ili9341_touch_interrupt+0x50>
        }
      }
      break;

    default:
      break;
 8006996:	e024      	b.n	80069e2 <ili9341_touch_interrupt+0x7c>
      if (itpPressed == pressed) {
 8006998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d122      	bne.n	80069e6 <ili9341_touch_interrupt+0x80>
        if (NULL != dev->touch_pressed_begin) {
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d01e      	beq.n	80069e6 <ili9341_touch_interrupt+0x80>
          dev->touch_pressed_begin(dev, x_pos, y_pos);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ac:	89b9      	ldrh	r1, [r7, #12]
 80069ae:	897a      	ldrh	r2, [r7, #10]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	4798      	blx	r3
      break;
 80069b4:	e017      	b.n	80069e6 <ili9341_touch_interrupt+0x80>
      if ((itpNONE == pressed) || (itpNotPressed == pressed)) {
 80069b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069be:	d003      	beq.n	80069c8 <ili9341_touch_interrupt+0x62>
 80069c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d110      	bne.n	80069ea <ili9341_touch_interrupt+0x84>
        if (NULL != dev->touch_pressed_end) {
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00c      	beq.n	80069ea <ili9341_touch_interrupt+0x84>
          dev->touch_pressed_end(dev,
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	8e11      	ldrh	r1, [r2, #48]	; 0x30
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	4798      	blx	r3
      break;
 80069e0:	e003      	b.n	80069ea <ili9341_touch_interrupt+0x84>
      break;
 80069e2:	bf00      	nop
 80069e4:	e002      	b.n	80069ec <ili9341_touch_interrupt+0x86>
      break;
 80069e6:	bf00      	nop
 80069e8:	e000      	b.n	80069ec <ili9341_touch_interrupt+0x86>
      break;
 80069ea:	bf00      	nop
  }

  // update the internal state with current state of touch screen
  if (pressed != dev->touch_pressed) {
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f993 305c 	ldrsb.w	r3, [r3, #92]	; 0x5c
 80069f2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d003      	beq.n	8006a02 <ili9341_touch_interrupt+0x9c>
    dev->touch_pressed = pressed;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	7bfa      	ldrb	r2, [r7, #15]
 80069fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  if (itpPressed == pressed) {
 8006a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d105      	bne.n	8006a16 <ili9341_touch_interrupt+0xb0>
    dev->touch_coordinate.x = x_pos;
 8006a0a:	89ba      	ldrh	r2, [r7, #12]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	861a      	strh	r2, [r3, #48]	; 0x30
    dev->touch_coordinate.y = y_pos;
 8006a10:	897a      	ldrh	r2, [r7, #10]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	865a      	strh	r2, [r3, #50]	; 0x32
  }
}
 8006a16:	bf00      	nop
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <ili9341_touch_pressed>:

ili9341_touch_pressed_t ili9341_touch_pressed(ili9341_device_t *dev)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b082      	sub	sp, #8
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  if (NULL == dev)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d102      	bne.n	8006a32 <ili9341_touch_pressed+0x14>
    { return itpNONE; }
 8006a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a30:	e00d      	b.n	8006a4e <ili9341_touch_pressed+0x30>

  if (__GPIO_PIN_CLR__ == HAL_GPIO_ReadPin(dev->touch_irq_port, dev->touch_irq_pin))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	f005 ffc9 	bl	800c9d4 <HAL_GPIO_ReadPin>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <ili9341_touch_pressed+0x2e>
    { return itpPressed; }
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e000      	b.n	8006a4e <ili9341_touch_pressed+0x30>
  else
    { return itpNotPressed; }
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <ili9341_set_touch_pressed_begin>:

void ili9341_set_touch_pressed_begin(ili9341_device_t *dev, ili9341_touch_callback_t callback)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	6039      	str	r1, [r7, #0]
  if ((NULL != dev) && (NULL != callback)) {
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d005      	beq.n	8006a72 <ili9341_set_touch_pressed_begin+0x1c>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <ili9341_set_touch_pressed_begin+0x1c>
    dev->touch_pressed_begin = callback;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 8006a72:	bf00      	nop
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <ili9341_set_touch_pressed_end>:

void ili9341_set_touch_pressed_end(ili9341_device_t *dev, ili9341_touch_callback_t callback)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	6039      	str	r1, [r7, #0]
  if ((NULL != dev) && (NULL != callback)) {
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d005      	beq.n	8006a9a <ili9341_set_touch_pressed_end+0x1c>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <ili9341_set_touch_pressed_end+0x1c>
    dev->touch_pressed_end = callback;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
	...

08006aa8 <ili9341_touch_coordinate>:

ili9341_touch_pressed_t ili9341_touch_coordinate(ili9341_device_t *dev,
    uint16_t *x_pos, uint16_t *y_pos)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08e      	sub	sp, #56	; 0x38
 8006aac:	af02      	add	r7, sp, #8
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
  if (NULL == dev)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d102      	bne.n	8006ac0 <ili9341_touch_coordinate+0x18>
    { return itpNONE; }
 8006aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006abe:	e09e      	b.n	8006bfe <ili9341_touch_coordinate+0x156>

  uint16_t req_samples;
  switch (dev->touch_normalize) {
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d002      	beq.n	8006ad0 <ili9341_touch_coordinate+0x28>
    default:
    case itnNotNormalized:
      req_samples = 1;
 8006aca:	2301      	movs	r3, #1
 8006acc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      break;
 8006ace:	e002      	b.n	8006ad6 <ili9341_touch_coordinate+0x2e>
    case itnNormalized:
      req_samples = __ILI9341_TOUCH_NORM_SAMPLES__;
 8006ad0:	2308      	movs	r3, #8
 8006ad2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      break;
 8006ad4:	bf00      	nop
  // XPT2046 8-bit command patterns
  static uint8_t x_cmd[]  = { 0xD3 };
  static uint8_t y_cmd[]  = { 0x93 };
  static uint8_t sleep[]  = { 0x00 };

  uint32_t x_avg = 0U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t y_avg = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24

  uint16_t sample = req_samples;
 8006ade:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ae0:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t num_samples = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	843b      	strh	r3, [r7, #32]

  // change SPI clock to 2MHz, max rate supported by XPT2046
  // TODO: based on STM32G4, which is clocked at 170MHz. support other chips.
  MODIFY_REG(dev->spi_hal->Instance->CR1, SPI_CR1_BR, SPI_BAUDRATEPRESCALER_128);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8006afc:	601a      	str	r2, [r3, #0]

  ili9341_spi_touch_select(dev);
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f000 f8a8 	bl	8006c54 <ili9341_spi_touch_select>

  while ((itpPressed == ili9341_touch_pressed(dev)) && (sample--)) {
 8006b04:	e03c      	b.n	8006b80 <ili9341_touch_coordinate+0xd8>

    uint8_t x_raw[2];
    uint8_t y_raw[2];

    HAL_SPI_Transmit(dev->spi_hal, (uint8_t*)x_cmd, sizeof(x_cmd), __SPI_MAX_DELAY__);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6818      	ldr	r0, [r3, #0]
 8006b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b0e:	2201      	movs	r2, #1
 8006b10:	493d      	ldr	r1, [pc, #244]	; (8006c08 <ili9341_touch_coordinate+0x160>)
 8006b12:	f007 f81d 	bl	800db50 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive(dev->spi_hal, (uint8_t*)x_cmd, x_raw, sizeof(x_raw), __SPI_MAX_DELAY__);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6818      	ldr	r0, [r3, #0]
 8006b1a:	f107 0218 	add.w	r2, r7, #24
 8006b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	2302      	movs	r3, #2
 8006b26:	4938      	ldr	r1, [pc, #224]	; (8006c08 <ili9341_touch_coordinate+0x160>)
 8006b28:	f007 f978 	bl	800de1c <HAL_SPI_TransmitReceive>

    HAL_SPI_Transmit(dev->spi_hal, (uint8_t*)y_cmd, sizeof(y_cmd), __SPI_MAX_DELAY__);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6818      	ldr	r0, [r3, #0]
 8006b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b34:	2201      	movs	r2, #1
 8006b36:	4935      	ldr	r1, [pc, #212]	; (8006c0c <ili9341_touch_coordinate+0x164>)
 8006b38:	f007 f80a 	bl	800db50 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive(dev->spi_hal, (uint8_t*)y_cmd, y_raw, sizeof(y_raw), __SPI_MAX_DELAY__);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6818      	ldr	r0, [r3, #0]
 8006b40:	f107 0214 	add.w	r2, r7, #20
 8006b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	492f      	ldr	r1, [pc, #188]	; (8006c0c <ili9341_touch_coordinate+0x164>)
 8006b4e:	f007 f965 	bl	800de1c <HAL_SPI_TransmitReceive>

    x_avg += __LEu16(x_raw) >> 3;
 8006b52:	7e7b      	ldrb	r3, [r7, #25]
 8006b54:	461a      	mov	r2, r3
 8006b56:	7e3b      	ldrb	r3, [r7, #24]
 8006b58:	021b      	lsls	r3, r3, #8
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	10db      	asrs	r3, r3, #3
 8006b5e:	461a      	mov	r2, r3
 8006b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b62:	4413      	add	r3, r2
 8006b64:	62bb      	str	r3, [r7, #40]	; 0x28
    y_avg += __LEu16(y_raw) >> 3;
 8006b66:	7d7b      	ldrb	r3, [r7, #21]
 8006b68:	461a      	mov	r2, r3
 8006b6a:	7d3b      	ldrb	r3, [r7, #20]
 8006b6c:	021b      	lsls	r3, r3, #8
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	10db      	asrs	r3, r3, #3
 8006b72:	461a      	mov	r2, r3
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	4413      	add	r3, r2
 8006b78:	627b      	str	r3, [r7, #36]	; 0x24

    ++num_samples;
 8006b7a:	8c3b      	ldrh	r3, [r7, #32]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	843b      	strh	r3, [r7, #32]
  while ((itpPressed == ili9341_touch_pressed(dev)) && (sample--)) {
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f7ff ff4c 	bl	8006a1e <ili9341_touch_pressed>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d104      	bne.n	8006b96 <ili9341_touch_coordinate+0xee>
 8006b8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b8e:	1e5a      	subs	r2, r3, #1
 8006b90:	847a      	strh	r2, [r7, #34]	; 0x22
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1b7      	bne.n	8006b06 <ili9341_touch_coordinate+0x5e>
  }
  HAL_SPI_Transmit(dev->spi_hal, (uint8_t*)sleep, sizeof(sleep), __SPI_MAX_DELAY__);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	491b      	ldr	r1, [pc, #108]	; (8006c10 <ili9341_touch_coordinate+0x168>)
 8006ba2:	f006 ffd5 	bl	800db50 <HAL_SPI_Transmit>

  ili9341_spi_touch_release(dev);
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 f864 	bl	8006c74 <ili9341_spi_touch_release>

  // restore SPI clock to maximum for TFT
  // TODO: based on STM32G4, which is clocked at 170MHz. support other chips.
  MODIFY_REG(dev->spi_hal->Instance->CR1, SPI_CR1_BR, SPI_BAUDRATEPRESCALER_8);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0210 	orr.w	r2, r2, #16
 8006bc2:	601a      	str	r2, [r3, #0]

  if (num_samples < req_samples)
 8006bc4:	8c3a      	ldrh	r2, [r7, #32]
 8006bc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d201      	bcs.n	8006bd0 <ili9341_touch_coordinate+0x128>
    { return itpNotPressed; }
 8006bcc:	2300      	movs	r3, #0
 8006bce:	e016      	b.n	8006bfe <ili9341_touch_coordinate+0x156>

  ili9341_two_dimension_t coord =
      ili9341_project_touch_coordinate(dev, x_avg / req_samples, y_avg / req_samples);
 8006bd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd8:	b299      	uxth	r1, r3
 8006bda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be2:	b29b      	uxth	r3, r3
  ili9341_two_dimension_t coord =
 8006be4:	461a      	mov	r2, r3
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 fb4a 	bl	8007280 <ili9341_project_touch_coordinate>
 8006bec:	4603      	mov	r3, r0
 8006bee:	61fb      	str	r3, [r7, #28]

  *x_pos = coord.x;
 8006bf0:	8bba      	ldrh	r2, [r7, #28]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	801a      	strh	r2, [r3, #0]
  *y_pos = coord.y;
 8006bf6:	8bfa      	ldrh	r2, [r7, #30]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	801a      	strh	r2, [r3, #0]

  return itpPressed;
 8006bfc:	2301      	movs	r3, #1
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3730      	adds	r7, #48	; 0x30
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20000000 	.word	0x20000000
 8006c0c:	20000004 	.word	0x20000004
 8006c10:	200000f0 	.word	0x200000f0

08006c14 <ili9341_spi_tft_select>:
              * (touch_a_x * touch_b_y - touch_b_x * touch_a_y) ) )
      ) / delta + 0.5;
}

void ili9341_spi_tft_select(ili9341_device_t *dev)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  // clear bit indicates the TFT is -active- slave SPI device
  HAL_GPIO_WritePin(dev->tft_select_port, dev->tft_select_pin, __GPIO_PIN_CLR__);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68d8      	ldr	r0, [r3, #12]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	8a1b      	ldrh	r3, [r3, #16]
 8006c24:	2200      	movs	r2, #0
 8006c26:	4619      	mov	r1, r3
 8006c28:	f005 feec 	bl	800ca04 <HAL_GPIO_WritePin>
}
 8006c2c:	bf00      	nop
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <ili9341_spi_tft_release>:

void ili9341_spi_tft_release(ili9341_device_t *dev)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  // set bit indicates the TFT is -inactive- slave SPI device
  HAL_GPIO_WritePin(dev->tft_select_port, dev->tft_select_pin, __GPIO_PIN_SET__);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68d8      	ldr	r0, [r3, #12]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	8a1b      	ldrh	r3, [r3, #16]
 8006c44:	2201      	movs	r2, #1
 8006c46:	4619      	mov	r1, r3
 8006c48:	f005 fedc 	bl	800ca04 <HAL_GPIO_WritePin>
}
 8006c4c:	bf00      	nop
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <ili9341_spi_touch_select>:

void ili9341_spi_touch_select(ili9341_device_t *dev)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  // clear bit indicates the touch screen is -active- slave SPI device
  HAL_GPIO_WritePin(dev->touch_select_port, dev->touch_select_pin, __GPIO_PIN_CLR__);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a18      	ldr	r0, [r3, #32]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c64:	2200      	movs	r2, #0
 8006c66:	4619      	mov	r1, r3
 8006c68:	f005 fecc 	bl	800ca04 <HAL_GPIO_WritePin>
}
 8006c6c:	bf00      	nop
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <ili9341_spi_touch_release>:

void ili9341_spi_touch_release(ili9341_device_t *dev)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  // set bit indicates the touch screen is -inactive- slave SPI device
  HAL_GPIO_WritePin(dev->touch_select_port, dev->touch_select_pin, __GPIO_PIN_SET__);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a18      	ldr	r0, [r3, #32]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c84:	2201      	movs	r2, #1
 8006c86:	4619      	mov	r1, r3
 8006c88:	f005 febc 	bl	800ca04 <HAL_GPIO_WritePin>
}
 8006c8c:	bf00      	nop
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <ili9341_spi_slave_select>:

void ili9341_spi_slave_select(ili9341_device_t *dev,
    ili9341_spi_slave_t spi_slave)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	70fb      	strb	r3, [r7, #3]
  switch (spi_slave) {
 8006ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d002      	beq.n	8006cae <ili9341_spi_slave_select+0x1a>
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d004      	beq.n	8006cb6 <ili9341_spi_slave_select+0x22>
    case issDisplayTFT:  ili9341_spi_tft_select(dev);   break;
    case issTouchScreen: ili9341_spi_touch_select(dev); break;
    default: break;
 8006cac:	e007      	b.n	8006cbe <ili9341_spi_slave_select+0x2a>
    case issDisplayTFT:  ili9341_spi_tft_select(dev);   break;
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7ff ffb0 	bl	8006c14 <ili9341_spi_tft_select>
 8006cb4:	e003      	b.n	8006cbe <ili9341_spi_slave_select+0x2a>
    case issTouchScreen: ili9341_spi_touch_select(dev); break;
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff ffcc 	bl	8006c54 <ili9341_spi_touch_select>
 8006cbc:	bf00      	nop
  }
}
 8006cbe:	bf00      	nop
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <ili9341_spi_slave_release>:

void ili9341_spi_slave_release(ili9341_device_t *dev,
    ili9341_spi_slave_t spi_slave)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b082      	sub	sp, #8
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	460b      	mov	r3, r1
 8006cd0:	70fb      	strb	r3, [r7, #3]
  switch (spi_slave) {
 8006cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <ili9341_spi_slave_release+0x1a>
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d004      	beq.n	8006ce8 <ili9341_spi_slave_release+0x22>

    case issDisplayTFT:  ili9341_spi_tft_release(dev);   break;
    case issTouchScreen: ili9341_spi_touch_release(dev); break;
    default: break;
 8006cde:	e007      	b.n	8006cf0 <ili9341_spi_slave_release+0x2a>
    case issDisplayTFT:  ili9341_spi_tft_release(dev);   break;
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff ffa7 	bl	8006c34 <ili9341_spi_tft_release>
 8006ce6:	e003      	b.n	8006cf0 <ili9341_spi_slave_release+0x2a>
    case issTouchScreen: ili9341_spi_touch_release(dev); break;
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7ff ffc3 	bl	8006c74 <ili9341_spi_touch_release>
 8006cee:	bf00      	nop
  }
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <ili9341_spi_write_command>:

void ili9341_spi_write_command(ili9341_device_t *dev,
    ili9341_spi_slave_t spi_slave, uint8_t command)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	460b      	mov	r3, r1
 8006d02:	70fb      	strb	r3, [r7, #3]
 8006d04:	4613      	mov	r3, r2
 8006d06:	70bb      	strb	r3, [r7, #2]
  __SLAVE_SELECT(dev, spi_slave);
 8006d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	db09      	blt.n	8006d24 <ili9341_spi_write_command+0x2c>
 8006d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	dc05      	bgt.n	8006d24 <ili9341_spi_write_command+0x2c>
 8006d18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7ff ffb8 	bl	8006c94 <ili9341_spi_slave_select>

  HAL_GPIO_WritePin(dev->data_command_port, dev->data_command_pin, __GPIO_PIN_CLR__);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6958      	ldr	r0, [r3, #20]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	8b1b      	ldrh	r3, [r3, #24]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	4619      	mov	r1, r3
 8006d30:	f005 fe68 	bl	800ca04 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(dev->spi_hal, &command, sizeof(command), __SPI_MAX_DELAY__);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6818      	ldr	r0, [r3, #0]
 8006d38:	1cb9      	adds	r1, r7, #2
 8006d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f006 ff06 	bl	800db50 <HAL_SPI_Transmit>

  __SLAVE_RELEASE(dev, spi_slave);
 8006d44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	db09      	blt.n	8006d60 <ili9341_spi_write_command+0x68>
 8006d4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	dc05      	bgt.n	8006d60 <ili9341_spi_write_command+0x68>
 8006d54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7ff ffb3 	bl	8006cc6 <ili9341_spi_slave_release>
}
 8006d60:	bf00      	nop
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <ili9341_spi_write_data>:

void ili9341_spi_write_data(ili9341_device_t *dev,
    ili9341_spi_slave_t spi_slave, uint16_t data_sz, uint8_t data[])
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	607b      	str	r3, [r7, #4]
 8006d72:	460b      	mov	r3, r1
 8006d74:	72fb      	strb	r3, [r7, #11]
 8006d76:	4613      	mov	r3, r2
 8006d78:	813b      	strh	r3, [r7, #8]
  __SLAVE_SELECT(dev, spi_slave);
 8006d7a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	db09      	blt.n	8006d96 <ili9341_spi_write_data+0x2e>
 8006d82:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	dc05      	bgt.n	8006d96 <ili9341_spi_write_data+0x2e>
 8006d8a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f7ff ff7f 	bl	8006c94 <ili9341_spi_slave_select>

  HAL_GPIO_WritePin(dev->data_command_port, dev->data_command_pin, __GPIO_PIN_SET__);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6958      	ldr	r0, [r3, #20]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8b1b      	ldrh	r3, [r3, #24]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	4619      	mov	r1, r3
 8006da2:	f005 fe2f 	bl	800ca04 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(dev->spi_hal, data, data_sz, __SPI_MAX_DELAY__);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6818      	ldr	r0, [r3, #0]
 8006daa:	893a      	ldrh	r2, [r7, #8]
 8006dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006db0:	6879      	ldr	r1, [r7, #4]
 8006db2:	f006 fecd 	bl	800db50 <HAL_SPI_Transmit>

  __SLAVE_RELEASE(dev, spi_slave);
 8006db6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	db09      	blt.n	8006dd2 <ili9341_spi_write_data+0x6a>
 8006dbe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	dc05      	bgt.n	8006dd2 <ili9341_spi_write_data+0x6a>
 8006dc6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f7ff ff7a 	bl	8006cc6 <ili9341_spi_slave_release>
}
 8006dd2:	bf00      	nop
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <ili9341_spi_write_command_data>:
  __SLAVE_RELEASE(dev, spi_slave);
}

void ili9341_spi_write_command_data(ili9341_device_t *dev,
    ili9341_spi_slave_t spi_slave, uint8_t command, uint16_t data_sz, uint8_t data[])
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b082      	sub	sp, #8
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
 8006de2:	4608      	mov	r0, r1
 8006de4:	4611      	mov	r1, r2
 8006de6:	461a      	mov	r2, r3
 8006de8:	4603      	mov	r3, r0
 8006dea:	70fb      	strb	r3, [r7, #3]
 8006dec:	460b      	mov	r3, r1
 8006dee:	70bb      	strb	r3, [r7, #2]
 8006df0:	4613      	mov	r3, r2
 8006df2:	803b      	strh	r3, [r7, #0]
  __SLAVE_SELECT(dev, spi_slave);
 8006df4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	db09      	blt.n	8006e10 <ili9341_spi_write_command_data+0x36>
 8006dfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	dc05      	bgt.n	8006e10 <ili9341_spi_write_command_data+0x36>
 8006e04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7ff ff42 	bl	8006c94 <ili9341_spi_slave_select>

  ili9341_spi_write_command(dev, issNONE, command);
 8006e10:	78bb      	ldrb	r3, [r7, #2]
 8006e12:	461a      	mov	r2, r3
 8006e14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7ff ff6d 	bl	8006cf8 <ili9341_spi_write_command>
  ili9341_spi_write_data(dev, issNONE, data_sz, data);
 8006e1e:	883a      	ldrh	r2, [r7, #0]
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7ff ff9e 	bl	8006d68 <ili9341_spi_write_data>

  __SLAVE_RELEASE(dev, spi_slave);
 8006e2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	db09      	blt.n	8006e48 <ili9341_spi_write_command_data+0x6e>
 8006e34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	dc05      	bgt.n	8006e48 <ili9341_spi_write_command_data+0x6e>
 8006e3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7ff ff3f 	bl	8006cc6 <ili9341_spi_slave_release>
}
 8006e48:	bf00      	nop
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <ili9341_reset>:

// -------------------------------------------------------- private functions --

static void ili9341_reset(ili9341_device_t *dev)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  // the reset pin on ILI9341 is active low, so driving low temporarily will
  // reset the device (also resets the touch screen peripheral)
  HAL_GPIO_WritePin(dev->reset_port, dev->reset_pin, __GPIO_PIN_CLR__);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6858      	ldr	r0, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	891b      	ldrh	r3, [r3, #8]
 8006e60:	2200      	movs	r2, #0
 8006e62:	4619      	mov	r1, r3
 8006e64:	f005 fdce 	bl	800ca04 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8006e68:	20c8      	movs	r0, #200	; 0xc8
 8006e6a:	f003 fe79 	bl	800ab60 <HAL_Delay>
  HAL_GPIO_WritePin(dev->reset_port, dev->reset_pin, __GPIO_PIN_SET__);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6858      	ldr	r0, [r3, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	891b      	ldrh	r3, [r3, #8]
 8006e76:	2201      	movs	r2, #1
 8006e78:	4619      	mov	r1, r3
 8006e7a:	f005 fdc3 	bl	800ca04 <HAL_GPIO_WritePin>

  // ensure both slave lines are open
  ili9341_spi_tft_release(dev);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff fed8 	bl	8006c34 <ili9341_spi_tft_release>
  ili9341_spi_touch_release(dev);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7ff fef5 	bl	8006c74 <ili9341_spi_touch_release>
}
 8006e8a:	bf00      	nop
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
	...

08006e94 <ili9341_initialize>:

static void ili9341_initialize(ili9341_device_t *dev)
{
 8006e94:	b590      	push	{r4, r7, lr}
 8006e96:	b09f      	sub	sp, #124	; 0x7c
 8006e98:	af02      	add	r7, sp, #8
 8006e9a:	6078      	str	r0, [r7, #4]
  ili9341_reset(dev);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7ff ffd7 	bl	8006e50 <ili9341_reset>
  ili9341_spi_tft_select(dev);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7ff feb6 	bl	8006c14 <ili9341_spi_tft_select>

  // command list is based on https://github.com/martnak/STM32-ILI9341

  // SOFTWARE RESET
  ili9341_spi_write_command(dev, issNONE, 0x01);
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7ff ff22 	bl	8006cf8 <ili9341_spi_write_command>
  HAL_Delay(1000);
 8006eb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006eb8:	f003 fe52 	bl	800ab60 <HAL_Delay>

  // POWER CONTROL A
  ili9341_spi_write_command_data(dev, issNONE,
      0xCB, 5, (uint8_t[]){ 0x39, 0x2C, 0x00, 0x34, 0x02 });
 8006ebc:	4a9c      	ldr	r2, [pc, #624]	; (8007130 <ili9341_initialize+0x29c>)
 8006ebe:	f107 0308 	add.w	r3, r7, #8
 8006ec2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ec6:	6018      	str	r0, [r3, #0]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	7019      	strb	r1, [r3, #0]
  ili9341_spi_write_command_data(dev, issNONE,
 8006ecc:	f107 0308 	add.w	r3, r7, #8
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	2305      	movs	r3, #5
 8006ed4:	22cb      	movs	r2, #203	; 0xcb
 8006ed6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7ff ff7d 	bl	8006dda <ili9341_spi_write_command_data>

  // POWER CONTROL B
  ili9341_spi_write_command_data(dev, issNONE,
      0xCF, 3, (uint8_t[]){ 0x00, 0xC1, 0x30 });
 8006ee0:	4a94      	ldr	r2, [pc, #592]	; (8007134 <ili9341_initialize+0x2a0>)
 8006ee2:	f107 0310 	add.w	r3, r7, #16
 8006ee6:	6812      	ldr	r2, [r2, #0]
 8006ee8:	4611      	mov	r1, r2
 8006eea:	8019      	strh	r1, [r3, #0]
 8006eec:	3302      	adds	r3, #2
 8006eee:	0c12      	lsrs	r2, r2, #16
 8006ef0:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(dev, issNONE,
 8006ef2:	f107 0310 	add.w	r3, r7, #16
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	2303      	movs	r3, #3
 8006efa:	22cf      	movs	r2, #207	; 0xcf
 8006efc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f7ff ff6a 	bl	8006dda <ili9341_spi_write_command_data>

  // DRIVER TIMING CONTROL A
  ili9341_spi_write_command_data(dev, issNONE,
      0xE8, 3, (uint8_t[]){ 0x85, 0x00, 0x78 });
 8006f06:	4a8c      	ldr	r2, [pc, #560]	; (8007138 <ili9341_initialize+0x2a4>)
 8006f08:	f107 0314 	add.w	r3, r7, #20
 8006f0c:	6812      	ldr	r2, [r2, #0]
 8006f0e:	4611      	mov	r1, r2
 8006f10:	8019      	strh	r1, [r3, #0]
 8006f12:	3302      	adds	r3, #2
 8006f14:	0c12      	lsrs	r2, r2, #16
 8006f16:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(dev, issNONE,
 8006f18:	f107 0314 	add.w	r3, r7, #20
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	2303      	movs	r3, #3
 8006f20:	22e8      	movs	r2, #232	; 0xe8
 8006f22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7ff ff57 	bl	8006dda <ili9341_spi_write_command_data>

  // DRIVER TIMING CONTROL B
  ili9341_spi_write_command_data(dev, issNONE,
      0xEA, 2, (uint8_t[]){ 0x00, 0x00 });
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	763b      	strb	r3, [r7, #24]
 8006f30:	2300      	movs	r3, #0
 8006f32:	767b      	strb	r3, [r7, #25]
  ili9341_spi_write_command_data(dev, issNONE,
 8006f34:	f107 0318 	add.w	r3, r7, #24
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	22ea      	movs	r2, #234	; 0xea
 8006f3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7ff ff49 	bl	8006dda <ili9341_spi_write_command_data>

  // POWER ON SEQUENCE CONTROL
  ili9341_spi_write_command_data(dev, issNONE,
      0xED, 4, (uint8_t[]){ 0x64, 0x03, 0x12, 0x81 });
 8006f48:	4b7c      	ldr	r3, [pc, #496]	; (800713c <ili9341_initialize+0x2a8>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	61fb      	str	r3, [r7, #28]
  ili9341_spi_write_command_data(dev, issNONE,
 8006f4e:	f107 031c 	add.w	r3, r7, #28
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	2304      	movs	r3, #4
 8006f56:	22ed      	movs	r2, #237	; 0xed
 8006f58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7ff ff3c 	bl	8006dda <ili9341_spi_write_command_data>

  // PUMP RATIO CONTROL
  ili9341_spi_write_command_data(dev, issNONE,
      0xF7, 1, (uint8_t[]){ 0x20 });
 8006f62:	2320      	movs	r3, #32
 8006f64:	f887 3020 	strb.w	r3, [r7, #32]
  ili9341_spi_write_command_data(dev, issNONE,
 8006f68:	f107 0320 	add.w	r3, r7, #32
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	2301      	movs	r3, #1
 8006f70:	22f7      	movs	r2, #247	; 0xf7
 8006f72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7ff ff2f 	bl	8006dda <ili9341_spi_write_command_data>

  // POWER CONTROL,VRH[5:0]
  ili9341_spi_write_command_data(dev, issNONE,
      0xC0, 1, (uint8_t[]){ 0x23 });
 8006f7c:	2323      	movs	r3, #35	; 0x23
 8006f7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  ili9341_spi_write_command_data(dev, issNONE,
 8006f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	2301      	movs	r3, #1
 8006f8a:	22c0      	movs	r2, #192	; 0xc0
 8006f8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7ff ff22 	bl	8006dda <ili9341_spi_write_command_data>

  // POWER CONTROL,SAP[2:0];BT[3:0]
  ili9341_spi_write_command_data(dev, issNONE,
      0xC1, 1, (uint8_t[]){ 0x10 });
 8006f96:	2310      	movs	r3, #16
 8006f98:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  ili9341_spi_write_command_data(dev, issNONE,
 8006f9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	22c1      	movs	r2, #193	; 0xc1
 8006fa6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7ff ff15 	bl	8006dda <ili9341_spi_write_command_data>

  // VCM CONTROL
  ili9341_spi_write_command_data(dev, issNONE,
      0xC5, 2, (uint8_t[]){ 0x3E, 0x28 });
 8006fb0:	4b63      	ldr	r3, [pc, #396]	; (8007140 <ili9341_initialize+0x2ac>)
 8006fb2:	881b      	ldrh	r3, [r3, #0]
 8006fb4:	85bb      	strh	r3, [r7, #44]	; 0x2c
  ili9341_spi_write_command_data(dev, issNONE,
 8006fb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	22c5      	movs	r2, #197	; 0xc5
 8006fc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7ff ff08 	bl	8006dda <ili9341_spi_write_command_data>

  // VCM CONTROL 2
  ili9341_spi_write_command_data(dev, issNONE,
      0xC7, 1, (uint8_t[]){ 0x86 });
 8006fca:	2386      	movs	r3, #134	; 0x86
 8006fcc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  ili9341_spi_write_command_data(dev, issNONE,
 8006fd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	22c7      	movs	r2, #199	; 0xc7
 8006fda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7ff fefb 	bl	8006dda <ili9341_spi_write_command_data>

  // MEMORY ACCESS CONTROL
  ili9341_spi_write_command_data(dev, issNONE,
      0x36, 1, (uint8_t[]){ 0x48 });
 8006fe4:	2348      	movs	r3, #72	; 0x48
 8006fe6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  ili9341_spi_write_command_data(dev, issNONE,
 8006fea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	2236      	movs	r2, #54	; 0x36
 8006ff4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7ff feee 	bl	8006dda <ili9341_spi_write_command_data>

  // PIXEL FORMAT
  ili9341_spi_write_command_data(dev, issNONE,
      0x3A, 1, (uint8_t[]){ 0x55 });
 8006ffe:	2355      	movs	r3, #85	; 0x55
 8007000:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  ili9341_spi_write_command_data(dev, issNONE,
 8007004:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	2301      	movs	r3, #1
 800700c:	223a      	movs	r2, #58	; 0x3a
 800700e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7ff fee1 	bl	8006dda <ili9341_spi_write_command_data>

  // FRAME RATIO CONTROL, STANDARD RGB COLOR
  ili9341_spi_write_command_data(dev, issNONE,
      0xB1, 2, (uint8_t[]){ 0x00, 0x18 });
 8007018:	2300      	movs	r3, #0
 800701a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800701e:	2318      	movs	r3, #24
 8007020:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  ili9341_spi_write_command_data(dev, issNONE,
 8007024:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	2302      	movs	r3, #2
 800702c:	22b1      	movs	r2, #177	; 0xb1
 800702e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7ff fed1 	bl	8006dda <ili9341_spi_write_command_data>

  // DISPLAY FUNCTION CONTROL
  ili9341_spi_write_command_data(dev, issNONE,
      0xB6, 3, (uint8_t[]){ 0x08, 0x82, 0x27 });
 8007038:	4a42      	ldr	r2, [pc, #264]	; (8007144 <ili9341_initialize+0x2b0>)
 800703a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800703e:	6812      	ldr	r2, [r2, #0]
 8007040:	4611      	mov	r1, r2
 8007042:	8019      	strh	r1, [r3, #0]
 8007044:	3302      	adds	r3, #2
 8007046:	0c12      	lsrs	r2, r2, #16
 8007048:	701a      	strb	r2, [r3, #0]
  ili9341_spi_write_command_data(dev, issNONE,
 800704a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	2303      	movs	r3, #3
 8007052:	22b6      	movs	r2, #182	; 0xb6
 8007054:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7ff febe 	bl	8006dda <ili9341_spi_write_command_data>

  // 3GAMMA FUNCTION DISABLE
  ili9341_spi_write_command_data(dev, issNONE,
      0xF2, 1, (uint8_t[]){ 0x00 });
 800705e:	2300      	movs	r3, #0
 8007060:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  ili9341_spi_write_command_data(dev, issNONE,
 8007064:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	2301      	movs	r3, #1
 800706c:	22f2      	movs	r2, #242	; 0xf2
 800706e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff feb1 	bl	8006dda <ili9341_spi_write_command_data>

  // GAMMA CURVE SELECTED
  ili9341_spi_write_command_data(dev, issNONE,
      0x26, 1, (uint8_t[]){ 0x01 });
 8007078:	2301      	movs	r3, #1
 800707a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  ili9341_spi_write_command_data(dev, issNONE,
 800707e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	2301      	movs	r3, #1
 8007086:	2226      	movs	r2, #38	; 0x26
 8007088:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7ff fea4 	bl	8006dda <ili9341_spi_write_command_data>

  // POSITIVE GAMMA CORRECTION
  ili9341_spi_write_command_data(dev, issNONE,
      0xE0, 15, (uint8_t[]){ 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8007092:	4b2d      	ldr	r3, [pc, #180]	; (8007148 <ili9341_initialize+0x2b4>)
 8007094:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8007098:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800709a:	c407      	stmia	r4!, {r0, r1, r2}
 800709c:	8023      	strh	r3, [r4, #0]
 800709e:	3402      	adds	r4, #2
 80070a0:	0c1b      	lsrs	r3, r3, #16
 80070a2:	7023      	strb	r3, [r4, #0]
  ili9341_spi_write_command_data(dev, issNONE,
 80070a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	230f      	movs	r3, #15
 80070ac:	22e0      	movs	r2, #224	; 0xe0
 80070ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7ff fe91 	bl	8006dda <ili9341_spi_write_command_data>
                             0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 });

  // NEGATIVE GAMMA CORRECTION
  ili9341_spi_write_command_data(dev, issNONE,
      0xE1, 15, (uint8_t[]){ 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 80070b8:	4b24      	ldr	r3, [pc, #144]	; (800714c <ili9341_initialize+0x2b8>)
 80070ba:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 80070be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80070c0:	c407      	stmia	r4!, {r0, r1, r2}
 80070c2:	8023      	strh	r3, [r4, #0]
 80070c4:	3402      	adds	r4, #2
 80070c6:	0c1b      	lsrs	r3, r3, #16
 80070c8:	7023      	strb	r3, [r4, #0]
  ili9341_spi_write_command_data(dev, issNONE,
 80070ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	230f      	movs	r3, #15
 80070d2:	22e1      	movs	r2, #225	; 0xe1
 80070d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7ff fe7e 	bl	8006dda <ili9341_spi_write_command_data>
                             0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F });

  // EXIT SLEEP
  ili9341_spi_write_command(dev, issNONE, 0x11);
 80070de:	2211      	movs	r2, #17
 80070e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7ff fe07 	bl	8006cf8 <ili9341_spi_write_command>
  HAL_Delay(120);
 80070ea:	2078      	movs	r0, #120	; 0x78
 80070ec:	f003 fd38 	bl	800ab60 <HAL_Delay>

  // TURN ON DISPLAY
  ili9341_spi_write_command(dev, issNONE, 0x29);
 80070f0:	2229      	movs	r2, #41	; 0x29
 80070f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff fdfe 	bl	8006cf8 <ili9341_spi_write_command>

  // MADCTL
  ili9341_spi_write_command_data(dev, issNONE,
      0x36, 1, (uint8_t[]){ ili9341_screen_rotation(dev->orientation) });
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8007102:	4618      	mov	r0, r3
 8007104:	f000 f852 	bl	80071ac <ili9341_screen_rotation>
 8007108:	4603      	mov	r3, r0
 800710a:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  ili9341_spi_write_command_data(dev, issNONE,
 800710e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	2301      	movs	r3, #1
 8007116:	2236      	movs	r2, #54	; 0x36
 8007118:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7ff fe5c 	bl	8006dda <ili9341_spi_write_command_data>

  ili9341_spi_tft_release(dev);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7ff fd86 	bl	8006c34 <ili9341_spi_tft_release>
}
 8007128:	bf00      	nop
 800712a:	3774      	adds	r7, #116	; 0x74
 800712c:	46bd      	mov	sp, r7
 800712e:	bd90      	pop	{r4, r7, pc}
 8007130:	08015c1c 	.word	0x08015c1c
 8007134:	08015c24 	.word	0x08015c24
 8007138:	08015c28 	.word	0x08015c28
 800713c:	08015c2c 	.word	0x08015c2c
 8007140:	08015c30 	.word	0x08015c30
 8007144:	08015c34 	.word	0x08015c34
 8007148:	08015c38 	.word	0x08015c38
 800714c:	08015c48 	.word	0x08015c48

08007150 <ili9341_screen_size>:

static ili9341_two_dimension_t ili9341_screen_size(
    ili9341_screen_orientation_t orientation)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	4603      	mov	r3, r0
 8007158:	71fb      	strb	r3, [r7, #7]
  switch (orientation) {
 800715a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800715e:	2b02      	cmp	r3, #2
 8007160:	d00b      	beq.n	800717a <ili9341_screen_size+0x2a>
 8007162:	2b03      	cmp	r3, #3
 8007164:	d00d      	beq.n	8007182 <ili9341_screen_size+0x32>
 8007166:	2b01      	cmp	r3, #1
 8007168:	d003      	beq.n	8007172 <ili9341_screen_size+0x22>
    default:
    case isoDown:
      return (ili9341_two_dimension_t){ { .width = 240U }, { .height = 320U } };
 800716a:	4b0e      	ldr	r3, [pc, #56]	; (80071a4 <ili9341_screen_size+0x54>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	e00a      	b.n	8007188 <ili9341_screen_size+0x38>
    case isoRight:
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 240U } };
 8007172:	4b0d      	ldr	r3, [pc, #52]	; (80071a8 <ili9341_screen_size+0x58>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	e006      	b.n	8007188 <ili9341_screen_size+0x38>
    case isoUp:
      return (ili9341_two_dimension_t){ { .width = 240U }, { .height = 320U } };
 800717a:	4b0a      	ldr	r3, [pc, #40]	; (80071a4 <ili9341_screen_size+0x54>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	e002      	b.n	8007188 <ili9341_screen_size+0x38>
    case isoLeft:
      return (ili9341_two_dimension_t){ { .width = 320U }, { .height = 240U } };
 8007182:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <ili9341_screen_size+0x58>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	2300      	movs	r3, #0
 800718a:	89ba      	ldrh	r2, [r7, #12]
 800718c:	f362 030f 	bfi	r3, r2, #0, #16
 8007190:	89fa      	ldrh	r2, [r7, #14]
 8007192:	f362 431f 	bfi	r3, r2, #16, #16
  }
}
 8007196:	4618      	mov	r0, r3
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	08015c58 	.word	0x08015c58
 80071a8:	08015c5c 	.word	0x08015c5c

080071ac <ili9341_screen_rotation>:

static uint8_t ili9341_screen_rotation(
    ili9341_screen_orientation_t orientation)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	4603      	mov	r3, r0
 80071b4:	71fb      	strb	r3, [r7, #7]
  switch (orientation) {
 80071b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d007      	beq.n	80071ce <ili9341_screen_rotation+0x22>
 80071be:	2b03      	cmp	r3, #3
 80071c0:	d007      	beq.n	80071d2 <ili9341_screen_rotation+0x26>
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d001      	beq.n	80071ca <ili9341_screen_rotation+0x1e>
    default:
    case isoDown:
      return 0x40 | 0x08;
 80071c6:	2348      	movs	r3, #72	; 0x48
 80071c8:	e004      	b.n	80071d4 <ili9341_screen_rotation+0x28>
    case isoRight:
      return 0x40 | 0x80 | 0x20 | 0x08;
 80071ca:	23e8      	movs	r3, #232	; 0xe8
 80071cc:	e002      	b.n	80071d4 <ili9341_screen_rotation+0x28>
    case isoUp:
      return 0x80 | 0x08;
 80071ce:	2388      	movs	r3, #136	; 0x88
 80071d0:	e000      	b.n	80071d4 <ili9341_screen_rotation+0x28>
    case isoLeft:
      return 0x20 | 0x08;
 80071d2:	2328      	movs	r3, #40	; 0x28
  }
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <interp>:

static int32_t interp(int32_t x, int32_t x0, int32_t x1, int32_t y0, int32_t y1)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	603b      	str	r3, [r7, #0]
  if (x1 == x0)
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d101      	bne.n	80071fa <interp+0x1a>
    { return 0; } // return 0 on divide-by-zero
 80071f6:	2300      	movs	r3, #0
 80071f8:	e00e      	b.n	8007218 <interp+0x38>

  return (x - x0) * (y1 - y0) / (x1 - x0) + y0;
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	69b9      	ldr	r1, [r7, #24]
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	1a8a      	subs	r2, r1, r2
 8007206:	fb02 f203 	mul.w	r2, r2, r3
 800720a:	6879      	ldr	r1, [r7, #4]
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	1acb      	subs	r3, r1, r3
 8007210:	fb92 f2f3 	sdiv	r2, r2, r3
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	4413      	add	r3, r2
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <ili9341_clip_touch_coordinate>:
  return (x - x0) * (y1 - y0) / (x1 - x0) + y0;
}

ili9341_two_dimension_t ili9341_clip_touch_coordinate(ili9341_two_dimension_t coord,
    ili9341_two_dimension_t min, ili9341_two_dimension_t max)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
  if (coord.x < min.x) { coord.x = min.x; }
 8007230:	89ba      	ldrh	r2, [r7, #12]
 8007232:	893b      	ldrh	r3, [r7, #8]
 8007234:	429a      	cmp	r2, r3
 8007236:	d201      	bcs.n	800723c <ili9341_clip_touch_coordinate+0x18>
 8007238:	893b      	ldrh	r3, [r7, #8]
 800723a:	81bb      	strh	r3, [r7, #12]
  if (coord.x > max.x) { coord.x = max.x; }
 800723c:	89ba      	ldrh	r2, [r7, #12]
 800723e:	88bb      	ldrh	r3, [r7, #4]
 8007240:	429a      	cmp	r2, r3
 8007242:	d901      	bls.n	8007248 <ili9341_clip_touch_coordinate+0x24>
 8007244:	88bb      	ldrh	r3, [r7, #4]
 8007246:	81bb      	strh	r3, [r7, #12]
  if (coord.y < min.y) { coord.y = min.y; }
 8007248:	89fa      	ldrh	r2, [r7, #14]
 800724a:	897b      	ldrh	r3, [r7, #10]
 800724c:	429a      	cmp	r2, r3
 800724e:	d201      	bcs.n	8007254 <ili9341_clip_touch_coordinate+0x30>
 8007250:	897b      	ldrh	r3, [r7, #10]
 8007252:	81fb      	strh	r3, [r7, #14]
  if (coord.y > max.y) { coord.y = max.y; }
 8007254:	89fa      	ldrh	r2, [r7, #14]
 8007256:	88fb      	ldrh	r3, [r7, #6]
 8007258:	429a      	cmp	r2, r3
 800725a:	d901      	bls.n	8007260 <ili9341_clip_touch_coordinate+0x3c>
 800725c:	88fb      	ldrh	r3, [r7, #6]
 800725e:	81fb      	strh	r3, [r7, #14]

  return coord;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	617b      	str	r3, [r7, #20]
 8007264:	2300      	movs	r3, #0
 8007266:	8aba      	ldrh	r2, [r7, #20]
 8007268:	f362 030f 	bfi	r3, r2, #0, #16
 800726c:	8afa      	ldrh	r2, [r7, #22]
 800726e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8007272:	4618      	mov	r0, r3
 8007274:	371c      	adds	r7, #28
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
	...

08007280 <ili9341_project_touch_coordinate>:

ili9341_two_dimension_t ili9341_project_touch_coordinate(ili9341_device_t *dev,
    uint16_t x_pos, uint16_t y_pos)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b08e      	sub	sp, #56	; 0x38
 8007284:	af02      	add	r7, sp, #8
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	460b      	mov	r3, r1
 800728a:	807b      	strh	r3, [r7, #2]
 800728c:	4613      	mov	r3, r2
 800728e:	803b      	strh	r3, [r7, #0]
  ili9341_two_dimension_t coord = (ili9341_two_dimension_t){ {x_pos}, {y_pos} };
 8007290:	887b      	ldrh	r3, [r7, #2]
 8007292:	823b      	strh	r3, [r7, #16]
 8007294:	883b      	ldrh	r3, [r7, #0]
 8007296:	827b      	strh	r3, [r7, #18]
  ili9341_two_dimension_t rotate;
  int32_t x_scaled, y_scaled;

  if (NULL != dev) {
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 81d1 	beq.w	8007642 <ili9341_project_touch_coordinate+0x3c2>

    switch (dev->touch_calibration) {
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f993 3034 	ldrsb.w	r3, [r3, #52]	; 0x34
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <ili9341_project_touch_coordinate+0x32>
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	f000 808f 	beq.w	80073ce <ili9341_project_touch_coordinate+0x14e>
        }

        break;

      default:
        break;
 80072b0:	e1ca      	b.n	8007648 <ili9341_project_touch_coordinate+0x3c8>
        switch (dev->orientation % isoCOUNT) {
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f993 301a 	ldrsb.w	r3, [r3, #26]
 80072b8:	425a      	negs	r2, r3
 80072ba:	f003 0303 	and.w	r3, r3, #3
 80072be:	f002 0203 	and.w	r2, r2, #3
 80072c2:	bf58      	it	pl
 80072c4:	4253      	negpl	r3, r2
 80072c6:	b25b      	sxtb	r3, r3
 80072c8:	2b03      	cmp	r3, #3
 80072ca:	d868      	bhi.n	800739e <ili9341_project_touch_coordinate+0x11e>
 80072cc:	a201      	add	r2, pc, #4	; (adr r2, 80072d4 <ili9341_project_touch_coordinate+0x54>)
 80072ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d2:	bf00      	nop
 80072d4:	080072e5 	.word	0x080072e5
 80072d8:	08007323 	.word	0x08007323
 80072dc:	080072e5 	.word	0x080072e5
 80072e0:	08007361 	.word	0x08007361
            x_scaled = interp(coord.x,
 80072e4:	8a3b      	ldrh	r3, [r7, #16]
 80072e6:	4618      	mov	r0, r3
                dev->touch_scalar.min.x, dev->touch_scalar.max.x,
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
            x_scaled = interp(coord.x,
 80072ec:	4619      	mov	r1, r3
                dev->touch_scalar.min.x, dev->touch_scalar.max.x,
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
            x_scaled = interp(coord.x,
 80072f2:	461a      	mov	r2, r3
                0U, dev->screen_size.width);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	8b9b      	ldrh	r3, [r3, #28]
            x_scaled = interp(coord.x,
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	2300      	movs	r3, #0
 80072fc:	f7ff ff70 	bl	80071e0 <interp>
 8007300:	62f8      	str	r0, [r7, #44]	; 0x2c
            y_scaled = interp(coord.y,
 8007302:	8a7b      	ldrh	r3, [r7, #18]
 8007304:	4618      	mov	r0, r3
                dev->touch_scalar.min.y, dev->touch_scalar.max.y,
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
            y_scaled = interp(coord.y,
 800730a:	4619      	mov	r1, r3
                dev->touch_scalar.min.y, dev->touch_scalar.max.y,
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
            y_scaled = interp(coord.y,
 8007310:	461a      	mov	r2, r3
                0U, dev->screen_size.height);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	8bdb      	ldrh	r3, [r3, #30]
            y_scaled = interp(coord.y,
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	2300      	movs	r3, #0
 800731a:	f7ff ff61 	bl	80071e0 <interp>
 800731e:	62b8      	str	r0, [r7, #40]	; 0x28
            break;
 8007320:	e03d      	b.n	800739e <ili9341_project_touch_coordinate+0x11e>
            x_scaled = interp(coord.y,
 8007322:	8a7b      	ldrh	r3, [r7, #18]
 8007324:	4618      	mov	r0, r3
                dev->touch_scalar.min.y, dev->touch_scalar.max.y,
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
            x_scaled = interp(coord.y,
 800732a:	4619      	mov	r1, r3
                dev->touch_scalar.min.y, dev->touch_scalar.max.y,
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
            x_scaled = interp(coord.y,
 8007330:	461a      	mov	r2, r3
                0U, dev->screen_size.width);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	8b9b      	ldrh	r3, [r3, #28]
            x_scaled = interp(coord.y,
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	2300      	movs	r3, #0
 800733a:	f7ff ff51 	bl	80071e0 <interp>
 800733e:	62f8      	str	r0, [r7, #44]	; 0x2c
            y_scaled = interp(coord.x,
 8007340:	8a3b      	ldrh	r3, [r7, #16]
 8007342:	4618      	mov	r0, r3
                dev->touch_scalar.min.x, dev->touch_scalar.max.x,
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	8edb      	ldrh	r3, [r3, #54]	; 0x36
            y_scaled = interp(coord.x,
 8007348:	4619      	mov	r1, r3
                dev->touch_scalar.min.x, dev->touch_scalar.max.x,
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
            y_scaled = interp(coord.x,
 800734e:	461a      	mov	r2, r3
                0U, dev->screen_size.height);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	8bdb      	ldrh	r3, [r3, #30]
            y_scaled = interp(coord.x,
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	2300      	movs	r3, #0
 8007358:	f7ff ff42 	bl	80071e0 <interp>
 800735c:	62b8      	str	r0, [r7, #40]	; 0x28
            break;
 800735e:	e01e      	b.n	800739e <ili9341_project_touch_coordinate+0x11e>
            x_scaled = interp(coord.y,
 8007360:	8a7b      	ldrh	r3, [r7, #18]
 8007362:	4618      	mov	r0, r3
                dev->touch_scalar.min.y, dev->touch_scalar.max.y,
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
            x_scaled = interp(coord.y,
 8007368:	4619      	mov	r1, r3
                dev->touch_scalar.min.y, dev->touch_scalar.max.y,
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
            x_scaled = interp(coord.y,
 800736e:	461a      	mov	r2, r3
                0U, dev->screen_size.width);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	8b9b      	ldrh	r3, [r3, #28]
            x_scaled = interp(coord.y,
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	2300      	movs	r3, #0
 8007378:	f7ff ff32 	bl	80071e0 <interp>
 800737c:	62f8      	str	r0, [r7, #44]	; 0x2c
            y_scaled = interp(coord.x,
 800737e:	8a3b      	ldrh	r3, [r7, #16]
 8007380:	4618      	mov	r0, r3
                dev->touch_scalar.min.x, dev->touch_scalar.max.x,
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
            y_scaled = interp(coord.x,
 8007386:	4619      	mov	r1, r3
                dev->touch_scalar.min.x, dev->touch_scalar.max.x,
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
            y_scaled = interp(coord.x,
 800738c:	461a      	mov	r2, r3
                0U, dev->screen_size.height);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	8bdb      	ldrh	r3, [r3, #30]
            y_scaled = interp(coord.x,
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	2300      	movs	r3, #0
 8007396:	f7ff ff23 	bl	80071e0 <interp>
 800739a:	62b8      	str	r0, [r7, #40]	; 0x28
            break;
 800739c:	bf00      	nop
            (ili9341_two_dimension_t){{x_scaled}, {y_scaled}},
 800739e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	82bb      	strh	r3, [r7, #20]
 80073a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	82fb      	strh	r3, [r7, #22]
            (ili9341_two_dimension_t){{0U}, {0U}},
 80073aa:	2300      	movs	r3, #0
 80073ac:	833b      	strh	r3, [r7, #24]
 80073ae:	2300      	movs	r3, #0
 80073b0:	837b      	strh	r3, [r7, #26]
            (ili9341_two_dimension_t){{dev->screen_size.width}, {dev->screen_size.height}});
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	8b9b      	ldrh	r3, [r3, #28]
 80073b6:	83bb      	strh	r3, [r7, #28]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	8bdb      	ldrh	r3, [r3, #30]
 80073bc:	83fb      	strh	r3, [r7, #30]
        coord = ili9341_clip_touch_coordinate(
 80073be:	69fa      	ldr	r2, [r7, #28]
 80073c0:	69b9      	ldr	r1, [r7, #24]
 80073c2:	6978      	ldr	r0, [r7, #20]
 80073c4:	f7ff ff2e 	bl	8007224 <ili9341_clip_touch_coordinate>
 80073c8:	4603      	mov	r3, r0
 80073ca:	613b      	str	r3, [r7, #16]
        break;
 80073cc:	e13c      	b.n	8007648 <ili9341_project_touch_coordinate+0x3c8>
          .x = __FROUND(uint16_t, dev->touch_3point.alpha_x * coord.x +
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80073d4:	8a3b      	ldrh	r3, [r7, #16]
 80073d6:	ee07 3a90 	vmov	s15, r3
 80073da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 80073e8:	8a7b      	ldrh	r3, [r7, #18]
 80073ea:	ee07 3a90 	vmov	s15, r3
 80073ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007406:	ee77 7a27 	vadd.f32	s15, s14, s15
        coord = (ili9341_two_dimension_t){
 800740a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800740e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007412:	d529      	bpl.n	8007468 <ili9341_project_touch_coordinate+0x1e8>
          .x = __FROUND(uint16_t, dev->touch_3point.alpha_x * coord.x +
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800741a:	8a3b      	ldrh	r3, [r7, #16]
 800741c:	ee07 3a90 	vmov	s15, r3
 8007420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007424:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800742e:	8a7b      	ldrh	r3, [r7, #18]
 8007430:	ee07 3a90 	vmov	s15, r3
 8007434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800743c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007444:	ee07 3a90 	vmov	s15, r3
 8007448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800744c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007450:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800745c:	ee17 3a90 	vmov	r3, s15
 8007460:	b29b      	uxth	r3, r3
        coord = (ili9341_two_dimension_t){
 8007462:	425b      	negs	r3, r3
 8007464:	b29a      	uxth	r2, r3
 8007466:	e026      	b.n	80074b6 <ili9341_project_touch_coordinate+0x236>
          .x = __FROUND(uint16_t, dev->touch_3point.alpha_x * coord.x +
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800746e:	8a3b      	ldrh	r3, [r7, #16]
 8007470:	ee07 3a90 	vmov	s15, r3
 8007474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007478:	ee27 7a27 	vmul.f32	s14, s14, s15
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8007482:	8a7b      	ldrh	r3, [r7, #18]
 8007484:	ee07 3a90 	vmov	s15, r3
 8007488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800748c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007498:	ee07 3a90 	vmov	s15, r3
 800749c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80074a8:	ee77 7a87 	vadd.f32	s15, s15, s14
        coord = (ili9341_two_dimension_t){
 80074ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074b0:	ee17 3a90 	vmov	r3, s15
 80074b4:	b29a      	uxth	r2, r3
          .y = __FROUND(uint16_t, dev->touch_3point.alpha_y * coord.x +
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80074bc:	8a3b      	ldrh	r3, [r7, #16]
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80074d0:	8a7b      	ldrh	r3, [r7, #18]
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80074de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074ee:	ee77 7a27 	vadd.f32	s15, s14, s15
        coord = (ili9341_two_dimension_t){
 80074f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80074f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074fa:	d529      	bpl.n	8007550 <ili9341_project_touch_coordinate+0x2d0>
          .y = __FROUND(uint16_t, dev->touch_3point.alpha_y * coord.x +
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8007502:	8a3b      	ldrh	r3, [r7, #16]
 8007504:	ee07 3a90 	vmov	s15, r3
 8007508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800750c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8007516:	8a7b      	ldrh	r3, [r7, #18]
 8007518:	ee07 3a90 	vmov	s15, r3
 800751c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007524:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800752c:	ee07 3a90 	vmov	s15, r3
 8007530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007538:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800753c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007544:	ee17 3a90 	vmov	r3, s15
 8007548:	b29b      	uxth	r3, r3
        coord = (ili9341_two_dimension_t){
 800754a:	425b      	negs	r3, r3
 800754c:	b29b      	uxth	r3, r3
 800754e:	e026      	b.n	800759e <ili9341_project_touch_coordinate+0x31e>
          .y = __FROUND(uint16_t, dev->touch_3point.alpha_y * coord.x +
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8007556:	8a3b      	ldrh	r3, [r7, #16]
 8007558:	ee07 3a90 	vmov	s15, r3
 800755c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007560:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 800756a:	8a7b      	ldrh	r3, [r7, #18]
 800756c:	ee07 3a90 	vmov	s15, r3
 8007570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007578:	ee37 7a27 	vadd.f32	s14, s14, s15
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007580:	ee07 3a90 	vmov	s15, r3
 8007584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800758c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007590:	ee77 7a87 	vadd.f32	s15, s15, s14
        coord = (ili9341_two_dimension_t){
 8007594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007598:	ee17 3a90 	vmov	r3, s15
 800759c:	b29b      	uxth	r3, r3
 800759e:	823a      	strh	r2, [r7, #16]
 80075a0:	827b      	strh	r3, [r7, #18]
            (ili9341_two_dimension_t){ {0U}, {0U} },
 80075a2:	2300      	movs	r3, #0
 80075a4:	843b      	strh	r3, [r7, #32]
 80075a6:	2300      	movs	r3, #0
 80075a8:	847b      	strh	r3, [r7, #34]	; 0x22
        coord = ili9341_clip_touch_coordinate(
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075ae:	6a39      	ldr	r1, [r7, #32]
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f7ff fe37 	bl	8007224 <ili9341_clip_touch_coordinate>
 80075b6:	4603      	mov	r3, r0
 80075b8:	613b      	str	r3, [r7, #16]
        switch (dev->orientation % isoCOUNT) {
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f993 301a 	ldrsb.w	r3, [r3, #26]
 80075c0:	425a      	negs	r2, r3
 80075c2:	f003 0303 	and.w	r3, r3, #3
 80075c6:	f002 0203 	and.w	r2, r2, #3
 80075ca:	bf58      	it	pl
 80075cc:	4253      	negpl	r3, r2
 80075ce:	b25b      	sxtb	r3, r3
 80075d0:	2b03      	cmp	r3, #3
 80075d2:	d838      	bhi.n	8007646 <ili9341_project_touch_coordinate+0x3c6>
 80075d4:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <ili9341_project_touch_coordinate+0x35c>)
 80075d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075da:	bf00      	nop
 80075dc:	080075ed 	.word	0x080075ed
 80075e0:	08007601 	.word	0x08007601
 80075e4:	0800760b 	.word	0x0800760b
 80075e8:	08007621 	.word	0x08007621
                .x = dev->touch_3point.scale.width - coord.y,
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80075f2:	8a7b      	ldrh	r3, [r7, #18]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	b29a      	uxth	r2, r3
                .y = coord.x
 80075f8:	8a3b      	ldrh	r3, [r7, #16]
            rotate = (ili9341_two_dimension_t){
 80075fa:	81ba      	strh	r2, [r7, #12]
 80075fc:	81fb      	strh	r3, [r7, #14]
            break;
 80075fe:	e01f      	b.n	8007640 <ili9341_project_touch_coordinate+0x3c0>
              .x = coord.x,
 8007600:	8a3a      	ldrh	r2, [r7, #16]
              .y = coord.y
 8007602:	8a7b      	ldrh	r3, [r7, #18]
            rotate = (ili9341_two_dimension_t){
 8007604:	81ba      	strh	r2, [r7, #12]
 8007606:	81fb      	strh	r3, [r7, #14]
            break;
 8007608:	e01a      	b.n	8007640 <ili9341_project_touch_coordinate+0x3c0>
              .x = coord.y,
 800760a:	8a79      	ldrh	r1, [r7, #18]
              .y = dev->touch_3point.scale.height - coord.x
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8007612:	8a3b      	ldrh	r3, [r7, #16]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	b29b      	uxth	r3, r3
            rotate = (ili9341_two_dimension_t){
 8007618:	460a      	mov	r2, r1
 800761a:	81ba      	strh	r2, [r7, #12]
 800761c:	81fb      	strh	r3, [r7, #14]
            break;
 800761e:	e00f      	b.n	8007640 <ili9341_project_touch_coordinate+0x3c0>
              .x = dev->touch_3point.scale.width - coord.x,
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8007626:	8a3b      	ldrh	r3, [r7, #16]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	b299      	uxth	r1, r3
              .y = dev->touch_3point.scale.height - coord.y
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8007632:	8a7b      	ldrh	r3, [r7, #18]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	b29b      	uxth	r3, r3
            rotate = (ili9341_two_dimension_t){
 8007638:	460a      	mov	r2, r1
 800763a:	81ba      	strh	r2, [r7, #12]
 800763c:	81fb      	strh	r3, [r7, #14]
            break;
 800763e:	bf00      	nop
        break;
 8007640:	e001      	b.n	8007646 <ili9341_project_touch_coordinate+0x3c6>
    }
  }
 8007642:	bf00      	nop
 8007644:	e000      	b.n	8007648 <ili9341_project_touch_coordinate+0x3c8>
        break;
 8007646:	bf00      	nop

  return coord;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	627b      	str	r3, [r7, #36]	; 0x24
 800764c:	2300      	movs	r3, #0
 800764e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007650:	f362 030f 	bfi	r3, r2, #0, #16
 8007654:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007656:	f362 431f 	bfi	r3, r2, #16, #16
}
 800765a:	4618      	mov	r0, r3
 800765c:	3730      	adds	r7, #48	; 0x30
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop

08007664 <ili9341_rgb_wheel>:
    int16_t x, int16_t y, int16_t r, uint8_t corners, int16_t delta);

// ------------------------------------------------------- exported functions --

ili9341_color_rgb_t ili9341_rgb_wheel(uint8_t *pos)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  ili9341_color_rgb_t rgb;
  uint8_t curr = *pos;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	73fb      	strb	r3, [r7, #15]
  *pos += 1;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	3301      	adds	r3, #1
 800767a:	b2da      	uxtb	r2, r3
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	701a      	strb	r2, [r3, #0]

  curr = 0xFF - curr;
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	43db      	mvns	r3, r3
 8007684:	73fb      	strb	r3, [r7, #15]
  if (curr < 0x55) {
 8007686:	7bfb      	ldrb	r3, [r7, #15]
 8007688:	2b54      	cmp	r3, #84	; 0x54
 800768a:	d814      	bhi.n	80076b6 <ili9341_rgb_wheel+0x52>
    rgb.red   = 0x03 * curr;
 800768c:	7bfb      	ldrb	r3, [r7, #15]
 800768e:	b29b      	uxth	r3, r3
 8007690:	461a      	mov	r2, r3
 8007692:	0052      	lsls	r2, r2, #1
 8007694:	4413      	add	r3, r2
 8007696:	b29b      	uxth	r3, r3
 8007698:	b21b      	sxth	r3, r3
 800769a:	813b      	strh	r3, [r7, #8]
    rgb.green = 0xFF - curr * 0x03;
 800769c:	7bfb      	ldrb	r3, [r7, #15]
 800769e:	b29b      	uxth	r3, r3
 80076a0:	461a      	mov	r2, r3
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	33ff      	adds	r3, #255	; 0xff
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	b21b      	sxth	r3, r3
 80076ae:	817b      	strh	r3, [r7, #10]
    rgb.blue  = 0x00;
 80076b0:	2300      	movs	r3, #0
 80076b2:	81bb      	strh	r3, [r7, #12]
 80076b4:	e031      	b.n	800771a <ili9341_rgb_wheel+0xb6>
  }
  else if (curr < 0xAA) {
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
 80076b8:	2ba9      	cmp	r3, #169	; 0xa9
 80076ba:	d817      	bhi.n	80076ec <ili9341_rgb_wheel+0x88>
    curr -= 0x55;
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
 80076be:	3b55      	subs	r3, #85	; 0x55
 80076c0:	73fb      	strb	r3, [r7, #15]
    rgb.red   = 0xFF - curr * 0x03;
 80076c2:	7bfb      	ldrb	r3, [r7, #15]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	461a      	mov	r2, r3
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	33ff      	adds	r3, #255	; 0xff
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	b21b      	sxth	r3, r3
 80076d4:	813b      	strh	r3, [r7, #8]
    rgb.green = 0x00;
 80076d6:	2300      	movs	r3, #0
 80076d8:	817b      	strh	r3, [r7, #10]
    rgb.blue  = 0x03 * curr;
 80076da:	7bfb      	ldrb	r3, [r7, #15]
 80076dc:	b29b      	uxth	r3, r3
 80076de:	461a      	mov	r2, r3
 80076e0:	0052      	lsls	r2, r2, #1
 80076e2:	4413      	add	r3, r2
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	b21b      	sxth	r3, r3
 80076e8:	81bb      	strh	r3, [r7, #12]
 80076ea:	e016      	b.n	800771a <ili9341_rgb_wheel+0xb6>
  }
  else {
    curr -= 0xAA;
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
 80076ee:	3356      	adds	r3, #86	; 0x56
 80076f0:	73fb      	strb	r3, [r7, #15]
    rgb.red   = 0x00;
 80076f2:	2300      	movs	r3, #0
 80076f4:	813b      	strh	r3, [r7, #8]
    rgb.green = 0x03 * curr;
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	461a      	mov	r2, r3
 80076fc:	0052      	lsls	r2, r2, #1
 80076fe:	4413      	add	r3, r2
 8007700:	b29b      	uxth	r3, r3
 8007702:	b21b      	sxth	r3, r3
 8007704:	817b      	strh	r3, [r7, #10]
    rgb.blue  = 0xFF - curr * 0x03;
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	b29b      	uxth	r3, r3
 800770a:	461a      	mov	r2, r3
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	b29b      	uxth	r3, r3
 8007712:	33ff      	adds	r3, #255	; 0xff
 8007714:	b29b      	uxth	r3, r3
 8007716:	b21b      	sxth	r3, r3
 8007718:	81bb      	strh	r3, [r7, #12]
  }
  return rgb;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	461a      	mov	r2, r3
 800771e:	f107 0308 	add.w	r3, r7, #8
 8007722:	6818      	ldr	r0, [r3, #0]
 8007724:	6010      	str	r0, [r2, #0]
 8007726:	889b      	ldrh	r3, [r3, #4]
 8007728:	8093      	strh	r3, [r2, #4]
}
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <ili9341_color_wheel>:

ili9341_color_t ili9341_color_wheel(uint8_t *pos)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b084      	sub	sp, #16
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  ili9341_color_rgb_t rgb = ili9341_rgb_wheel(pos);
 800773e:	f107 0308 	add.w	r3, r7, #8
 8007742:	6879      	ldr	r1, [r7, #4]
 8007744:	4618      	mov	r0, r3
 8007746:	f7ff ff8d 	bl	8007664 <ili9341_rgb_wheel>
  return __ILI9341_COLOR565_RGB(rgb);
 800774a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800774e:	b29b      	uxth	r3, r3
 8007750:	021b      	lsls	r3, r3, #8
 8007752:	b21b      	sxth	r3, r3
 8007754:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007758:	f023 0307 	bic.w	r3, r3, #7
 800775c:	b21a      	sxth	r2, r3
 800775e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007762:	b29b      	uxth	r3, r3
 8007764:	00db      	lsls	r3, r3, #3
 8007766:	b21b      	sxth	r3, r3
 8007768:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800776c:	b21b      	sxth	r3, r3
 800776e:	4313      	orrs	r3, r2
 8007770:	b21a      	sxth	r2, r3
 8007772:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007776:	b29b      	uxth	r3, r3
 8007778:	10db      	asrs	r3, r3, #3
 800777a:	b21b      	sxth	r3, r3
 800777c:	f003 031f 	and.w	r3, r3, #31
 8007780:	b21b      	sxth	r3, r3
 8007782:	4313      	orrs	r3, r2
 8007784:	b21b      	sxth	r3, r3
 8007786:	b29b      	uxth	r3, r3
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <ili9341_spi_tft_set_address_rect>:

void ili9341_spi_tft_set_address_rect(ili9341_device_t *dev,
    uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b088      	sub	sp, #32
 8007794:	af02      	add	r7, sp, #8
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	4608      	mov	r0, r1
 800779a:	4611      	mov	r1, r2
 800779c:	461a      	mov	r2, r3
 800779e:	4603      	mov	r3, r0
 80077a0:	817b      	strh	r3, [r7, #10]
 80077a2:	460b      	mov	r3, r1
 80077a4:	813b      	strh	r3, [r7, #8]
 80077a6:	4613      	mov	r3, r2
 80077a8:	80fb      	strh	r3, [r7, #6]
  ili9341_spi_tft_select(dev);
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f7ff fa32 	bl	8006c14 <ili9341_spi_tft_select>

  // column address set
  ili9341_spi_write_command_data(dev, issNONE,
      0x2A, 4, (uint8_t[]){ (x0 >> 8) & 0xFF, x0 & 0xFF,
 80077b0:	897b      	ldrh	r3, [r7, #10]
 80077b2:	0a1b      	lsrs	r3, r3, #8
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	743b      	strb	r3, [r7, #16]
 80077ba:	897b      	ldrh	r3, [r7, #10]
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	747b      	strb	r3, [r7, #17]
 80077c0:	88fb      	ldrh	r3, [r7, #6]
 80077c2:	0a1b      	lsrs	r3, r3, #8
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	74bb      	strb	r3, [r7, #18]
 80077ca:	88fb      	ldrh	r3, [r7, #6]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	74fb      	strb	r3, [r7, #19]
  ili9341_spi_write_command_data(dev, issNONE,
 80077d0:	f107 0310 	add.w	r3, r7, #16
 80077d4:	9300      	str	r3, [sp, #0]
 80077d6:	2304      	movs	r3, #4
 80077d8:	222a      	movs	r2, #42	; 0x2a
 80077da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f7ff fafb 	bl	8006dda <ili9341_spi_write_command_data>
                            (x1 >> 8) & 0xFF, x1 & 0xFF });

  // row address set
  ili9341_spi_write_command_data(dev, issNONE,
      0x2B, 4, (uint8_t[]){ (y0 >> 8) & 0xFF, y0 & 0xFF,
 80077e4:	893b      	ldrh	r3, [r7, #8]
 80077e6:	0a1b      	lsrs	r3, r3, #8
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	753b      	strb	r3, [r7, #20]
 80077ee:	893b      	ldrh	r3, [r7, #8]
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	757b      	strb	r3, [r7, #21]
 80077f4:	8c3b      	ldrh	r3, [r7, #32]
 80077f6:	0a1b      	lsrs	r3, r3, #8
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	75bb      	strb	r3, [r7, #22]
 80077fe:	8c3b      	ldrh	r3, [r7, #32]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	75fb      	strb	r3, [r7, #23]
  ili9341_spi_write_command_data(dev, issNONE,
 8007804:	f107 0314 	add.w	r3, r7, #20
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	2304      	movs	r3, #4
 800780c:	222b      	movs	r2, #43	; 0x2b
 800780e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f7ff fae1 	bl	8006dda <ili9341_spi_write_command_data>
                            (y1 >> 8) & 0xFF, y1 & 0xFF });

  // write to RAM
  ili9341_spi_write_command(dev, issNONE, 0x2C);
 8007818:	222c      	movs	r2, #44	; 0x2c
 800781a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f7ff fa6a 	bl	8006cf8 <ili9341_spi_write_command>

  ili9341_spi_tft_release(dev);
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f7ff fa05 	bl	8006c34 <ili9341_spi_tft_release>
}
 800782a:	bf00      	nop
 800782c:	3718      	adds	r7, #24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <ili9341_transmit_wait>:

void ili9341_transmit_wait(ili9341_device_t *dev)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  if (NULL == dev)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00b      	beq.n	8007858 <ili9341_transmit_wait+0x26>
    { return; }

  while (HAL_DMA_STATE_BUSY == HAL_DMA_GetState(dev->spi_hal->hdmatx))
 8007840:	e000      	b.n	8007844 <ili9341_transmit_wait+0x12>
    { continue; }
 8007842:	bf00      	nop
  while (HAL_DMA_STATE_BUSY == HAL_DMA_GetState(dev->spi_hal->hdmatx))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784a:	4618      	mov	r0, r3
 800784c:	f004 fe91 	bl	800c572 <HAL_DMA_GetState>
 8007850:	4603      	mov	r3, r0
 8007852:	2b02      	cmp	r3, #2
 8007854:	d0f5      	beq.n	8007842 <ili9341_transmit_wait+0x10>
 8007856:	e000      	b.n	800785a <ili9341_transmit_wait+0x28>
    { return; }
 8007858:	bf00      	nop
}
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <ili9341_transmit_color>:

void ili9341_transmit_color(ili9341_device_t *dev, uint16_t size,
    uint16_t color[]/* already byte-swapped (LE) */, ili9341_bool_t wait)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	607a      	str	r2, [r7, #4]
 800786a:	461a      	mov	r2, r3
 800786c:	460b      	mov	r3, r1
 800786e:	817b      	strh	r3, [r7, #10]
 8007870:	4613      	mov	r3, r2
 8007872:	727b      	strb	r3, [r7, #9]
  if ((NULL == dev) || (0 == size) || (NULL == color))
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d013      	beq.n	80078a2 <ili9341_transmit_color+0x42>
 800787a:	897b      	ldrh	r3, [r7, #10]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d010      	beq.n	80078a2 <ili9341_transmit_color+0x42>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00d      	beq.n	80078a2 <ili9341_transmit_color+0x42>
    { return; }

  HAL_SPI_Transmit_DMA(dev->spi_hal, (uint8_t *)color, size);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	897a      	ldrh	r2, [r7, #10]
 800788c:	6879      	ldr	r1, [r7, #4]
 800788e:	4618      	mov	r0, r3
 8007890:	f006 fcd8 	bl	800e244 <HAL_SPI_Transmit_DMA>

  if (ibOK(wait))
 8007894:	7a7b      	ldrb	r3, [r7, #9]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d004      	beq.n	80078a4 <ili9341_transmit_color+0x44>
    { ili9341_transmit_wait(dev); }
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f7ff ffc9 	bl	8007832 <ili9341_transmit_wait>
 80078a0:	e000      	b.n	80078a4 <ili9341_transmit_color+0x44>
    { return; }
 80078a2:	bf00      	nop
}
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <ili9341_draw_pixel>:

void ili9341_draw_pixel(ili9341_device_t *dev, ili9341_color_t color,
    int16_t x, int16_t y)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b088      	sub	sp, #32
 80078ae:	af02      	add	r7, sp, #8
 80078b0:	60f8      	str	r0, [r7, #12]
 80078b2:	4608      	mov	r0, r1
 80078b4:	4611      	mov	r1, r2
 80078b6:	461a      	mov	r2, r3
 80078b8:	4603      	mov	r3, r0
 80078ba:	817b      	strh	r3, [r7, #10]
 80078bc:	460b      	mov	r3, r1
 80078be:	813b      	strh	r3, [r7, #8]
 80078c0:	4613      	mov	r3, r2
 80078c2:	80fb      	strh	r3, [r7, #6]
  if (ibNOT(ili9341_clip_rect(dev, &x, &y, NULL, NULL)))
 80078c4:	1dba      	adds	r2, r7, #6
 80078c6:	f107 0108 	add.w	r1, r7, #8
 80078ca:	2300      	movs	r3, #0
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	2300      	movs	r3, #0
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 fc57 	bl	8008184 <ili9341_clip_rect>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d03a      	beq.n	8007952 <ili9341_draw_pixel+0xa8>
    { return; }

  uint16_t color_le = __LEu16(&color);
 80078dc:	f107 030a 	add.w	r3, r7, #10
 80078e0:	3301      	adds	r3, #1
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	b21a      	sxth	r2, r3
 80078e6:	f107 030a 	add.w	r3, r7, #10
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	021b      	lsls	r3, r3, #8
 80078ee:	b21b      	sxth	r3, r3
 80078f0:	4313      	orrs	r3, r2
 80078f2:	b21b      	sxth	r3, r3
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	82fb      	strh	r3, [r7, #22]

  // select target region
  ili9341_spi_tft_set_address_rect(dev, x, y, x + 1, y + 1);
 80078f8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80078fc:	b299      	uxth	r1, r3
 80078fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007902:	b29a      	uxth	r2, r3
 8007904:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007908:	b29b      	uxth	r3, r3
 800790a:	3301      	adds	r3, #1
 800790c:	b298      	uxth	r0, r3
 800790e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007912:	b29b      	uxth	r3, r3
 8007914:	3301      	adds	r3, #1
 8007916:	b29b      	uxth	r3, r3
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	4603      	mov	r3, r0
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f7ff ff37 	bl	8007790 <ili9341_spi_tft_set_address_rect>

  ili9341_spi_tft_select(dev);
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f7ff f976 	bl	8006c14 <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(dev->data_command_port, dev->data_command_pin, __GPIO_PIN_SET__);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6958      	ldr	r0, [r3, #20]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	8b1b      	ldrh	r3, [r3, #24]
 8007930:	2201      	movs	r2, #1
 8007932:	4619      	mov	r1, r3
 8007934:	f005 f866 	bl	800ca04 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(dev->spi_hal, (uint8_t *)&color_le, 2U, __SPI_MAX_DELAY__);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6818      	ldr	r0, [r3, #0]
 800793c:	f107 0116 	add.w	r1, r7, #22
 8007940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007944:	2202      	movs	r2, #2
 8007946:	f006 f903 	bl	800db50 <HAL_SPI_Transmit>

  ili9341_spi_tft_release(dev);
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f7ff f972 	bl	8006c34 <ili9341_spi_tft_release>
 8007950:	e000      	b.n	8007954 <ili9341_draw_pixel+0xaa>
    { return; }
 8007952:	bf00      	nop
}
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <ili9341_draw_line>:

void ili9341_draw_line(ili9341_device_t *dev, ili9341_color_t color,
    int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 800795a:	b590      	push	{r4, r7, lr}
 800795c:	b08d      	sub	sp, #52	; 0x34
 800795e:	af02      	add	r7, sp, #8
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	4608      	mov	r0, r1
 8007964:	4611      	mov	r1, r2
 8007966:	461a      	mov	r2, r3
 8007968:	4603      	mov	r3, r0
 800796a:	817b      	strh	r3, [r7, #10]
 800796c:	460b      	mov	r3, r1
 800796e:	813b      	strh	r3, [r7, #8]
 8007970:	4613      	mov	r3, r2
 8007972:	80fb      	strh	r3, [r7, #6]
  int16_t dx = x1 - x0;
 8007974:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8007976:	893b      	ldrh	r3, [r7, #8]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	b29b      	uxth	r3, r3
 800797c:	83fb      	strh	r3, [r7, #30]
  int16_t dy = y1 - y0;
 800797e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8007980:	88fb      	ldrh	r3, [r7, #6]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	b29b      	uxth	r3, r3
 8007986:	83bb      	strh	r3, [r7, #28]

  int16_t x, y;
  int16_t err;
  int16_t step;

  if (0 == dx) {
 8007988:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d117      	bne.n	80079c0 <ili9341_draw_line+0x66>
    // vertical line
    if (0 == dy)
 8007990:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 80c7 	beq.w	8007b28 <ili9341_draw_line+0x1ce>
      { return; } // distance = 0, no line to draw
    ili9341_fill_rect(dev, color, x0, y0, 1, abs(dy));
 800799a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	bfb8      	it	lt
 80079a2:	425b      	neglt	r3, r3
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80079aa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80079ae:	8979      	ldrh	r1, [r7, #10]
 80079b0:	9301      	str	r3, [sp, #4]
 80079b2:	2301      	movs	r3, #1
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	4603      	mov	r3, r0
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f000 f92b 	bl	8007c14 <ili9341_fill_rect>
    return;
 80079be:	e0b6      	b.n	8007b2e <ili9341_draw_line+0x1d4>
  }
  else if (0 == dy) {
 80079c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d118      	bne.n	80079fa <ili9341_draw_line+0xa0>
    // horizontal line
    if (0 == dx)
 80079c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 80ad 	beq.w	8007b2c <ili9341_draw_line+0x1d2>
      { return; } // distance = 0, no line to draw
    ili9341_fill_rect(dev, color, x0, y0, abs(dx), 1);
 80079d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	bfb8      	it	lt
 80079da:	425b      	neglt	r3, r3
 80079dc:	b29b      	uxth	r3, r3
 80079de:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80079e2:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 80079e6:	8979      	ldrh	r1, [r7, #10]
 80079e8:	2201      	movs	r2, #1
 80079ea:	9201      	str	r2, [sp, #4]
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	4623      	mov	r3, r4
 80079f0:	4602      	mov	r2, r0
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 f90e 	bl	8007c14 <ili9341_fill_rect>
    return;
 80079f8:	e099      	b.n	8007b2e <ili9341_draw_line+0x1d4>
  }

  ili9341_bool_t is_steep = abs(dy) > abs(dx);
 80079fa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80079fe:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8007a02:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8007a06:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	bfb8      	it	lt
 8007a0e:	425b      	neglt	r3, r3
 8007a10:	429a      	cmp	r2, r3
 8007a12:	bfcc      	ite	gt
 8007a14:	2301      	movgt	r3, #1
 8007a16:	2300      	movle	r3, #0
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	76fb      	strb	r3, [r7, #27]
  if (is_steep) {
 8007a1c:	7efb      	ldrb	r3, [r7, #27]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00b      	beq.n	8007a3a <ili9341_draw_line+0xe0>
    __SWAP(int16_t, x0, y0);
 8007a22:	893b      	ldrh	r3, [r7, #8]
 8007a24:	833b      	strh	r3, [r7, #24]
 8007a26:	88fb      	ldrh	r3, [r7, #6]
 8007a28:	813b      	strh	r3, [r7, #8]
 8007a2a:	8b3b      	ldrh	r3, [r7, #24]
 8007a2c:	80fb      	strh	r3, [r7, #6]
    __SWAP(int16_t, x1, y1);
 8007a2e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007a30:	82fb      	strh	r3, [r7, #22]
 8007a32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007a34:	873b      	strh	r3, [r7, #56]	; 0x38
 8007a36:	8afb      	ldrh	r3, [r7, #22]
 8007a38:	87bb      	strh	r3, [r7, #60]	; 0x3c
  }

  if (x0 > x1) {
 8007a3a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007a3e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8007a42:	429a      	cmp	r2, r3
 8007a44:	dd0b      	ble.n	8007a5e <ili9341_draw_line+0x104>
    __SWAP(int16_t, x0, x1);
 8007a46:	893b      	ldrh	r3, [r7, #8]
 8007a48:	82bb      	strh	r3, [r7, #20]
 8007a4a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007a4c:	813b      	strh	r3, [r7, #8]
 8007a4e:	8abb      	ldrh	r3, [r7, #20]
 8007a50:	873b      	strh	r3, [r7, #56]	; 0x38
    __SWAP(int16_t, y0, y1);
 8007a52:	88fb      	ldrh	r3, [r7, #6]
 8007a54:	827b      	strh	r3, [r7, #18]
 8007a56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007a58:	80fb      	strh	r3, [r7, #6]
 8007a5a:	8a7b      	ldrh	r3, [r7, #18]
 8007a5c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  }

  dx = x1 - x0;
 8007a5e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8007a60:	893b      	ldrh	r3, [r7, #8]
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	83fb      	strh	r3, [r7, #30]
  dy = abs(y1 - y0);
 8007a68:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 8007a6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	bfb8      	it	lt
 8007a76:	425b      	neglt	r3, r3
 8007a78:	83bb      	strh	r3, [r7, #28]
  err = dx >> 1;
 8007a7a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007a7e:	105b      	asrs	r3, r3, #1
 8007a80:	847b      	strh	r3, [r7, #34]	; 0x22

  if (y0 < y1)
 8007a82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007a86:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	da02      	bge.n	8007a94 <ili9341_draw_line+0x13a>
    { step = 1; }
 8007a8e:	2301      	movs	r3, #1
 8007a90:	843b      	strh	r3, [r7, #32]
 8007a92:	e042      	b.n	8007b1a <ili9341_draw_line+0x1c0>
  else
    { step = -1; }
 8007a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a98:	843b      	strh	r3, [r7, #32]

  while (x0 <= x1) {
 8007a9a:	e03e      	b.n	8007b1a <ili9341_draw_line+0x1c0>

    if (is_steep)
 8007a9c:	7efb      	ldrb	r3, [r7, #27]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d004      	beq.n	8007aac <ili9341_draw_line+0x152>
      { x = y0; y = x0; }
 8007aa2:	88fb      	ldrh	r3, [r7, #6]
 8007aa4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007aa6:	893b      	ldrh	r3, [r7, #8]
 8007aa8:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007aaa:	e003      	b.n	8007ab4 <ili9341_draw_line+0x15a>
    else
      { x = x0; y = y0; }
 8007aac:	893b      	ldrh	r3, [r7, #8]
 8007aae:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007ab0:	88fb      	ldrh	r3, [r7, #6]
 8007ab2:	84bb      	strh	r3, [r7, #36]	; 0x24

    // continue algorithm even if current pixel is outside of screen
    // bounds, so that the line is drawn at correct position once
    // it actually enters screen bounds (if ever).
    if ( (x >= 0) && (x <= dev->screen_size.width) &&
 8007ab4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	db17      	blt.n	8007aec <ili9341_draw_line+0x192>
 8007abc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	8b92      	ldrh	r2, [r2, #28]
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	dc11      	bgt.n	8007aec <ili9341_draw_line+0x192>
 8007ac8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	db0d      	blt.n	8007aec <ili9341_draw_line+0x192>
         (y >= 0) && (y <= dev->screen_size.height) ) {
 8007ad0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	8bd2      	ldrh	r2, [r2, #30]
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	dc07      	bgt.n	8007aec <ili9341_draw_line+0x192>
      ili9341_draw_pixel(dev, color, x, y);
 8007adc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007ae0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8007ae4:	8979      	ldrh	r1, [r7, #10]
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f7ff fedf 	bl	80078aa <ili9341_draw_pixel>
    }

    err -= dy;
 8007aec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007aee:	8bbb      	ldrh	r3, [r7, #28]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	847b      	strh	r3, [r7, #34]	; 0x22
    if (err < 0) {
 8007af6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	da09      	bge.n	8007b12 <ili9341_draw_line+0x1b8>
      y0 += step;
 8007afe:	88fa      	ldrh	r2, [r7, #6]
 8007b00:	8c3b      	ldrh	r3, [r7, #32]
 8007b02:	4413      	add	r3, r2
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	80fb      	strh	r3, [r7, #6]
      err += dx;
 8007b08:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007b0a:	8bfb      	ldrh	r3, [r7, #30]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    ++x0;
 8007b12:	893b      	ldrh	r3, [r7, #8]
 8007b14:	3301      	adds	r3, #1
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	813b      	strh	r3, [r7, #8]
  while (x0 <= x1) {
 8007b1a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007b1e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8007b22:	429a      	cmp	r2, r3
 8007b24:	ddba      	ble.n	8007a9c <ili9341_draw_line+0x142>
 8007b26:	e002      	b.n	8007b2e <ili9341_draw_line+0x1d4>
      { return; } // distance = 0, no line to draw
 8007b28:	bf00      	nop
 8007b2a:	e000      	b.n	8007b2e <ili9341_draw_line+0x1d4>
      { return; } // distance = 0, no line to draw
 8007b2c:	bf00      	nop
  }
}
 8007b2e:	372c      	adds	r7, #44	; 0x2c
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd90      	pop	{r4, r7, pc}

08007b34 <ili9341_draw_rect>:

void ili9341_draw_rect(ili9341_device_t *dev, ili9341_color_t color,
    int16_t x, int16_t y, uint16_t w, uint16_t h)
{
 8007b34:	b590      	push	{r4, r7, lr}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af02      	add	r7, sp, #8
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	4608      	mov	r0, r1
 8007b3e:	4611      	mov	r1, r2
 8007b40:	461a      	mov	r2, r3
 8007b42:	4603      	mov	r3, r0
 8007b44:	817b      	strh	r3, [r7, #10]
 8007b46:	460b      	mov	r3, r1
 8007b48:	813b      	strh	r3, [r7, #8]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	80fb      	strh	r3, [r7, #6]
  ili9341_draw_line(dev, color,     x,     y,   x+w,     y );
 8007b4e:	893a      	ldrh	r2, [r7, #8]
 8007b50:	8c3b      	ldrh	r3, [r7, #32]
 8007b52:	4413      	add	r3, r2
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	b21b      	sxth	r3, r3
 8007b58:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8007b5c:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8007b60:	8979      	ldrh	r1, [r7, #10]
 8007b62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007b66:	9201      	str	r2, [sp, #4]
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	4623      	mov	r3, r4
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f7ff fef3 	bl	800795a <ili9341_draw_line>
  ili9341_draw_line(dev, color,     x, y+h-1,   x+w, y+h-1 );
 8007b74:	88fa      	ldrh	r2, [r7, #6]
 8007b76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b78:	4413      	add	r3, r2
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	b21c      	sxth	r4, r3
 8007b82:	893a      	ldrh	r2, [r7, #8]
 8007b84:	8c3b      	ldrh	r3, [r7, #32]
 8007b86:	4413      	add	r3, r2
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	b21b      	sxth	r3, r3
 8007b8c:	88f9      	ldrh	r1, [r7, #6]
 8007b8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007b90:	440a      	add	r2, r1
 8007b92:	b292      	uxth	r2, r2
 8007b94:	3a01      	subs	r2, #1
 8007b96:	b292      	uxth	r2, r2
 8007b98:	b212      	sxth	r2, r2
 8007b9a:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8007b9e:	8979      	ldrh	r1, [r7, #10]
 8007ba0:	9201      	str	r2, [sp, #4]
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	4623      	mov	r3, r4
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f7ff fed6 	bl	800795a <ili9341_draw_line>
  ili9341_draw_line(dev, color,     x,     y,     x,   y+h );
 8007bae:	88fa      	ldrh	r2, [r7, #6]
 8007bb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bb2:	4413      	add	r3, r2
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	b21b      	sxth	r3, r3
 8007bb8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007bbc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007bc0:	8979      	ldrh	r1, [r7, #10]
 8007bc2:	9301      	str	r3, [sp, #4]
 8007bc4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	4603      	mov	r3, r0
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f7ff fec4 	bl	800795a <ili9341_draw_line>
  ili9341_draw_line(dev, color, x+w-1,     y, x+w-1,   y+h );
 8007bd2:	893a      	ldrh	r2, [r7, #8]
 8007bd4:	8c3b      	ldrh	r3, [r7, #32]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	b218      	sxth	r0, r3
 8007be0:	893a      	ldrh	r2, [r7, #8]
 8007be2:	8c3b      	ldrh	r3, [r7, #32]
 8007be4:	4413      	add	r3, r2
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	3b01      	subs	r3, #1
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	b21b      	sxth	r3, r3
 8007bee:	88f9      	ldrh	r1, [r7, #6]
 8007bf0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007bf2:	440a      	add	r2, r1
 8007bf4:	b292      	uxth	r2, r2
 8007bf6:	b212      	sxth	r2, r2
 8007bf8:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8007bfc:	8979      	ldrh	r1, [r7, #10]
 8007bfe:	9201      	str	r2, [sp, #4]
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	4623      	mov	r3, r4
 8007c04:	4602      	mov	r2, r0
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f7ff fea7 	bl	800795a <ili9341_draw_line>
}
 8007c0c:	bf00      	nop
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd90      	pop	{r4, r7, pc}

08007c14 <ili9341_fill_rect>:

void ili9341_fill_rect(ili9341_device_t *dev, ili9341_color_t color,
    int16_t x, int16_t y, uint16_t w, uint16_t h)
{
 8007c14:	b590      	push	{r4, r7, lr}
 8007c16:	b08d      	sub	sp, #52	; 0x34
 8007c18:	af02      	add	r7, sp, #8
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	4608      	mov	r0, r1
 8007c1e:	4611      	mov	r1, r2
 8007c20:	461a      	mov	r2, r3
 8007c22:	4603      	mov	r3, r0
 8007c24:	817b      	strh	r3, [r7, #10]
 8007c26:	460b      	mov	r3, r1
 8007c28:	813b      	strh	r3, [r7, #8]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	80fb      	strh	r3, [r7, #6]
  // verify we have something within screen dimensions to be drawn
  if (ibNOT(ili9341_clip_rect(dev, &x, &y, &w, &h)))
 8007c2e:	1dba      	adds	r2, r7, #6
 8007c30:	f107 0108 	add.w	r1, r7, #8
 8007c34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 faa0 	bl	8008184 <ili9341_clip_rect>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d06f      	beq.n	8007d2a <ili9341_fill_rect+0x116>
    { return; }

  uint32_t num_pixels = w * h;
 8007c4a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007c4c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8007c4e:	fb02 f303 	mul.w	r3, r2, r3
 8007c52:	617b      	str	r3, [r7, #20]
  uint32_t rect_wc    = num_pixels;
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t block_wc = rect_wc;
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	623b      	str	r3, [r7, #32]
  if (block_wc > __SPI_TX_BLOCK_MAX__)
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c62:	d902      	bls.n	8007c6a <ili9341_fill_rect+0x56>
    { block_wc = __SPI_TX_BLOCK_MAX__; }
 8007c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c68:	623b      	str	r3, [r7, #32]

  // fill entire block with ordered color data
  uint16_t color_le = __LEu16(&color);
 8007c6a:	f107 030a 	add.w	r3, r7, #10
 8007c6e:	3301      	adds	r3, #1
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	b21a      	sxth	r2, r3
 8007c74:	f107 030a 	add.w	r3, r7, #10
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	021b      	lsls	r3, r3, #8
 8007c7c:	b21b      	sxth	r3, r3
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	b21b      	sxth	r3, r3
 8007c82:	827b      	strh	r3, [r7, #18]
  for (uint16_t i = 0; i < block_wc; ++i)
 8007c84:	2300      	movs	r3, #0
 8007c86:	83fb      	strh	r3, [r7, #30]
 8007c88:	e007      	b.n	8007c9a <ili9341_fill_rect+0x86>
    { spi_tx_block[i] = color_le; }
 8007c8a:	8bfb      	ldrh	r3, [r7, #30]
 8007c8c:	4929      	ldr	r1, [pc, #164]	; (8007d34 <ili9341_fill_rect+0x120>)
 8007c8e:	8a7a      	ldrh	r2, [r7, #18]
 8007c90:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (uint16_t i = 0; i < block_wc; ++i)
 8007c94:	8bfb      	ldrh	r3, [r7, #30]
 8007c96:	3301      	adds	r3, #1
 8007c98:	83fb      	strh	r3, [r7, #30]
 8007c9a:	8bfb      	ldrh	r3, [r7, #30]
 8007c9c:	6a3a      	ldr	r2, [r7, #32]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d8f3      	bhi.n	8007c8a <ili9341_fill_rect+0x76>

  // select target region
  ili9341_spi_tft_set_address_rect(dev, x, y, (x + w - 1), (y + h - 1));
 8007ca2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007ca6:	b299      	uxth	r1, r3
 8007ca8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007cac:	b298      	uxth	r0, r3
 8007cae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007cb6:	4413      	add	r3, r2
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	b29c      	uxth	r4, r3
 8007cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007cc6:	4413      	add	r3, r2
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	4623      	mov	r3, r4
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f7ff fd5b 	bl	8007790 <ili9341_spi_tft_set_address_rect>
  ili9341_spi_tft_select(dev);
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7fe ff9a 	bl	8006c14 <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(dev->data_command_port, dev->data_command_pin, __GPIO_PIN_SET__);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6958      	ldr	r0, [r3, #20]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8b1b      	ldrh	r3, [r3, #24]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	4619      	mov	r1, r3
 8007cec:	f004 fe8a 	bl	800ca04 <HAL_GPIO_WritePin>

  // repeatedly send MIN(remaining-words, block-words) words of color data until
  // all rect words have been sent.
  uint32_t curr_wc;
  while (rect_wc > 0) {
 8007cf0:	e014      	b.n	8007d1c <ili9341_fill_rect+0x108>
    curr_wc = rect_wc;
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	61bb      	str	r3, [r7, #24]
    if (curr_wc > block_wc)
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d901      	bls.n	8007d02 <ili9341_fill_rect+0xee>
      { curr_wc = block_wc; }
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	61bb      	str	r3, [r7, #24]
    ili9341_transmit_color(dev, curr_wc * 2/*16-bit words*/, spi_tx_block, ibYes);
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	005b      	lsls	r3, r3, #1
 8007d08:	b299      	uxth	r1, r3
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	4a09      	ldr	r2, [pc, #36]	; (8007d34 <ili9341_fill_rect+0x120>)
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f7ff fda6 	bl	8007860 <ili9341_transmit_color>
    rect_wc -= curr_wc;
 8007d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (rect_wc > 0) {
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1e7      	bne.n	8007cf2 <ili9341_fill_rect+0xde>
  }

  ili9341_spi_tft_release(dev);
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f7fe ff86 	bl	8006c34 <ili9341_spi_tft_release>
 8007d28:	e000      	b.n	8007d2c <ili9341_fill_rect+0x118>
    { return; }
 8007d2a:	bf00      	nop
}
 8007d2c:	372c      	adds	r7, #44	; 0x2c
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd90      	pop	{r4, r7, pc}
 8007d32:	bf00      	nop
 8007d34:	200000f4 	.word	0x200000f4

08007d38 <ili9341_draw_circle>:

void ili9341_draw_circle(ili9341_device_t *dev, ili9341_color_t color,
    int16_t x, int16_t y, int16_t r)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b088      	sub	sp, #32
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	4608      	mov	r0, r1
 8007d42:	4611      	mov	r1, r2
 8007d44:	461a      	mov	r2, r3
 8007d46:	4603      	mov	r3, r0
 8007d48:	817b      	strh	r3, [r7, #10]
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	813b      	strh	r3, [r7, #8]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	80fb      	strh	r3, [r7, #6]
  int16_t f = 1 - r;
 8007d52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d54:	f1c3 0301 	rsb	r3, r3, #1
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	83fb      	strh	r3, [r7, #30]
  int16_t fx = 1;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	83bb      	strh	r3, [r7, #28]
  int16_t fy = -2 * r;
 8007d60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d62:	461a      	mov	r2, r3
 8007d64:	03d2      	lsls	r2, r2, #15
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	005b      	lsls	r3, r3, #1
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	837b      	strh	r3, [r7, #26]
  int16_t ix = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	833b      	strh	r3, [r7, #24]
  int16_t iy = r;
 8007d72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d74:	82fb      	strh	r3, [r7, #22]

  ili9341_draw_pixel(dev, color, x, y + r);
 8007d76:	88fa      	ldrh	r2, [r7, #6]
 8007d78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d7a:	4413      	add	r3, r2
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	b21b      	sxth	r3, r3
 8007d80:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007d84:	8979      	ldrh	r1, [r7, #10]
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f7ff fd8f 	bl	80078aa <ili9341_draw_pixel>
  ili9341_draw_pixel(dev, color, x, y - r);
 8007d8c:	88fa      	ldrh	r2, [r7, #6]
 8007d8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	b21b      	sxth	r3, r3
 8007d96:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007d9a:	8979      	ldrh	r1, [r7, #10]
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f7ff fd84 	bl	80078aa <ili9341_draw_pixel>
  ili9341_draw_pixel(dev, color, x + r, y);
 8007da2:	893a      	ldrh	r2, [r7, #8]
 8007da4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007da6:	4413      	add	r3, r2
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	b21a      	sxth	r2, r3
 8007dac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007db0:	8979      	ldrh	r1, [r7, #10]
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f7ff fd79 	bl	80078aa <ili9341_draw_pixel>
  ili9341_draw_pixel(dev, color, x - r, y);
 8007db8:	893a      	ldrh	r2, [r7, #8]
 8007dba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	b21a      	sxth	r2, r3
 8007dc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007dc6:	8979      	ldrh	r1, [r7, #10]
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f7ff fd6e 	bl	80078aa <ili9341_draw_pixel>

  while (ix < iy) {
 8007dce:	e099      	b.n	8007f04 <ili9341_draw_circle+0x1cc>

    if (f >= 0) {
 8007dd0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	db0e      	blt.n	8007df6 <ili9341_draw_circle+0xbe>
      iy--;
 8007dd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	3b01      	subs	r3, #1
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	82fb      	strh	r3, [r7, #22]
      fy += 2;
 8007de4:	8b7b      	ldrh	r3, [r7, #26]
 8007de6:	3302      	adds	r3, #2
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	837b      	strh	r3, [r7, #26]
      f += fy;
 8007dec:	8bfa      	ldrh	r2, [r7, #30]
 8007dee:	8b7b      	ldrh	r3, [r7, #26]
 8007df0:	4413      	add	r3, r2
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	83fb      	strh	r3, [r7, #30]
    }

    ix++;
 8007df6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	833b      	strh	r3, [r7, #24]
    fx += 2;
 8007e02:	8bbb      	ldrh	r3, [r7, #28]
 8007e04:	3302      	adds	r3, #2
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	83bb      	strh	r3, [r7, #28]
    f += fx;
 8007e0a:	8bfa      	ldrh	r2, [r7, #30]
 8007e0c:	8bbb      	ldrh	r3, [r7, #28]
 8007e0e:	4413      	add	r3, r2
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	83fb      	strh	r3, [r7, #30]

    ili9341_draw_pixel(dev, color, x + ix, y + iy);
 8007e14:	893a      	ldrh	r2, [r7, #8]
 8007e16:	8b3b      	ldrh	r3, [r7, #24]
 8007e18:	4413      	add	r3, r2
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	b218      	sxth	r0, r3
 8007e1e:	88fa      	ldrh	r2, [r7, #6]
 8007e20:	8afb      	ldrh	r3, [r7, #22]
 8007e22:	4413      	add	r3, r2
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	b21b      	sxth	r3, r3
 8007e28:	8979      	ldrh	r1, [r7, #10]
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f7ff fd3c 	bl	80078aa <ili9341_draw_pixel>
    ili9341_draw_pixel(dev, color, x - ix, y + iy);
 8007e32:	893a      	ldrh	r2, [r7, #8]
 8007e34:	8b3b      	ldrh	r3, [r7, #24]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	b218      	sxth	r0, r3
 8007e3c:	88fa      	ldrh	r2, [r7, #6]
 8007e3e:	8afb      	ldrh	r3, [r7, #22]
 8007e40:	4413      	add	r3, r2
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	b21b      	sxth	r3, r3
 8007e46:	8979      	ldrh	r1, [r7, #10]
 8007e48:	4602      	mov	r2, r0
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f7ff fd2d 	bl	80078aa <ili9341_draw_pixel>
    ili9341_draw_pixel(dev, color, x + ix, y - iy);
 8007e50:	893a      	ldrh	r2, [r7, #8]
 8007e52:	8b3b      	ldrh	r3, [r7, #24]
 8007e54:	4413      	add	r3, r2
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	b218      	sxth	r0, r3
 8007e5a:	88fa      	ldrh	r2, [r7, #6]
 8007e5c:	8afb      	ldrh	r3, [r7, #22]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	b21b      	sxth	r3, r3
 8007e64:	8979      	ldrh	r1, [r7, #10]
 8007e66:	4602      	mov	r2, r0
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f7ff fd1e 	bl	80078aa <ili9341_draw_pixel>
    ili9341_draw_pixel(dev, color, x - ix, y - iy);
 8007e6e:	893a      	ldrh	r2, [r7, #8]
 8007e70:	8b3b      	ldrh	r3, [r7, #24]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	b218      	sxth	r0, r3
 8007e78:	88fa      	ldrh	r2, [r7, #6]
 8007e7a:	8afb      	ldrh	r3, [r7, #22]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	b21b      	sxth	r3, r3
 8007e82:	8979      	ldrh	r1, [r7, #10]
 8007e84:	4602      	mov	r2, r0
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f7ff fd0f 	bl	80078aa <ili9341_draw_pixel>
    ili9341_draw_pixel(dev, color, x + iy, y + ix);
 8007e8c:	893a      	ldrh	r2, [r7, #8]
 8007e8e:	8afb      	ldrh	r3, [r7, #22]
 8007e90:	4413      	add	r3, r2
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	b218      	sxth	r0, r3
 8007e96:	88fa      	ldrh	r2, [r7, #6]
 8007e98:	8b3b      	ldrh	r3, [r7, #24]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	b21b      	sxth	r3, r3
 8007ea0:	8979      	ldrh	r1, [r7, #10]
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f7ff fd00 	bl	80078aa <ili9341_draw_pixel>
    ili9341_draw_pixel(dev, color, x - iy, y + ix);
 8007eaa:	893a      	ldrh	r2, [r7, #8]
 8007eac:	8afb      	ldrh	r3, [r7, #22]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	b218      	sxth	r0, r3
 8007eb4:	88fa      	ldrh	r2, [r7, #6]
 8007eb6:	8b3b      	ldrh	r3, [r7, #24]
 8007eb8:	4413      	add	r3, r2
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	b21b      	sxth	r3, r3
 8007ebe:	8979      	ldrh	r1, [r7, #10]
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f7ff fcf1 	bl	80078aa <ili9341_draw_pixel>
    ili9341_draw_pixel(dev, color, x + iy, y - ix);
 8007ec8:	893a      	ldrh	r2, [r7, #8]
 8007eca:	8afb      	ldrh	r3, [r7, #22]
 8007ecc:	4413      	add	r3, r2
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	b218      	sxth	r0, r3
 8007ed2:	88fa      	ldrh	r2, [r7, #6]
 8007ed4:	8b3b      	ldrh	r3, [r7, #24]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	b21b      	sxth	r3, r3
 8007edc:	8979      	ldrh	r1, [r7, #10]
 8007ede:	4602      	mov	r2, r0
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f7ff fce2 	bl	80078aa <ili9341_draw_pixel>
    ili9341_draw_pixel(dev, color, x - iy, y - ix);
 8007ee6:	893a      	ldrh	r2, [r7, #8]
 8007ee8:	8afb      	ldrh	r3, [r7, #22]
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	b218      	sxth	r0, r3
 8007ef0:	88fa      	ldrh	r2, [r7, #6]
 8007ef2:	8b3b      	ldrh	r3, [r7, #24]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	b21b      	sxth	r3, r3
 8007efa:	8979      	ldrh	r1, [r7, #10]
 8007efc:	4602      	mov	r2, r0
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f7ff fcd3 	bl	80078aa <ili9341_draw_pixel>
  while (ix < iy) {
 8007f04:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007f08:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	f6ff af5f 	blt.w	8007dd0 <ili9341_draw_circle+0x98>
  }
}
 8007f12:	bf00      	nop
 8007f14:	3720      	adds	r7, #32
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <ili9341_fill_circle>:

void ili9341_fill_circle(ili9341_device_t *dev, ili9341_color_t color,
    int16_t x, int16_t y, int16_t r)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b088      	sub	sp, #32
 8007f1e:	af04      	add	r7, sp, #16
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	4608      	mov	r0, r1
 8007f24:	4611      	mov	r1, r2
 8007f26:	461a      	mov	r2, r3
 8007f28:	4603      	mov	r3, r0
 8007f2a:	817b      	strh	r3, [r7, #10]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	813b      	strh	r3, [r7, #8]
 8007f30:	4613      	mov	r3, r2
 8007f32:	80fb      	strh	r3, [r7, #6]
  ili9341_draw_line(dev, color, x, y - r, x, (y - r) + (2 * r) + 1);
 8007f34:	88fa      	ldrh	r2, [r7, #6]
 8007f36:	8b3b      	ldrh	r3, [r7, #24]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	b218      	sxth	r0, r3
 8007f3e:	88fa      	ldrh	r2, [r7, #6]
 8007f40:	8b3b      	ldrh	r3, [r7, #24]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	8b3b      	ldrh	r3, [r7, #24]
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	4413      	add	r3, r2
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	3301      	adds	r3, #1
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	b21b      	sxth	r3, r3
 8007f56:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007f5a:	8979      	ldrh	r1, [r7, #10]
 8007f5c:	9301      	str	r3, [sp, #4]
 8007f5e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	4603      	mov	r3, r0
 8007f66:	68f8      	ldr	r0, [r7, #12]
 8007f68:	f7ff fcf7 	bl	800795a <ili9341_draw_line>
  ili9341_fill_quarter_circle(dev, color, x, y, r, 3, 0);
 8007f6c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007f70:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007f74:	8979      	ldrh	r1, [r7, #10]
 8007f76:	2300      	movs	r3, #0
 8007f78:	9302      	str	r3, [sp, #8]
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	9301      	str	r3, [sp, #4]
 8007f7e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	4603      	mov	r3, r0
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f000 f99d 	bl	80082c6 <ili9341_fill_quarter_circle>
}
 8007f8c:	bf00      	nop
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <ili9341_fill_screen>:

void ili9341_fill_screen(ili9341_device_t *dev, ili9341_color_t color)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af02      	add	r7, sp, #8
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	807b      	strh	r3, [r7, #2]
  ili9341_fill_rect(dev, color,
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	8b9b      	ldrh	r3, [r3, #28]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	8bd2      	ldrh	r2, [r2, #30]
 8007fa8:	8879      	ldrh	r1, [r7, #2]
 8007faa:	9201      	str	r2, [sp, #4]
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	2300      	movs	r3, #0
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7ff fe2e 	bl	8007c14 <ili9341_fill_rect>
      0, 0, dev->screen_size.width, dev->screen_size.height);
}
 8007fb8:	bf00      	nop
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <ili9341_draw_bitmap_1b>:

void ili9341_draw_bitmap_1b(ili9341_device_t *dev,
    ili9341_color_t fg_color, ili9341_color_t bg_color,
    int16_t x, int16_t y, uint16_t w, uint16_t h, uint8_t *bmp)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08c      	sub	sp, #48	; 0x30
 8007fc4:	af02      	add	r7, sp, #8
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	4608      	mov	r0, r1
 8007fca:	4611      	mov	r1, r2
 8007fcc:	461a      	mov	r2, r3
 8007fce:	4603      	mov	r3, r0
 8007fd0:	817b      	strh	r3, [r7, #10]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	813b      	strh	r3, [r7, #8]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	80fb      	strh	r3, [r7, #6]
  if ((NULL == dev) || (NULL == bmp))
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 80c9 	beq.w	8008174 <ili9341_draw_bitmap_1b+0x1b4>
 8007fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 80c5 	beq.w	8008174 <ili9341_draw_bitmap_1b+0x1b4>
    { return; }

  int16_t  _x = x, _y = y;
 8007fea:	88fb      	ldrh	r3, [r7, #6]
 8007fec:	837b      	strh	r3, [r7, #26]
 8007fee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007ff0:	833b      	strh	r3, [r7, #24]
  uint16_t _w = w, _h = h;
 8007ff2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007ff4:	82fb      	strh	r3, [r7, #22]
 8007ff6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007ff8:	82bb      	strh	r3, [r7, #20]

  if (ibNOT(ili9341_clip_rect(dev, &_x, &_y, &_w, &_h)))
 8007ffa:	f107 0016 	add.w	r0, r7, #22
 8007ffe:	f107 0218 	add.w	r2, r7, #24
 8008002:	f107 011a 	add.w	r1, r7, #26
 8008006:	f107 0314 	add.w	r3, r7, #20
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	4603      	mov	r3, r0
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 f8b8 	bl	8008184 <ili9341_clip_rect>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	f000 80ae 	beq.w	8008178 <ili9341_draw_bitmap_1b+0x1b8>
    { return; }

  int16_t byteWidth = (w + 7) / 8;
 800801c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800801e:	3307      	adds	r3, #7
 8008020:	2b00      	cmp	r3, #0
 8008022:	da00      	bge.n	8008026 <ili9341_draw_bitmap_1b+0x66>
 8008024:	3307      	adds	r3, #7
 8008026:	10db      	asrs	r3, r3, #3
 8008028:	843b      	strh	r3, [r7, #32]
  uint8_t byte = 0;
 800802a:	2300      	movs	r3, #0
 800802c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  uint16_t fg_le = __LEu16(&(fg_color));
 8008030:	f107 030a 	add.w	r3, r7, #10
 8008034:	3301      	adds	r3, #1
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	b21a      	sxth	r2, r3
 800803a:	f107 030a 	add.w	r3, r7, #10
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	021b      	lsls	r3, r3, #8
 8008042:	b21b      	sxth	r3, r3
 8008044:	4313      	orrs	r3, r2
 8008046:	b21b      	sxth	r3, r3
 8008048:	83fb      	strh	r3, [r7, #30]
  uint16_t bg_le = __LEu16(&(bg_color));
 800804a:	f107 0308 	add.w	r3, r7, #8
 800804e:	3301      	adds	r3, #1
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	b21a      	sxth	r2, r3
 8008054:	f107 0308 	add.w	r3, r7, #8
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	021b      	lsls	r3, r3, #8
 800805c:	b21b      	sxth	r3, r3
 800805e:	4313      	orrs	r3, r2
 8008060:	b21b      	sxth	r3, r3
 8008062:	83bb      	strh	r3, [r7, #28]

  // select target region
  ili9341_spi_tft_set_address_rect(dev, x, y, w, h);
 8008064:	88f9      	ldrh	r1, [r7, #6]
 8008066:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8008068:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
 800806a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	4603      	mov	r3, r0
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7ff fb8d 	bl	8007790 <ili9341_spi_tft_set_address_rect>
  ili9341_spi_tft_select(dev);
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f7fe fdcc 	bl	8006c14 <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(dev->data_command_port, dev->data_command_pin, __GPIO_PIN_SET__);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6958      	ldr	r0, [r3, #20]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	8b1b      	ldrh	r3, [r3, #24]
 8008084:	2201      	movs	r2, #1
 8008086:	4619      	mov	r1, r3
 8008088:	f004 fcbc 	bl	800ca04 <HAL_GPIO_WritePin>

  for (int16_t j = 0; j < h; ++j, ++y) {
 800808c:	2300      	movs	r3, #0
 800808e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008090:	e064      	b.n	800815c <ili9341_draw_bitmap_1b+0x19c>
    for (int16_t i = 0; i < w; ++i) {
 8008092:	2300      	movs	r3, #0
 8008094:	847b      	strh	r3, [r7, #34]	; 0x22
 8008096:	e041      	b.n	800811c <ili9341_draw_bitmap_1b+0x15c>

      if (i & 7)
 8008098:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800809a:	f003 0307 	and.w	r3, r3, #7
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d005      	beq.n	80080ae <ili9341_draw_bitmap_1b+0xee>
        { byte <<= 1; }
 80080a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080a6:	005b      	lsls	r3, r3, #1
 80080a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80080ac:	e013      	b.n	80080d6 <ili9341_draw_bitmap_1b+0x116>
      else
        { byte = bmp[j * byteWidth + i / 8]; }
 80080ae:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80080b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80080b6:	fb02 f203 	mul.w	r2, r2, r3
 80080ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80080be:	2b00      	cmp	r3, #0
 80080c0:	da00      	bge.n	80080c4 <ili9341_draw_bitmap_1b+0x104>
 80080c2:	3307      	adds	r3, #7
 80080c4:	10db      	asrs	r3, r3, #3
 80080c6:	b21b      	sxth	r3, r3
 80080c8:	4413      	add	r3, r2
 80080ca:	461a      	mov	r2, r3
 80080cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ce:	4413      	add	r3, r2
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

      if (byte & 0x80)
 80080d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080da:	2b00      	cmp	r3, #0
 80080dc:	da0d      	bge.n	80080fa <ili9341_draw_bitmap_1b+0x13a>
        { spi_tx_block[((j&1) * w) + i] = fg_le; }
 80080de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80080e6:	fb02 f203 	mul.w	r2, r2, r3
 80080ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80080ee:	4413      	add	r3, r2
 80080f0:	4923      	ldr	r1, [pc, #140]	; (8008180 <ili9341_draw_bitmap_1b+0x1c0>)
 80080f2:	8bfa      	ldrh	r2, [r7, #30]
 80080f4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80080f8:	e00c      	b.n	8008114 <ili9341_draw_bitmap_1b+0x154>
      else
        { spi_tx_block[((j&1) * w) + i] = bg_le; }
 80080fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080fc:	f003 0301 	and.w	r3, r3, #1
 8008100:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008102:	fb02 f203 	mul.w	r2, r2, r3
 8008106:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800810a:	4413      	add	r3, r2
 800810c:	491c      	ldr	r1, [pc, #112]	; (8008180 <ili9341_draw_bitmap_1b+0x1c0>)
 800810e:	8bba      	ldrh	r2, [r7, #28]
 8008110:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int16_t i = 0; i < w; ++i) {
 8008114:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008116:	3301      	adds	r3, #1
 8008118:	b29b      	uxth	r3, r3
 800811a:	847b      	strh	r3, [r7, #34]	; 0x22
 800811c:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8008120:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008122:	429a      	cmp	r2, r3
 8008124:	dbb8      	blt.n	8008098 <ili9341_draw_bitmap_1b+0xd8>
    }

    ili9341_transmit_wait(dev);
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f7ff fb83 	bl	8007832 <ili9341_transmit_wait>
    ili9341_transmit_color(dev, w * 2, &(spi_tx_block[(j&1) * w]), ibNo);
 800812c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800812e:	005b      	lsls	r3, r3, #1
 8008130:	b299      	uxth	r1, r3
 8008132:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800813a:	fb02 f303 	mul.w	r3, r2, r3
 800813e:	005b      	lsls	r3, r3, #1
 8008140:	4a0f      	ldr	r2, [pc, #60]	; (8008180 <ili9341_draw_bitmap_1b+0x1c0>)
 8008142:	441a      	add	r2, r3
 8008144:	2300      	movs	r3, #0
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f7ff fb8a 	bl	8007860 <ili9341_transmit_color>
  for (int16_t j = 0; j < h; ++j, ++y) {
 800814c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800814e:	3301      	adds	r3, #1
 8008150:	b29b      	uxth	r3, r3
 8008152:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008154:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008156:	3301      	adds	r3, #1
 8008158:	b29b      	uxth	r3, r3
 800815a:	863b      	strh	r3, [r7, #48]	; 0x30
 800815c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8008160:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008162:	429a      	cmp	r2, r3
 8008164:	db95      	blt.n	8008092 <ili9341_draw_bitmap_1b+0xd2>
  }

  ili9341_spi_tft_release(dev);
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f7fe fd64 	bl	8006c34 <ili9341_spi_tft_release>
  ili9341_transmit_wait(dev);
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f7ff fb60 	bl	8007832 <ili9341_transmit_wait>
 8008172:	e002      	b.n	800817a <ili9341_draw_bitmap_1b+0x1ba>
    { return; }
 8008174:	bf00      	nop
 8008176:	e000      	b.n	800817a <ili9341_draw_bitmap_1b+0x1ba>
    { return; }
 8008178:	bf00      	nop
}
 800817a:	3728      	adds	r7, #40	; 0x28
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	200000f4 	.word	0x200000f4

08008184 <ili9341_clip_rect>:

// ------------------------------------------------------- private functions --

static ili9341_bool_t ili9341_clip_rect(ili9341_device_t *dev,
    int16_t *x, int16_t *y, uint16_t *w, uint16_t *h)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
 8008190:	603b      	str	r3, [r7, #0]
  // must have an origin to do anything
  if ((NULL == x) || (NULL == y))
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <ili9341_clip_rect+0x1a>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d101      	bne.n	80081a2 <ili9341_clip_rect+0x1e>
    { return ibFalse; }
 800819e:	2300      	movs	r3, #0
 80081a0:	e08b      	b.n	80082ba <ili9341_clip_rect+0x136>

  //  1. rect origin beyond screen dimensions, nothing to draw
  if ((*x >= dev->screen_size.width) || (*y >= dev->screen_size.height))
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081a8:	461a      	mov	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	8b9b      	ldrh	r3, [r3, #28]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	da07      	bge.n	80081c2 <ili9341_clip_rect+0x3e>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081b8:	461a      	mov	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	8bdb      	ldrh	r3, [r3, #30]
 80081be:	429a      	cmp	r2, r3
 80081c0:	db01      	blt.n	80081c6 <ili9341_clip_rect+0x42>
    { return ibFalse; }
 80081c2:	2300      	movs	r3, #0
 80081c4:	e079      	b.n	80082ba <ili9341_clip_rect+0x136>

  //  2. rect width or height is 0, nothing to draw
  if ((NULL != w) && (NULL != h)) {
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00c      	beq.n	80081e6 <ili9341_clip_rect+0x62>
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d009      	beq.n	80081e6 <ili9341_clip_rect+0x62>
    if ((0U == *w) || (0U == *h))
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <ili9341_clip_rect+0x5e>
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	881b      	ldrh	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d101      	bne.n	80081e6 <ili9341_clip_rect+0x62>
      { return ibFalse; }
 80081e2:	2300      	movs	r3, #0
 80081e4:	e069      	b.n	80082ba <ili9341_clip_rect+0x136>
  }

  // 3. rect origin has negative component, adjust origin and dimensions
  if (*x < 0) {
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	da0f      	bge.n	8008210 <ili9341_clip_rect+0x8c>
    if (NULL != w)
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d009      	beq.n	800820a <ili9341_clip_rect+0x86>
      { *w -= *x; }
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	881a      	ldrh	r2, [r3, #0]
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008200:	b29b      	uxth	r3, r3
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	b29a      	uxth	r2, r3
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	801a      	strh	r2, [r3, #0]
    *x = 0;
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2200      	movs	r2, #0
 800820e:	801a      	strh	r2, [r3, #0]
  }
  if (*y < 0) {
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008216:	2b00      	cmp	r3, #0
 8008218:	da0f      	bge.n	800823a <ili9341_clip_rect+0xb6>
    if (NULL != h)
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d009      	beq.n	8008234 <ili9341_clip_rect+0xb0>
      { *h -= *y; }
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	881a      	ldrh	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f9b3 3000 	ldrsh.w	r3, [r3]
 800822a:	b29b      	uxth	r3, r3
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	b29a      	uxth	r2, r3
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	801a      	strh	r2, [r3, #0]
    *y = 0;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	801a      	strh	r2, [r3, #0]
  }

  if ((NULL != w) && (NULL != h)) {
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d03b      	beq.n	80082b8 <ili9341_clip_rect+0x134>
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d038      	beq.n	80082b8 <ili9341_clip_rect+0x134>

    //  4. rect width beyond screen width, reduce rect width
    if ((*x + *w - 1) >= dev->screen_size.width)
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800824c:	461a      	mov	r2, r3
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	4413      	add	r3, r2
 8008254:	3b01      	subs	r3, #1
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	8b92      	ldrh	r2, [r2, #28]
 800825a:	4293      	cmp	r3, r2
 800825c:	db09      	blt.n	8008272 <ili9341_clip_rect+0xee>
      { *w = dev->screen_size.width - *x; }
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	8b9a      	ldrh	r2, [r3, #28]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008268:	b29b      	uxth	r3, r3
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	b29a      	uxth	r2, r3
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	801a      	strh	r2, [r3, #0]

    //  5. rect height beyond screen height, reduce rect height
    if ((*y + *h - 1) >= dev->screen_size.height)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008278:	461a      	mov	r2, r3
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	881b      	ldrh	r3, [r3, #0]
 800827e:	4413      	add	r3, r2
 8008280:	3b01      	subs	r3, #1
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	8bd2      	ldrh	r2, [r2, #30]
 8008286:	4293      	cmp	r3, r2
 8008288:	db09      	blt.n	800829e <ili9341_clip_rect+0x11a>
      { *h = dev->screen_size.height - *y; }
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	8bda      	ldrh	r2, [r3, #30]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008294:	b29b      	uxth	r3, r3
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	b29a      	uxth	r2, r3
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	801a      	strh	r2, [r3, #0]

    return (*w > 0U) && (*h > 0U);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d005      	beq.n	80082b2 <ili9341_clip_rect+0x12e>
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <ili9341_clip_rect+0x12e>
 80082ae:	2301      	movs	r3, #1
 80082b0:	e000      	b.n	80082b4 <ili9341_clip_rect+0x130>
 80082b2:	2300      	movs	r3, #0
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	e000      	b.n	80082ba <ili9341_clip_rect+0x136>
  }

  return ibTrue;
 80082b8:	2301      	movs	r3, #1
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <ili9341_fill_quarter_circle>:

static void ili9341_fill_quarter_circle(ili9341_device_t *dev,
    ili9341_color_t color,
    int16_t x, int16_t y, int16_t r, uint8_t corners, int16_t delta)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b08c      	sub	sp, #48	; 0x30
 80082ca:	af02      	add	r7, sp, #8
 80082cc:	60f8      	str	r0, [r7, #12]
 80082ce:	4608      	mov	r0, r1
 80082d0:	4611      	mov	r1, r2
 80082d2:	461a      	mov	r2, r3
 80082d4:	4603      	mov	r3, r0
 80082d6:	817b      	strh	r3, [r7, #10]
 80082d8:	460b      	mov	r3, r1
 80082da:	813b      	strh	r3, [r7, #8]
 80082dc:	4613      	mov	r3, r2
 80082de:	80fb      	strh	r3, [r7, #6]
  int16_t f = 1 - r;
 80082e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80082e2:	f1c3 0301 	rsb	r3, r3, #1
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	84fb      	strh	r3, [r7, #38]	; 0x26
  int16_t fx = 1;
 80082ea:	2301      	movs	r3, #1
 80082ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t fy = -2 * r;
 80082ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80082f0:	461a      	mov	r2, r3
 80082f2:	03d2      	lsls	r2, r2, #15
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	005b      	lsls	r3, r3, #1
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	847b      	strh	r3, [r7, #34]	; 0x22
  int16_t ix = 0;
 80082fc:	2300      	movs	r3, #0
 80082fe:	843b      	strh	r3, [r7, #32]
  int16_t iy = r;
 8008300:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008302:	83fb      	strh	r3, [r7, #30]
  int16_t px = ix;
 8008304:	8c3b      	ldrh	r3, [r7, #32]
 8008306:	83bb      	strh	r3, [r7, #28]
  int16_t py = iy;
 8008308:	8bfb      	ldrh	r3, [r7, #30]
 800830a:	837b      	strh	r3, [r7, #26]
  int16_t tx;
  int16_t ty;

  delta += 1;
 800830c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800830e:	3301      	adds	r3, #1
 8008310:	b29b      	uxth	r3, r3
 8008312:	873b      	strh	r3, [r7, #56]	; 0x38

  while (ix < iy) {
 8008314:	e0ce      	b.n	80084b4 <ili9341_fill_quarter_circle+0x1ee>

    if (f >= 0) {
 8008316:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800831a:	2b00      	cmp	r3, #0
 800831c:	db0e      	blt.n	800833c <ili9341_fill_quarter_circle+0x76>
      iy--;
 800831e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008322:	b29b      	uxth	r3, r3
 8008324:	3b01      	subs	r3, #1
 8008326:	b29b      	uxth	r3, r3
 8008328:	83fb      	strh	r3, [r7, #30]
      fy += 2;
 800832a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800832c:	3302      	adds	r3, #2
 800832e:	b29b      	uxth	r3, r3
 8008330:	847b      	strh	r3, [r7, #34]	; 0x22
      f += fy;
 8008332:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008334:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008336:	4413      	add	r3, r2
 8008338:	b29b      	uxth	r3, r3
 800833a:	84fb      	strh	r3, [r7, #38]	; 0x26
    }

    ix++;
 800833c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008340:	b29b      	uxth	r3, r3
 8008342:	3301      	adds	r3, #1
 8008344:	b29b      	uxth	r3, r3
 8008346:	843b      	strh	r3, [r7, #32]
    fx += 2;
 8008348:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800834a:	3302      	adds	r3, #2
 800834c:	b29b      	uxth	r3, r3
 800834e:	84bb      	strh	r3, [r7, #36]	; 0x24
    f += fx;
 8008350:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008354:	4413      	add	r3, r2
 8008356:	b29b      	uxth	r3, r3
 8008358:	84fb      	strh	r3, [r7, #38]	; 0x26


    if (ix < (iy + 1)) {
 800835a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800835e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008362:	3301      	adds	r3, #1
 8008364:	429a      	cmp	r2, r3
 8008366:	da4d      	bge.n	8008404 <ili9341_fill_quarter_circle+0x13e>
      if (corners & 1) {
 8008368:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800836c:	f003 0301 	and.w	r3, r3, #1
 8008370:	2b00      	cmp	r3, #0
 8008372:	d020      	beq.n	80083b6 <ili9341_fill_quarter_circle+0xf0>
        tx = x + ix;
 8008374:	893a      	ldrh	r2, [r7, #8]
 8008376:	8c3b      	ldrh	r3, [r7, #32]
 8008378:	4413      	add	r3, r2
 800837a:	b29b      	uxth	r3, r3
 800837c:	833b      	strh	r3, [r7, #24]
        ty = y - iy;
 800837e:	88fa      	ldrh	r2, [r7, #6]
 8008380:	8bfb      	ldrh	r3, [r7, #30]
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	b29b      	uxth	r3, r3
 8008386:	82fb      	strh	r3, [r7, #22]
        ili9341_draw_line(dev, color, tx, ty, tx, ty + 2 * iy + delta);
 8008388:	8bfb      	ldrh	r3, [r7, #30]
 800838a:	005b      	lsls	r3, r3, #1
 800838c:	b29a      	uxth	r2, r3
 800838e:	8afb      	ldrh	r3, [r7, #22]
 8008390:	4413      	add	r3, r2
 8008392:	b29a      	uxth	r2, r3
 8008394:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008396:	4413      	add	r3, r2
 8008398:	b29b      	uxth	r3, r3
 800839a:	b21b      	sxth	r3, r3
 800839c:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80083a0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80083a4:	8979      	ldrh	r1, [r7, #10]
 80083a6:	9301      	str	r3, [sp, #4]
 80083a8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80083ac:	9300      	str	r3, [sp, #0]
 80083ae:	4603      	mov	r3, r0
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f7ff fad2 	bl	800795a <ili9341_draw_line>
      }
      if (corners & 2) {
 80083b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80083ba:	f003 0302 	and.w	r3, r3, #2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d020      	beq.n	8008404 <ili9341_fill_quarter_circle+0x13e>
        tx = x - ix;
 80083c2:	893a      	ldrh	r2, [r7, #8]
 80083c4:	8c3b      	ldrh	r3, [r7, #32]
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	833b      	strh	r3, [r7, #24]
        ty = y - iy;
 80083cc:	88fa      	ldrh	r2, [r7, #6]
 80083ce:	8bfb      	ldrh	r3, [r7, #30]
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	82fb      	strh	r3, [r7, #22]
        ili9341_draw_line(dev, color, tx, ty, tx, ty + 2 * iy + delta);
 80083d6:	8bfb      	ldrh	r3, [r7, #30]
 80083d8:	005b      	lsls	r3, r3, #1
 80083da:	b29a      	uxth	r2, r3
 80083dc:	8afb      	ldrh	r3, [r7, #22]
 80083de:	4413      	add	r3, r2
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80083e4:	4413      	add	r3, r2
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	b21b      	sxth	r3, r3
 80083ea:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80083ee:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80083f2:	8979      	ldrh	r1, [r7, #10]
 80083f4:	9301      	str	r3, [sp, #4]
 80083f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	4603      	mov	r3, r0
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f7ff faab 	bl	800795a <ili9341_draw_line>
      }
    }

    if (iy != py) {
 8008404:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8008408:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800840c:	429a      	cmp	r2, r3
 800840e:	d04f      	beq.n	80084b0 <ili9341_fill_quarter_circle+0x1ea>
      if (corners & 1) {
 8008410:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b00      	cmp	r3, #0
 800841a:	d020      	beq.n	800845e <ili9341_fill_quarter_circle+0x198>
        tx = x + py;
 800841c:	893a      	ldrh	r2, [r7, #8]
 800841e:	8b7b      	ldrh	r3, [r7, #26]
 8008420:	4413      	add	r3, r2
 8008422:	b29b      	uxth	r3, r3
 8008424:	833b      	strh	r3, [r7, #24]
        ty = y - px;
 8008426:	88fa      	ldrh	r2, [r7, #6]
 8008428:	8bbb      	ldrh	r3, [r7, #28]
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	b29b      	uxth	r3, r3
 800842e:	82fb      	strh	r3, [r7, #22]
        ili9341_draw_line(dev, color, tx, ty, tx, ty + 2 * px + delta);
 8008430:	8bbb      	ldrh	r3, [r7, #28]
 8008432:	005b      	lsls	r3, r3, #1
 8008434:	b29a      	uxth	r2, r3
 8008436:	8afb      	ldrh	r3, [r7, #22]
 8008438:	4413      	add	r3, r2
 800843a:	b29a      	uxth	r2, r3
 800843c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800843e:	4413      	add	r3, r2
 8008440:	b29b      	uxth	r3, r3
 8008442:	b21b      	sxth	r3, r3
 8008444:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8008448:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800844c:	8979      	ldrh	r1, [r7, #10]
 800844e:	9301      	str	r3, [sp, #4]
 8008450:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	4603      	mov	r3, r0
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f7ff fa7e 	bl	800795a <ili9341_draw_line>
      }
      if (corners & 2) {
 800845e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b00      	cmp	r3, #0
 8008468:	d020      	beq.n	80084ac <ili9341_fill_quarter_circle+0x1e6>
        tx = x - py;
 800846a:	893a      	ldrh	r2, [r7, #8]
 800846c:	8b7b      	ldrh	r3, [r7, #26]
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	b29b      	uxth	r3, r3
 8008472:	833b      	strh	r3, [r7, #24]
        ty = y - px;
 8008474:	88fa      	ldrh	r2, [r7, #6]
 8008476:	8bbb      	ldrh	r3, [r7, #28]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	b29b      	uxth	r3, r3
 800847c:	82fb      	strh	r3, [r7, #22]
        ili9341_draw_line(dev, color, tx, ty, tx, ty + 2 * px + delta);
 800847e:	8bbb      	ldrh	r3, [r7, #28]
 8008480:	005b      	lsls	r3, r3, #1
 8008482:	b29a      	uxth	r2, r3
 8008484:	8afb      	ldrh	r3, [r7, #22]
 8008486:	4413      	add	r3, r2
 8008488:	b29a      	uxth	r2, r3
 800848a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800848c:	4413      	add	r3, r2
 800848e:	b29b      	uxth	r3, r3
 8008490:	b21b      	sxth	r3, r3
 8008492:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8008496:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800849a:	8979      	ldrh	r1, [r7, #10]
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	4603      	mov	r3, r0
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f7ff fa57 	bl	800795a <ili9341_draw_line>
      }
      py = iy;
 80084ac:	8bfb      	ldrh	r3, [r7, #30]
 80084ae:	837b      	strh	r3, [r7, #26]
    }

    px = ix;
 80084b0:	8c3b      	ldrh	r3, [r7, #32]
 80084b2:	83bb      	strh	r3, [r7, #28]
  while (ix < iy) {
 80084b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80084b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80084bc:	429a      	cmp	r2, r3
 80084be:	f6ff af2a 	blt.w	8008316 <ili9341_fill_quarter_circle+0x50>
  }
}
 80084c2:	bf00      	nop
 80084c4:	3728      	adds	r7, #40	; 0x28
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
	...

080084cc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08c      	sub	sp, #48	; 0x30
 80084d0:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80084d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084d6:	2200      	movs	r2, #0
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	605a      	str	r2, [r3, #4]
 80084dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80084de:	1d3b      	adds	r3, r7, #4
 80084e0:	2220      	movs	r2, #32
 80084e2:	2100      	movs	r1, #0
 80084e4:	4618      	mov	r0, r3
 80084e6:	f00d fb18 	bl	8015b1a <memset>

  /** Common config
  */
  hadc1.Instance = ADC1;
 80084ea:	4b36      	ldr	r3, [pc, #216]	; (80085c4 <MX_ADC1_Init+0xf8>)
 80084ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80084f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80084f2:	4b34      	ldr	r3, [pc, #208]	; (80085c4 <MX_ADC1_Init+0xf8>)
 80084f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80084f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80084fa:	4b32      	ldr	r3, [pc, #200]	; (80085c4 <MX_ADC1_Init+0xf8>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008500:	4b30      	ldr	r3, [pc, #192]	; (80085c4 <MX_ADC1_Init+0xf8>)
 8008502:	2200      	movs	r2, #0
 8008504:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8008506:	4b2f      	ldr	r3, [pc, #188]	; (80085c4 <MX_ADC1_Init+0xf8>)
 8008508:	2200      	movs	r2, #0
 800850a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800850c:	4b2d      	ldr	r3, [pc, #180]	; (80085c4 <MX_ADC1_Init+0xf8>)
 800850e:	2200      	movs	r2, #0
 8008510:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008512:	4b2c      	ldr	r3, [pc, #176]	; (80085c4 <MX_ADC1_Init+0xf8>)
 8008514:	2204      	movs	r2, #4
 8008516:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8008518:	4b2a      	ldr	r3, [pc, #168]	; (80085c4 <MX_ADC1_Init+0xf8>)
 800851a:	2200      	movs	r2, #0
 800851c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800851e:	4b29      	ldr	r3, [pc, #164]	; (80085c4 <MX_ADC1_Init+0xf8>)
 8008520:	2201      	movs	r2, #1
 8008522:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8008524:	4b27      	ldr	r3, [pc, #156]	; (80085c4 <MX_ADC1_Init+0xf8>)
 8008526:	2201      	movs	r2, #1
 8008528:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800852a:	4b26      	ldr	r3, [pc, #152]	; (80085c4 <MX_ADC1_Init+0xf8>)
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008532:	4b24      	ldr	r3, [pc, #144]	; (80085c4 <MX_ADC1_Init+0xf8>)
 8008534:	2200      	movs	r2, #0
 8008536:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008538:	4b22      	ldr	r3, [pc, #136]	; (80085c4 <MX_ADC1_Init+0xf8>)
 800853a:	2200      	movs	r2, #0
 800853c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800853e:	4b21      	ldr	r3, [pc, #132]	; (80085c4 <MX_ADC1_Init+0xf8>)
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8008546:	4b1f      	ldr	r3, [pc, #124]	; (80085c4 <MX_ADC1_Init+0xf8>)
 8008548:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800854c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800854e:	4b1d      	ldr	r3, [pc, #116]	; (80085c4 <MX_ADC1_Init+0xf8>)
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008556:	481b      	ldr	r0, [pc, #108]	; (80085c4 <MX_ADC1_Init+0xf8>)
 8008558:	f002 fd42 	bl	800afe0 <HAL_ADC_Init>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8008562:	f001 faad 	bl	8009ac0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8008566:	2300      	movs	r3, #0
 8008568:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800856a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800856e:	4619      	mov	r1, r3
 8008570:	4814      	ldr	r0, [pc, #80]	; (80085c4 <MX_ADC1_Init+0xf8>)
 8008572:	f003 fc45 	bl	800be00 <HAL_ADCEx_MultiModeConfigChannel>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800857c:	f001 faa0 	bl	8009ac0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8008580:	4b11      	ldr	r3, [pc, #68]	; (80085c8 <MX_ADC1_Init+0xfc>)
 8008582:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008584:	2306      	movs	r3, #6
 8008586:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8008588:	2305      	movs	r3, #5
 800858a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800858c:	237f      	movs	r3, #127	; 0x7f
 800858e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8008590:	2304      	movs	r3, #4
 8008592:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8008594:	2300      	movs	r3, #0
 8008596:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008598:	1d3b      	adds	r3, r7, #4
 800859a:	4619      	mov	r1, r3
 800859c:	4809      	ldr	r0, [pc, #36]	; (80085c4 <MX_ADC1_Init+0xf8>)
 800859e:	f002 ff63 	bl	800b468 <HAL_ADC_ConfigChannel>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80085a8:	f001 fa8a 	bl	8009ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 0 */
  HAL_ADCEx_Calibration_Start(&hadc1, sConfig.SingleDiff);
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	4619      	mov	r1, r3
 80085b0:	4804      	ldr	r0, [pc, #16]	; (80085c4 <MX_ADC1_Init+0xf8>)
 80085b2:	f003 fbc3 	bl	800bd3c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 80085b6:	4803      	ldr	r0, [pc, #12]	; (80085c4 <MX_ADC1_Init+0xf8>)
 80085b8:	f002 fe9a 	bl	800b2f0 <HAL_ADC_Start>
  /* USER CODE END ADC1_Init 0 */
}
 80085bc:	bf00      	nop
 80085be:	3730      	adds	r7, #48	; 0x30
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	20002318 	.word	0x20002318
 80085c8:	04300002 	.word	0x04300002

080085cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08a      	sub	sp, #40	; 0x28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085d4:	f107 0314 	add.w	r3, r7, #20
 80085d8:	2200      	movs	r2, #0
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	605a      	str	r2, [r3, #4]
 80085de:	609a      	str	r2, [r3, #8]
 80085e0:	60da      	str	r2, [r3, #12]
 80085e2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085ec:	d124      	bne.n	8008638 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80085ee:	4b14      	ldr	r3, [pc, #80]	; (8008640 <HAL_ADC_MspInit+0x74>)
 80085f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085f2:	4a13      	ldr	r2, [pc, #76]	; (8008640 <HAL_ADC_MspInit+0x74>)
 80085f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80085f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80085fa:	4b11      	ldr	r3, [pc, #68]	; (8008640 <HAL_ADC_MspInit+0x74>)
 80085fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008602:	613b      	str	r3, [r7, #16]
 8008604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008606:	4b0e      	ldr	r3, [pc, #56]	; (8008640 <HAL_ADC_MspInit+0x74>)
 8008608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800860a:	4a0d      	ldr	r2, [pc, #52]	; (8008640 <HAL_ADC_MspInit+0x74>)
 800860c:	f043 0301 	orr.w	r3, r3, #1
 8008610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008612:	4b0b      	ldr	r3, [pc, #44]	; (8008640 <HAL_ADC_MspInit+0x74>)
 8008614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008616:	f003 0301 	and.w	r3, r3, #1
 800861a:	60fb      	str	r3, [r7, #12]
 800861c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = VSENSE_Pin;
 800861e:	2301      	movs	r3, #1
 8008620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008622:	2303      	movs	r3, #3
 8008624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008626:	2300      	movs	r3, #0
 8008628:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VSENSE_GPIO_Port, &GPIO_InitStruct);
 800862a:	f107 0314 	add.w	r3, r7, #20
 800862e:	4619      	mov	r1, r3
 8008630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008634:	f004 f84c 	bl	800c6d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008638:	bf00      	nop
 800863a:	3728      	adds	r7, #40	; 0x28
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	40021000 	.word	0x40021000

08008644 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8008644:	b5b0      	push	{r4, r5, r7, lr}
 8008646:	b08c      	sub	sp, #48	; 0x30
 8008648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  osSemaphoreDef(screenLock);
 800864a:	2300      	movs	r3, #0
 800864c:	62fb      	str	r3, [r7, #44]	; 0x2c
  screenLockHandle = osSemaphoreCreate(osSemaphore(screenLock), 1);
 800864e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008652:	2101      	movs	r1, #1
 8008654:	4618      	mov	r0, r3
 8008656:	f007 fb7b 	bl	800fd50 <osSemaphoreCreate>
 800865a:	4602      	mov	r2, r0
 800865c:	4b14      	ldr	r3, [pc, #80]	; (80086b0 <MX_FREERTOS_Init+0x6c>)
 800865e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8008660:	4b14      	ldr	r3, [pc, #80]	; (80086b4 <MX_FREERTOS_Init+0x70>)
 8008662:	f107 0418 	add.w	r4, r7, #24
 8008666:	461d      	mov	r5, r3
 8008668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800866a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800866c:	682b      	ldr	r3, [r5, #0]
 800866e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8008670:	f107 0318 	add.w	r3, r7, #24
 8008674:	2100      	movs	r1, #0
 8008676:	4618      	mov	r0, r3
 8008678:	f007 fb23 	bl	800fcc2 <osThreadCreate>
 800867c:	4602      	mov	r2, r0
 800867e:	4b0e      	ldr	r3, [pc, #56]	; (80086b8 <MX_FREERTOS_Init+0x74>)
 8008680:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  _boingInitialized = ibFalse;
 8008682:	4b0e      	ldr	r3, [pc, #56]	; (80086bc <MX_FREERTOS_Init+0x78>)
 8008684:	2200      	movs	r2, #0
 8008686:	701a      	strb	r2, [r3, #0]
  osThreadDef(screenTask, ScreenTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8008688:	4b0d      	ldr	r3, [pc, #52]	; (80086c0 <MX_FREERTOS_Init+0x7c>)
 800868a:	1d3c      	adds	r4, r7, #4
 800868c:	461d      	mov	r5, r3
 800868e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008692:	682b      	ldr	r3, [r5, #0]
 8008694:	6023      	str	r3, [r4, #0]
  screenTaskHandle = osThreadCreate(osThread(screenTask), NULL);
 8008696:	1d3b      	adds	r3, r7, #4
 8008698:	2100      	movs	r1, #0
 800869a:	4618      	mov	r0, r3
 800869c:	f007 fb11 	bl	800fcc2 <osThreadCreate>
 80086a0:	4602      	mov	r2, r0
 80086a2:	4b08      	ldr	r3, [pc, #32]	; (80086c4 <MX_FREERTOS_Init+0x80>)
 80086a4:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

}
 80086a6:	bf00      	nop
 80086a8:	3730      	adds	r7, #48	; 0x30
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bdb0      	pop	{r4, r5, r7, pc}
 80086ae:	bf00      	nop
 80086b0:	20002388 	.word	0x20002388
 80086b4:	08015c6c 	.word	0x08015c6c
 80086b8:	20002384 	.word	0x20002384
 80086bc:	200008f4 	.word	0x200008f4
 80086c0:	08015c8c 	.word	0x08015c8c
 80086c4:	2000238c 	.word	0x2000238c

080086c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80086d0:	2001      	movs	r0, #1
 80086d2:	f007 fb29 	bl	800fd28 <osDelay>
 80086d6:	e7fb      	b.n	80086d0 <StartDefaultTask+0x8>

080086d8 <ScreenTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void ScreenTask(void const * argument)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  static uint8_t suite = 0;

  for (;;)
  {
    if (NULL != screenLockHandle)
 80086e0:	4b20      	ldr	r3, [pc, #128]	; (8008764 <ScreenTask+0x8c>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d0fb      	beq.n	80086e0 <ScreenTask+0x8>
    {
      if (osOK == osSemaphoreWait(screenLockHandle, osWaitForever))
 80086e8:	4b1e      	ldr	r3, [pc, #120]	; (8008764 <ScreenTask+0x8c>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80086f0:	4618      	mov	r0, r3
 80086f2:	f007 fb51 	bl	800fd98 <osSemaphoreWait>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1f1      	bne.n	80086e0 <ScreenTask+0x8>
      {
        ili9341_device_t *dev = screen();
 80086fc:	f001 f8d0 	bl	80098a0 <screen>
 8008700:	60f8      	str	r0, [r7, #12]

        switch (suite) {
 8008702:	4b19      	ldr	r3, [pc, #100]	; (8008768 <ScreenTask+0x90>)
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d002      	beq.n	8008710 <ScreenTask+0x38>
 800870a:	2b01      	cmp	r3, #1
 800870c:	d01f      	beq.n	800874e <ScreenTask+0x76>
 800870e:	e022      	b.n	8008756 <ScreenTask+0x7e>
          case 0:
            testScreenFill(dev);
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f000 f82b 	bl	800876c <testScreenFill>
            testScreenLines(dev);
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f000 f854 	bl	80087c4 <testScreenLines>
            osDelay(2000);
 800871c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008720:	f007 fb02 	bl	800fd28 <osDelay>
            testScreenRects(dev);
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f000 f901 	bl	800892c <testScreenRects>
            osDelay(2000);
 800872a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800872e:	f007 fafb 	bl	800fd28 <osDelay>
            testScreenCircles(dev);
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f000 f95c 	bl	80089f0 <testScreenCircles>
            osDelay(2000);
 8008738:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800873c:	f007 faf4 	bl	800fd28 <osDelay>
            //testScreenText(dev);
            //osDelay(1000);
            ++suite;
 8008740:	4b09      	ldr	r3, [pc, #36]	; (8008768 <ScreenTask+0x90>)
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	3301      	adds	r3, #1
 8008746:	b2da      	uxtb	r2, r3
 8008748:	4b07      	ldr	r3, [pc, #28]	; (8008768 <ScreenTask+0x90>)
 800874a:	701a      	strb	r2, [r3, #0]
            break;
 800874c:	e003      	b.n	8008756 <ScreenTask+0x7e>

          case 1:
            testBoing(dev);
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f000 fa0c 	bl	8008b6c <testBoing>
            break;
 8008754:	bf00      	nop
        }

        osSemaphoreRelease(screenLockHandle);
 8008756:	4b03      	ldr	r3, [pc, #12]	; (8008764 <ScreenTask+0x8c>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4618      	mov	r0, r3
 800875c:	f007 fb6a 	bl	800fe34 <osSemaphoreRelease>
    if (NULL != screenLockHandle)
 8008760:	e7be      	b.n	80086e0 <ScreenTask+0x8>
 8008762:	bf00      	nop
 8008764:	20002388 	.word	0x20002388
 8008768:	200008f5 	.word	0x200008f5

0800876c <testScreenFill>:
    }
  }
}

void testScreenFill(ili9341_device_t *dev)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  ili9341_fill_screen(dev, ILI9341_BLUE);
 8008774:	4b10      	ldr	r3, [pc, #64]	; (80087b8 <testScreenFill+0x4c>)
 8008776:	881b      	ldrh	r3, [r3, #0]
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7ff fc0a 	bl	8007f94 <ili9341_fill_screen>
  osDelay(500);
 8008780:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008784:	f007 fad0 	bl	800fd28 <osDelay>
  ili9341_fill_screen(dev, ILI9341_RED);
 8008788:	4b0c      	ldr	r3, [pc, #48]	; (80087bc <testScreenFill+0x50>)
 800878a:	881b      	ldrh	r3, [r3, #0]
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7ff fc00 	bl	8007f94 <ili9341_fill_screen>
  osDelay(500);
 8008794:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008798:	f007 fac6 	bl	800fd28 <osDelay>
  ili9341_fill_screen(dev, ILI9341_GREEN);
 800879c:	4b08      	ldr	r3, [pc, #32]	; (80087c0 <testScreenFill+0x54>)
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7ff fbf6 	bl	8007f94 <ili9341_fill_screen>
  osDelay(500);
 80087a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80087ac:	f007 fabc 	bl	800fd28 <osDelay>
}
 80087b0:	bf00      	nop
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	08015cd6 	.word	0x08015cd6
 80087bc:	08015cda 	.word	0x08015cda
 80087c0:	08015cd8 	.word	0x08015cd8

080087c4 <testScreenLines>:

void testScreenLines(ili9341_device_t *dev)
{
 80087c4:	b590      	push	{r4, r7, lr}
 80087c6:	b08b      	sub	sp, #44	; 0x2c
 80087c8:	af02      	add	r7, sp, #8
 80087ca:	6078      	str	r0, [r7, #4]
  ili9341_fill_screen(dev, ILI9341_BLACK);
 80087cc:	4b56      	ldr	r3, [pc, #344]	; (8008928 <testScreenLines+0x164>)
 80087ce:	881b      	ldrh	r3, [r3, #0]
 80087d0:	4619      	mov	r1, r3
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7ff fbde 	bl	8007f94 <ili9341_fill_screen>

  ili9341_color_t color;
  uint8_t wheel = 0U;
 80087d8:	2300      	movs	r3, #0
 80087da:	737b      	strb	r3, [r7, #13]

  for (int32_t i = 0; i < dev->screen_size.height; i += 10)
 80087dc:	2300      	movs	r3, #0
 80087de:	61fb      	str	r3, [r7, #28]
 80087e0:	e01a      	b.n	8008818 <testScreenLines+0x54>
    { color = ili9341_color_wheel(&wheel); wheel += 3;
 80087e2:	f107 030d 	add.w	r3, r7, #13
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fe ffa5 	bl	8007736 <ili9341_color_wheel>
 80087ec:	4603      	mov	r3, r0
 80087ee:	81fb      	strh	r3, [r7, #14]
 80087f0:	7b7b      	ldrb	r3, [r7, #13]
 80087f2:	3303      	adds	r3, #3
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	737b      	strb	r3, [r7, #13]
      ili9341_draw_line(dev, color, 0, 0, dev->screen_size.width, i); }
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	8b9b      	ldrh	r3, [r3, #28]
 80087fc:	b21b      	sxth	r3, r3
 80087fe:	69fa      	ldr	r2, [r7, #28]
 8008800:	b212      	sxth	r2, r2
 8008802:	89f9      	ldrh	r1, [r7, #14]
 8008804:	9201      	str	r2, [sp, #4]
 8008806:	9300      	str	r3, [sp, #0]
 8008808:	2300      	movs	r3, #0
 800880a:	2200      	movs	r2, #0
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f7ff f8a4 	bl	800795a <ili9341_draw_line>
  for (int32_t i = 0; i < dev->screen_size.height; i += 10)
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	330a      	adds	r3, #10
 8008816:	61fb      	str	r3, [r7, #28]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	8bdb      	ldrh	r3, [r3, #30]
 800881c:	461a      	mov	r2, r3
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	4293      	cmp	r3, r2
 8008822:	dbde      	blt.n	80087e2 <testScreenLines+0x1e>
  for (int32_t i = dev->screen_size.width; i >= 0; i -= 10)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	8b9b      	ldrh	r3, [r3, #28]
 8008828:	61bb      	str	r3, [r7, #24]
 800882a:	e01a      	b.n	8008862 <testScreenLines+0x9e>
    { color = ili9341_color_wheel(&wheel); wheel += 3;
 800882c:	f107 030d 	add.w	r3, r7, #13
 8008830:	4618      	mov	r0, r3
 8008832:	f7fe ff80 	bl	8007736 <ili9341_color_wheel>
 8008836:	4603      	mov	r3, r0
 8008838:	81fb      	strh	r3, [r7, #14]
 800883a:	7b7b      	ldrb	r3, [r7, #13]
 800883c:	3303      	adds	r3, #3
 800883e:	b2db      	uxtb	r3, r3
 8008840:	737b      	strb	r3, [r7, #13]
      ili9341_draw_line(dev, color, 0, 0, i, dev->screen_size.height); }
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	b21b      	sxth	r3, r3
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	8bd2      	ldrh	r2, [r2, #30]
 800884a:	b212      	sxth	r2, r2
 800884c:	89f9      	ldrh	r1, [r7, #14]
 800884e:	9201      	str	r2, [sp, #4]
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	2300      	movs	r3, #0
 8008854:	2200      	movs	r2, #0
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7ff f87f 	bl	800795a <ili9341_draw_line>
  for (int32_t i = dev->screen_size.width; i >= 0; i -= 10)
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	3b0a      	subs	r3, #10
 8008860:	61bb      	str	r3, [r7, #24]
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	2b00      	cmp	r3, #0
 8008866:	dae1      	bge.n	800882c <testScreenLines+0x68>

  osDelay(500);
 8008868:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800886c:	f007 fa5c 	bl	800fd28 <osDelay>

  for (int32_t i = 0; i < dev->screen_size.height; i += 10)
 8008870:	2300      	movs	r3, #0
 8008872:	617b      	str	r3, [r7, #20]
 8008874:	e023      	b.n	80088be <testScreenLines+0xfa>
    { color = ili9341_color_wheel(&wheel); wheel += 3;
 8008876:	f107 030d 	add.w	r3, r7, #13
 800887a:	4618      	mov	r0, r3
 800887c:	f7fe ff5b 	bl	8007736 <ili9341_color_wheel>
 8008880:	4603      	mov	r3, r0
 8008882:	81fb      	strh	r3, [r7, #14]
 8008884:	7b7b      	ldrb	r3, [r7, #13]
 8008886:	3303      	adds	r3, #3
 8008888:	b2db      	uxtb	r3, r3
 800888a:	737b      	strb	r3, [r7, #13]
      ili9341_draw_line(dev, color, dev->screen_size.width, dev->screen_size.height, 0, dev->screen_size.height - i); }
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	8b9b      	ldrh	r3, [r3, #28]
 8008890:	b218      	sxth	r0, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	8bdb      	ldrh	r3, [r3, #30]
 8008896:	b21c      	sxth	r4, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	8bda      	ldrh	r2, [r3, #30]
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	b29b      	uxth	r3, r3
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	b21b      	sxth	r3, r3
 80088a6:	89f9      	ldrh	r1, [r7, #14]
 80088a8:	9301      	str	r3, [sp, #4]
 80088aa:	2300      	movs	r3, #0
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	4623      	mov	r3, r4
 80088b0:	4602      	mov	r2, r0
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7ff f851 	bl	800795a <ili9341_draw_line>
  for (int32_t i = 0; i < dev->screen_size.height; i += 10)
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	330a      	adds	r3, #10
 80088bc:	617b      	str	r3, [r7, #20]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	8bdb      	ldrh	r3, [r3, #30]
 80088c2:	461a      	mov	r2, r3
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	4293      	cmp	r3, r2
 80088c8:	dbd5      	blt.n	8008876 <testScreenLines+0xb2>
  for (int32_t i = dev->screen_size.width; i >= 0; i -= 10)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	8b9b      	ldrh	r3, [r3, #28]
 80088ce:	613b      	str	r3, [r7, #16]
 80088d0:	e023      	b.n	800891a <testScreenLines+0x156>
    { color = ili9341_color_wheel(&wheel); wheel += 3;
 80088d2:	f107 030d 	add.w	r3, r7, #13
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fe ff2d 	bl	8007736 <ili9341_color_wheel>
 80088dc:	4603      	mov	r3, r0
 80088de:	81fb      	strh	r3, [r7, #14]
 80088e0:	7b7b      	ldrb	r3, [r7, #13]
 80088e2:	3303      	adds	r3, #3
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	737b      	strb	r3, [r7, #13]
      ili9341_draw_line(dev, color, dev->screen_size.width, dev->screen_size.height, dev->screen_size.width - i, 0); }
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	8b9b      	ldrh	r3, [r3, #28]
 80088ec:	b218      	sxth	r0, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	8bdb      	ldrh	r3, [r3, #30]
 80088f2:	b21c      	sxth	r4, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	8b9a      	ldrh	r2, [r3, #28]
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	b29b      	uxth	r3, r3
 8008900:	b21b      	sxth	r3, r3
 8008902:	89f9      	ldrh	r1, [r7, #14]
 8008904:	2200      	movs	r2, #0
 8008906:	9201      	str	r2, [sp, #4]
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	4623      	mov	r3, r4
 800890c:	4602      	mov	r2, r0
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7ff f823 	bl	800795a <ili9341_draw_line>
  for (int32_t i = dev->screen_size.width; i >= 0; i -= 10)
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	3b0a      	subs	r3, #10
 8008918:	613b      	str	r3, [r7, #16]
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	dad8      	bge.n	80088d2 <testScreenLines+0x10e>
}
 8008920:	bf00      	nop
 8008922:	3724      	adds	r7, #36	; 0x24
 8008924:	46bd      	mov	sp, r7
 8008926:	bd90      	pop	{r4, r7, pc}
 8008928:	08015cd4 	.word	0x08015cd4

0800892c <testScreenRects>:

void testScreenRects(ili9341_device_t *dev)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b088      	sub	sp, #32
 8008930:	af02      	add	r7, sp, #8
 8008932:	6078      	str	r0, [r7, #4]
  ili9341_fill_screen(dev, ILI9341_BLACK);
 8008934:	4b2d      	ldr	r3, [pc, #180]	; (80089ec <testScreenRects+0xc0>)
 8008936:	881b      	ldrh	r3, [r3, #0]
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7ff fb2a 	bl	8007f94 <ili9341_fill_screen>

  ili9341_color_t color;
  uint8_t wheel = 0U;
 8008940:	2300      	movs	r3, #0
 8008942:	737b      	strb	r3, [r7, #13]

  for (uint16_t i = 0, in = 0; i < dev->screen_size.width; i += 16, ++in) {
 8008944:	2300      	movs	r3, #0
 8008946:	82fb      	strh	r3, [r7, #22]
 8008948:	2300      	movs	r3, #0
 800894a:	82bb      	strh	r3, [r7, #20]
 800894c:	e045      	b.n	80089da <testScreenRects+0xae>
    for (uint16_t j = 0, jn = 0; j < dev->screen_size.height; j += 16, ++jn) {
 800894e:	2300      	movs	r3, #0
 8008950:	827b      	strh	r3, [r7, #18]
 8008952:	2300      	movs	r3, #0
 8008954:	823b      	strh	r3, [r7, #16]
 8008956:	e035      	b.n	80089c4 <testScreenRects+0x98>
      color = ili9341_color_wheel(&wheel);
 8008958:	f107 030d 	add.w	r3, r7, #13
 800895c:	4618      	mov	r0, r3
 800895e:	f7fe feea 	bl	8007736 <ili9341_color_wheel>
 8008962:	4603      	mov	r3, r0
 8008964:	81fb      	strh	r3, [r7, #14]
      if ((in & 1) == (jn & 1)) {
 8008966:	8aba      	ldrh	r2, [r7, #20]
 8008968:	8a3b      	ldrh	r3, [r7, #16]
 800896a:	4053      	eors	r3, r2
 800896c:	b29b      	uxth	r3, r3
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10d      	bne.n	8008992 <testScreenRects+0x66>
        ili9341_fill_rect(dev, color, i, j, 16, 16);
 8008976:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800897a:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 800897e:	89f9      	ldrh	r1, [r7, #14]
 8008980:	2310      	movs	r3, #16
 8008982:	9301      	str	r3, [sp, #4]
 8008984:	2310      	movs	r3, #16
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	4603      	mov	r3, r0
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7ff f942 	bl	8007c14 <ili9341_fill_rect>
 8008990:	e012      	b.n	80089b8 <testScreenRects+0x8c>
      } else {
        ili9341_draw_rect(dev, ~color, i+2, j+2, 12, 12);
 8008992:	89fb      	ldrh	r3, [r7, #14]
 8008994:	43db      	mvns	r3, r3
 8008996:	b299      	uxth	r1, r3
 8008998:	8afb      	ldrh	r3, [r7, #22]
 800899a:	3302      	adds	r3, #2
 800899c:	b29b      	uxth	r3, r3
 800899e:	b21a      	sxth	r2, r3
 80089a0:	8a7b      	ldrh	r3, [r7, #18]
 80089a2:	3302      	adds	r3, #2
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	b218      	sxth	r0, r3
 80089a8:	230c      	movs	r3, #12
 80089aa:	9301      	str	r3, [sp, #4]
 80089ac:	230c      	movs	r3, #12
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	4603      	mov	r3, r0
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f7ff f8be 	bl	8007b34 <ili9341_draw_rect>
    for (uint16_t j = 0, jn = 0; j < dev->screen_size.height; j += 16, ++jn) {
 80089b8:	8a7b      	ldrh	r3, [r7, #18]
 80089ba:	3310      	adds	r3, #16
 80089bc:	827b      	strh	r3, [r7, #18]
 80089be:	8a3b      	ldrh	r3, [r7, #16]
 80089c0:	3301      	adds	r3, #1
 80089c2:	823b      	strh	r3, [r7, #16]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	8bdb      	ldrh	r3, [r3, #30]
 80089c8:	8a7a      	ldrh	r2, [r7, #18]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d3c4      	bcc.n	8008958 <testScreenRects+0x2c>
  for (uint16_t i = 0, in = 0; i < dev->screen_size.width; i += 16, ++in) {
 80089ce:	8afb      	ldrh	r3, [r7, #22]
 80089d0:	3310      	adds	r3, #16
 80089d2:	82fb      	strh	r3, [r7, #22]
 80089d4:	8abb      	ldrh	r3, [r7, #20]
 80089d6:	3301      	adds	r3, #1
 80089d8:	82bb      	strh	r3, [r7, #20]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	8b9b      	ldrh	r3, [r3, #28]
 80089de:	8afa      	ldrh	r2, [r7, #22]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d3b4      	bcc.n	800894e <testScreenRects+0x22>
      }
    }
  }
}
 80089e4:	bf00      	nop
 80089e6:	3718      	adds	r7, #24
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	08015cd4 	.word	0x08015cd4

080089f0 <testScreenCircles>:

void testScreenCircles(ili9341_device_t *dev)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b08a      	sub	sp, #40	; 0x28
 80089f4:	af02      	add	r7, sp, #8
 80089f6:	6078      	str	r0, [r7, #4]
  ili9341_fill_screen(dev, ILI9341_BLACK);
 80089f8:	4b5b      	ldr	r3, [pc, #364]	; (8008b68 <testScreenCircles+0x178>)
 80089fa:	881b      	ldrh	r3, [r3, #0]
 80089fc:	4619      	mov	r1, r3
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f7ff fac8 	bl	8007f94 <ili9341_fill_screen>

  uint16_t x_mid = dev->screen_size.width / 2;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	8b9b      	ldrh	r3, [r3, #28]
 8008a08:	085b      	lsrs	r3, r3, #1
 8008a0a:	827b      	strh	r3, [r7, #18]
  uint16_t y_mid = dev->screen_size.height / 2;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	8bdb      	ldrh	r3, [r3, #30]
 8008a10:	085b      	lsrs	r3, r3, #1
 8008a12:	823b      	strh	r3, [r7, #16]
  uint16_t radius = x_mid;
 8008a14:	8a7b      	ldrh	r3, [r7, #18]
 8008a16:	83fb      	strh	r3, [r7, #30]
  if (radius < y_mid)
 8008a18:	8bfa      	ldrh	r2, [r7, #30]
 8008a1a:	8a3b      	ldrh	r3, [r7, #16]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d201      	bcs.n	8008a24 <testScreenCircles+0x34>
    { radius = y_mid; }
 8008a20:	8a3b      	ldrh	r3, [r7, #16]
 8008a22:	83fb      	strh	r3, [r7, #30]

  ili9341_color_t color;
  uint8_t wheel = 0U;
 8008a24:	2300      	movs	r3, #0
 8008a26:	737b      	strb	r3, [r7, #13]

  for (int16_t i = radius; i >= 0; i -= 6) {
 8008a28:	8bfb      	ldrh	r3, [r7, #30]
 8008a2a:	83bb      	strh	r3, [r7, #28]
 8008a2c:	e01a      	b.n	8008a64 <testScreenCircles+0x74>
    color = ili9341_color_wheel(&wheel);
 8008a2e:	f107 030d 	add.w	r3, r7, #13
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fe fe7f 	bl	8007736 <ili9341_color_wheel>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	81fb      	strh	r3, [r7, #14]
    wheel += 9;
 8008a3c:	7b7b      	ldrb	r3, [r7, #13]
 8008a3e:	3309      	adds	r3, #9
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	737b      	strb	r3, [r7, #13]
    ili9341_fill_circle(dev, color, x_mid, y_mid, i);
 8008a44:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8008a48:	f9b7 0010 	ldrsh.w	r0, [r7, #16]
 8008a4c:	89f9      	ldrh	r1, [r7, #14]
 8008a4e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	4603      	mov	r3, r0
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7ff fa5f 	bl	8007f1a <ili9341_fill_circle>
  for (int16_t i = radius; i >= 0; i -= 6) {
 8008a5c:	8bbb      	ldrh	r3, [r7, #28]
 8008a5e:	3b06      	subs	r3, #6
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	83bb      	strh	r3, [r7, #28]
 8008a64:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	dae0      	bge.n	8008a2e <testScreenCircles+0x3e>
  }

  osDelay(500);
 8008a6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008a70:	f007 f95a 	bl	800fd28 <osDelay>

  for (int16_t i = 0, n = 0; i < dev->screen_size.width; i += 24, ++n) {
 8008a74:	2300      	movs	r3, #0
 8008a76:	837b      	strh	r3, [r7, #26]
 8008a78:	2300      	movs	r3, #0
 8008a7a:	833b      	strh	r3, [r7, #24]
 8008a7c:	e06a      	b.n	8008b54 <testScreenCircles+0x164>
    for (int16_t j = 0, m = 0; j < dev->screen_size.height; j += 24, ++m) {
 8008a7e:	2300      	movs	r3, #0
 8008a80:	82fb      	strh	r3, [r7, #22]
 8008a82:	2300      	movs	r3, #0
 8008a84:	82bb      	strh	r3, [r7, #20]
 8008a86:	e057      	b.n	8008b38 <testScreenCircles+0x148>

      color = ili9341_color_wheel(&wheel);
 8008a88:	f107 030d 	add.w	r3, r7, #13
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7fe fe52 	bl	8007736 <ili9341_color_wheel>
 8008a92:	4603      	mov	r3, r0
 8008a94:	81fb      	strh	r3, [r7, #14]
      wheel += 3;
 8008a96:	7b7b      	ldrb	r3, [r7, #13]
 8008a98:	3303      	adds	r3, #3
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	737b      	strb	r3, [r7, #13]

      if ((n & 1) == (m & 1)) {
 8008a9e:	8b3a      	ldrh	r2, [r7, #24]
 8008aa0:	8abb      	ldrh	r3, [r7, #20]
 8008aa2:	4053      	eors	r3, r2
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	f003 0301 	and.w	r3, r3, #1
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d12d      	bne.n	8008b0a <testScreenCircles+0x11a>
        ili9341_draw_circle(dev, color, i + 12, j + 12, 16);
 8008aae:	8b7b      	ldrh	r3, [r7, #26]
 8008ab0:	330c      	adds	r3, #12
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	b21a      	sxth	r2, r3
 8008ab6:	8afb      	ldrh	r3, [r7, #22]
 8008ab8:	330c      	adds	r3, #12
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	b218      	sxth	r0, r3
 8008abe:	89f9      	ldrh	r1, [r7, #14]
 8008ac0:	2310      	movs	r3, #16
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f7ff f936 	bl	8007d38 <ili9341_draw_circle>
        ili9341_draw_circle(dev, color, i + 12, j + 12, 10);
 8008acc:	8b7b      	ldrh	r3, [r7, #26]
 8008ace:	330c      	adds	r3, #12
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	b21a      	sxth	r2, r3
 8008ad4:	8afb      	ldrh	r3, [r7, #22]
 8008ad6:	330c      	adds	r3, #12
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	b218      	sxth	r0, r3
 8008adc:	89f9      	ldrh	r1, [r7, #14]
 8008ade:	230a      	movs	r3, #10
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f7ff f927 	bl	8007d38 <ili9341_draw_circle>
        ili9341_draw_circle(dev, color, i + 12, j + 12, 4);
 8008aea:	8b7b      	ldrh	r3, [r7, #26]
 8008aec:	330c      	adds	r3, #12
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	b21a      	sxth	r2, r3
 8008af2:	8afb      	ldrh	r3, [r7, #22]
 8008af4:	330c      	adds	r3, #12
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	b218      	sxth	r0, r3
 8008afa:	89f9      	ldrh	r1, [r7, #14]
 8008afc:	2304      	movs	r3, #4
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	4603      	mov	r3, r0
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f7ff f918 	bl	8007d38 <ili9341_draw_circle>
 8008b08:	e00e      	b.n	8008b28 <testScreenCircles+0x138>
      }
      else {
        ili9341_draw_circle(dev, color, i + 12, j + 12, 8);
 8008b0a:	8b7b      	ldrh	r3, [r7, #26]
 8008b0c:	330c      	adds	r3, #12
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	b21a      	sxth	r2, r3
 8008b12:	8afb      	ldrh	r3, [r7, #22]
 8008b14:	330c      	adds	r3, #12
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	b218      	sxth	r0, r3
 8008b1a:	89f9      	ldrh	r1, [r7, #14]
 8008b1c:	2308      	movs	r3, #8
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	4603      	mov	r3, r0
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7ff f908 	bl	8007d38 <ili9341_draw_circle>
    for (int16_t j = 0, m = 0; j < dev->screen_size.height; j += 24, ++m) {
 8008b28:	8afb      	ldrh	r3, [r7, #22]
 8008b2a:	3318      	adds	r3, #24
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	82fb      	strh	r3, [r7, #22]
 8008b30:	8abb      	ldrh	r3, [r7, #20]
 8008b32:	3301      	adds	r3, #1
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	82bb      	strh	r3, [r7, #20]
 8008b38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	8bd2      	ldrh	r2, [r2, #30]
 8008b40:	4293      	cmp	r3, r2
 8008b42:	dba1      	blt.n	8008a88 <testScreenCircles+0x98>
  for (int16_t i = 0, n = 0; i < dev->screen_size.width; i += 24, ++n) {
 8008b44:	8b7b      	ldrh	r3, [r7, #26]
 8008b46:	3318      	adds	r3, #24
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	837b      	strh	r3, [r7, #26]
 8008b4c:	8b3b      	ldrh	r3, [r7, #24]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	833b      	strh	r3, [r7, #24]
 8008b54:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	8b92      	ldrh	r2, [r2, #28]
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	db8e      	blt.n	8008a7e <testScreenCircles+0x8e>
      }
    }
  }
}
 8008b60:	bf00      	nop
 8008b62:	3720      	adds	r7, #32
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	08015cd4 	.word	0x08015cd4

08008b6c <testBoing>:
  ili9341_draw_string(dev, textAttr, "Hello world!");

}

void testBoing(ili9341_device_t *dev)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af04      	add	r7, sp, #16
 8008b72:	6078      	str	r0, [r7, #4]
  static boing_ball_t ball;

  if (ibNOT(_boingInitialized)) {
 8008b74:	4b11      	ldr	r3, [pc, #68]	; (8008bbc <testBoing+0x50>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d117      	bne.n	8008bac <testBoing+0x40>
    ili9341_draw_bitmap_1b(dev, BOING_COLOR_PLOT_SHADOW, BOING_COLOR_PLOT_COLOR,
 8008b7c:	4b10      	ldr	r3, [pc, #64]	; (8008bc0 <testBoing+0x54>)
 8008b7e:	8819      	ldrh	r1, [r3, #0]
 8008b80:	4b10      	ldr	r3, [pc, #64]	; (8008bc4 <testBoing+0x58>)
 8008b82:	881a      	ldrh	r2, [r3, #0]
 8008b84:	4b10      	ldr	r3, [pc, #64]	; (8008bc8 <testBoing+0x5c>)
 8008b86:	9303      	str	r3, [sp, #12]
 8008b88:	23f0      	movs	r3, #240	; 0xf0
 8008b8a:	9302      	str	r3, [sp, #8]
 8008b8c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8008b90:	9301      	str	r3, [sp, #4]
 8008b92:	2300      	movs	r3, #0
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	2300      	movs	r3, #0
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7ff fa11 	bl	8007fc0 <ili9341_draw_bitmap_1b>
        0, 0, 320, 240, (uint8_t *)BOING_PLOT);
    _boingInitialized = ibTrue;
 8008b9e:	4b07      	ldr	r3, [pc, #28]	; (8008bbc <testBoing+0x50>)
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	701a      	strb	r2, [r3, #0]
    boing_init(&ball);
 8008ba4:	4809      	ldr	r0, [pc, #36]	; (8008bcc <testBoing+0x60>)
 8008ba6:	f000 f813 	bl	8008bd0 <boing_init>
  }
  else {
    boing(dev, &ball);
  }
}
 8008baa:	e003      	b.n	8008bb4 <testBoing+0x48>
    boing(dev, &ball);
 8008bac:	4907      	ldr	r1, [pc, #28]	; (8008bcc <testBoing+0x60>)
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f850 	bl	8008c54 <boing>
}
 8008bb4:	bf00      	nop
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	200008f4 	.word	0x200008f4
 8008bc0:	08015cde 	.word	0x08015cde
 8008bc4:	08015cdc 	.word	0x08015cdc
 8008bc8:	08015ce0 	.word	0x08015ce0
 8008bcc:	200008f8 	.word	0x200008f8

08008bd0 <boing_init>:

uint32_t _boing_start;
uint32_t _boing_frame; // frames-per-second estimate

void boing_init(boing_ball_t *ball)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  _boing_start = osKernelSysTick();
 8008bd8:	f007 f863 	bl	800fca2 <osKernelSysTick>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	4b18      	ldr	r3, [pc, #96]	; (8008c40 <boing_init+0x70>)
 8008be0:	601a      	str	r2, [r3, #0]
  _boing_frame = 0U;
 8008be2:	4b18      	ldr	r3, [pc, #96]	; (8008c44 <boing_init+0x74>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	601a      	str	r2, [r3, #0]

  if (NULL != ball) {
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d024      	beq.n	8008c38 <boing_init+0x68>
    ball->pos   =   (boing_pointf_t){ .x = 20.0F, .y = BOING_EDGE_MAX.y   };
 8008bee:	4a16      	ldr	r2, [pc, #88]	; (8008c48 <boing_init+0x78>)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4916      	ldr	r1, [pc, #88]	; (8008c4c <boing_init+0x7c>)
 8008bf4:	6019      	str	r1, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	605a      	str	r2, [r3, #4]
    ball->pre   =   (boing_pointf_t){ .x = 20.0F, .y = BOING_EDGE_MAX.y   };
 8008bfa:	4a13      	ldr	r2, [pc, #76]	; (8008c48 <boing_init+0x78>)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4913      	ldr	r1, [pc, #76]	; (8008c4c <boing_init+0x7c>)
 8008c00:	6099      	str	r1, [r3, #8]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	60da      	str	r2, [r3, #12]
    ball->vel   = (boing_velocity_t){ .x =  1.0F, .y = BOING_BOUNCE_VEL_Y };
 8008c06:	4a12      	ldr	r2, [pc, #72]	; (8008c50 <boing_init+0x80>)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008c0e:	6119      	str	r1, [r3, #16]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	615a      	str	r2, [r3, #20]
    ball->frame = 3;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2203      	movs	r2, #3
 8008c18:	831a      	strh	r2, [r3, #24]
    memset(ball->color, 0, sizeof(ball->color));
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	331a      	adds	r3, #26
 8008c1e:	2220      	movs	r2, #32
 8008c20:	2100      	movs	r1, #0
 8008c22:	4618      	mov	r0, r3
 8008c24:	f00c ff79 	bl	8015b1a <memset>
    memset(ball->spi_tx, 0, sizeof(ball->spi_tx));
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	333a      	adds	r3, #58	; 0x3a
 8008c2c:	f44f 6288 	mov.w	r2, #1088	; 0x440
 8008c30:	2100      	movs	r1, #0
 8008c32:	4618      	mov	r0, r3
 8008c34:	f00c ff71 	bl	8015b1a <memset>
  }
}
 8008c38:	bf00      	nop
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	20002390 	.word	0x20002390
 8008c44:	20002394 	.word	0x20002394
 8008c48:	42f60000 	.word	0x42f60000
 8008c4c:	41a00000 	.word	0x41a00000
 8008c50:	c0600000 	.word	0xc0600000

08008c54 <boing>:

void boing(ili9341_device_t *dev, boing_ball_t *ball)
{
 8008c54:	b590      	push	{r4, r7, lr}
 8008c56:	b095      	sub	sp, #84	; 0x54
 8008c58:	af02      	add	r7, sp, #8
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  if (NULL == ball)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 8454 	beq.w	800950e <boing+0x8ba>
    { return; }

  ball->pre = ball->pos;
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	683a      	ldr	r2, [r7, #0]
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c70:	e883 0003 	stmia.w	r3, {r0, r1}

  ball->pos.x += ball->vel.x;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	ed93 7a00 	vldr	s14, [r3]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	edc3 7a00 	vstr	s15, [r3]
  ball->pos.y += ball->vel.y;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	ed93 7a01 	vldr	s14, [r3, #4]
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	edd3 7a05 	vldr	s15, [r3, #20]
 8008c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	edc3 7a01 	vstr	s15, [r3, #4]

  ball->vel.y += BOING_VELOCITY_DY;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	edd3 7a05 	vldr	s15, [r3, #20]
 8008ca6:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8008f94 <boing+0x340>
 8008caa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	edc3 7a05 	vstr	s15, [r3, #20]

  // hit left or right wall
  if ((ball->pos.x <= BOING_EDGE_MIN.x) || (ball->pos.x >= BOING_EDGE_MAX.x))
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	edd3 7a00 	vldr	s15, [r3]
 8008cba:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8008cbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cc6:	d909      	bls.n	8008cdc <boing+0x88>
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	edd3 7a00 	vldr	s15, [r3]
 8008cce:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8008f98 <boing+0x344>
 8008cd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cda:	db07      	blt.n	8008cec <boing+0x98>
    { ball->vel.x *= -1.0F; }
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	edd3 7a04 	vldr	s15, [r3, #16]
 8008ce2:	eef1 7a67 	vneg.f32	s15, s15
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	edc3 7a04 	vstr	s15, [r3, #16]

  // hit ground
  if (ball->pos.y >= BOING_EDGE_MAX.y) {
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	edd3 7a01 	vldr	s15, [r3, #4]
 8008cf2:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8008f9c <boing+0x348>
 8008cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cfe:	db05      	blt.n	8008d0c <boing+0xb8>
    ball->pos.y = BOING_EDGE_MAX.y;
 8008d00:	4aa7      	ldr	r2, [pc, #668]	; (8008fa0 <boing+0x34c>)
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	605a      	str	r2, [r3, #4]
    ball->vel.y = BOING_BOUNCE_VEL_Y;
 8008d06:	4aa7      	ldr	r2, [pc, #668]	; (8008fa4 <boing+0x350>)
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	615a      	str	r2, [r3, #20]
  // fully drawn.
  static boing_point_t _dim = (boing_point_t){
    .x = __BOING_BALL_WIDTH__,
    .y = __BOING_BALL_HEIGHT__
  };
  int16_t _pos_x = __FROUND(int16_t, ball->pos.x + _dim.x);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	ed93 7a00 	vldr	s14, [r3]
 8008d12:	4ba5      	ldr	r3, [pc, #660]	; (8008fa8 <boing+0x354>)
 8008d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d18:	ee07 3a90 	vmov	s15, r3
 8008d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d24:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d2c:	d519      	bpl.n	8008d62 <boing+0x10e>
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	ed93 7a00 	vldr	s14, [r3]
 8008d34:	4b9c      	ldr	r3, [pc, #624]	; (8008fa8 <boing+0x354>)
 8008d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d3a:	ee07 3a90 	vmov	s15, r3
 8008d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d46:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d52:	ee17 3a90 	vmov	r3, s15
 8008d56:	b21b      	sxth	r3, r3
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	425b      	negs	r3, r3
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	b21b      	sxth	r3, r3
 8008d60:	e014      	b.n	8008d8c <boing+0x138>
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	ed93 7a00 	vldr	s14, [r3]
 8008d68:	4b8f      	ldr	r3, [pc, #572]	; (8008fa8 <boing+0x354>)
 8008d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d6e:	ee07 3a90 	vmov	s15, r3
 8008d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008d7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d86:	ee17 3a90 	vmov	r3, s15
 8008d8a:	b21b      	sxth	r3, r3
 8008d8c:	86bb      	strh	r3, [r7, #52]	; 0x34
  int16_t _pos_y = __FROUND(int16_t, ball->pos.y + _dim.y);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	ed93 7a01 	vldr	s14, [r3, #4]
 8008d94:	4b84      	ldr	r3, [pc, #528]	; (8008fa8 <boing+0x354>)
 8008d96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008d9a:	ee07 3a90 	vmov	s15, r3
 8008d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008da6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dae:	d519      	bpl.n	8008de4 <boing+0x190>
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	ed93 7a01 	vldr	s14, [r3, #4]
 8008db6:	4b7c      	ldr	r3, [pc, #496]	; (8008fa8 <boing+0x354>)
 8008db8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008dbc:	ee07 3a90 	vmov	s15, r3
 8008dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dc8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008dd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008dd4:	ee17 3a90 	vmov	r3, s15
 8008dd8:	b21b      	sxth	r3, r3
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	425b      	negs	r3, r3
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	b21b      	sxth	r3, r3
 8008de2:	e014      	b.n	8008e0e <boing+0x1ba>
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	ed93 7a01 	vldr	s14, [r3, #4]
 8008dea:	4b6f      	ldr	r3, [pc, #444]	; (8008fa8 <boing+0x354>)
 8008dec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008df0:	ee07 3a90 	vmov	s15, r3
 8008df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008df8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dfc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008e00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e08:	ee17 3a90 	vmov	r3, s15
 8008e0c:	b21b      	sxth	r3, r3
 8008e0e:	867b      	strh	r3, [r7, #50]	; 0x32
  int16_t _pre_x = __FROUND(int16_t, ball->pre.x + _dim.x);
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	ed93 7a02 	vldr	s14, [r3, #8]
 8008e16:	4b64      	ldr	r3, [pc, #400]	; (8008fa8 <boing+0x354>)
 8008e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e1c:	ee07 3a90 	vmov	s15, r3
 8008e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e30:	d519      	bpl.n	8008e66 <boing+0x212>
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	ed93 7a02 	vldr	s14, [r3, #8]
 8008e38:	4b5b      	ldr	r3, [pc, #364]	; (8008fa8 <boing+0x354>)
 8008e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e3e:	ee07 3a90 	vmov	s15, r3
 8008e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e56:	ee17 3a90 	vmov	r3, s15
 8008e5a:	b21b      	sxth	r3, r3
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	425b      	negs	r3, r3
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	b21b      	sxth	r3, r3
 8008e64:	e014      	b.n	8008e90 <boing+0x23c>
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	ed93 7a02 	vldr	s14, [r3, #8]
 8008e6c:	4b4e      	ldr	r3, [pc, #312]	; (8008fa8 <boing+0x354>)
 8008e6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e72:	ee07 3a90 	vmov	s15, r3
 8008e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e7e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008e82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008e86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e8a:	ee17 3a90 	vmov	r3, s15
 8008e8e:	b21b      	sxth	r3, r3
 8008e90:	863b      	strh	r3, [r7, #48]	; 0x30
  int16_t _pre_y = __FROUND(int16_t, ball->pre.y + _dim.y);
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	ed93 7a03 	vldr	s14, [r3, #12]
 8008e98:	4b43      	ldr	r3, [pc, #268]	; (8008fa8 <boing+0x354>)
 8008e9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008e9e:	ee07 3a90 	vmov	s15, r3
 8008ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008eaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eb2:	d519      	bpl.n	8008ee8 <boing+0x294>
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	ed93 7a03 	vldr	s14, [r3, #12]
 8008eba:	4b3b      	ldr	r3, [pc, #236]	; (8008fa8 <boing+0x354>)
 8008ebc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008ec0:	ee07 3a90 	vmov	s15, r3
 8008ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ecc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008ed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ed8:	ee17 3a90 	vmov	r3, s15
 8008edc:	b21b      	sxth	r3, r3
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	425b      	negs	r3, r3
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	b21b      	sxth	r3, r3
 8008ee6:	e014      	b.n	8008f12 <boing+0x2be>
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	ed93 7a03 	vldr	s14, [r3, #12]
 8008eee:	4b2e      	ldr	r3, [pc, #184]	; (8008fa8 <boing+0x354>)
 8008ef0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008ef4:	ee07 3a90 	vmov	s15, r3
 8008ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f00:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008f04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008f08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f0c:	ee17 3a90 	vmov	r3, s15
 8008f10:	b21b      	sxth	r3, r3
 8008f12:	85fb      	strh	r3, [r7, #46]	; 0x2e
  boing_point_t min;
  boing_point_t max;
  boing_point_t size;

  // determine bounds of prior and new positions
  min.x = __FROUND(int16_t, ball->pos.x);
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	edd3 7a00 	vldr	s15, [r3]
 8008f1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f22:	d510      	bpl.n	8008f46 <boing+0x2f2>
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	edd3 7a00 	vldr	s15, [r3]
 8008f2a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f36:	ee17 3a90 	vmov	r3, s15
 8008f3a:	b21b      	sxth	r3, r3
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	425b      	negs	r3, r3
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	b21b      	sxth	r3, r3
 8008f44:	e00b      	b.n	8008f5e <boing+0x30a>
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	edd3 7a00 	vldr	s15, [r3]
 8008f4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008f50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008f54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f58:	ee17 3a90 	vmov	r3, s15
 8008f5c:	b21b      	sxth	r3, r3
 8008f5e:	843b      	strh	r3, [r7, #32]
  min.y = __FROUND(int16_t, ball->pos.y);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	edd3 7a01 	vldr	s15, [r3, #4]
 8008f66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f6e:	d51d      	bpl.n	8008fac <boing+0x358>
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	edd3 7a01 	vldr	s15, [r3, #4]
 8008f76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008f7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f82:	ee17 3a90 	vmov	r3, s15
 8008f86:	b21b      	sxth	r3, r3
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	425b      	negs	r3, r3
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	b21b      	sxth	r3, r3
 8008f90:	e018      	b.n	8008fc4 <boing+0x370>
 8008f92:	bf00      	nop
 8008f94:	3d75c28f 	.word	0x3d75c28f
 8008f98:	43370000 	.word	0x43370000
 8008f9c:	42f60000 	.word	0x42f60000
 8008fa0:	42f60000 	.word	0x42f60000
 8008fa4:	c0600000 	.word	0xc0600000
 8008fa8:	20000008 	.word	0x20000008
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	edd3 7a01 	vldr	s15, [r3, #4]
 8008fb2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008fb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008fba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fbe:	ee17 3a90 	vmov	r3, s15
 8008fc2:	b21b      	sxth	r3, r3
 8008fc4:	847b      	strh	r3, [r7, #34]	; 0x22
  if (min.x > ball->pre.x)
 8008fc6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008fca:	ee07 3a90 	vmov	s15, r3
 8008fce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8008fd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fe0:	dd25      	ble.n	800902e <boing+0x3da>
    { min.x = __FROUND(int16_t, ball->pre.x); }
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	edd3 7a02 	vldr	s15, [r3, #8]
 8008fe8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff0:	d510      	bpl.n	8009014 <boing+0x3c0>
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	edd3 7a02 	vldr	s15, [r3, #8]
 8008ff8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009004:	ee17 3a90 	vmov	r3, s15
 8009008:	b21b      	sxth	r3, r3
 800900a:	b29b      	uxth	r3, r3
 800900c:	425b      	negs	r3, r3
 800900e:	b29b      	uxth	r3, r3
 8009010:	b21b      	sxth	r3, r3
 8009012:	e00b      	b.n	800902c <boing+0x3d8>
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	edd3 7a02 	vldr	s15, [r3, #8]
 800901a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800901e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009022:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009026:	ee17 3a90 	vmov	r3, s15
 800902a:	b21b      	sxth	r3, r3
 800902c:	843b      	strh	r3, [r7, #32]
  if (min.y > ball->pre.y)
 800902e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009032:	ee07 3a90 	vmov	s15, r3
 8009036:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	edd3 7a03 	vldr	s15, [r3, #12]
 8009040:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009048:	dd25      	ble.n	8009096 <boing+0x442>
    { min.y = __FROUND(int16_t, ball->pre.y); }
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	edd3 7a03 	vldr	s15, [r3, #12]
 8009050:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009058:	d510      	bpl.n	800907c <boing+0x428>
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	edd3 7a03 	vldr	s15, [r3, #12]
 8009060:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009064:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800906c:	ee17 3a90 	vmov	r3, s15
 8009070:	b21b      	sxth	r3, r3
 8009072:	b29b      	uxth	r3, r3
 8009074:	425b      	negs	r3, r3
 8009076:	b29b      	uxth	r3, r3
 8009078:	b21b      	sxth	r3, r3
 800907a:	e00b      	b.n	8009094 <boing+0x440>
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	edd3 7a03 	vldr	s15, [r3, #12]
 8009082:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009086:	ee77 7a87 	vadd.f32	s15, s15, s14
 800908a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800908e:	ee17 3a90 	vmov	r3, s15
 8009092:	b21b      	sxth	r3, r3
 8009094:	847b      	strh	r3, [r7, #34]	; 0x22

  max.x = _pos_x;
 8009096:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009098:	83bb      	strh	r3, [r7, #28]
  max.y = _pos_y;
 800909a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800909c:	83fb      	strh	r3, [r7, #30]
  if (max.x < _pre_x)
 800909e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80090a2:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80090a6:	429a      	cmp	r2, r3
 80090a8:	dd01      	ble.n	80090ae <boing+0x45a>
    { max.x = _pre_x; }
 80090aa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80090ac:	83bb      	strh	r3, [r7, #28]
  if (max.y < _pre_y)
 80090ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80090b2:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80090b6:	429a      	cmp	r2, r3
 80090b8:	dd01      	ble.n	80090be <boing+0x46a>
    { max.y = _pre_y; }
 80090ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80090bc:	83fb      	strh	r3, [r7, #30]

  size.x = max.x - min.x + 1;
 80090be:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80090c2:	b29a      	uxth	r2, r3
 80090c4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	1ad3      	subs	r3, r2, r3
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	3301      	adds	r3, #1
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	b21b      	sxth	r3, r3
 80090d4:	833b      	strh	r3, [r7, #24]
  size.y = max.y - min.y + 1;
 80090d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80090da:	b29a      	uxth	r2, r3
 80090dc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	1ad3      	subs	r3, r2, r3
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	3301      	adds	r3, #1
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	b21b      	sxth	r3, r3
 80090ec:	837b      	strh	r3, [r7, #26]

  // ball animation frame is incremented opposite the ball's X velocity
  float _frame = ball->vel.x * BOING_ROTATION_FX;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80090f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80090f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090fc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  ball->frame -= __FROUND(int16_t, _frame);
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009106:	b29a      	uxth	r2, r3
 8009108:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800910c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009114:	d50e      	bpl.n	8009134 <boing+0x4e0>
 8009116:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800911a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800911e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009122:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009126:	ee17 3a90 	vmov	r3, s15
 800912a:	b21b      	sxth	r3, r3
 800912c:	b29b      	uxth	r3, r3
 800912e:	425b      	negs	r3, r3
 8009130:	b29b      	uxth	r3, r3
 8009132:	e00b      	b.n	800914c <boing+0x4f8>
 8009134:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009138:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800913c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009144:	ee17 3a90 	vmov	r3, s15
 8009148:	b21b      	sxth	r3, r3
 800914a:	b29b      	uxth	r3, r3
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	b29b      	uxth	r3, r3
 8009150:	b21a      	sxth	r2, r3
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	831a      	strh	r2, [r3, #24]
  if (ball->frame < 0)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800915c:	2b00      	cmp	r3, #0
 800915e:	da09      	bge.n	8009174 <boing+0x520>
    { ball->frame += __BOING_BALL_FRAME_NB__; } // constrain from 0 to 13
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009166:	b29b      	uxth	r3, r3
 8009168:	330e      	adds	r3, #14
 800916a:	b29b      	uxth	r3, r3
 800916c:	b21a      	sxth	r2, r3
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	831a      	strh	r2, [r3, #24]
 8009172:	e00d      	b.n	8009190 <boing+0x53c>
  else if (ball->frame >= __BOING_BALL_FRAME_NB__)
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800917a:	2b0d      	cmp	r3, #13
 800917c:	dd08      	ble.n	8009190 <boing+0x53c>
    { ball->frame -= __BOING_BALL_FRAME_NB__; }
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8009184:	b29b      	uxth	r3, r3
 8009186:	3b0e      	subs	r3, #14
 8009188:	b29b      	uxth	r3, r3
 800918a:	b21a      	sxth	r2, r3
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	831a      	strh	r2, [r3, #24]

  // set 7 panels to color 1, 7 to color 2, based on frame number. this makes
  // the ball spin. entries 0(=clear) and 1(=shadow) are skipped.
  for (uint16_t i = 0; i < __BOING_BALL_FRAME_NB__; ++i) {
 8009190:	2300      	movs	r3, #0
 8009192:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009196:	e030      	b.n	80091fa <boing+0x5a6>
    uint16_t fi = ball->frame + i;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800919e:	b29a      	uxth	r2, r3
 80091a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80091a4:	4413      	add	r3, r2
 80091a6:	84bb      	strh	r3, [r7, #36]	; 0x24
    if ((fi % __BOING_BALL_FRAME_NB__) < __BOING_BALL_FRAME_HF__)
 80091a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80091aa:	0853      	lsrs	r3, r2, #1
 80091ac:	49a3      	ldr	r1, [pc, #652]	; (800943c <boing+0x7e8>)
 80091ae:	fba1 1303 	umull	r1, r3, r1, r3
 80091b2:	0899      	lsrs	r1, r3, #2
 80091b4:	460b      	mov	r3, r1
 80091b6:	00db      	lsls	r3, r3, #3
 80091b8:	1a5b      	subs	r3, r3, r1
 80091ba:	005b      	lsls	r3, r3, #1
 80091bc:	1ad3      	subs	r3, r2, r3
 80091be:	b29b      	uxth	r3, r3
 80091c0:	2b06      	cmp	r3, #6
 80091c2:	d80a      	bhi.n	80091da <boing+0x586>
      { ball->color[i + 2] = BOING_COLOR_BALL_P1; }
 80091c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80091c8:	3302      	adds	r3, #2
 80091ca:	210f      	movs	r1, #15
 80091cc:	683a      	ldr	r2, [r7, #0]
 80091ce:	330c      	adds	r3, #12
 80091d0:	005b      	lsls	r3, r3, #1
 80091d2:	4413      	add	r3, r2
 80091d4:	460a      	mov	r2, r1
 80091d6:	805a      	strh	r2, [r3, #2]
 80091d8:	e00a      	b.n	80091f0 <boing+0x59c>
    else
      { ball->color[i + 2] = BOING_COLOR_BALL_P2; }
 80091da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80091de:	3302      	adds	r3, #2
 80091e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	330c      	adds	r3, #12
 80091e8:	005b      	lsls	r3, r3, #1
 80091ea:	4413      	add	r3, r2
 80091ec:	460a      	mov	r2, r1
 80091ee:	805a      	strh	r2, [r3, #2]
  for (uint16_t i = 0; i < __BOING_BALL_FRAME_NB__; ++i) {
 80091f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80091f4:	3301      	adds	r3, #1
 80091f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80091fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80091fe:	2b0d      	cmp	r3, #13
 8009200:	d9ca      	bls.n	8009198 <boing+0x544>
  }

  // only the changed rectangle is written to the rendering buffer
  uint16_t *push;
  uint16_t le, _le;
  int16_t bi = 0, bx, gx;
 8009202:	2300      	movs	r3, #0
 8009204:	87fb      	strh	r3, [r7, #62]	; 0x3e

  boing_point_t b = (boing_point_t){
    .x = min.x - __FROUND(int16_t, ball->pos.x),
 8009206:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800920a:	b29a      	uxth	r2, r3
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	edd3 7a00 	vldr	s15, [r3]
 8009212:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800921a:	d50f      	bpl.n	800923c <boing+0x5e8>
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	edd3 7a00 	vldr	s15, [r3]
 8009222:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800922a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800922e:	ee17 3a90 	vmov	r3, s15
 8009232:	b21b      	sxth	r3, r3
 8009234:	b29b      	uxth	r3, r3
 8009236:	425b      	negs	r3, r3
 8009238:	b29b      	uxth	r3, r3
 800923a:	e00c      	b.n	8009256 <boing+0x602>
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	edd3 7a00 	vldr	s15, [r3]
 8009242:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009246:	ee77 7a87 	vadd.f32	s15, s15, s14
 800924a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800924e:	ee17 3a90 	vmov	r3, s15
 8009252:	b21b      	sxth	r3, r3
 8009254:	b29b      	uxth	r3, r3
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	b29b      	uxth	r3, r3
 800925a:	b21b      	sxth	r3, r3
  boing_point_t b = (boing_point_t){
 800925c:	823b      	strh	r3, [r7, #16]
    .y = min.y - __FROUND(int16_t, ball->pos.y)
 800925e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009262:	b29a      	uxth	r2, r3
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	edd3 7a01 	vldr	s15, [r3, #4]
 800926a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800926e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009272:	d50f      	bpl.n	8009294 <boing+0x640>
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	edd3 7a01 	vldr	s15, [r3, #4]
 800927a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800927e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009282:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009286:	ee17 3a90 	vmov	r3, s15
 800928a:	b21b      	sxth	r3, r3
 800928c:	b29b      	uxth	r3, r3
 800928e:	425b      	negs	r3, r3
 8009290:	b29b      	uxth	r3, r3
 8009292:	e00c      	b.n	80092ae <boing+0x65a>
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	edd3 7a01 	vldr	s15, [r3, #4]
 800929a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800929e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80092a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80092a6:	ee17 3a90 	vmov	r3, s15
 80092aa:	b21b      	sxth	r3, r3
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	b21b      	sxth	r3, r3
  boing_point_t b = (boing_point_t){
 80092b4:	827b      	strh	r3, [r7, #18]
  };
  boing_point_t g = (boing_point_t){
    .x = min.x,
 80092b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
  boing_point_t g = (boing_point_t){
 80092ba:	81bb      	strh	r3, [r7, #12]
    .y = min.y
 80092bc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
  boing_point_t g = (boing_point_t){
 80092c0:	81fb      	strh	r3, [r7, #14]
  };

  // wait for previous DMA transfer to complete if any
  ili9341_transmit_wait(dev);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f7fe fab5 	bl	8007832 <ili9341_transmit_wait>

  // select target region
  ili9341_spi_tft_set_address_rect(dev,
      min.x, min.y, min.x + size.x - 1, min.y + size.y - 1);
 80092c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
  ili9341_spi_tft_set_address_rect(dev,
 80092cc:	b299      	uxth	r1, r3
      min.x, min.y, min.x + size.x - 1, min.y + size.y - 1);
 80092ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
  ili9341_spi_tft_set_address_rect(dev,
 80092d2:	b298      	uxth	r0, r3
      min.x, min.y, min.x + size.x - 1, min.y + size.y - 1);
 80092d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80092d8:	b29a      	uxth	r2, r3
 80092da:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80092de:	b29b      	uxth	r3, r3
 80092e0:	4413      	add	r3, r2
 80092e2:	b29b      	uxth	r3, r3
  ili9341_spi_tft_set_address_rect(dev,
 80092e4:	3b01      	subs	r3, #1
 80092e6:	b29c      	uxth	r4, r3
      min.x, min.y, min.x + size.x - 1, min.y + size.y - 1);
 80092e8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	4413      	add	r3, r2
 80092f6:	b29b      	uxth	r3, r3
  ili9341_spi_tft_set_address_rect(dev,
 80092f8:	3b01      	subs	r3, #1
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	4623      	mov	r3, r4
 8009300:	4602      	mov	r2, r0
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7fe fa44 	bl	8007790 <ili9341_spi_tft_set_address_rect>
  ili9341_spi_tft_select(dev);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7fd fc83 	bl	8006c14 <ili9341_spi_tft_select>

  HAL_GPIO_WritePin(dev->data_command_port, dev->data_command_pin, __GPIO_PIN_SET__);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6958      	ldr	r0, [r3, #20]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	8b1b      	ldrh	r3, [r3, #24]
 8009316:	2201      	movs	r2, #1
 8009318:	4619      	mov	r1, r3
 800931a:	f003 fb73 	bl	800ca04 <HAL_GPIO_WritePin>

  for (int16_t y = 0; y < size.y; ++y) {
 800931e:	2300      	movs	r3, #0
 8009320:	873b      	strh	r3, [r7, #56]	; 0x38
 8009322:	e0e6      	b.n	80094f2 <boing+0x89e>

    push = ball->spi_tx[bi];
 8009324:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 8009328:	4613      	mov	r3, r2
 800932a:	011b      	lsls	r3, r3, #4
 800932c:	4413      	add	r3, r2
 800932e:	015b      	lsls	r3, r3, #5
 8009330:	3338      	adds	r3, #56	; 0x38
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	4413      	add	r3, r2
 8009336:	3302      	adds	r3, #2
 8009338:	643b      	str	r3, [r7, #64]	; 0x40

    bx = b.x; // copies of actual values are used and mutated below
 800933a:	8a3b      	ldrh	r3, [r7, #16]
 800933c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    gx = g.x; //
 800933e:	89bb      	ldrh	r3, [r7, #12]
 8009340:	877b      	strh	r3, [r7, #58]	; 0x3a

    for (int16_t x = 0; x < size.x; ++x) {
 8009342:	2300      	movs	r3, #0
 8009344:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009346:	e0a0      	b.n	800948a <boing+0x836>

      _le = BOING_PLOT[g.y][gx / 8] & (0x80 >> (gx & 0x7));
 8009348:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800934c:	4619      	mov	r1, r3
 800934e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8009352:	2b00      	cmp	r3, #0
 8009354:	da00      	bge.n	8009358 <boing+0x704>
 8009356:	3307      	adds	r3, #7
 8009358:	10db      	asrs	r3, r3, #3
 800935a:	b21b      	sxth	r3, r3
 800935c:	4618      	mov	r0, r3
 800935e:	4a38      	ldr	r2, [pc, #224]	; (8009440 <boing+0x7ec>)
 8009360:	460b      	mov	r3, r1
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	440b      	add	r3, r1
 8009366:	00db      	lsls	r3, r3, #3
 8009368:	4413      	add	r3, r2
 800936a:	4403      	add	r3, r0
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	b21a      	sxth	r2, r3
 8009370:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009372:	f003 0307 	and.w	r3, r3, #7
 8009376:	2180      	movs	r1, #128	; 0x80
 8009378:	fa41 f303 	asr.w	r3, r1, r3
 800937c:	b21b      	sxth	r3, r3
 800937e:	4013      	ands	r3, r2
 8009380:	b21b      	sxth	r3, r3
 8009382:	84fb      	strh	r3, [r7, #38]	; 0x26

      // is current pixel inside the ball bitmap region?
      if ( ( bx  >= 0 ) && ( bx  < __BOING_BALL_WIDTH__  ) &&
 8009384:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8009388:	2b00      	cmp	r3, #0
 800938a:	db50      	blt.n	800942e <boing+0x7da>
 800938c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8009390:	2b87      	cmp	r3, #135	; 0x87
 8009392:	dc4c      	bgt.n	800942e <boing+0x7da>
           ( b.y >= 0 ) && ( b.y < __BOING_BALL_HEIGHT__ ) ) {
 8009394:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
      if ( ( bx  >= 0 ) && ( bx  < __BOING_BALL_WIDTH__  ) &&
 8009398:	2b00      	cmp	r3, #0
 800939a:	db48      	blt.n	800942e <boing+0x7da>
           ( b.y >= 0 ) && ( b.y < __BOING_BALL_HEIGHT__ ) ) {
 800939c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80093a0:	2b63      	cmp	r3, #99	; 0x63
 80093a2:	dc44      	bgt.n	800942e <boing+0x7da>

        le = BOING_BALL[b.y][bx / 2]; // use low 4 bits by default
 80093a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80093a8:	4619      	mov	r1, r3
 80093aa:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80093ae:	0fda      	lsrs	r2, r3, #31
 80093b0:	4413      	add	r3, r2
 80093b2:	105b      	asrs	r3, r3, #1
 80093b4:	b21b      	sxth	r3, r3
 80093b6:	4618      	mov	r0, r3
 80093b8:	4a22      	ldr	r2, [pc, #136]	; (8009444 <boing+0x7f0>)
 80093ba:	460b      	mov	r3, r1
 80093bc:	011b      	lsls	r3, r3, #4
 80093be:	440b      	add	r3, r1
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4413      	add	r3, r2
 80093c4:	4403      	add	r3, r0
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	82fb      	strh	r3, [r7, #22]
        if (ibNOT(bx & 1))
 80093cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80093ce:	f003 0301 	and.w	r3, r3, #1
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d103      	bne.n	80093de <boing+0x78a>
          { le >>= 4U; } // shift in high 4 bits
 80093d6:	8afb      	ldrh	r3, [r7, #22]
 80093d8:	091b      	lsrs	r3, r3, #4
 80093da:	b29b      	uxth	r3, r3
 80093dc:	82fb      	strh	r3, [r7, #22]
        le &= 0xF; // mask off any leading bits
 80093de:	8afb      	ldrh	r3, [r7, #22]
 80093e0:	f003 030f 	and.w	r3, r3, #15
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	82fb      	strh	r3, [r7, #22]

        switch (le) {
 80093e8:	8afb      	ldrh	r3, [r7, #22]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <boing+0x7a0>
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d00a      	beq.n	8009408 <boing+0x7b4>
 80093f2:	e013      	b.n	800941c <boing+0x7c8>

          case  0: // outside of ball, outside of shadow
            le = _le
 80093f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d002      	beq.n	8009400 <boing+0x7ac>
 80093fa:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80093fe:	e001      	b.n	8009404 <boing+0x7b0>
 8009400:	f24c 6318 	movw	r3, #50712	; 0xc618
 8009404:	82fb      	strh	r3, [r7, #22]
              ? BOING_COLOR_PLOT_SHADOW
              : BOING_COLOR_PLOT_COLOR;
            break;
 8009406:	e011      	b.n	800942c <boing+0x7d8>

          case  1: // outside of ball, inside of shadow
            le = _le
 8009408:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800940a:	2b00      	cmp	r3, #0
 800940c:	d002      	beq.n	8009414 <boing+0x7c0>
 800940e:	f246 030c 	movw	r3, #24588	; 0x600c
 8009412:	e001      	b.n	8009418 <boing+0x7c4>
 8009414:	f245 2385 	movw	r3, #21125	; 0x5285
 8009418:	82fb      	strh	r3, [r7, #22]
              ? BOING_COLOR_GRID_SHADOW
              : BOING_COLOR_BG_SHADOW;
            break;
 800941a:	e007      	b.n	800942c <boing+0x7d8>

          default: // inside of ball
            le = ball->color[le];
 800941c:	8afb      	ldrh	r3, [r7, #22]
 800941e:	683a      	ldr	r2, [r7, #0]
 8009420:	330c      	adds	r3, #12
 8009422:	005b      	lsls	r3, r3, #1
 8009424:	4413      	add	r3, r2
 8009426:	885b      	ldrh	r3, [r3, #2]
 8009428:	82fb      	strh	r3, [r7, #22]
            break;
 800942a:	bf00      	nop
        }

      }
 800942c:	e00f      	b.n	800944e <boing+0x7fa>
      // outside ball bitmap. just draw background bitmap
      else {
        le = _le
 800942e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009430:	2b00      	cmp	r3, #0
 8009432:	d009      	beq.n	8009448 <boing+0x7f4>
 8009434:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8009438:	e008      	b.n	800944c <boing+0x7f8>
 800943a:	bf00      	nop
 800943c:	92492493 	.word	0x92492493
 8009440:	08015ce0 	.word	0x08015ce0
 8009444:	08018260 	.word	0x08018260
 8009448:	f24c 6318 	movw	r3, #50712	; 0xc618
 800944c:	82fb      	strh	r3, [r7, #22]
          ? BOING_COLOR_PLOT_SHADOW
          : BOING_COLOR_PLOT_COLOR;
      }

      *push = __LEu16(&le);
 800944e:	f107 0316 	add.w	r3, r7, #22
 8009452:	3301      	adds	r3, #1
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	b21a      	sxth	r2, r3
 8009458:	f107 0316 	add.w	r3, r7, #22
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	021b      	lsls	r3, r3, #8
 8009460:	b21b      	sxth	r3, r3
 8009462:	4313      	orrs	r3, r2
 8009464:	b21b      	sxth	r3, r3
 8009466:	b29a      	uxth	r2, r3
 8009468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800946a:	801a      	strh	r2, [r3, #0]

      ++push;
 800946c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800946e:	3302      	adds	r3, #2
 8009470:	643b      	str	r3, [r7, #64]	; 0x40
      ++bx;
 8009472:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009474:	3301      	adds	r3, #1
 8009476:	b29b      	uxth	r3, r3
 8009478:	87bb      	strh	r3, [r7, #60]	; 0x3c
      ++gx;
 800947a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800947c:	3301      	adds	r3, #1
 800947e:	b29b      	uxth	r3, r3
 8009480:	877b      	strh	r3, [r7, #58]	; 0x3a
    for (int16_t x = 0; x < size.x; ++x) {
 8009482:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009484:	3301      	adds	r3, #1
 8009486:	b29b      	uxth	r3, r3
 8009488:	86fb      	strh	r3, [r7, #54]	; 0x36
 800948a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800948e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8009492:	429a      	cmp	r2, r3
 8009494:	f6ff af58 	blt.w	8009348 <boing+0x6f4>
    }

    // wait for previous DMA transfer to complete
    ili9341_transmit_wait(dev);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f7fe f9ca 	bl	8007832 <ili9341_transmit_wait>
    ili9341_transmit_color(dev, size.x * 2, (ball->spi_tx[bi]), ibNo);
 800949e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	005b      	lsls	r3, r3, #1
 80094a6:	b299      	uxth	r1, r3
 80094a8:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 80094ac:	4613      	mov	r3, r2
 80094ae:	011b      	lsls	r3, r3, #4
 80094b0:	4413      	add	r3, r2
 80094b2:	015b      	lsls	r3, r3, #5
 80094b4:	3338      	adds	r3, #56	; 0x38
 80094b6:	683a      	ldr	r2, [r7, #0]
 80094b8:	4413      	add	r3, r2
 80094ba:	1c9a      	adds	r2, r3, #2
 80094bc:	2300      	movs	r3, #0
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7fe f9ce 	bl	8007860 <ili9341_transmit_color>
    bi = 1 - bi;
 80094c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80094c6:	f1c3 0301 	rsb	r3, r3, #1
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	87fb      	strh	r3, [r7, #62]	; 0x3e

    ++(b.y);
 80094ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	3301      	adds	r3, #1
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	b21b      	sxth	r3, r3
 80094da:	827b      	strh	r3, [r7, #18]
    ++(g.y);
 80094dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	3301      	adds	r3, #1
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	b21b      	sxth	r3, r3
 80094e8:	81fb      	strh	r3, [r7, #14]
  for (int16_t y = 0; y < size.y; ++y) {
 80094ea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80094ec:	3301      	adds	r3, #1
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	873b      	strh	r3, [r7, #56]	; 0x38
 80094f2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80094f6:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 80094fa:	429a      	cmp	r2, r3
 80094fc:	f6ff af12 	blt.w	8009324 <boing+0x6d0>
  }

  ili9341_spi_tft_release(dev);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7fd fb97 	bl	8006c34 <ili9341_spi_tft_release>
  ili9341_transmit_wait(dev);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f7fe f993 	bl	8007832 <ili9341_transmit_wait>
 800950c:	e000      	b.n	8009510 <boing+0x8bc>
    { return; }
 800950e:	bf00      	nop
}
 8009510:	374c      	adds	r7, #76	; 0x4c
 8009512:	46bd      	mov	sp, r7
 8009514:	bd90      	pop	{r4, r7, pc}
 8009516:	bf00      	nop

08009518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009518:	b480      	push	{r7}
 800951a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800951c:	4b04      	ldr	r3, [pc, #16]	; (8009530 <__NVIC_GetPriorityGrouping+0x18>)
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	0a1b      	lsrs	r3, r3, #8
 8009522:	f003 0307 	and.w	r3, r3, #7
}
 8009526:	4618      	mov	r0, r3
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	e000ed00 	.word	0xe000ed00

08009534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	4603      	mov	r3, r0
 800953c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800953e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009542:	2b00      	cmp	r3, #0
 8009544:	db0b      	blt.n	800955e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009546:	79fb      	ldrb	r3, [r7, #7]
 8009548:	f003 021f 	and.w	r2, r3, #31
 800954c:	4907      	ldr	r1, [pc, #28]	; (800956c <__NVIC_EnableIRQ+0x38>)
 800954e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009552:	095b      	lsrs	r3, r3, #5
 8009554:	2001      	movs	r0, #1
 8009556:	fa00 f202 	lsl.w	r2, r0, r2
 800955a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800955e:	bf00      	nop
 8009560:	370c      	adds	r7, #12
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	e000e100 	.word	0xe000e100

08009570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	4603      	mov	r3, r0
 8009578:	6039      	str	r1, [r7, #0]
 800957a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800957c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009580:	2b00      	cmp	r3, #0
 8009582:	db0a      	blt.n	800959a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	b2da      	uxtb	r2, r3
 8009588:	490c      	ldr	r1, [pc, #48]	; (80095bc <__NVIC_SetPriority+0x4c>)
 800958a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800958e:	0112      	lsls	r2, r2, #4
 8009590:	b2d2      	uxtb	r2, r2
 8009592:	440b      	add	r3, r1
 8009594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009598:	e00a      	b.n	80095b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	b2da      	uxtb	r2, r3
 800959e:	4908      	ldr	r1, [pc, #32]	; (80095c0 <__NVIC_SetPriority+0x50>)
 80095a0:	79fb      	ldrb	r3, [r7, #7]
 80095a2:	f003 030f 	and.w	r3, r3, #15
 80095a6:	3b04      	subs	r3, #4
 80095a8:	0112      	lsls	r2, r2, #4
 80095aa:	b2d2      	uxtb	r2, r2
 80095ac:	440b      	add	r3, r1
 80095ae:	761a      	strb	r2, [r3, #24]
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	e000e100 	.word	0xe000e100
 80095c0:	e000ed00 	.word	0xe000ed00

080095c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b089      	sub	sp, #36	; 0x24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f003 0307 	and.w	r3, r3, #7
 80095d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	f1c3 0307 	rsb	r3, r3, #7
 80095de:	2b04      	cmp	r3, #4
 80095e0:	bf28      	it	cs
 80095e2:	2304      	movcs	r3, #4
 80095e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	3304      	adds	r3, #4
 80095ea:	2b06      	cmp	r3, #6
 80095ec:	d902      	bls.n	80095f4 <NVIC_EncodePriority+0x30>
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	3b03      	subs	r3, #3
 80095f2:	e000      	b.n	80095f6 <NVIC_EncodePriority+0x32>
 80095f4:	2300      	movs	r3, #0
 80095f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80095f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095fc:	69bb      	ldr	r3, [r7, #24]
 80095fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009602:	43da      	mvns	r2, r3
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	401a      	ands	r2, r3
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800960c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	fa01 f303 	lsl.w	r3, r1, r3
 8009616:	43d9      	mvns	r1, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800961c:	4313      	orrs	r3, r2
         );
}
 800961e:	4618      	mov	r0, r3
 8009620:	3724      	adds	r7, #36	; 0x24
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
	...

0800962c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8009632:	4b2a      	ldr	r3, [pc, #168]	; (80096dc <MX_DMA_Init+0xb0>)
 8009634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009636:	4a29      	ldr	r2, [pc, #164]	; (80096dc <MX_DMA_Init+0xb0>)
 8009638:	f043 0304 	orr.w	r3, r3, #4
 800963c:	6493      	str	r3, [r2, #72]	; 0x48
 800963e:	4b27      	ldr	r3, [pc, #156]	; (80096dc <MX_DMA_Init+0xb0>)
 8009640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009642:	f003 0304 	and.w	r3, r3, #4
 8009646:	607b      	str	r3, [r7, #4]
 8009648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800964a:	4b24      	ldr	r3, [pc, #144]	; (80096dc <MX_DMA_Init+0xb0>)
 800964c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800964e:	4a23      	ldr	r2, [pc, #140]	; (80096dc <MX_DMA_Init+0xb0>)
 8009650:	f043 0301 	orr.w	r3, r3, #1
 8009654:	6493      	str	r3, [r2, #72]	; 0x48
 8009656:	4b21      	ldr	r3, [pc, #132]	; (80096dc <MX_DMA_Init+0xb0>)
 8009658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800965a:	f003 0301 	and.w	r3, r3, #1
 800965e:	603b      	str	r3, [r7, #0]
 8009660:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 8009662:	f7ff ff59 	bl	8009518 <__NVIC_GetPriorityGrouping>
 8009666:	4603      	mov	r3, r0
 8009668:	2200      	movs	r2, #0
 800966a:	2103      	movs	r1, #3
 800966c:	4618      	mov	r0, r3
 800966e:	f7ff ffa9 	bl	80095c4 <NVIC_EncodePriority>
 8009672:	4603      	mov	r3, r0
 8009674:	4619      	mov	r1, r3
 8009676:	200b      	movs	r0, #11
 8009678:	f7ff ff7a 	bl	8009570 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800967c:	200b      	movs	r0, #11
 800967e:	f7ff ff59 	bl	8009534 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 8009682:	f7ff ff49 	bl	8009518 <__NVIC_GetPriorityGrouping>
 8009686:	4603      	mov	r3, r0
 8009688:	2200      	movs	r2, #0
 800968a:	2103      	movs	r1, #3
 800968c:	4618      	mov	r0, r3
 800968e:	f7ff ff99 	bl	80095c4 <NVIC_EncodePriority>
 8009692:	4603      	mov	r3, r0
 8009694:	4619      	mov	r1, r3
 8009696:	200c      	movs	r0, #12
 8009698:	f7ff ff6a 	bl	8009570 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800969c:	200c      	movs	r0, #12
 800969e:	f7ff ff49 	bl	8009534 <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 80096a2:	f7ff ff39 	bl	8009518 <__NVIC_GetPriorityGrouping>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2200      	movs	r2, #0
 80096aa:	2103      	movs	r1, #3
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7ff ff89 	bl	80095c4 <NVIC_EncodePriority>
 80096b2:	4603      	mov	r3, r0
 80096b4:	4619      	mov	r1, r3
 80096b6:	200d      	movs	r0, #13
 80096b8:	f7ff ff5a 	bl	8009570 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80096bc:	200d      	movs	r0, #13
 80096be:	f7ff ff39 	bl	8009534 <__NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 2, 0);
 80096c2:	2200      	movs	r2, #0
 80096c4:	2102      	movs	r1, #2
 80096c6:	200e      	movs	r0, #14
 80096c8:	f002 fcf2 	bl	800c0b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80096cc:	200e      	movs	r0, #14
 80096ce:	f002 fd09 	bl	800c0e4 <HAL_NVIC_EnableIRQ>

}
 80096d2:	bf00      	nop
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	40021000 	.word	0x40021000

080096e0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b08a      	sub	sp, #40	; 0x28
 80096e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096e6:	f107 0314 	add.w	r3, r7, #20
 80096ea:	2200      	movs	r2, #0
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	605a      	str	r2, [r3, #4]
 80096f0:	609a      	str	r2, [r3, #8]
 80096f2:	60da      	str	r2, [r3, #12]
 80096f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80096f6:	4b65      	ldr	r3, [pc, #404]	; (800988c <MX_GPIO_Init+0x1ac>)
 80096f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096fa:	4a64      	ldr	r2, [pc, #400]	; (800988c <MX_GPIO_Init+0x1ac>)
 80096fc:	f043 0320 	orr.w	r3, r3, #32
 8009700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009702:	4b62      	ldr	r3, [pc, #392]	; (800988c <MX_GPIO_Init+0x1ac>)
 8009704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009706:	f003 0320 	and.w	r3, r3, #32
 800970a:	613b      	str	r3, [r7, #16]
 800970c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800970e:	4b5f      	ldr	r3, [pc, #380]	; (800988c <MX_GPIO_Init+0x1ac>)
 8009710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009712:	4a5e      	ldr	r2, [pc, #376]	; (800988c <MX_GPIO_Init+0x1ac>)
 8009714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800971a:	4b5c      	ldr	r3, [pc, #368]	; (800988c <MX_GPIO_Init+0x1ac>)
 800971c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800971e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009722:	60fb      	str	r3, [r7, #12]
 8009724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009726:	4b59      	ldr	r3, [pc, #356]	; (800988c <MX_GPIO_Init+0x1ac>)
 8009728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800972a:	4a58      	ldr	r2, [pc, #352]	; (800988c <MX_GPIO_Init+0x1ac>)
 800972c:	f043 0301 	orr.w	r3, r3, #1
 8009730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009732:	4b56      	ldr	r3, [pc, #344]	; (800988c <MX_GPIO_Init+0x1ac>)
 8009734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009736:	f003 0301 	and.w	r3, r3, #1
 800973a:	60bb      	str	r3, [r7, #8]
 800973c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800973e:	4b53      	ldr	r3, [pc, #332]	; (800988c <MX_GPIO_Init+0x1ac>)
 8009740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009742:	4a52      	ldr	r2, [pc, #328]	; (800988c <MX_GPIO_Init+0x1ac>)
 8009744:	f043 0302 	orr.w	r3, r3, #2
 8009748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800974a:	4b50      	ldr	r3, [pc, #320]	; (800988c <MX_GPIO_Init+0x1ac>)
 800974c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800974e:	f003 0302 	and.w	r3, r3, #2
 8009752:	607b      	str	r3, [r7, #4]
 8009754:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_CS_Pin|TOUCH_CS_Pin, GPIO_PIN_SET);
 8009756:	2201      	movs	r2, #1
 8009758:	f241 0110 	movw	r1, #4112	; 0x1010
 800975c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009760:	f003 f950 	bl	800ca04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_DC_Pin|LED1_GREEN_Pin, GPIO_PIN_RESET);
 8009764:	2200      	movs	r2, #0
 8009766:	f240 1101 	movw	r1, #257	; 0x101
 800976a:	4849      	ldr	r0, [pc, #292]	; (8009890 <MX_GPIO_Init+0x1b0>)
 800976c:	f003 f94a 	bl	800ca04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_SET);
 8009770:	2201      	movs	r2, #1
 8009772:	2120      	movs	r1, #32
 8009774:	4846      	ldr	r0, [pc, #280]	; (8009890 <MX_GPIO_Init+0x1b0>)
 8009776:	f003 f945 	bl	800ca04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800977a:	2303      	movs	r3, #3
 800977c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800977e:	2303      	movs	r3, #3
 8009780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009782:	2300      	movs	r3, #0
 8009784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009786:	f107 0314 	add.w	r3, r7, #20
 800978a:	4619      	mov	r1, r3
 800978c:	4841      	ldr	r0, [pc, #260]	; (8009894 <MX_GPIO_Init+0x1b4>)
 800978e:	f002 ff9f 	bl	800c6d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009798:	2303      	movs	r3, #3
 800979a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800979c:	2300      	movs	r3, #0
 800979e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80097a0:	f107 0314 	add.w	r3, r7, #20
 80097a4:	4619      	mov	r1, r3
 80097a6:	483c      	ldr	r0, [pc, #240]	; (8009898 <MX_GPIO_Init+0x1b8>)
 80097a8:	f002 ff92 	bl	800c6d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_15;
 80097ac:	f648 0302 	movw	r3, #34818	; 0x8802
 80097b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80097b2:	2303      	movs	r3, #3
 80097b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097b6:	2300      	movs	r3, #0
 80097b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097ba:	f107 0314 	add.w	r3, r7, #20
 80097be:	4619      	mov	r1, r3
 80097c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80097c4:	f002 ff84 	bl	800c6d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TOUCH_CS_Pin;
 80097c8:	f241 0310 	movw	r3, #4112	; 0x1010
 80097cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097ce:	2301      	movs	r3, #1
 80097d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097d2:	2300      	movs	r3, #0
 80097d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097d6:	2303      	movs	r3, #3
 80097d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097da:	f107 0314 	add.w	r3, r7, #20
 80097de:	4619      	mov	r1, r3
 80097e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80097e4:	f002 ff74 	bl	800c6d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin;
 80097e8:	2301      	movs	r3, #1
 80097ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097ec:	2301      	movs	r3, #1
 80097ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097f0:	2300      	movs	r3, #0
 80097f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097f4:	2303      	movs	r3, #3
 80097f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_DC_GPIO_Port, &GPIO_InitStruct);
 80097f8:	f107 0314 	add.w	r3, r7, #20
 80097fc:	4619      	mov	r1, r3
 80097fe:	4824      	ldr	r0, [pc, #144]	; (8009890 <MX_GPIO_Init+0x1b0>)
 8009800:	f002 ff66 	bl	800c6d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8009804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800980a:	4b24      	ldr	r3, [pc, #144]	; (800989c <MX_GPIO_Init+0x1bc>)
 800980c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800980e:	2300      	movs	r3, #0
 8009810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8009812:	f107 0314 	add.w	r3, r7, #20
 8009816:	4619      	mov	r1, r3
 8009818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800981c:	f002 ff58 	bl	800c6d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TFT_RESET_Pin;
 8009820:	2320      	movs	r3, #32
 8009822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009824:	2301      	movs	r3, #1
 8009826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009828:	2301      	movs	r3, #1
 800982a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800982c:	2300      	movs	r3, #0
 800982e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TFT_RESET_GPIO_Port, &GPIO_InitStruct);
 8009830:	f107 0314 	add.w	r3, r7, #20
 8009834:	4619      	mov	r1, r3
 8009836:	4816      	ldr	r0, [pc, #88]	; (8009890 <MX_GPIO_Init+0x1b0>)
 8009838:	f002 ff4a 	bl	800c6d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800983c:	2380      	movs	r3, #128	; 0x80
 800983e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009840:	2303      	movs	r3, #3
 8009842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009844:	2300      	movs	r3, #0
 8009846:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009848:	f107 0314 	add.w	r3, r7, #20
 800984c:	4619      	mov	r1, r3
 800984e:	4810      	ldr	r0, [pc, #64]	; (8009890 <MX_GPIO_Init+0x1b0>)
 8009850:	f002 ff3e 	bl	800c6d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_GREEN_Pin;
 8009854:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800985a:	2301      	movs	r3, #1
 800985c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800985e:	2300      	movs	r3, #0
 8009860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009862:	2300      	movs	r3, #0
 8009864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GREEN_GPIO_Port, &GPIO_InitStruct);
 8009866:	f107 0314 	add.w	r3, r7, #20
 800986a:	4619      	mov	r1, r3
 800986c:	4808      	ldr	r0, [pc, #32]	; (8009890 <MX_GPIO_Init+0x1b0>)
 800986e:	f002 ff2f 	bl	800c6d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8009872:	2200      	movs	r2, #0
 8009874:	2103      	movs	r1, #3
 8009876:	2017      	movs	r0, #23
 8009878:	f002 fc1a 	bl	800c0b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800987c:	2017      	movs	r0, #23
 800987e:	f002 fc31 	bl	800c0e4 <HAL_NVIC_EnableIRQ>

}
 8009882:	bf00      	nop
 8009884:	3728      	adds	r7, #40	; 0x28
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	40021000 	.word	0x40021000
 8009890:	48000400 	.word	0x48000400
 8009894:	48001400 	.word	0x48001400
 8009898:	48001800 	.word	0x48001800
 800989c:	10310000 	.word	0x10310000

080098a0 <screen>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

ili9341_device_t *screen(void)
{
 80098a0:	b480      	push	{r7}
 80098a2:	af00      	add	r7, sp, #0
  return _screen;
 80098a4:	4b03      	ldr	r3, [pc, #12]	; (80098b4 <screen+0x14>)
 80098a6:	681b      	ldr	r3, [r3, #0]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	20002398 	.word	0x20002398

080098b8 <screenTouchBegin>:

void screenTouchBegin(ili9341_device_t *dev, uint16_t x, uint16_t y)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	460b      	mov	r3, r1
 80098c2:	807b      	strh	r3, [r7, #2]
 80098c4:	4613      	mov	r3, r2
 80098c6:	803b      	strh	r3, [r7, #0]
  ;
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <screenTouchEnd>:

void screenTouchEnd(ili9341_device_t *dev, uint16_t x, uint16_t y)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	460b      	mov	r3, r1
 80098de:	807b      	strh	r3, [r7, #2]
 80098e0:	4613      	mov	r3, r2
 80098e2:	803b      	strh	r3, [r7, #0]
  ;
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b08a      	sub	sp, #40	; 0x28
 80098f4:	af0a      	add	r7, sp, #40	; 0x28


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 HAL_Init();
 80098f6:	f001 f8fc 	bl	800aaf2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80098fa:	f000 f84d 	bl	8009998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80098fe:	f7ff feef 	bl	80096e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8009902:	f001 f855 	bl	800a9b0 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8009906:	f7ff fe91 	bl	800962c <MX_DMA_Init>
  MX_ADC1_Init();
 800990a:	f7fe fddf 	bl	80084cc <MX_ADC1_Init>
  MX_UCPD1_Init();
 800990e:	f000 fca3 	bl	800a258 <MX_UCPD1_Init>
  MX_USART1_UART_Init();
 8009912:	f000 ff99 	bl	800a848 <MX_USART1_UART_Init>
  MX_USBPD_Init();
 8009916:	f00b f937 	bl	8014b88 <MX_USBPD_Init>
  MX_SPI1_Init();
 800991a:	f000 f8d9 	bl	8009ad0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  _screen = ili9341_device_new(
 800991e:	2301      	movs	r3, #1
 8009920:	9309      	str	r3, [sp, #36]	; 0x24
 8009922:	2301      	movs	r3, #1
 8009924:	9308      	str	r3, [sp, #32]
 8009926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800992a:	9307      	str	r3, [sp, #28]
 800992c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009930:	9306      	str	r3, [sp, #24]
 8009932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009936:	9305      	str	r3, [sp, #20]
 8009938:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800993c:	9304      	str	r3, [sp, #16]
 800993e:	2301      	movs	r3, #1
 8009940:	9303      	str	r3, [sp, #12]
 8009942:	2301      	movs	r3, #1
 8009944:	9302      	str	r3, [sp, #8]
 8009946:	4b0f      	ldr	r3, [pc, #60]	; (8009984 <main+0x94>)
 8009948:	9301      	str	r3, [sp, #4]
 800994a:	2310      	movs	r3, #16
 800994c:	9300      	str	r3, [sp, #0]
 800994e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009952:	2220      	movs	r2, #32
 8009954:	490b      	ldr	r1, [pc, #44]	; (8009984 <main+0x94>)
 8009956:	480c      	ldr	r0, [pc, #48]	; (8009988 <main+0x98>)
 8009958:	f7fc fef8 	bl	800674c <ili9341_device_new>
 800995c:	4602      	mov	r2, r0
 800995e:	4b0b      	ldr	r3, [pc, #44]	; (800998c <main+0x9c>)
 8009960:	601a      	str	r2, [r3, #0]
//      167,   214,
//     8770,  4320,
//    18240, 30262,
//    30648, 17720);

  ili9341_set_touch_pressed_begin(_screen, screenTouchBegin);
 8009962:	4b0a      	ldr	r3, [pc, #40]	; (800998c <main+0x9c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	490a      	ldr	r1, [pc, #40]	; (8009990 <main+0xa0>)
 8009968:	4618      	mov	r0, r3
 800996a:	f7fd f874 	bl	8006a56 <ili9341_set_touch_pressed_begin>
  ili9341_set_touch_pressed_end(_screen, screenTouchEnd);
 800996e:	4b07      	ldr	r3, [pc, #28]	; (800998c <main+0x9c>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4908      	ldr	r1, [pc, #32]	; (8009994 <main+0xa4>)
 8009974:	4618      	mov	r0, r3
 8009976:	f7fd f882 	bl	8006a7e <ili9341_set_touch_pressed_end>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800997a:	f7fe fe63 	bl	8008644 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800997e:	f006 f989 	bl	800fc94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009982:	e7fe      	b.n	8009982 <main+0x92>
 8009984:	48000400 	.word	0x48000400
 8009988:	2000239c 	.word	0x2000239c
 800998c:	20002398 	.word	0x20002398
 8009990:	080098b9 	.word	0x080098b9
 8009994:	080098d5 	.word	0x080098d5

08009998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b0a4      	sub	sp, #144	; 0x90
 800999c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800999e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80099a2:	2238      	movs	r2, #56	; 0x38
 80099a4:	2100      	movs	r1, #0
 80099a6:	4618      	mov	r0, r3
 80099a8:	f00c f8b7 	bl	8015b1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80099ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80099b0:	2200      	movs	r2, #0
 80099b2:	601a      	str	r2, [r3, #0]
 80099b4:	605a      	str	r2, [r3, #4]
 80099b6:	609a      	str	r2, [r3, #8]
 80099b8:	60da      	str	r2, [r3, #12]
 80099ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80099bc:	463b      	mov	r3, r7
 80099be:	2244      	movs	r2, #68	; 0x44
 80099c0:	2100      	movs	r1, #0
 80099c2:	4618      	mov	r0, r3
 80099c4:	f00c f8a9 	bl	8015b1a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80099c8:	2000      	movs	r0, #0
 80099ca:	f003 f84b 	bl	800ca64 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80099ce:	2302      	movs	r3, #2
 80099d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80099d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099d6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80099d8:	2340      	movs	r3, #64	; 0x40
 80099da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80099dc:	2302      	movs	r3, #2
 80099de:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80099e0:	2302      	movs	r3, #2
 80099e2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80099e4:	2304      	movs	r3, #4
 80099e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80099e8:	2355      	movs	r3, #85	; 0x55
 80099ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80099ee:	2302      	movs	r3, #2
 80099f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80099f4:	2302      	movs	r3, #2
 80099f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80099fa:	2302      	movs	r3, #2
 80099fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009a00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009a04:	4618      	mov	r0, r3
 8009a06:	f003 f8d1 	bl	800cbac <HAL_RCC_OscConfig>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d001      	beq.n	8009a14 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8009a10:	f000 f856 	bl	8009ac0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009a14:	230f      	movs	r3, #15
 8009a16:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009a18:	2303      	movs	r3, #3
 8009a1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009a20:	2300      	movs	r3, #0
 8009a22:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009a24:	2300      	movs	r3, #0
 8009a26:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8009a28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009a2c:	2108      	movs	r1, #8
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f003 fbd4 	bl	800d1dc <HAL_RCC_ClockConfig>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d001      	beq.n	8009a3e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8009a3a:	f000 f841 	bl	8009ac0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8009a3e:	f248 0303 	movw	r3, #32771	; 0x8003
 8009a42:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8009a44:	2300      	movs	r3, #0
 8009a46:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8009a4c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009a50:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009a52:	463b      	mov	r3, r7
 8009a54:	4618      	mov	r0, r3
 8009a56:	f003 fdf9 	bl	800d64c <HAL_RCCEx_PeriphCLKConfig>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d001      	beq.n	8009a64 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8009a60:	f000 f82e 	bl	8009ac0 <Error_Handler>
  }
}
 8009a64:	bf00      	nop
 8009a66:	3790      	adds	r7, #144	; 0x90
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	4603      	mov	r3, r0
 8009a74:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8009a76:	88fb      	ldrh	r3, [r7, #6]
 8009a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a7c:	d000      	beq.n	8009a80 <HAL_GPIO_EXTI_Callback+0x14>
      ili9341_touch_interrupt(_screen);
      break;

    default:
      // unhandled interrupt pin
      break;
 8009a7e:	e005      	b.n	8009a8c <HAL_GPIO_EXTI_Callback+0x20>
      ili9341_touch_interrupt(_screen);
 8009a80:	4b04      	ldr	r3, [pc, #16]	; (8009a94 <HAL_GPIO_EXTI_Callback+0x28>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7fc ff6e 	bl	8006966 <ili9341_touch_interrupt>
      break;
 8009a8a:	bf00      	nop
  }
}
 8009a8c:	bf00      	nop
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	20002398 	.word	0x20002398

08009a98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  USBPD_DPM_TimerCounter();
 8009aa0:	f00b f92a 	bl	8014cf8 <USBPD_DPM_TimerCounter>
#if defined(_GUI_INTERFACE)
  GUI_TimerCounter();
#endif
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a04      	ldr	r2, [pc, #16]	; (8009abc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d101      	bne.n	8009ab2 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_IncTick();
 8009aae:	f001 f839 	bl	800ab24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8009ab2:	bf00      	nop
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	40001000 	.word	0x40001000

08009ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009ac4:	bf00      	nop
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
	...

08009ad0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8009ad4:	4b1b      	ldr	r3, [pc, #108]	; (8009b44 <MX_SPI1_Init+0x74>)
 8009ad6:	4a1c      	ldr	r2, [pc, #112]	; (8009b48 <MX_SPI1_Init+0x78>)
 8009ad8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009ada:	4b1a      	ldr	r3, [pc, #104]	; (8009b44 <MX_SPI1_Init+0x74>)
 8009adc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009ae0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009ae2:	4b18      	ldr	r3, [pc, #96]	; (8009b44 <MX_SPI1_Init+0x74>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009ae8:	4b16      	ldr	r3, [pc, #88]	; (8009b44 <MX_SPI1_Init+0x74>)
 8009aea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009aee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009af0:	4b14      	ldr	r3, [pc, #80]	; (8009b44 <MX_SPI1_Init+0x74>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009af6:	4b13      	ldr	r3, [pc, #76]	; (8009b44 <MX_SPI1_Init+0x74>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009afc:	4b11      	ldr	r3, [pc, #68]	; (8009b44 <MX_SPI1_Init+0x74>)
 8009afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8009b04:	4b0f      	ldr	r3, [pc, #60]	; (8009b44 <MX_SPI1_Init+0x74>)
 8009b06:	2210      	movs	r2, #16
 8009b08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009b0a:	4b0e      	ldr	r3, [pc, #56]	; (8009b44 <MX_SPI1_Init+0x74>)
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009b10:	4b0c      	ldr	r3, [pc, #48]	; (8009b44 <MX_SPI1_Init+0x74>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b16:	4b0b      	ldr	r3, [pc, #44]	; (8009b44 <MX_SPI1_Init+0x74>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8009b1c:	4b09      	ldr	r3, [pc, #36]	; (8009b44 <MX_SPI1_Init+0x74>)
 8009b1e:	2207      	movs	r2, #7
 8009b20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009b22:	4b08      	ldr	r3, [pc, #32]	; (8009b44 <MX_SPI1_Init+0x74>)
 8009b24:	2200      	movs	r2, #0
 8009b26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8009b28:	4b06      	ldr	r3, [pc, #24]	; (8009b44 <MX_SPI1_Init+0x74>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009b2e:	4805      	ldr	r0, [pc, #20]	; (8009b44 <MX_SPI1_Init+0x74>)
 8009b30:	f003 ff7c 	bl	800da2c <HAL_SPI_Init>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d001      	beq.n	8009b3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8009b3a:	f7ff ffc1 	bl	8009ac0 <Error_Handler>
  }

}
 8009b3e:	bf00      	nop
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	2000239c 	.word	0x2000239c
 8009b48:	40013000 	.word	0x40013000

08009b4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b08a      	sub	sp, #40	; 0x28
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b54:	f107 0314 	add.w	r3, r7, #20
 8009b58:	2200      	movs	r2, #0
 8009b5a:	601a      	str	r2, [r3, #0]
 8009b5c:	605a      	str	r2, [r3, #4]
 8009b5e:	609a      	str	r2, [r3, #8]
 8009b60:	60da      	str	r2, [r3, #12]
 8009b62:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a30      	ldr	r2, [pc, #192]	; (8009c2c <HAL_SPI_MspInit+0xe0>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d159      	bne.n	8009c22 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009b6e:	4b30      	ldr	r3, [pc, #192]	; (8009c30 <HAL_SPI_MspInit+0xe4>)
 8009b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b72:	4a2f      	ldr	r2, [pc, #188]	; (8009c30 <HAL_SPI_MspInit+0xe4>)
 8009b74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b78:	6613      	str	r3, [r2, #96]	; 0x60
 8009b7a:	4b2d      	ldr	r3, [pc, #180]	; (8009c30 <HAL_SPI_MspInit+0xe4>)
 8009b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b82:	613b      	str	r3, [r7, #16]
 8009b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b86:	4b2a      	ldr	r3, [pc, #168]	; (8009c30 <HAL_SPI_MspInit+0xe4>)
 8009b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b8a:	4a29      	ldr	r2, [pc, #164]	; (8009c30 <HAL_SPI_MspInit+0xe4>)
 8009b8c:	f043 0301 	orr.w	r3, r3, #1
 8009b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b92:	4b27      	ldr	r3, [pc, #156]	; (8009c30 <HAL_SPI_MspInit+0xe4>)
 8009b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b96:	f003 0301 	and.w	r3, r3, #1
 8009b9a:	60fb      	str	r3, [r7, #12]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_TFT_SCK_Pin|SPI1_TFT_MISO_Pin|SPI1_TFT_MOSI_Pin;
 8009b9e:	23e0      	movs	r3, #224	; 0xe0
 8009ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ba2:	2302      	movs	r3, #2
 8009ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009baa:	2303      	movs	r3, #3
 8009bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009bae:	2305      	movs	r3, #5
 8009bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bb2:	f107 0314 	add.w	r3, r7, #20
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009bbc:	f002 fd88 	bl	800c6d0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 8009bc0:	4b1c      	ldr	r3, [pc, #112]	; (8009c34 <HAL_SPI_MspInit+0xe8>)
 8009bc2:	4a1d      	ldr	r2, [pc, #116]	; (8009c38 <HAL_SPI_MspInit+0xec>)
 8009bc4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8009bc6:	4b1b      	ldr	r3, [pc, #108]	; (8009c34 <HAL_SPI_MspInit+0xe8>)
 8009bc8:	220b      	movs	r2, #11
 8009bca:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009bcc:	4b19      	ldr	r3, [pc, #100]	; (8009c34 <HAL_SPI_MspInit+0xe8>)
 8009bce:	2210      	movs	r2, #16
 8009bd0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009bd2:	4b18      	ldr	r3, [pc, #96]	; (8009c34 <HAL_SPI_MspInit+0xe8>)
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009bd8:	4b16      	ldr	r3, [pc, #88]	; (8009c34 <HAL_SPI_MspInit+0xe8>)
 8009bda:	2280      	movs	r2, #128	; 0x80
 8009bdc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009bde:	4b15      	ldr	r3, [pc, #84]	; (8009c34 <HAL_SPI_MspInit+0xe8>)
 8009be0:	2200      	movs	r2, #0
 8009be2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009be4:	4b13      	ldr	r3, [pc, #76]	; (8009c34 <HAL_SPI_MspInit+0xe8>)
 8009be6:	2200      	movs	r2, #0
 8009be8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8009bea:	4b12      	ldr	r3, [pc, #72]	; (8009c34 <HAL_SPI_MspInit+0xe8>)
 8009bec:	2200      	movs	r2, #0
 8009bee:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009bf0:	4b10      	ldr	r3, [pc, #64]	; (8009c34 <HAL_SPI_MspInit+0xe8>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8009bf6:	480f      	ldr	r0, [pc, #60]	; (8009c34 <HAL_SPI_MspInit+0xe8>)
 8009bf8:	f002 fa82 	bl	800c100 <HAL_DMA_Init>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d001      	beq.n	8009c06 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8009c02:	f7ff ff5d 	bl	8009ac0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a0a      	ldr	r2, [pc, #40]	; (8009c34 <HAL_SPI_MspInit+0xe8>)
 8009c0a:	655a      	str	r2, [r3, #84]	; 0x54
 8009c0c:	4a09      	ldr	r2, [pc, #36]	; (8009c34 <HAL_SPI_MspInit+0xe8>)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8009c12:	2200      	movs	r2, #0
 8009c14:	2103      	movs	r1, #3
 8009c16:	2023      	movs	r0, #35	; 0x23
 8009c18:	f002 fa4a 	bl	800c0b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8009c1c:	2023      	movs	r0, #35	; 0x23
 8009c1e:	f002 fa61 	bl	800c0e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8009c22:	bf00      	nop
 8009c24:	3728      	adds	r7, #40	; 0x28
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	40013000 	.word	0x40013000
 8009c30:	40021000 	.word	0x40021000
 8009c34:	20002400 	.word	0x20002400
 8009c38:	40020044 	.word	0x40020044

08009c3c <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009c40:	4b05      	ldr	r3, [pc, #20]	; (8009c58 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	4a04      	ldr	r2, [pc, #16]	; (8009c58 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8009c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c4a:	6093      	str	r3, [r2, #8]
}
 8009c4c:	bf00      	nop
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
 8009c56:	bf00      	nop
 8009c58:	40007000 	.word	0x40007000

08009c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c62:	4b12      	ldr	r3, [pc, #72]	; (8009cac <HAL_MspInit+0x50>)
 8009c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c66:	4a11      	ldr	r2, [pc, #68]	; (8009cac <HAL_MspInit+0x50>)
 8009c68:	f043 0301 	orr.w	r3, r3, #1
 8009c6c:	6613      	str	r3, [r2, #96]	; 0x60
 8009c6e:	4b0f      	ldr	r3, [pc, #60]	; (8009cac <HAL_MspInit+0x50>)
 8009c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c72:	f003 0301 	and.w	r3, r3, #1
 8009c76:	607b      	str	r3, [r7, #4]
 8009c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009c7a:	4b0c      	ldr	r3, [pc, #48]	; (8009cac <HAL_MspInit+0x50>)
 8009c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c7e:	4a0b      	ldr	r2, [pc, #44]	; (8009cac <HAL_MspInit+0x50>)
 8009c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c84:	6593      	str	r3, [r2, #88]	; 0x58
 8009c86:	4b09      	ldr	r3, [pc, #36]	; (8009cac <HAL_MspInit+0x50>)
 8009c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c8e:	603b      	str	r3, [r7, #0]
 8009c90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009c92:	2200      	movs	r2, #0
 8009c94:	210f      	movs	r1, #15
 8009c96:	f06f 0001 	mvn.w	r0, #1
 8009c9a:	f002 fa09 	bl	800c0b0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  LL_PWR_DisableDeadBatteryPD();
 8009c9e:	f7ff ffcd 	bl	8009c3c <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009ca2:	bf00      	nop
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	40021000 	.word	0x40021000

08009cb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b08c      	sub	sp, #48	; 0x30
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	6879      	ldr	r1, [r7, #4]
 8009cc4:	2036      	movs	r0, #54	; 0x36
 8009cc6:	f002 f9f3 	bl	800c0b0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8009cca:	2036      	movs	r0, #54	; 0x36
 8009ccc:	f002 fa0a 	bl	800c0e4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8009cd0:	4b1e      	ldr	r3, [pc, #120]	; (8009d4c <HAL_InitTick+0x9c>)
 8009cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cd4:	4a1d      	ldr	r2, [pc, #116]	; (8009d4c <HAL_InitTick+0x9c>)
 8009cd6:	f043 0310 	orr.w	r3, r3, #16
 8009cda:	6593      	str	r3, [r2, #88]	; 0x58
 8009cdc:	4b1b      	ldr	r3, [pc, #108]	; (8009d4c <HAL_InitTick+0x9c>)
 8009cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ce0:	f003 0310 	and.w	r3, r3, #16
 8009ce4:	60fb      	str	r3, [r7, #12]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009ce8:	f107 0210 	add.w	r2, r7, #16
 8009cec:	f107 0314 	add.w	r3, r7, #20
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f003 fc32 	bl	800d55c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8009cf8:	f003 fc1a 	bl	800d530 <HAL_RCC_GetPCLK1Freq>
 8009cfc:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8009cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d00:	4a13      	ldr	r2, [pc, #76]	; (8009d50 <HAL_InitTick+0xa0>)
 8009d02:	fba2 2303 	umull	r2, r3, r2, r3
 8009d06:	0c9b      	lsrs	r3, r3, #18
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8009d0c:	4b11      	ldr	r3, [pc, #68]	; (8009d54 <HAL_InitTick+0xa4>)
 8009d0e:	4a12      	ldr	r2, [pc, #72]	; (8009d58 <HAL_InitTick+0xa8>)
 8009d10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8009d12:	4b10      	ldr	r3, [pc, #64]	; (8009d54 <HAL_InitTick+0xa4>)
 8009d14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009d18:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8009d1a:	4a0e      	ldr	r2, [pc, #56]	; (8009d54 <HAL_InitTick+0xa4>)
 8009d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8009d20:	4b0c      	ldr	r3, [pc, #48]	; (8009d54 <HAL_InitTick+0xa4>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009d26:	4b0b      	ldr	r3, [pc, #44]	; (8009d54 <HAL_InitTick+0xa4>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8009d2c:	4809      	ldr	r0, [pc, #36]	; (8009d54 <HAL_InitTick+0xa4>)
 8009d2e:	f004 fe46 	bl	800e9be <HAL_TIM_Base_Init>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d104      	bne.n	8009d42 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8009d38:	4806      	ldr	r0, [pc, #24]	; (8009d54 <HAL_InitTick+0xa4>)
 8009d3a:	f004 fe75 	bl	800ea28 <HAL_TIM_Base_Start_IT>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	e000      	b.n	8009d44 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3730      	adds	r7, #48	; 0x30
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	40021000 	.word	0x40021000
 8009d50:	431bde83 	.word	0x431bde83
 8009d54:	20002460 	.word	0x20002460
 8009d58:	40001000 	.word	0x40001000

08009d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009d60:	bf00      	nop
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr

08009d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009d6e:	e7fe      	b.n	8009d6e <HardFault_Handler+0x4>

08009d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009d70:	b480      	push	{r7}
 8009d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009d74:	e7fe      	b.n	8009d74 <MemManage_Handler+0x4>

08009d76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009d76:	b480      	push	{r7}
 8009d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009d7a:	e7fe      	b.n	8009d7a <BusFault_Handler+0x4>

08009d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009d80:	e7fe      	b.n	8009d80 <UsageFault_Handler+0x4>

08009d82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009d82:	b480      	push	{r7}
 8009d84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009d86:	bf00      	nop
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8009d90:	b480      	push	{r7}
 8009d92:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009d94:	bf00      	nop
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8009d9e:	b480      	push	{r7}
 8009da0:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8009da2:	bf00      	nop
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8009dac:	b480      	push	{r7}
 8009dae:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8009db0:	bf00      	nop
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
	...

08009dbc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8009dc0:	4802      	ldr	r0, [pc, #8]	; (8009dcc <DMA1_Channel4_IRQHandler+0x10>)
 8009dc2:	f002 fb27 	bl	800c414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8009dc6:	bf00      	nop
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	20002400 	.word	0x20002400

08009dd0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8009dd4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009dd8:	f002 fe2c 	bl	800ca34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8009ddc:	bf00      	nop
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8009de4:	4802      	ldr	r0, [pc, #8]	; (8009df0 <SPI1_IRQHandler+0x10>)
 8009de6:	f004 fb19 	bl	800e41c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8009dea:	bf00      	nop
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	2000239c 	.word	0x2000239c

08009df4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8009df4:	b480      	push	{r7}
 8009df6:	af00      	add	r7, sp, #0
#endif
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009df8:	bf00      	nop
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
	...

08009e04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009e08:	4802      	ldr	r0, [pc, #8]	; (8009e14 <TIM6_DAC_IRQHandler+0x10>)
 8009e0a:	f004 fe37 	bl	800ea7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8009e0e:	bf00      	nop
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20002460 	.word	0x20002460

08009e18 <UCPD1_IRQHandler>:

/**
  * @brief This function handles UCPD1 interrupt / UCPD1 wake-up interrupt through EXTI line 43.
  */
void UCPD1_IRQHandler(void)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UCPD1_IRQn 0 */
  USBPD_PORT0_IRQHandler();
 8009e1c:	f009 fa7b 	bl	8013316 <USBPD_PORT0_IRQHandler>
  /* USER CODE END UCPD1_IRQn 0 */
  /* USER CODE BEGIN UCPD1_IRQn 1 */

  /* USER CODE END UCPD1_IRQn 1 */
}
 8009e20:	bf00      	nop
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009e2c:	4b11      	ldr	r3, [pc, #68]	; (8009e74 <_sbrk+0x50>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d102      	bne.n	8009e3a <_sbrk+0x16>
		heap_end = &end;
 8009e34:	4b0f      	ldr	r3, [pc, #60]	; (8009e74 <_sbrk+0x50>)
 8009e36:	4a10      	ldr	r2, [pc, #64]	; (8009e78 <_sbrk+0x54>)
 8009e38:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009e3a:	4b0e      	ldr	r3, [pc, #56]	; (8009e74 <_sbrk+0x50>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009e40:	4b0c      	ldr	r3, [pc, #48]	; (8009e74 <_sbrk+0x50>)
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4413      	add	r3, r2
 8009e48:	466a      	mov	r2, sp
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d907      	bls.n	8009e5e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8009e4e:	f00b fe27 	bl	8015aa0 <__errno>
 8009e52:	4602      	mov	r2, r0
 8009e54:	230c      	movs	r3, #12
 8009e56:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e5c:	e006      	b.n	8009e6c <_sbrk+0x48>
	}

	heap_end += incr;
 8009e5e:	4b05      	ldr	r3, [pc, #20]	; (8009e74 <_sbrk+0x50>)
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4413      	add	r3, r2
 8009e66:	4a03      	ldr	r2, [pc, #12]	; (8009e74 <_sbrk+0x50>)
 8009e68:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	20000d74 	.word	0x20000d74
 8009e78:	200024f8 	.word	0x200024f8

08009e7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009e80:	4b08      	ldr	r3, [pc, #32]	; (8009ea4 <SystemInit+0x28>)
 8009e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e86:	4a07      	ldr	r2, [pc, #28]	; (8009ea4 <SystemInit+0x28>)
 8009e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009e90:	4b04      	ldr	r3, [pc, #16]	; (8009ea4 <SystemInit+0x28>)
 8009e92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009e96:	609a      	str	r2, [r3, #8]
#endif
}
 8009e98:	bf00      	nop
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	e000ed00 	.word	0xe000ed00

08009ea8 <__NVIC_GetPriorityGrouping>:
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009eac:	4b04      	ldr	r3, [pc, #16]	; (8009ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	0a1b      	lsrs	r3, r3, #8
 8009eb2:	f003 0307 	and.w	r3, r3, #7
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr
 8009ec0:	e000ed00 	.word	0xe000ed00

08009ec4 <__NVIC_EnableIRQ>:
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	4603      	mov	r3, r0
 8009ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	db0b      	blt.n	8009eee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009ed6:	79fb      	ldrb	r3, [r7, #7]
 8009ed8:	f003 021f 	and.w	r2, r3, #31
 8009edc:	4907      	ldr	r1, [pc, #28]	; (8009efc <__NVIC_EnableIRQ+0x38>)
 8009ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ee2:	095b      	lsrs	r3, r3, #5
 8009ee4:	2001      	movs	r0, #1
 8009ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8009eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009eee:	bf00      	nop
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	e000e100 	.word	0xe000e100

08009f00 <__NVIC_SetPriority>:
{
 8009f00:	b480      	push	{r7}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	4603      	mov	r3, r0
 8009f08:	6039      	str	r1, [r7, #0]
 8009f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	db0a      	blt.n	8009f2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	490c      	ldr	r1, [pc, #48]	; (8009f4c <__NVIC_SetPriority+0x4c>)
 8009f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f1e:	0112      	lsls	r2, r2, #4
 8009f20:	b2d2      	uxtb	r2, r2
 8009f22:	440b      	add	r3, r1
 8009f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009f28:	e00a      	b.n	8009f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	b2da      	uxtb	r2, r3
 8009f2e:	4908      	ldr	r1, [pc, #32]	; (8009f50 <__NVIC_SetPriority+0x50>)
 8009f30:	79fb      	ldrb	r3, [r7, #7]
 8009f32:	f003 030f 	and.w	r3, r3, #15
 8009f36:	3b04      	subs	r3, #4
 8009f38:	0112      	lsls	r2, r2, #4
 8009f3a:	b2d2      	uxtb	r2, r2
 8009f3c:	440b      	add	r3, r1
 8009f3e:	761a      	strb	r2, [r3, #24]
}
 8009f40:	bf00      	nop
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	e000e100 	.word	0xe000e100
 8009f50:	e000ed00 	.word	0xe000ed00

08009f54 <NVIC_EncodePriority>:
{
 8009f54:	b480      	push	{r7}
 8009f56:	b089      	sub	sp, #36	; 0x24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f003 0307 	and.w	r3, r3, #7
 8009f66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	f1c3 0307 	rsb	r3, r3, #7
 8009f6e:	2b04      	cmp	r3, #4
 8009f70:	bf28      	it	cs
 8009f72:	2304      	movcs	r3, #4
 8009f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	3304      	adds	r3, #4
 8009f7a:	2b06      	cmp	r3, #6
 8009f7c:	d902      	bls.n	8009f84 <NVIC_EncodePriority+0x30>
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	3b03      	subs	r3, #3
 8009f82:	e000      	b.n	8009f86 <NVIC_EncodePriority+0x32>
 8009f84:	2300      	movs	r3, #0
 8009f86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f92:	43da      	mvns	r2, r3
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	401a      	ands	r2, r3
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009f9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8009fa6:	43d9      	mvns	r1, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009fac:	4313      	orrs	r3, r2
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3724      	adds	r7, #36	; 0x24
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr
	...

08009fbc <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8009fc4:	4b08      	ldr	r3, [pc, #32]	; (8009fe8 <LL_APB1_GRP2_EnableClock+0x2c>)
 8009fc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009fc8:	4907      	ldr	r1, [pc, #28]	; (8009fe8 <LL_APB1_GRP2_EnableClock+0x2c>)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8009fd0:	4b05      	ldr	r3, [pc, #20]	; (8009fe8 <LL_APB1_GRP2_EnableClock+0x2c>)
 8009fd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009fda:	68fb      	ldr	r3, [r7, #12]
}
 8009fdc:	bf00      	nop
 8009fde:	3714      	adds	r7, #20
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr
 8009fe8:	40021000 	.word	0x40021000

08009fec <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b087      	sub	sp, #28
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8009ffc:	4a0e      	ldr	r2, [pc, #56]	; (800a038 <LL_DMA_SetDataTransferDirection+0x4c>)
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	4413      	add	r3, r2
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	461a      	mov	r2, r3
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	4413      	add	r3, r2
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a010:	f023 0310 	bic.w	r3, r3, #16
 800a014:	4908      	ldr	r1, [pc, #32]	; (800a038 <LL_DMA_SetDataTransferDirection+0x4c>)
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	440a      	add	r2, r1
 800a01a:	7812      	ldrb	r2, [r2, #0]
 800a01c:	4611      	mov	r1, r2
 800a01e:	697a      	ldr	r2, [r7, #20]
 800a020:	440a      	add	r2, r1
 800a022:	4611      	mov	r1, r2
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	4313      	orrs	r3, r2
 800a028:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800a02a:	bf00      	nop
 800a02c:	371c      	adds	r7, #28
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	08019d08 	.word	0x08019d08

0800a03c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b087      	sub	sp, #28
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 800a04c:	4a0d      	ldr	r2, [pc, #52]	; (800a084 <LL_DMA_SetMode+0x48>)
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	4413      	add	r3, r2
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	461a      	mov	r2, r3
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	4413      	add	r3, r2
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f023 0220 	bic.w	r2, r3, #32
 800a060:	4908      	ldr	r1, [pc, #32]	; (800a084 <LL_DMA_SetMode+0x48>)
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	440b      	add	r3, r1
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	4619      	mov	r1, r3
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	440b      	add	r3, r1
 800a06e:	4619      	mov	r1, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4313      	orrs	r3, r2
 800a074:	600b      	str	r3, [r1, #0]
             Mode);
}
 800a076:	bf00      	nop
 800a078:	371c      	adds	r7, #28
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	08019d08 	.word	0x08019d08

0800a088 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 800a088:	b480      	push	{r7}
 800a08a:	b087      	sub	sp, #28
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 800a098:	4a0d      	ldr	r2, [pc, #52]	; (800a0d0 <LL_DMA_SetPeriphIncMode+0x48>)
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	4413      	add	r3, r2
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a0ac:	4908      	ldr	r1, [pc, #32]	; (800a0d0 <LL_DMA_SetPeriphIncMode+0x48>)
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	440b      	add	r3, r1
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	440b      	add	r3, r1
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800a0c2:	bf00      	nop
 800a0c4:	371c      	adds	r7, #28
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	08019d08 	.word	0x08019d08

0800a0d4 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b087      	sub	sp, #28
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 800a0e4:	4a0d      	ldr	r2, [pc, #52]	; (800a11c <LL_DMA_SetMemoryIncMode+0x48>)
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0f8:	4908      	ldr	r1, [pc, #32]	; (800a11c <LL_DMA_SetMemoryIncMode+0x48>)
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	440b      	add	r3, r1
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	4619      	mov	r1, r3
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	440b      	add	r3, r1
 800a106:	4619      	mov	r1, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800a10e:	bf00      	nop
 800a110:	371c      	adds	r7, #28
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	08019d08 	.word	0x08019d08

0800a120 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 800a120:	b480      	push	{r7}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 800a130:	4a0d      	ldr	r2, [pc, #52]	; (800a168 <LL_DMA_SetPeriphSize+0x48>)
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	4413      	add	r3, r2
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	461a      	mov	r2, r3
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	4413      	add	r3, r2
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a144:	4908      	ldr	r1, [pc, #32]	; (800a168 <LL_DMA_SetPeriphSize+0x48>)
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	440b      	add	r3, r1
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	4619      	mov	r1, r3
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	440b      	add	r3, r1
 800a152:	4619      	mov	r1, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4313      	orrs	r3, r2
 800a158:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800a15a:	bf00      	nop
 800a15c:	371c      	adds	r7, #28
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	08019d08 	.word	0x08019d08

0800a16c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b087      	sub	sp, #28
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 800a17c:	4a0d      	ldr	r2, [pc, #52]	; (800a1b4 <LL_DMA_SetMemorySize+0x48>)
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	4413      	add	r3, r2
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	461a      	mov	r2, r3
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	4413      	add	r3, r2
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a190:	4908      	ldr	r1, [pc, #32]	; (800a1b4 <LL_DMA_SetMemorySize+0x48>)
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	440b      	add	r3, r1
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	4619      	mov	r1, r3
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	440b      	add	r3, r1
 800a19e:	4619      	mov	r1, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800a1a6:	bf00      	nop
 800a1a8:	371c      	adds	r7, #28
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	08019d08 	.word	0x08019d08

0800a1b8 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b087      	sub	sp, #28
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 800a1c8:	4a0d      	ldr	r2, [pc, #52]	; (800a200 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a1dc:	4908      	ldr	r1, [pc, #32]	; (800a200 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	440b      	add	r3, r1
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	440b      	add	r3, r1
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	600b      	str	r3, [r1, #0]
             Priority);
}
 800a1f2:	bf00      	nop
 800a1f4:	371c      	adds	r7, #28
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	08019d08 	.word	0x08019d08

0800a204 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 800a204:	b480      	push	{r7}
 800a206:	b087      	sub	sp, #28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	0a9b      	lsrs	r3, r3, #10
 800a214:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800a218:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800a21c:	00db      	lsls	r3, r3, #3
 800a21e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	4413      	add	r3, r2
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a22c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	4413      	add	r3, r2
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a242:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	430a      	orrs	r2, r1
 800a24a:	601a      	str	r2, [r3, #0]
}
 800a24c:	bf00      	nop
 800a24e:	371c      	adds	r7, #28
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800a25c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a260:	f7ff feac 	bl	8009fbc <LL_APB1_GRP2_EnableClock>

  /* UCPD1 DMA Init */
  
  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD1_RX);
 800a264:	2272      	movs	r2, #114	; 0x72
 800a266:	2100      	movs	r1, #0
 800a268:	482f      	ldr	r0, [pc, #188]	; (800a328 <MX_UCPD1_Init+0xd0>)
 800a26a:	f7ff ffcb 	bl	800a204 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800a26e:	2200      	movs	r2, #0
 800a270:	2100      	movs	r1, #0
 800a272:	482d      	ldr	r0, [pc, #180]	; (800a328 <MX_UCPD1_Init+0xd0>)
 800a274:	f7ff feba 	bl	8009fec <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 800a278:	2200      	movs	r2, #0
 800a27a:	2100      	movs	r1, #0
 800a27c:	482a      	ldr	r0, [pc, #168]	; (800a328 <MX_UCPD1_Init+0xd0>)
 800a27e:	f7ff ff9b 	bl	800a1b8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 800a282:	2200      	movs	r2, #0
 800a284:	2100      	movs	r1, #0
 800a286:	4828      	ldr	r0, [pc, #160]	; (800a328 <MX_UCPD1_Init+0xd0>)
 800a288:	f7ff fed8 	bl	800a03c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 800a28c:	2200      	movs	r2, #0
 800a28e:	2100      	movs	r1, #0
 800a290:	4825      	ldr	r0, [pc, #148]	; (800a328 <MX_UCPD1_Init+0xd0>)
 800a292:	f7ff fef9 	bl	800a088 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 800a296:	2280      	movs	r2, #128	; 0x80
 800a298:	2100      	movs	r1, #0
 800a29a:	4823      	ldr	r0, [pc, #140]	; (800a328 <MX_UCPD1_Init+0xd0>)
 800a29c:	f7ff ff1a 	bl	800a0d4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	4820      	ldr	r0, [pc, #128]	; (800a328 <MX_UCPD1_Init+0xd0>)
 800a2a6:	f7ff ff3b 	bl	800a120 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	481e      	ldr	r0, [pc, #120]	; (800a328 <MX_UCPD1_Init+0xd0>)
 800a2b0:	f7ff ff5c 	bl	800a16c <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 800a2b4:	2273      	movs	r2, #115	; 0x73
 800a2b6:	2101      	movs	r1, #1
 800a2b8:	481b      	ldr	r0, [pc, #108]	; (800a328 <MX_UCPD1_Init+0xd0>)
 800a2ba:	f7ff ffa3 	bl	800a204 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800a2be:	2210      	movs	r2, #16
 800a2c0:	2101      	movs	r1, #1
 800a2c2:	4819      	ldr	r0, [pc, #100]	; (800a328 <MX_UCPD1_Init+0xd0>)
 800a2c4:	f7ff fe92 	bl	8009fec <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	4816      	ldr	r0, [pc, #88]	; (800a328 <MX_UCPD1_Init+0xd0>)
 800a2ce:	f7ff ff73 	bl	800a1b8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	2101      	movs	r1, #1
 800a2d6:	4814      	ldr	r0, [pc, #80]	; (800a328 <MX_UCPD1_Init+0xd0>)
 800a2d8:	f7ff feb0 	bl	800a03c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 800a2dc:	2200      	movs	r2, #0
 800a2de:	2101      	movs	r1, #1
 800a2e0:	4811      	ldr	r0, [pc, #68]	; (800a328 <MX_UCPD1_Init+0xd0>)
 800a2e2:	f7ff fed1 	bl	800a088 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 800a2e6:	2280      	movs	r2, #128	; 0x80
 800a2e8:	2101      	movs	r1, #1
 800a2ea:	480f      	ldr	r0, [pc, #60]	; (800a328 <MX_UCPD1_Init+0xd0>)
 800a2ec:	f7ff fef2 	bl	800a0d4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	2101      	movs	r1, #1
 800a2f4:	480c      	ldr	r0, [pc, #48]	; (800a328 <MX_UCPD1_Init+0xd0>)
 800a2f6:	f7ff ff13 	bl	800a120 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	2101      	movs	r1, #1
 800a2fe:	480a      	ldr	r0, [pc, #40]	; (800a328 <MX_UCPD1_Init+0xd0>)
 800a300:	f7ff ff34 	bl	800a16c <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(UCPD1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800a304:	f7ff fdd0 	bl	8009ea8 <__NVIC_GetPriorityGrouping>
 800a308:	4603      	mov	r3, r0
 800a30a:	2200      	movs	r2, #0
 800a30c:	2105      	movs	r1, #5
 800a30e:	4618      	mov	r0, r3
 800a310:	f7ff fe20 	bl	8009f54 <NVIC_EncodePriority>
 800a314:	4603      	mov	r3, r0
 800a316:	4619      	mov	r1, r3
 800a318:	203f      	movs	r0, #63	; 0x3f
 800a31a:	f7ff fdf1 	bl	8009f00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UCPD1_IRQn);
 800a31e:	203f      	movs	r0, #63	; 0x3f
 800a320:	f7ff fdd0 	bl	8009ec4 <__NVIC_EnableIRQ>

}
 800a324:	bf00      	nop
 800a326:	bd80      	pop	{r7, pc}
 800a328:	40020000 	.word	0x40020000

0800a32c <__NVIC_GetPriorityGrouping>:
{
 800a32c:	b480      	push	{r7}
 800a32e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a330:	4b04      	ldr	r3, [pc, #16]	; (800a344 <__NVIC_GetPriorityGrouping+0x18>)
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	0a1b      	lsrs	r3, r3, #8
 800a336:	f003 0307 	and.w	r3, r3, #7
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr
 800a344:	e000ed00 	.word	0xe000ed00

0800a348 <__NVIC_EnableIRQ>:
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	4603      	mov	r3, r0
 800a350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a356:	2b00      	cmp	r3, #0
 800a358:	db0b      	blt.n	800a372 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a35a:	79fb      	ldrb	r3, [r7, #7]
 800a35c:	f003 021f 	and.w	r2, r3, #31
 800a360:	4907      	ldr	r1, [pc, #28]	; (800a380 <__NVIC_EnableIRQ+0x38>)
 800a362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a366:	095b      	lsrs	r3, r3, #5
 800a368:	2001      	movs	r0, #1
 800a36a:	fa00 f202 	lsl.w	r2, r0, r2
 800a36e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a372:	bf00      	nop
 800a374:	370c      	adds	r7, #12
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	e000e100 	.word	0xe000e100

0800a384 <__NVIC_SetPriority>:
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	4603      	mov	r3, r0
 800a38c:	6039      	str	r1, [r7, #0]
 800a38e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a394:	2b00      	cmp	r3, #0
 800a396:	db0a      	blt.n	800a3ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	b2da      	uxtb	r2, r3
 800a39c:	490c      	ldr	r1, [pc, #48]	; (800a3d0 <__NVIC_SetPriority+0x4c>)
 800a39e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3a2:	0112      	lsls	r2, r2, #4
 800a3a4:	b2d2      	uxtb	r2, r2
 800a3a6:	440b      	add	r3, r1
 800a3a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a3ac:	e00a      	b.n	800a3c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	b2da      	uxtb	r2, r3
 800a3b2:	4908      	ldr	r1, [pc, #32]	; (800a3d4 <__NVIC_SetPriority+0x50>)
 800a3b4:	79fb      	ldrb	r3, [r7, #7]
 800a3b6:	f003 030f 	and.w	r3, r3, #15
 800a3ba:	3b04      	subs	r3, #4
 800a3bc:	0112      	lsls	r2, r2, #4
 800a3be:	b2d2      	uxtb	r2, r2
 800a3c0:	440b      	add	r3, r1
 800a3c2:	761a      	strb	r2, [r3, #24]
}
 800a3c4:	bf00      	nop
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr
 800a3d0:	e000e100 	.word	0xe000e100
 800a3d4:	e000ed00 	.word	0xe000ed00

0800a3d8 <NVIC_EncodePriority>:
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b089      	sub	sp, #36	; 0x24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f003 0307 	and.w	r3, r3, #7
 800a3ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	f1c3 0307 	rsb	r3, r3, #7
 800a3f2:	2b04      	cmp	r3, #4
 800a3f4:	bf28      	it	cs
 800a3f6:	2304      	movcs	r3, #4
 800a3f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	2b06      	cmp	r3, #6
 800a400:	d902      	bls.n	800a408 <NVIC_EncodePriority+0x30>
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	3b03      	subs	r3, #3
 800a406:	e000      	b.n	800a40a <NVIC_EncodePriority+0x32>
 800a408:	2300      	movs	r3, #0
 800a40a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a40c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	fa02 f303 	lsl.w	r3, r2, r3
 800a416:	43da      	mvns	r2, r3
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	401a      	ands	r2, r3
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a420:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	fa01 f303 	lsl.w	r3, r1, r3
 800a42a:	43d9      	mvns	r1, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a430:	4313      	orrs	r3, r2
}
 800a432:	4618      	mov	r0, r3
 800a434:	3724      	adds	r7, #36	; 0x24
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800a43e:	b480      	push	{r7}
 800a440:	b083      	sub	sp, #12
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f043 0201 	orr.w	r2, r3, #1
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	601a      	str	r2, [r3, #0]
}
 800a452:	bf00      	nop
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 800a45e:	b480      	push	{r7}
 800a460:	b083      	sub	sp, #12
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	601a      	str	r2, [r3, #0]
}
 800a472:	bf00      	nop
 800a474:	370c      	adds	r7, #12
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800a47e:	b480      	push	{r7}
 800a480:	b083      	sub	sp, #12
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	075b      	lsls	r3, r3, #29
 800a494:	431a      	orrs	r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	609a      	str	r2, [r3, #8]
}
 800a49a:	bf00      	nop
 800a49c:	370c      	adds	r7, #12
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr

0800a4a6 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800a4a6:	b480      	push	{r7}
 800a4a8:	b083      	sub	sp, #12
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
 800a4ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	065b      	lsls	r3, r3, #25
 800a4bc:	431a      	orrs	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	609a      	str	r2, [r3, #8]
}
 800a4c2:	bf00      	nop
 800a4c4:	370c      	adds	r7, #12
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b083      	sub	sp, #12
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	609a      	str	r2, [r3, #8]
}
 800a4ee:	bf00      	nop
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr

0800a4fa <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b083      	sub	sp, #12
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	69db      	ldr	r3, [r3, #28]
 800a506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a50a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a50e:	d101      	bne.n	800a514 <LL_USART_IsActiveFlag_TEACK+0x1a>
 800a510:	2301      	movs	r3, #1
 800a512:	e000      	b.n	800a516 <LL_USART_IsActiveFlag_TEACK+0x1c>
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	370c      	adds	r7, #12
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800a522:	b480      	push	{r7}
 800a524:	b083      	sub	sp, #12
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	69db      	ldr	r3, [r3, #28]
 800a52e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a536:	d101      	bne.n	800a53c <LL_USART_IsActiveFlag_REACK+0x1a>
 800a538:	2301      	movs	r3, #1
 800a53a:	e000      	b.n	800a53e <LL_USART_IsActiveFlag_REACK+0x1c>
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
	...

0800a54c <LL_AHB2_GRP1_EnableClock>:
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a554:	4b08      	ldr	r3, [pc, #32]	; (800a578 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800a556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a558:	4907      	ldr	r1, [pc, #28]	; (800a578 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a560:	4b05      	ldr	r3, [pc, #20]	; (800a578 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800a562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4013      	ands	r3, r2
 800a568:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a56a:	68fb      	ldr	r3, [r7, #12]
}
 800a56c:	bf00      	nop
 800a56e:	3714      	adds	r7, #20
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	40021000 	.word	0x40021000

0800a57c <LL_APB1_GRP1_EnableClock>:
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a584:	4b08      	ldr	r3, [pc, #32]	; (800a5a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a586:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a588:	4907      	ldr	r1, [pc, #28]	; (800a5a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a590:	4b05      	ldr	r3, [pc, #20]	; (800a5a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800a592:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4013      	ands	r3, r2
 800a598:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a59a:	68fb      	ldr	r3, [r7, #12]
}
 800a59c:	bf00      	nop
 800a59e:	3714      	adds	r7, #20
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr
 800a5a8:	40021000 	.word	0x40021000

0800a5ac <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800a5b4:	4b08      	ldr	r3, [pc, #32]	; (800a5d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800a5b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a5b8:	4907      	ldr	r1, [pc, #28]	; (800a5d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800a5c0:	4b05      	ldr	r3, [pc, #20]	; (800a5d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800a5c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
}
 800a5cc:	bf00      	nop
 800a5ce:	3714      	adds	r7, #20
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr
 800a5d8:	40021000 	.word	0x40021000

0800a5dc <LL_DMA_SetDataTransferDirection>:
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b087      	sub	sp, #28
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800a5ec:	4a0e      	ldr	r2, [pc, #56]	; (800a628 <LL_DMA_SetDataTransferDirection+0x4c>)
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a600:	f023 0310 	bic.w	r3, r3, #16
 800a604:	4908      	ldr	r1, [pc, #32]	; (800a628 <LL_DMA_SetDataTransferDirection+0x4c>)
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	440a      	add	r2, r1
 800a60a:	7812      	ldrb	r2, [r2, #0]
 800a60c:	4611      	mov	r1, r2
 800a60e:	697a      	ldr	r2, [r7, #20]
 800a610:	440a      	add	r2, r1
 800a612:	4611      	mov	r1, r2
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	4313      	orrs	r3, r2
 800a618:	600b      	str	r3, [r1, #0]
}
 800a61a:	bf00      	nop
 800a61c:	371c      	adds	r7, #28
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop
 800a628:	08019d10 	.word	0x08019d10

0800a62c <LL_DMA_SetMode>:
{
 800a62c:	b480      	push	{r7}
 800a62e:	b087      	sub	sp, #28
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 800a63c:	4a0d      	ldr	r2, [pc, #52]	; (800a674 <LL_DMA_SetMode+0x48>)
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	4413      	add	r3, r2
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	461a      	mov	r2, r3
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	4413      	add	r3, r2
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f023 0220 	bic.w	r2, r3, #32
 800a650:	4908      	ldr	r1, [pc, #32]	; (800a674 <LL_DMA_SetMode+0x48>)
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	440b      	add	r3, r1
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	4619      	mov	r1, r3
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	440b      	add	r3, r1
 800a65e:	4619      	mov	r1, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4313      	orrs	r3, r2
 800a664:	600b      	str	r3, [r1, #0]
}
 800a666:	bf00      	nop
 800a668:	371c      	adds	r7, #28
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	08019d10 	.word	0x08019d10

0800a678 <LL_DMA_SetPeriphIncMode>:
{
 800a678:	b480      	push	{r7}
 800a67a:	b087      	sub	sp, #28
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 800a688:	4a0d      	ldr	r2, [pc, #52]	; (800a6c0 <LL_DMA_SetPeriphIncMode+0x48>)
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	4413      	add	r3, r2
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	461a      	mov	r2, r3
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	4413      	add	r3, r2
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a69c:	4908      	ldr	r1, [pc, #32]	; (800a6c0 <LL_DMA_SetPeriphIncMode+0x48>)
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	440b      	add	r3, r1
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	440b      	add	r3, r1
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	600b      	str	r3, [r1, #0]
}
 800a6b2:	bf00      	nop
 800a6b4:	371c      	adds	r7, #28
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	08019d10 	.word	0x08019d10

0800a6c4 <LL_DMA_SetMemoryIncMode>:
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b087      	sub	sp, #28
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 800a6d4:	4a0d      	ldr	r2, [pc, #52]	; (800a70c <LL_DMA_SetMemoryIncMode+0x48>)
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	4413      	add	r3, r2
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	461a      	mov	r2, r3
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6e8:	4908      	ldr	r1, [pc, #32]	; (800a70c <LL_DMA_SetMemoryIncMode+0x48>)
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	440b      	add	r3, r1
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	440b      	add	r3, r1
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	600b      	str	r3, [r1, #0]
}
 800a6fe:	bf00      	nop
 800a700:	371c      	adds	r7, #28
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	08019d10 	.word	0x08019d10

0800a710 <LL_DMA_SetPeriphSize>:
{
 800a710:	b480      	push	{r7}
 800a712:	b087      	sub	sp, #28
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 800a720:	4a0d      	ldr	r2, [pc, #52]	; (800a758 <LL_DMA_SetPeriphSize+0x48>)
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	4413      	add	r3, r2
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	461a      	mov	r2, r3
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	4413      	add	r3, r2
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a734:	4908      	ldr	r1, [pc, #32]	; (800a758 <LL_DMA_SetPeriphSize+0x48>)
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	440b      	add	r3, r1
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	4619      	mov	r1, r3
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	440b      	add	r3, r1
 800a742:	4619      	mov	r1, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	4313      	orrs	r3, r2
 800a748:	600b      	str	r3, [r1, #0]
}
 800a74a:	bf00      	nop
 800a74c:	371c      	adds	r7, #28
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	08019d10 	.word	0x08019d10

0800a75c <LL_DMA_SetMemorySize>:
{
 800a75c:	b480      	push	{r7}
 800a75e:	b087      	sub	sp, #28
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 800a76c:	4a0d      	ldr	r2, [pc, #52]	; (800a7a4 <LL_DMA_SetMemorySize+0x48>)
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	4413      	add	r3, r2
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	461a      	mov	r2, r3
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	4413      	add	r3, r2
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a780:	4908      	ldr	r1, [pc, #32]	; (800a7a4 <LL_DMA_SetMemorySize+0x48>)
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	440b      	add	r3, r1
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	4619      	mov	r1, r3
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	440b      	add	r3, r1
 800a78e:	4619      	mov	r1, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	4313      	orrs	r3, r2
 800a794:	600b      	str	r3, [r1, #0]
}
 800a796:	bf00      	nop
 800a798:	371c      	adds	r7, #28
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	08019d10 	.word	0x08019d10

0800a7a8 <LL_DMA_SetChannelPriorityLevel>:
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b087      	sub	sp, #28
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 800a7b8:	4a0d      	ldr	r2, [pc, #52]	; (800a7f0 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	4413      	add	r3, r2
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a7cc:	4908      	ldr	r1, [pc, #32]	; (800a7f0 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	440b      	add	r3, r1
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	440b      	add	r3, r1
 800a7da:	4619      	mov	r1, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	600b      	str	r3, [r1, #0]
}
 800a7e2:	bf00      	nop
 800a7e4:	371c      	adds	r7, #28
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	08019d10 	.word	0x08019d10

0800a7f4 <LL_DMA_SetPeriphRequest>:
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b087      	sub	sp, #28
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	0a9b      	lsrs	r3, r3, #10
 800a804:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800a808:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800a80c:	00db      	lsls	r3, r3, #3
 800a80e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	4413      	add	r3, r2
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a81c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a826:	68ba      	ldr	r2, [r7, #8]
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	4413      	add	r3, r2
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a832:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	430a      	orrs	r2, r1
 800a83a:	601a      	str	r2, [r3, #0]
}
 800a83c:	bf00      	nop
 800a83e:	371c      	adds	r7, #28
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b08e      	sub	sp, #56	; 0x38
 800a84c:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800a84e:	f107 0318 	add.w	r3, r7, #24
 800a852:	2220      	movs	r2, #32
 800a854:	2100      	movs	r1, #0
 800a856:	4618      	mov	r0, r3
 800a858:	f00b f95f 	bl	8015b1a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a85c:	463b      	mov	r3, r7
 800a85e:	2200      	movs	r2, #0
 800a860:	601a      	str	r2, [r3, #0]
 800a862:	605a      	str	r2, [r3, #4]
 800a864:	609a      	str	r2, [r3, #8]
 800a866:	60da      	str	r2, [r3, #12]
 800a868:	611a      	str	r2, [r3, #16]
 800a86a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800a86c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a870:	f7ff fe9c 	bl	800a5ac <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800a874:	2001      	movs	r0, #1
 800a876:	f7ff fe69 	bl	800a54c <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800a87a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a87e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a880:	2302      	movs	r3, #2
 800a882:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800a884:	2300      	movs	r3, #0
 800a886:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a888:	2300      	movs	r3, #0
 800a88a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a88c:	2300      	movs	r3, #0
 800a88e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800a890:	2307      	movs	r3, #7
 800a892:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a894:	463b      	mov	r3, r7
 800a896:	4619      	mov	r1, r3
 800a898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a89c:	f004 fd88 	bl	800f3b0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800a8a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8a4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a8a6:	2302      	movs	r3, #2
 800a8a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800a8b6:	2307      	movs	r3, #7
 800a8b8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8ba:	463b      	mov	r3, r7
 800a8bc:	4619      	mov	r1, r3
 800a8be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a8c2:	f004 fd75 	bl	800f3b0 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_USART1_TX);
 800a8c6:	2219      	movs	r2, #25
 800a8c8:	2102      	movs	r1, #2
 800a8ca:	4837      	ldr	r0, [pc, #220]	; (800a9a8 <MX_USART1_UART_Init+0x160>)
 800a8cc:	f7ff ff92 	bl	800a7f4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800a8d0:	2210      	movs	r2, #16
 800a8d2:	2102      	movs	r1, #2
 800a8d4:	4834      	ldr	r0, [pc, #208]	; (800a9a8 <MX_USART1_UART_Init+0x160>)
 800a8d6:	f7ff fe81 	bl	800a5dc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 800a8da:	2200      	movs	r2, #0
 800a8dc:	2102      	movs	r1, #2
 800a8de:	4832      	ldr	r0, [pc, #200]	; (800a9a8 <MX_USART1_UART_Init+0x160>)
 800a8e0:	f7ff ff62 	bl	800a7a8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	2102      	movs	r1, #2
 800a8e8:	482f      	ldr	r0, [pc, #188]	; (800a9a8 <MX_USART1_UART_Init+0x160>)
 800a8ea:	f7ff fe9f 	bl	800a62c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	2102      	movs	r1, #2
 800a8f2:	482d      	ldr	r0, [pc, #180]	; (800a9a8 <MX_USART1_UART_Init+0x160>)
 800a8f4:	f7ff fec0 	bl	800a678 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 800a8f8:	2280      	movs	r2, #128	; 0x80
 800a8fa:	2102      	movs	r1, #2
 800a8fc:	482a      	ldr	r0, [pc, #168]	; (800a9a8 <MX_USART1_UART_Init+0x160>)
 800a8fe:	f7ff fee1 	bl	800a6c4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 800a902:	2200      	movs	r2, #0
 800a904:	2102      	movs	r1, #2
 800a906:	4828      	ldr	r0, [pc, #160]	; (800a9a8 <MX_USART1_UART_Init+0x160>)
 800a908:	f7ff ff02 	bl	800a710 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 800a90c:	2200      	movs	r2, #0
 800a90e:	2102      	movs	r1, #2
 800a910:	4825      	ldr	r0, [pc, #148]	; (800a9a8 <MX_USART1_UART_Init+0x160>)
 800a912:	f7ff ff23 	bl	800a75c <LL_DMA_SetMemorySize>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800a916:	f7ff fd09 	bl	800a32c <__NVIC_GetPriorityGrouping>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2200      	movs	r2, #0
 800a91e:	2105      	movs	r1, #5
 800a920:	4618      	mov	r0, r3
 800a922:	f7ff fd59 	bl	800a3d8 <NVIC_EncodePriority>
 800a926:	4603      	mov	r3, r0
 800a928:	4619      	mov	r1, r3
 800a92a:	2025      	movs	r0, #37	; 0x25
 800a92c:	f7ff fd2a 	bl	800a384 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800a930:	2025      	movs	r0, #37	; 0x25
 800a932:	f7ff fd09 	bl	800a348 <__NVIC_EnableIRQ>

  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 800a936:	2300      	movs	r3, #0
 800a938:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.BaudRate = 115200;
 800a93a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800a93e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800a940:	2300      	movs	r3, #0
 800a942:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800a944:	2300      	movs	r3, #0
 800a946:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800a948:	2300      	movs	r3, #0
 800a94a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800a94c:	230c      	movs	r3, #12
 800a94e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800a950:	2300      	movs	r3, #0
 800a952:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800a954:	2300      	movs	r3, #0
 800a956:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 800a958:	f107 0318 	add.w	r3, r7, #24
 800a95c:	4619      	mov	r1, r3
 800a95e:	4813      	ldr	r0, [pc, #76]	; (800a9ac <MX_USART1_UART_Init+0x164>)
 800a960:	f005 f8f4 	bl	800fb4c <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 800a964:	2100      	movs	r1, #0
 800a966:	4811      	ldr	r0, [pc, #68]	; (800a9ac <MX_USART1_UART_Init+0x164>)
 800a968:	f7ff fd89 	bl	800a47e <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 800a96c:	2100      	movs	r1, #0
 800a96e:	480f      	ldr	r0, [pc, #60]	; (800a9ac <MX_USART1_UART_Init+0x164>)
 800a970:	f7ff fd99 	bl	800a4a6 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 800a974:	480d      	ldr	r0, [pc, #52]	; (800a9ac <MX_USART1_UART_Init+0x164>)
 800a976:	f7ff fd72 	bl	800a45e <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 800a97a:	480c      	ldr	r0, [pc, #48]	; (800a9ac <MX_USART1_UART_Init+0x164>)
 800a97c:	f7ff fda7 	bl	800a4ce <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 800a980:	480a      	ldr	r0, [pc, #40]	; (800a9ac <MX_USART1_UART_Init+0x164>)
 800a982:	f7ff fd5c 	bl	800a43e <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 800a986:	bf00      	nop
 800a988:	4808      	ldr	r0, [pc, #32]	; (800a9ac <MX_USART1_UART_Init+0x164>)
 800a98a:	f7ff fdb6 	bl	800a4fa <LL_USART_IsActiveFlag_TEACK>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d0f9      	beq.n	800a988 <MX_USART1_UART_Init+0x140>
 800a994:	4805      	ldr	r0, [pc, #20]	; (800a9ac <MX_USART1_UART_Init+0x164>)
 800a996:	f7ff fdc4 	bl	800a522 <LL_USART_IsActiveFlag_REACK>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d0f3      	beq.n	800a988 <MX_USART1_UART_Init+0x140>
  {
  }

}
 800a9a0:	bf00      	nop
 800a9a2:	3738      	adds	r7, #56	; 0x38
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	40020000 	.word	0x40020000
 800a9ac:	40013800 	.word	0x40013800

0800a9b0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b08e      	sub	sp, #56	; 0x38
 800a9b4:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800a9b6:	f107 0318 	add.w	r3, r7, #24
 800a9ba:	2220      	movs	r2, #32
 800a9bc:	2100      	movs	r1, #0
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f00b f8ab 	bl	8015b1a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9c4:	463b      	mov	r3, r7
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	601a      	str	r2, [r3, #0]
 800a9ca:	605a      	str	r2, [r3, #4]
 800a9cc:	609a      	str	r2, [r3, #8]
 800a9ce:	60da      	str	r2, [r3, #12]
 800a9d0:	611a      	str	r2, [r3, #16]
 800a9d2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800a9d4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a9d8:	f7ff fdd0 	bl	800a57c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800a9dc:	2001      	movs	r0, #1
 800a9de:	f7ff fdb5 	bl	800a54c <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800a9e2:	2304      	movs	r3, #4
 800a9e4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800a9f6:	2307      	movs	r3, #7
 800a9f8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9fa:	463b      	mov	r3, r7
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aa02:	f004 fcd5 	bl	800f3b0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800aa06:	2308      	movs	r3, #8
 800aa08:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800aa0a:	2302      	movs	r3, #2
 800aa0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800aa12:	2300      	movs	r3, #0
 800aa14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800aa16:	2300      	movs	r3, #0
 800aa18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800aa1a:	2307      	movs	r3, #7
 800aa1c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa1e:	463b      	mov	r3, r7
 800aa20:	4619      	mov	r1, r3
 800aa22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aa26:	f004 fcc3 	bl	800f3b0 <LL_GPIO_Init>

  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.BaudRate = 115200;
 800aa2e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800aa32:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800aa34:	2300      	movs	r3, #0
 800aa36:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800aa40:	230c      	movs	r3, #12
 800aa42:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800aa44:	2300      	movs	r3, #0
 800aa46:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800aa4c:	f107 0318 	add.w	r3, r7, #24
 800aa50:	4619      	mov	r1, r3
 800aa52:	4812      	ldr	r0, [pc, #72]	; (800aa9c <MX_USART2_UART_Init+0xec>)
 800aa54:	f005 f87a 	bl	800fb4c <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 800aa58:	2100      	movs	r1, #0
 800aa5a:	4810      	ldr	r0, [pc, #64]	; (800aa9c <MX_USART2_UART_Init+0xec>)
 800aa5c:	f7ff fd0f 	bl	800a47e <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 800aa60:	2100      	movs	r1, #0
 800aa62:	480e      	ldr	r0, [pc, #56]	; (800aa9c <MX_USART2_UART_Init+0xec>)
 800aa64:	f7ff fd1f 	bl	800a4a6 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 800aa68:	480c      	ldr	r0, [pc, #48]	; (800aa9c <MX_USART2_UART_Init+0xec>)
 800aa6a:	f7ff fcf8 	bl	800a45e <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 800aa6e:	480b      	ldr	r0, [pc, #44]	; (800aa9c <MX_USART2_UART_Init+0xec>)
 800aa70:	f7ff fd2d 	bl	800a4ce <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 800aa74:	4809      	ldr	r0, [pc, #36]	; (800aa9c <MX_USART2_UART_Init+0xec>)
 800aa76:	f7ff fce2 	bl	800a43e <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 800aa7a:	bf00      	nop
 800aa7c:	4807      	ldr	r0, [pc, #28]	; (800aa9c <MX_USART2_UART_Init+0xec>)
 800aa7e:	f7ff fd3c 	bl	800a4fa <LL_USART_IsActiveFlag_TEACK>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d0f9      	beq.n	800aa7c <MX_USART2_UART_Init+0xcc>
 800aa88:	4804      	ldr	r0, [pc, #16]	; (800aa9c <MX_USART2_UART_Init+0xec>)
 800aa8a:	f7ff fd4a 	bl	800a522 <LL_USART_IsActiveFlag_REACK>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d0f3      	beq.n	800aa7c <MX_USART2_UART_Init+0xcc>
  {
  }

}
 800aa94:	bf00      	nop
 800aa96:	3738      	adds	r7, #56	; 0x38
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	40004400 	.word	0x40004400

0800aaa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800aaa0:	480d      	ldr	r0, [pc, #52]	; (800aad8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800aaa2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800aaa4:	480d      	ldr	r0, [pc, #52]	; (800aadc <LoopForever+0x6>)
  ldr r1, =_edata
 800aaa6:	490e      	ldr	r1, [pc, #56]	; (800aae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800aaa8:	4a0e      	ldr	r2, [pc, #56]	; (800aae4 <LoopForever+0xe>)
  movs r3, #0
 800aaaa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800aaac:	e002      	b.n	800aab4 <LoopCopyDataInit>

0800aaae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800aaae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800aab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800aab2:	3304      	adds	r3, #4

0800aab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800aab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800aab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800aab8:	d3f9      	bcc.n	800aaae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800aaba:	4a0b      	ldr	r2, [pc, #44]	; (800aae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800aabc:	4c0b      	ldr	r4, [pc, #44]	; (800aaec <LoopForever+0x16>)
  movs r3, #0
 800aabe:	2300      	movs	r3, #0
  b LoopFillZerobss
 800aac0:	e001      	b.n	800aac6 <LoopFillZerobss>

0800aac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800aac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800aac4:	3204      	adds	r2, #4

0800aac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800aac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800aac8:	d3fb      	bcc.n	800aac2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800aaca:	f7ff f9d7 	bl	8009e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800aace:	f00a ffed 	bl	8015aac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800aad2:	f7fe ff0d 	bl	80098f0 <main>

0800aad6 <LoopForever>:

LoopForever:
    b LoopForever
 800aad6:	e7fe      	b.n	800aad6 <LoopForever>
  ldr   r0, =_estack
 800aad8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800aadc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800aae0:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 800aae4:	08019e10 	.word	0x08019e10
  ldr r2, =_sbss
 800aae8:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 800aaec:	200024f4 	.word	0x200024f4

0800aaf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800aaf0:	e7fe      	b.n	800aaf0 <ADC1_2_IRQHandler>

0800aaf2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b082      	sub	sp, #8
 800aaf6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800aafc:	2003      	movs	r0, #3
 800aafe:	f001 facc 	bl	800c09a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ab02:	2000      	movs	r0, #0
 800ab04:	f7ff f8d4 	bl	8009cb0 <HAL_InitTick>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d002      	beq.n	800ab14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	71fb      	strb	r3, [r7, #7]
 800ab12:	e001      	b.n	800ab18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800ab14:	f7ff f8a2 	bl	8009c5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800ab18:	79fb      	ldrb	r3, [r7, #7]

}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3708      	adds	r7, #8
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
	...

0800ab24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ab24:	b480      	push	{r7}
 800ab26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ab28:	4b05      	ldr	r3, [pc, #20]	; (800ab40 <HAL_IncTick+0x1c>)
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	4b05      	ldr	r3, [pc, #20]	; (800ab44 <HAL_IncTick+0x20>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4413      	add	r3, r2
 800ab32:	4a03      	ldr	r2, [pc, #12]	; (800ab40 <HAL_IncTick+0x1c>)
 800ab34:	6013      	str	r3, [r2, #0]
}
 800ab36:	bf00      	nop
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr
 800ab40:	200024a0 	.word	0x200024a0
 800ab44:	20000014 	.word	0x20000014

0800ab48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	af00      	add	r7, sp, #0
  return uwTick;
 800ab4c:	4b03      	ldr	r3, [pc, #12]	; (800ab5c <HAL_GetTick+0x14>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	200024a0 	.word	0x200024a0

0800ab60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ab68:	f7ff ffee 	bl	800ab48 <HAL_GetTick>
 800ab6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab78:	d004      	beq.n	800ab84 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800ab7a:	4b09      	ldr	r3, [pc, #36]	; (800aba0 <HAL_Delay+0x40>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	68fa      	ldr	r2, [r7, #12]
 800ab80:	4413      	add	r3, r2
 800ab82:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800ab84:	bf00      	nop
 800ab86:	f7ff ffdf 	bl	800ab48 <HAL_GetTick>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	1ad3      	subs	r3, r2, r3
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d8f7      	bhi.n	800ab86 <HAL_Delay+0x26>
  {
  }
}
 800ab96:	bf00      	nop
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	20000014 	.word	0x20000014

0800aba4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	431a      	orrs	r2, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	609a      	str	r2, [r3, #8]
}
 800abbe:	bf00      	nop
 800abc0:	370c      	adds	r7, #12
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800abca:	b480      	push	{r7}
 800abcc:	b083      	sub	sp, #12
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	431a      	orrs	r2, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	609a      	str	r2, [r3, #8]
}
 800abe4:	bf00      	nop
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800ac0c:	b490      	push	{r4, r7}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]
 800ac18:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	3360      	adds	r3, #96	; 0x60
 800ac1e:	461a      	mov	r2, r3
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	4413      	add	r3, r2
 800ac26:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800ac28:	6822      	ldr	r2, [r4, #0]
 800ac2a:	4b08      	ldr	r3, [pc, #32]	; (800ac4c <LL_ADC_SetOffset+0x40>)
 800ac2c:	4013      	ands	r3, r2
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800ac34:	683a      	ldr	r2, [r7, #0]
 800ac36:	430a      	orrs	r2, r1
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac3e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800ac40:	bf00      	nop
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bc90      	pop	{r4, r7}
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	03fff000 	.word	0x03fff000

0800ac50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800ac50:	b490      	push	{r4, r7}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	3360      	adds	r3, #96	; 0x60
 800ac5e:	461a      	mov	r2, r3
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	4413      	add	r3, r2
 800ac66:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800ac68:	6823      	ldr	r3, [r4, #0]
 800ac6a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bc90      	pop	{r4, r7}
 800ac76:	4770      	bx	lr

0800ac78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800ac78:	b490      	push	{r4, r7}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	3360      	adds	r3, #96	; 0x60
 800ac88:	461a      	mov	r2, r3
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	4413      	add	r3, r2
 800ac90:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800ac92:	6823      	ldr	r3, [r4, #0]
 800ac94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800ac9e:	bf00      	nop
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bc90      	pop	{r4, r7}
 800aca6:	4770      	bx	lr

0800aca8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800aca8:	b490      	push	{r4, r7}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	60b9      	str	r1, [r7, #8]
 800acb2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	3360      	adds	r3, #96	; 0x60
 800acb8:	461a      	mov	r2, r3
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	4413      	add	r3, r2
 800acc0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800acc2:	6823      	ldr	r3, [r4, #0]
 800acc4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	4313      	orrs	r3, r2
 800accc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800acce:	bf00      	nop
 800acd0:	3710      	adds	r7, #16
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bc90      	pop	{r4, r7}
 800acd6:	4770      	bx	lr

0800acd8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800acd8:	b490      	push	{r4, r7}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	3360      	adds	r3, #96	; 0x60
 800ace8:	461a      	mov	r2, r3
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	4413      	add	r3, r2
 800acf0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800acf2:	6823      	ldr	r3, [r4, #0]
 800acf4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4313      	orrs	r3, r2
 800acfc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800acfe:	bf00      	nop
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bc90      	pop	{r4, r7}
 800ad06:	4770      	bx	lr

0800ad08 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	695b      	ldr	r3, [r3, #20]
 800ad16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	431a      	orrs	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	615a      	str	r2, [r3, #20]
}
 800ad22:	bf00      	nop
 800ad24:	370c      	adds	r7, #12
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr

0800ad2e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800ad2e:	b490      	push	{r4, r7}
 800ad30:	b084      	sub	sp, #16
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	60f8      	str	r0, [r7, #12]
 800ad36:	60b9      	str	r1, [r7, #8]
 800ad38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	3330      	adds	r3, #48	; 0x30
 800ad3e:	461a      	mov	r2, r3
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	0a1b      	lsrs	r3, r3, #8
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	f003 030c 	and.w	r3, r3, #12
 800ad4a:	4413      	add	r3, r2
 800ad4c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800ad4e:	6822      	ldr	r2, [r4, #0]
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	f003 031f 	and.w	r3, r3, #31
 800ad56:	211f      	movs	r1, #31
 800ad58:	fa01 f303 	lsl.w	r3, r1, r3
 800ad5c:	43db      	mvns	r3, r3
 800ad5e:	401a      	ands	r2, r3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	0e9b      	lsrs	r3, r3, #26
 800ad64:	f003 011f 	and.w	r1, r3, #31
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	f003 031f 	and.w	r3, r3, #31
 800ad6e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad72:	4313      	orrs	r3, r2
 800ad74:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800ad76:	bf00      	nop
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bc90      	pop	{r4, r7}
 800ad7e:	4770      	bx	lr

0800ad80 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800ad80:	b490      	push	{r4, r7}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	3314      	adds	r3, #20
 800ad90:	461a      	mov	r2, r3
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	0e5b      	lsrs	r3, r3, #25
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	f003 0304 	and.w	r3, r3, #4
 800ad9c:	4413      	add	r3, r2
 800ad9e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800ada0:	6822      	ldr	r2, [r4, #0]
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	0d1b      	lsrs	r3, r3, #20
 800ada6:	f003 031f 	and.w	r3, r3, #31
 800adaa:	2107      	movs	r1, #7
 800adac:	fa01 f303 	lsl.w	r3, r1, r3
 800adb0:	43db      	mvns	r3, r3
 800adb2:	401a      	ands	r2, r3
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	0d1b      	lsrs	r3, r3, #20
 800adb8:	f003 031f 	and.w	r3, r3, #31
 800adbc:	6879      	ldr	r1, [r7, #4]
 800adbe:	fa01 f303 	lsl.w	r3, r1, r3
 800adc2:	4313      	orrs	r3, r2
 800adc4:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800adc6:	bf00      	nop
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bc90      	pop	{r4, r7}
 800adce:	4770      	bx	lr

0800add0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ade8:	43db      	mvns	r3, r3
 800adea:	401a      	ands	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f003 0318 	and.w	r3, r3, #24
 800adf2:	4908      	ldr	r1, [pc, #32]	; (800ae14 <LL_ADC_SetChannelSingleDiff+0x44>)
 800adf4:	40d9      	lsrs	r1, r3
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	400b      	ands	r3, r1
 800adfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adfe:	431a      	orrs	r2, r3
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800ae06:	bf00      	nop
 800ae08:	3714      	adds	r7, #20
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	0007ffff 	.word	0x0007ffff

0800ae18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	f003 031f 	and.w	r3, r3, #31
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800ae44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	6093      	str	r3, [r2, #8]
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae6c:	d101      	bne.n	800ae72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e000      	b.n	800ae74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800ae90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800ae94:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800ae9c:	bf00      	nop
 800ae9e:	370c      	adds	r7, #12
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aeb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aebc:	d101      	bne.n	800aec2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800aebe:	2301      	movs	r3, #1
 800aec0:	e000      	b.n	800aec4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aee0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800aee4:	f043 0201 	orr.w	r2, r3, #1
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800aeec:	bf00      	nop
 800aeee:	370c      	adds	r7, #12
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800af0c:	f043 0202 	orr.w	r2, r3, #2
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800af14:	bf00      	nop
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	f003 0301 	and.w	r3, r3, #1
 800af30:	2b01      	cmp	r3, #1
 800af32:	d101      	bne.n	800af38 <LL_ADC_IsEnabled+0x18>
 800af34:	2301      	movs	r3, #1
 800af36:	e000      	b.n	800af3a <LL_ADC_IsEnabled+0x1a>
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	370c      	adds	r7, #12
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr

0800af46 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800af46:	b480      	push	{r7}
 800af48:	b083      	sub	sp, #12
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	f003 0302 	and.w	r3, r3, #2
 800af56:	2b02      	cmp	r3, #2
 800af58:	d101      	bne.n	800af5e <LL_ADC_IsDisableOngoing+0x18>
 800af5a:	2301      	movs	r3, #1
 800af5c:	e000      	b.n	800af60 <LL_ADC_IsDisableOngoing+0x1a>
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	370c      	adds	r7, #12
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800af80:	f043 0204 	orr.w	r2, r3, #4
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800af88:	bf00      	nop
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	689b      	ldr	r3, [r3, #8]
 800afa0:	f003 0304 	and.w	r3, r3, #4
 800afa4:	2b04      	cmp	r3, #4
 800afa6:	d101      	bne.n	800afac <LL_ADC_REG_IsConversionOngoing+0x18>
 800afa8:	2301      	movs	r3, #1
 800afaa:	e000      	b.n	800afae <LL_ADC_REG_IsConversionOngoing+0x1a>
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	370c      	adds	r7, #12
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr

0800afba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800afba:	b480      	push	{r7}
 800afbc:	b083      	sub	sp, #12
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	f003 0308 	and.w	r3, r3, #8
 800afca:	2b08      	cmp	r3, #8
 800afcc:	d101      	bne.n	800afd2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800afce:	2301      	movs	r3, #1
 800afd0:	e000      	b.n	800afd4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800afd2:	2300      	movs	r3, #0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800afe0:	b590      	push	{r4, r7, lr}
 800afe2:	b089      	sub	sp, #36	; 0x24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800afec:	2300      	movs	r3, #0
 800afee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d101      	bne.n	800affa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e16b      	b.n	800b2d2 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	695b      	ldr	r3, [r3, #20]
 800affe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b004:	2b00      	cmp	r3, #0
 800b006:	d109      	bne.n	800b01c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f7fd fadf 	bl	80085cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4618      	mov	r0, r3
 800b022:	f7ff ff19 	bl	800ae58 <LL_ADC_IsDeepPowerDownEnabled>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d004      	beq.n	800b036 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4618      	mov	r0, r3
 800b032:	f7ff feff 	bl	800ae34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7ff ff34 	bl	800aea8 <LL_ADC_IsInternalRegulatorEnabled>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d113      	bne.n	800b06e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7ff ff18 	bl	800ae80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800b050:	4ba2      	ldr	r3, [pc, #648]	; (800b2dc <HAL_ADC_Init+0x2fc>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	099b      	lsrs	r3, r3, #6
 800b056:	4aa2      	ldr	r2, [pc, #648]	; (800b2e0 <HAL_ADC_Init+0x300>)
 800b058:	fba2 2303 	umull	r2, r3, r2, r3
 800b05c:	099b      	lsrs	r3, r3, #6
 800b05e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800b060:	e002      	b.n	800b068 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	3b01      	subs	r3, #1
 800b066:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d1f9      	bne.n	800b062 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4618      	mov	r0, r3
 800b074:	f7ff ff18 	bl	800aea8 <LL_ADC_IsInternalRegulatorEnabled>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d10d      	bne.n	800b09a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b082:	f043 0210 	orr.w	r2, r3, #16
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b08e:	f043 0201 	orr.w	r2, r3, #1
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800b096:	2301      	movs	r3, #1
 800b098:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7ff ff78 	bl	800af94 <LL_ADC_REG_IsConversionOngoing>
 800b0a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0aa:	f003 0310 	and.w	r3, r3, #16
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	f040 8106 	bne.w	800b2c0 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f040 8102 	bne.w	800b2c0 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800b0c4:	f043 0202 	orr.w	r2, r3, #2
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7ff ff25 	bl	800af20 <LL_ADC_IsEnabled>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d111      	bne.n	800b100 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b0dc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800b0e0:	f7ff ff1e 	bl	800af20 <LL_ADC_IsEnabled>
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	487f      	ldr	r0, [pc, #508]	; (800b2e4 <HAL_ADC_Init+0x304>)
 800b0e8:	f7ff ff1a 	bl	800af20 <LL_ADC_IsEnabled>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	4323      	orrs	r3, r4
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d105      	bne.n	800b100 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	487b      	ldr	r0, [pc, #492]	; (800b2e8 <HAL_ADC_Init+0x308>)
 800b0fc:	f7ff fd52 	bl	800aba4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	7f5b      	ldrb	r3, [r3, #29]
 800b104:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b10a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800b110:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800b116:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b11e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b120:	4313      	orrs	r3, r2
 800b122:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d106      	bne.n	800b13c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b132:	3b01      	subs	r3, #1
 800b134:	045b      	lsls	r3, r3, #17
 800b136:	69ba      	ldr	r2, [r7, #24]
 800b138:	4313      	orrs	r3, r2
 800b13a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b140:	2b00      	cmp	r3, #0
 800b142:	d009      	beq.n	800b158 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b148:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b150:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b152:	69ba      	ldr	r2, [r7, #24]
 800b154:	4313      	orrs	r3, r2
 800b156:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	68da      	ldr	r2, [r3, #12]
 800b15e:	4b63      	ldr	r3, [pc, #396]	; (800b2ec <HAL_ADC_Init+0x30c>)
 800b160:	4013      	ands	r3, r2
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	6812      	ldr	r2, [r2, #0]
 800b166:	69b9      	ldr	r1, [r7, #24]
 800b168:	430b      	orrs	r3, r1
 800b16a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	691b      	ldr	r3, [r3, #16]
 800b172:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	430a      	orrs	r2, r1
 800b180:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4618      	mov	r0, r3
 800b188:	f7ff ff04 	bl	800af94 <LL_ADC_REG_IsConversionOngoing>
 800b18c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4618      	mov	r0, r3
 800b194:	f7ff ff11 	bl	800afba <LL_ADC_INJ_IsConversionOngoing>
 800b198:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d16d      	bne.n	800b27c <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d16a      	bne.n	800b27c <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800b1aa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b1b2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1c2:	f023 0302 	bic.w	r3, r3, #2
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	6812      	ldr	r2, [r2, #0]
 800b1ca:	69b9      	ldr	r1, [r7, #24]
 800b1cc:	430b      	orrs	r3, r1
 800b1ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	691b      	ldr	r3, [r3, #16]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d017      	beq.n	800b208 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	691a      	ldr	r2, [r3, #16]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b1e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b1f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800b1f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	6911      	ldr	r1, [r2, #16]
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	6812      	ldr	r2, [r2, #0]
 800b200:	430b      	orrs	r3, r1
 800b202:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800b206:	e013      	b.n	800b230 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	691a      	ldr	r2, [r3, #16]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b216:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	6812      	ldr	r2, [r2, #0]
 800b224:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800b228:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b22c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b236:	2b01      	cmp	r3, #1
 800b238:	d118      	bne.n	800b26c <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	691b      	ldr	r3, [r3, #16]
 800b240:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b244:	f023 0304 	bic.w	r3, r3, #4
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b250:	4311      	orrs	r1, r2
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b256:	4311      	orrs	r1, r2
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b25c:	430a      	orrs	r2, r1
 800b25e:	431a      	orrs	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f042 0201 	orr.w	r2, r2, #1
 800b268:	611a      	str	r2, [r3, #16]
 800b26a:	e007      	b.n	800b27c <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	691a      	ldr	r2, [r3, #16]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f022 0201 	bic.w	r2, r2, #1
 800b27a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	695b      	ldr	r3, [r3, #20]
 800b280:	2b01      	cmp	r3, #1
 800b282:	d10c      	bne.n	800b29e <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b28a:	f023 010f 	bic.w	r1, r3, #15
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6a1b      	ldr	r3, [r3, #32]
 800b292:	1e5a      	subs	r2, r3, #1
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	430a      	orrs	r2, r1
 800b29a:	631a      	str	r2, [r3, #48]	; 0x30
 800b29c:	e007      	b.n	800b2ae <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f022 020f 	bic.w	r2, r2, #15
 800b2ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2b2:	f023 0303 	bic.w	r3, r3, #3
 800b2b6:	f043 0201 	orr.w	r2, r3, #1
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	65da      	str	r2, [r3, #92]	; 0x5c
 800b2be:	e007      	b.n	800b2d0 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2c4:	f043 0210 	orr.w	r2, r3, #16
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b2d0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3724      	adds	r7, #36	; 0x24
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd90      	pop	{r4, r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	2000000c 	.word	0x2000000c
 800b2e0:	053e2d63 	.word	0x053e2d63
 800b2e4:	50000100 	.word	0x50000100
 800b2e8:	50000300 	.word	0x50000300
 800b2ec:	fff04007 	.word	0xfff04007

0800b2f0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b2f8:	4859      	ldr	r0, [pc, #356]	; (800b460 <HAL_ADC_Start+0x170>)
 800b2fa:	f7ff fd8d 	bl	800ae18 <LL_ADC_GetMultimode>
 800b2fe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4618      	mov	r0, r3
 800b306:	f7ff fe45 	bl	800af94 <LL_ADC_REG_IsConversionOngoing>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f040 809f 	bne.w	800b450 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d101      	bne.n	800b320 <HAL_ADC_Start+0x30>
 800b31c:	2302      	movs	r3, #2
 800b31e:	e09a      	b.n	800b456 <HAL_ADC_Start+0x166>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 fc01 	bl	800bb30 <ADC_Enable>
 800b32e:	4603      	mov	r3, r0
 800b330:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800b332:	7dfb      	ldrb	r3, [r7, #23]
 800b334:	2b00      	cmp	r3, #0
 800b336:	f040 8086 	bne.w	800b446 <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b33e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b342:	f023 0301 	bic.w	r3, r3, #1
 800b346:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a44      	ldr	r2, [pc, #272]	; (800b464 <HAL_ADC_Start+0x174>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d002      	beq.n	800b35e <HAL_ADC_Start+0x6e>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	e001      	b.n	800b362 <HAL_ADC_Start+0x72>
 800b35e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	6812      	ldr	r2, [r2, #0]
 800b366:	4293      	cmp	r3, r2
 800b368:	d002      	beq.n	800b370 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d105      	bne.n	800b37c <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b374:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b380:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b388:	d106      	bne.n	800b398 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b38e:	f023 0206 	bic.w	r2, r3, #6
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	661a      	str	r2, [r3, #96]	; 0x60
 800b396:	e002      	b.n	800b39e <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	221c      	movs	r2, #28
 800b3a4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a2c      	ldr	r2, [pc, #176]	; (800b464 <HAL_ADC_Start+0x174>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d002      	beq.n	800b3be <HAL_ADC_Start+0xce>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	e001      	b.n	800b3c2 <HAL_ADC_Start+0xd2>
 800b3be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	6812      	ldr	r2, [r2, #0]
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d008      	beq.n	800b3dc <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d005      	beq.n	800b3dc <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	2b05      	cmp	r3, #5
 800b3d4:	d002      	beq.n	800b3dc <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	2b09      	cmp	r3, #9
 800b3da:	d114      	bne.n	800b406 <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	68db      	ldr	r3, [r3, #12]
 800b3e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d007      	beq.n	800b3fa <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b3f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7ff fdb4 	bl	800af6c <LL_ADC_REG_StartConversion>
 800b404:	e026      	b.n	800b454 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b40a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a13      	ldr	r2, [pc, #76]	; (800b464 <HAL_ADC_Start+0x174>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d002      	beq.n	800b422 <HAL_ADC_Start+0x132>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	e001      	b.n	800b426 <HAL_ADC_Start+0x136>
 800b422:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800b426:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00f      	beq.n	800b454 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b438:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b43c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	65da      	str	r2, [r3, #92]	; 0x5c
 800b444:	e006      	b.n	800b454 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800b44e:	e001      	b.n	800b454 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b450:	2302      	movs	r3, #2
 800b452:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800b454:	7dfb      	ldrb	r3, [r7, #23]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3718      	adds	r7, #24
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	50000300 	.word	0x50000300
 800b464:	50000100 	.word	0x50000100

0800b468 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b0a6      	sub	sp, #152	; 0x98
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b472:	2300      	movs	r3, #0
 800b474:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800b478:	2300      	movs	r3, #0
 800b47a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b482:	2b01      	cmp	r3, #1
 800b484:	d101      	bne.n	800b48a <HAL_ADC_ConfigChannel+0x22>
 800b486:	2302      	movs	r3, #2
 800b488:	e348      	b.n	800bb1c <HAL_ADC_ConfigChannel+0x6b4>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2201      	movs	r2, #1
 800b48e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4618      	mov	r0, r3
 800b498:	f7ff fd7c 	bl	800af94 <LL_ADC_REG_IsConversionOngoing>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f040 832d 	bne.w	800bafe <HAL_ADC_ConfigChannel+0x696>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6818      	ldr	r0, [r3, #0]
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	6859      	ldr	r1, [r3, #4]
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	f7ff fc3c 	bl	800ad2e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7ff fd6a 	bl	800af94 <LL_ADC_REG_IsConversionOngoing>
 800b4c0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7ff fd76 	bl	800afba <LL_ADC_INJ_IsConversionOngoing>
 800b4ce:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b4d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	f040 817b 	bne.w	800b7d2 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b4dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	f040 8176 	bne.w	800b7d2 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4ee:	d10f      	bne.n	800b510 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6818      	ldr	r0, [r3, #0]
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	f7ff fc40 	bl	800ad80 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b508:	4618      	mov	r0, r3
 800b50a:	f7ff fbfd 	bl	800ad08 <LL_ADC_SetSamplingTimeCommonConfig>
 800b50e:	e00e      	b.n	800b52e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6818      	ldr	r0, [r3, #0]
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	6819      	ldr	r1, [r3, #0]
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	689b      	ldr	r3, [r3, #8]
 800b51c:	461a      	mov	r2, r3
 800b51e:	f7ff fc2f 	bl	800ad80 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2100      	movs	r1, #0
 800b528:	4618      	mov	r0, r3
 800b52a:	f7ff fbed 	bl	800ad08 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	695a      	ldr	r2, [r3, #20]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	08db      	lsrs	r3, r3, #3
 800b53a:	f003 0303 	and.w	r3, r3, #3
 800b53e:	005b      	lsls	r3, r3, #1
 800b540:	fa02 f303 	lsl.w	r3, r2, r3
 800b544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	2b04      	cmp	r3, #4
 800b54e:	d022      	beq.n	800b596 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6818      	ldr	r0, [r3, #0]
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	6919      	ldr	r1, [r3, #16]
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b560:	f7ff fb54 	bl	800ac0c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6818      	ldr	r0, [r3, #0]
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	6919      	ldr	r1, [r3, #16]
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	699b      	ldr	r3, [r3, #24]
 800b570:	461a      	mov	r2, r3
 800b572:	f7ff fb99 	bl	800aca8 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6818      	ldr	r0, [r3, #0]
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	6919      	ldr	r1, [r3, #16]
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	7f1b      	ldrb	r3, [r3, #28]
 800b582:	2b01      	cmp	r3, #1
 800b584:	d102      	bne.n	800b58c <HAL_ADC_ConfigChannel+0x124>
 800b586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b58a:	e000      	b.n	800b58e <HAL_ADC_ConfigChannel+0x126>
 800b58c:	2300      	movs	r3, #0
 800b58e:	461a      	mov	r2, r3
 800b590:	f7ff fba2 	bl	800acd8 <LL_ADC_SetOffsetSaturation>
 800b594:	e11d      	b.n	800b7d2 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2100      	movs	r1, #0
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7ff fb57 	bl	800ac50 <LL_ADC_GetOffsetChannel>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10a      	bne.n	800b5c2 <HAL_ADC_ConfigChannel+0x15a>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7ff fb4c 	bl	800ac50 <LL_ADC_GetOffsetChannel>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	0e9b      	lsrs	r3, r3, #26
 800b5bc:	f003 021f 	and.w	r2, r3, #31
 800b5c0:	e012      	b.n	800b5e8 <HAL_ADC_ConfigChannel+0x180>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7ff fb41 	bl	800ac50 <LL_ADC_GetOffsetChannel>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b5d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b5d8:	fa93 f3a3 	rbit	r3, r3
 800b5dc:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b5de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b5e0:	fab3 f383 	clz	r3, r3
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d105      	bne.n	800b600 <HAL_ADC_ConfigChannel+0x198>
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	0e9b      	lsrs	r3, r3, #26
 800b5fa:	f003 031f 	and.w	r3, r3, #31
 800b5fe:	e00a      	b.n	800b616 <HAL_ADC_ConfigChannel+0x1ae>
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b606:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b608:	fa93 f3a3 	rbit	r3, r3
 800b60c:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800b60e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b610:	fab3 f383 	clz	r3, r3
 800b614:	b2db      	uxtb	r3, r3
 800b616:	429a      	cmp	r2, r3
 800b618:	d106      	bne.n	800b628 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2200      	movs	r2, #0
 800b620:	2100      	movs	r1, #0
 800b622:	4618      	mov	r0, r3
 800b624:	f7ff fb28 	bl	800ac78 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2101      	movs	r1, #1
 800b62e:	4618      	mov	r0, r3
 800b630:	f7ff fb0e 	bl	800ac50 <LL_ADC_GetOffsetChannel>
 800b634:	4603      	mov	r3, r0
 800b636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d10a      	bne.n	800b654 <HAL_ADC_ConfigChannel+0x1ec>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2101      	movs	r1, #1
 800b644:	4618      	mov	r0, r3
 800b646:	f7ff fb03 	bl	800ac50 <LL_ADC_GetOffsetChannel>
 800b64a:	4603      	mov	r3, r0
 800b64c:	0e9b      	lsrs	r3, r3, #26
 800b64e:	f003 021f 	and.w	r2, r3, #31
 800b652:	e010      	b.n	800b676 <HAL_ADC_ConfigChannel+0x20e>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2101      	movs	r1, #1
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7ff faf8 	bl	800ac50 <LL_ADC_GetOffsetChannel>
 800b660:	4603      	mov	r3, r0
 800b662:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b664:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b666:	fa93 f3a3 	rbit	r3, r3
 800b66a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800b66c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b66e:	fab3 f383 	clz	r3, r3
 800b672:	b2db      	uxtb	r3, r3
 800b674:	461a      	mov	r2, r3
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d105      	bne.n	800b68e <HAL_ADC_ConfigChannel+0x226>
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	0e9b      	lsrs	r3, r3, #26
 800b688:	f003 031f 	and.w	r3, r3, #31
 800b68c:	e00a      	b.n	800b6a4 <HAL_ADC_ConfigChannel+0x23c>
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b694:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b696:	fa93 f3a3 	rbit	r3, r3
 800b69a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800b69c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b69e:	fab3 f383 	clz	r3, r3
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d106      	bne.n	800b6b6 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	2101      	movs	r1, #1
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7ff fae1 	bl	800ac78 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2102      	movs	r1, #2
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7ff fac7 	bl	800ac50 <LL_ADC_GetOffsetChannel>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d10a      	bne.n	800b6e2 <HAL_ADC_ConfigChannel+0x27a>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	2102      	movs	r1, #2
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7ff fabc 	bl	800ac50 <LL_ADC_GetOffsetChannel>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	0e9b      	lsrs	r3, r3, #26
 800b6dc:	f003 021f 	and.w	r2, r3, #31
 800b6e0:	e010      	b.n	800b704 <HAL_ADC_ConfigChannel+0x29c>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2102      	movs	r1, #2
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7ff fab1 	bl	800ac50 <LL_ADC_GetOffsetChannel>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b6f4:	fa93 f3a3 	rbit	r3, r3
 800b6f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800b6fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6fc:	fab3 f383 	clz	r3, r3
 800b700:	b2db      	uxtb	r3, r3
 800b702:	461a      	mov	r2, r3
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d105      	bne.n	800b71c <HAL_ADC_ConfigChannel+0x2b4>
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	0e9b      	lsrs	r3, r3, #26
 800b716:	f003 031f 	and.w	r3, r3, #31
 800b71a:	e00a      	b.n	800b732 <HAL_ADC_ConfigChannel+0x2ca>
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b724:	fa93 f3a3 	rbit	r3, r3
 800b728:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800b72a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b72c:	fab3 f383 	clz	r3, r3
 800b730:	b2db      	uxtb	r3, r3
 800b732:	429a      	cmp	r2, r3
 800b734:	d106      	bne.n	800b744 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2200      	movs	r2, #0
 800b73c:	2102      	movs	r1, #2
 800b73e:	4618      	mov	r0, r3
 800b740:	f7ff fa9a 	bl	800ac78 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2103      	movs	r1, #3
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7ff fa80 	bl	800ac50 <LL_ADC_GetOffsetChannel>
 800b750:	4603      	mov	r3, r0
 800b752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b756:	2b00      	cmp	r3, #0
 800b758:	d10a      	bne.n	800b770 <HAL_ADC_ConfigChannel+0x308>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2103      	movs	r1, #3
 800b760:	4618      	mov	r0, r3
 800b762:	f7ff fa75 	bl	800ac50 <LL_ADC_GetOffsetChannel>
 800b766:	4603      	mov	r3, r0
 800b768:	0e9b      	lsrs	r3, r3, #26
 800b76a:	f003 021f 	and.w	r2, r3, #31
 800b76e:	e010      	b.n	800b792 <HAL_ADC_ConfigChannel+0x32a>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2103      	movs	r1, #3
 800b776:	4618      	mov	r0, r3
 800b778:	f7ff fa6a 	bl	800ac50 <LL_ADC_GetOffsetChannel>
 800b77c:	4603      	mov	r3, r0
 800b77e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b782:	fa93 f3a3 	rbit	r3, r3
 800b786:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800b788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b78a:	fab3 f383 	clz	r3, r3
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	461a      	mov	r2, r3
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d105      	bne.n	800b7aa <HAL_ADC_ConfigChannel+0x342>
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	0e9b      	lsrs	r3, r3, #26
 800b7a4:	f003 031f 	and.w	r3, r3, #31
 800b7a8:	e00a      	b.n	800b7c0 <HAL_ADC_ConfigChannel+0x358>
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7b2:	fa93 f3a3 	rbit	r3, r3
 800b7b6:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800b7b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7ba:	fab3 f383 	clz	r3, r3
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d106      	bne.n	800b7d2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	2103      	movs	r1, #3
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7ff fa53 	bl	800ac78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7ff fba2 	bl	800af20 <LL_ADC_IsEnabled>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	f040 810c 	bne.w	800b9fc <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6818      	ldr	r0, [r3, #0]
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	6819      	ldr	r1, [r3, #0]
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	f7ff faed 	bl	800add0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	4aab      	ldr	r2, [pc, #684]	; (800baa8 <HAL_ADC_ConfigChannel+0x640>)
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	f040 80fd 	bne.w	800b9fc <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d10b      	bne.n	800b82a <HAL_ADC_ConfigChannel+0x3c2>
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	0e9b      	lsrs	r3, r3, #26
 800b818:	3301      	adds	r3, #1
 800b81a:	f003 031f 	and.w	r3, r3, #31
 800b81e:	2b09      	cmp	r3, #9
 800b820:	bf94      	ite	ls
 800b822:	2301      	movls	r3, #1
 800b824:	2300      	movhi	r3, #0
 800b826:	b2db      	uxtb	r3, r3
 800b828:	e012      	b.n	800b850 <HAL_ADC_ConfigChannel+0x3e8>
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b832:	fa93 f3a3 	rbit	r3, r3
 800b836:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800b838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b83a:	fab3 f383 	clz	r3, r3
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	3301      	adds	r3, #1
 800b842:	f003 031f 	and.w	r3, r3, #31
 800b846:	2b09      	cmp	r3, #9
 800b848:	bf94      	ite	ls
 800b84a:	2301      	movls	r3, #1
 800b84c:	2300      	movhi	r3, #0
 800b84e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b850:	2b00      	cmp	r3, #0
 800b852:	d064      	beq.n	800b91e <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d107      	bne.n	800b870 <HAL_ADC_ConfigChannel+0x408>
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	0e9b      	lsrs	r3, r3, #26
 800b866:	3301      	adds	r3, #1
 800b868:	069b      	lsls	r3, r3, #26
 800b86a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b86e:	e00e      	b.n	800b88e <HAL_ADC_ConfigChannel+0x426>
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b878:	fa93 f3a3 	rbit	r3, r3
 800b87c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800b87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b880:	fab3 f383 	clz	r3, r3
 800b884:	b2db      	uxtb	r3, r3
 800b886:	3301      	adds	r3, #1
 800b888:	069b      	lsls	r3, r3, #26
 800b88a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b896:	2b00      	cmp	r3, #0
 800b898:	d109      	bne.n	800b8ae <HAL_ADC_ConfigChannel+0x446>
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	0e9b      	lsrs	r3, r3, #26
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	f003 031f 	and.w	r3, r3, #31
 800b8a6:	2101      	movs	r1, #1
 800b8a8:	fa01 f303 	lsl.w	r3, r1, r3
 800b8ac:	e010      	b.n	800b8d0 <HAL_ADC_ConfigChannel+0x468>
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b6:	fa93 f3a3 	rbit	r3, r3
 800b8ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800b8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8be:	fab3 f383 	clz	r3, r3
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	f003 031f 	and.w	r3, r3, #31
 800b8ca:	2101      	movs	r1, #1
 800b8cc:	fa01 f303 	lsl.w	r3, r1, r3
 800b8d0:	ea42 0103 	orr.w	r1, r2, r3
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d10a      	bne.n	800b8f6 <HAL_ADC_ConfigChannel+0x48e>
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	0e9b      	lsrs	r3, r3, #26
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	f003 021f 	and.w	r2, r3, #31
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	005b      	lsls	r3, r3, #1
 800b8f0:	4413      	add	r3, r2
 800b8f2:	051b      	lsls	r3, r3, #20
 800b8f4:	e011      	b.n	800b91a <HAL_ADC_ConfigChannel+0x4b2>
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fe:	fa93 f3a3 	rbit	r3, r3
 800b902:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800b904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b906:	fab3 f383 	clz	r3, r3
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	3301      	adds	r3, #1
 800b90e:	f003 021f 	and.w	r2, r3, #31
 800b912:	4613      	mov	r3, r2
 800b914:	005b      	lsls	r3, r3, #1
 800b916:	4413      	add	r3, r2
 800b918:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b91a:	430b      	orrs	r3, r1
 800b91c:	e069      	b.n	800b9f2 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b926:	2b00      	cmp	r3, #0
 800b928:	d107      	bne.n	800b93a <HAL_ADC_ConfigChannel+0x4d2>
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	0e9b      	lsrs	r3, r3, #26
 800b930:	3301      	adds	r3, #1
 800b932:	069b      	lsls	r3, r3, #26
 800b934:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b938:	e00e      	b.n	800b958 <HAL_ADC_ConfigChannel+0x4f0>
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b940:	6a3b      	ldr	r3, [r7, #32]
 800b942:	fa93 f3a3 	rbit	r3, r3
 800b946:	61fb      	str	r3, [r7, #28]
  return result;
 800b948:	69fb      	ldr	r3, [r7, #28]
 800b94a:	fab3 f383 	clz	r3, r3
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	3301      	adds	r3, #1
 800b952:	069b      	lsls	r3, r3, #26
 800b954:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b960:	2b00      	cmp	r3, #0
 800b962:	d109      	bne.n	800b978 <HAL_ADC_ConfigChannel+0x510>
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	0e9b      	lsrs	r3, r3, #26
 800b96a:	3301      	adds	r3, #1
 800b96c:	f003 031f 	and.w	r3, r3, #31
 800b970:	2101      	movs	r1, #1
 800b972:	fa01 f303 	lsl.w	r3, r1, r3
 800b976:	e010      	b.n	800b99a <HAL_ADC_ConfigChannel+0x532>
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	fa93 f3a3 	rbit	r3, r3
 800b984:	617b      	str	r3, [r7, #20]
  return result;
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	fab3 f383 	clz	r3, r3
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	3301      	adds	r3, #1
 800b990:	f003 031f 	and.w	r3, r3, #31
 800b994:	2101      	movs	r1, #1
 800b996:	fa01 f303 	lsl.w	r3, r1, r3
 800b99a:	ea42 0103 	orr.w	r1, r2, r3
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d10d      	bne.n	800b9c6 <HAL_ADC_ConfigChannel+0x55e>
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	0e9b      	lsrs	r3, r3, #26
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	f003 021f 	and.w	r2, r3, #31
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	005b      	lsls	r3, r3, #1
 800b9ba:	4413      	add	r3, r2
 800b9bc:	3b1e      	subs	r3, #30
 800b9be:	051b      	lsls	r3, r3, #20
 800b9c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b9c4:	e014      	b.n	800b9f0 <HAL_ADC_ConfigChannel+0x588>
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	fa93 f3a3 	rbit	r3, r3
 800b9d2:	60fb      	str	r3, [r7, #12]
  return result;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	fab3 f383 	clz	r3, r3
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	3301      	adds	r3, #1
 800b9de:	f003 021f 	and.w	r2, r3, #31
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	005b      	lsls	r3, r3, #1
 800b9e6:	4413      	add	r3, r2
 800b9e8:	3b1e      	subs	r3, #30
 800b9ea:	051b      	lsls	r3, r3, #20
 800b9ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b9f0:	430b      	orrs	r3, r1
 800b9f2:	683a      	ldr	r2, [r7, #0]
 800b9f4:	6892      	ldr	r2, [r2, #8]
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	f7ff f9c2 	bl	800ad80 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	4b2a      	ldr	r3, [pc, #168]	; (800baac <HAL_ADC_ConfigChannel+0x644>)
 800ba02:	4013      	ands	r3, r2
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f000 8083 	beq.w	800bb10 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ba0a:	4829      	ldr	r0, [pc, #164]	; (800bab0 <HAL_ADC_ConfigChannel+0x648>)
 800ba0c:	f7ff f8f0 	bl	800abf0 <LL_ADC_GetCommonPathInternalCh>
 800ba10:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4a26      	ldr	r2, [pc, #152]	; (800bab4 <HAL_ADC_ConfigChannel+0x64c>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d004      	beq.n	800ba28 <HAL_ADC_ConfigChannel+0x5c0>
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4a25      	ldr	r2, [pc, #148]	; (800bab8 <HAL_ADC_ConfigChannel+0x650>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d126      	bne.n	800ba76 <HAL_ADC_ConfigChannel+0x60e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800ba28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d120      	bne.n	800ba76 <HAL_ADC_ConfigChannel+0x60e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba3c:	d168      	bne.n	800bb10 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ba3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ba46:	4619      	mov	r1, r3
 800ba48:	4819      	ldr	r0, [pc, #100]	; (800bab0 <HAL_ADC_ConfigChannel+0x648>)
 800ba4a:	f7ff f8be 	bl	800abca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800ba4e:	4b1b      	ldr	r3, [pc, #108]	; (800babc <HAL_ADC_ConfigChannel+0x654>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	099b      	lsrs	r3, r3, #6
 800ba54:	4a1a      	ldr	r2, [pc, #104]	; (800bac0 <HAL_ADC_ConfigChannel+0x658>)
 800ba56:	fba2 2303 	umull	r2, r3, r2, r3
 800ba5a:	099a      	lsrs	r2, r3, #6
 800ba5c:	4613      	mov	r3, r2
 800ba5e:	005b      	lsls	r3, r3, #1
 800ba60:	4413      	add	r3, r2
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800ba66:	e002      	b.n	800ba6e <HAL_ADC_ConfigChannel+0x606>
          {
            wait_loop_index--;
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1f9      	bne.n	800ba68 <HAL_ADC_ConfigChannel+0x600>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ba74:	e04c      	b.n	800bb10 <HAL_ADC_ConfigChannel+0x6a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a12      	ldr	r2, [pc, #72]	; (800bac4 <HAL_ADC_ConfigChannel+0x65c>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d125      	bne.n	800bacc <HAL_ADC_ConfigChannel+0x664>
 800ba80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d11f      	bne.n	800bacc <HAL_ADC_ConfigChannel+0x664>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a0d      	ldr	r2, [pc, #52]	; (800bac8 <HAL_ADC_ConfigChannel+0x660>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d03c      	beq.n	800bb10 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ba96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ba9e:	4619      	mov	r1, r3
 800baa0:	4803      	ldr	r0, [pc, #12]	; (800bab0 <HAL_ADC_ConfigChannel+0x648>)
 800baa2:	f7ff f892 	bl	800abca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800baa6:	e033      	b.n	800bb10 <HAL_ADC_ConfigChannel+0x6a8>
 800baa8:	407f0000 	.word	0x407f0000
 800baac:	80080000 	.word	0x80080000
 800bab0:	50000300 	.word	0x50000300
 800bab4:	c3210000 	.word	0xc3210000
 800bab8:	90c00010 	.word	0x90c00010
 800babc:	2000000c 	.word	0x2000000c
 800bac0:	053e2d63 	.word	0x053e2d63
 800bac4:	c7520000 	.word	0xc7520000
 800bac8:	50000100 	.word	0x50000100
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a14      	ldr	r2, [pc, #80]	; (800bb24 <HAL_ADC_ConfigChannel+0x6bc>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d11c      	bne.n	800bb10 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800bad6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d116      	bne.n	800bb10 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a10      	ldr	r2, [pc, #64]	; (800bb28 <HAL_ADC_ConfigChannel+0x6c0>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d011      	beq.n	800bb10 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800baec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800baf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800baf4:	4619      	mov	r1, r3
 800baf6:	480d      	ldr	r0, [pc, #52]	; (800bb2c <HAL_ADC_ConfigChannel+0x6c4>)
 800baf8:	f7ff f867 	bl	800abca <LL_ADC_SetCommonPathInternalCh>
 800bafc:	e008      	b.n	800bb10 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb02:	f043 0220 	orr.w	r2, r3, #32
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2200      	movs	r2, #0
 800bb14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800bb18:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3798      	adds	r7, #152	; 0x98
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	cb840000 	.word	0xcb840000
 800bb28:	50000100 	.word	0x50000100
 800bb2c:	50000300 	.word	0x50000300

0800bb30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7ff f9ef 	bl	800af20 <LL_ADC_IsEnabled>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d146      	bne.n	800bbd6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	689a      	ldr	r2, [r3, #8]
 800bb4e:	4b24      	ldr	r3, [pc, #144]	; (800bbe0 <ADC_Enable+0xb0>)
 800bb50:	4013      	ands	r3, r2
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00d      	beq.n	800bb72 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb5a:	f043 0210 	orr.w	r2, r3, #16
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb66:	f043 0201 	orr.w	r2, r3, #1
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e032      	b.n	800bbd8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7ff f9aa 	bl	800aed0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800bb7c:	f7fe ffe4 	bl	800ab48 <HAL_GetTick>
 800bb80:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800bb82:	e021      	b.n	800bbc8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7ff f9c9 	bl	800af20 <LL_ADC_IsEnabled>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d104      	bne.n	800bb9e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7ff f999 	bl	800aed0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800bb9e:	f7fe ffd3 	bl	800ab48 <HAL_GetTick>
 800bba2:	4602      	mov	r2, r0
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	1ad3      	subs	r3, r2, r3
 800bba8:	2b02      	cmp	r3, #2
 800bbaa:	d90d      	bls.n	800bbc8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbb0:	f043 0210 	orr.w	r2, r3, #16
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbbc:	f043 0201 	orr.w	r2, r3, #1
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	e007      	b.n	800bbd8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f003 0301 	and.w	r3, r3, #1
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d1d6      	bne.n	800bb84 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800bbd6:	2300      	movs	r3, #0
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3710      	adds	r7, #16
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	8000003f 	.word	0x8000003f

0800bbe4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7ff f9a8 	bl	800af46 <LL_ADC_IsDisableOngoing>
 800bbf6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7ff f98f 	bl	800af20 <LL_ADC_IsEnabled>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d040      	beq.n	800bc8a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d13d      	bne.n	800bc8a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	f003 030d 	and.w	r3, r3, #13
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d10c      	bne.n	800bc36 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7ff f969 	bl	800aef8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	2203      	movs	r2, #3
 800bc2c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800bc2e:	f7fe ff8b 	bl	800ab48 <HAL_GetTick>
 800bc32:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800bc34:	e022      	b.n	800bc7c <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc3a:	f043 0210 	orr.w	r2, r3, #16
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc46:	f043 0201 	orr.w	r2, r3, #1
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	e01c      	b.n	800bc8c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800bc52:	f7fe ff79 	bl	800ab48 <HAL_GetTick>
 800bc56:	4602      	mov	r2, r0
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	1ad3      	subs	r3, r2, r3
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d90d      	bls.n	800bc7c <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc64:	f043 0210 	orr.w	r2, r3, #16
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc70:	f043 0201 	orr.w	r2, r3, #1
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	e007      	b.n	800bc8c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	689b      	ldr	r3, [r3, #8]
 800bc82:	f003 0301 	and.w	r3, r3, #1
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d1e3      	bne.n	800bc52 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3710      	adds	r7, #16
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <LL_ADC_IsEnabled>:
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	f003 0301 	and.w	r3, r3, #1
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d101      	bne.n	800bcac <LL_ADC_IsEnabled+0x18>
 800bca8:	2301      	movs	r3, #1
 800bcaa:	e000      	b.n	800bcae <LL_ADC_IsEnabled+0x1a>
 800bcac:	2300      	movs	r3, #0
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	370c      	adds	r7, #12
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <LL_ADC_StartCalibration>:
{
 800bcba:	b480      	push	{r7}
 800bcbc:	b083      	sub	sp, #12
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
 800bcc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800bccc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800bcd0:	683a      	ldr	r2, [r7, #0]
 800bcd2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	609a      	str	r2, [r3, #8]
}
 800bce0:	bf00      	nop
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <LL_ADC_IsCalibrationOnGoing>:
{
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd00:	d101      	bne.n	800bd06 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800bd02:	2301      	movs	r3, #1
 800bd04:	e000      	b.n	800bd08 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800bd06:	2300      	movs	r3, #0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	370c      	adds	r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <LL_ADC_REG_IsConversionOngoing>:
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	f003 0304 	and.w	r3, r3, #4
 800bd24:	2b04      	cmp	r3, #4
 800bd26:	d101      	bne.n	800bd2c <LL_ADC_REG_IsConversionOngoing+0x18>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e000      	b.n	800bd2e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	370c      	adds	r7, #12
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr
	...

0800bd3c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800bd46:	2300      	movs	r3, #0
 800bd48:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d101      	bne.n	800bd58 <HAL_ADCEx_Calibration_Start+0x1c>
 800bd54:	2302      	movs	r3, #2
 800bd56:	e04d      	b.n	800bdf4 <HAL_ADCEx_Calibration_Start+0xb8>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f7ff ff3f 	bl	800bbe4 <ADC_Disable>
 800bd66:	4603      	mov	r3, r0
 800bd68:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800bd6a:	7bfb      	ldrb	r3, [r7, #15]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d136      	bne.n	800bdde <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800bd78:	f023 0302 	bic.w	r3, r3, #2
 800bd7c:	f043 0202 	orr.w	r2, r3, #2
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	6839      	ldr	r1, [r7, #0]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7ff ff95 	bl	800bcba <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800bd90:	e014      	b.n	800bdbc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	3301      	adds	r3, #1
 800bd96:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	4a18      	ldr	r2, [pc, #96]	; (800bdfc <HAL_ADCEx_Calibration_Start+0xc0>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d90d      	bls.n	800bdbc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bda4:	f023 0312 	bic.w	r3, r3, #18
 800bda8:	f043 0210 	orr.w	r2, r3, #16
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	e01b      	b.n	800bdf4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7ff ff93 	bl	800bcec <LL_ADC_IsCalibrationOnGoing>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1e2      	bne.n	800bd92 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdd0:	f023 0303 	bic.w	r3, r3, #3
 800bdd4:	f043 0201 	orr.w	r2, r3, #1
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	65da      	str	r2, [r3, #92]	; 0x5c
 800bddc:	e005      	b.n	800bdea <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bde2:	f043 0210 	orr.w	r2, r3, #16
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800bdf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3710      	adds	r7, #16
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	0004de01 	.word	0x0004de01

0800be00 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800be00:	b590      	push	{r4, r7, lr}
 800be02:	b0a1      	sub	sp, #132	; 0x84
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800be0a:	2300      	movs	r3, #0
 800be0c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800be16:	2b01      	cmp	r3, #1
 800be18:	d101      	bne.n	800be1e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800be1a:	2302      	movs	r3, #2
 800be1c:	e087      	b.n	800bf2e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2201      	movs	r2, #1
 800be22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be2e:	d102      	bne.n	800be36 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800be30:	4b41      	ldr	r3, [pc, #260]	; (800bf38 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800be32:	60bb      	str	r3, [r7, #8]
 800be34:	e001      	b.n	800be3a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800be36:	2300      	movs	r3, #0
 800be38:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d10b      	bne.n	800be58 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be44:	f043 0220 	orr.w	r2, r3, #32
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2200      	movs	r2, #0
 800be50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800be54:	2301      	movs	r3, #1
 800be56:	e06a      	b.n	800bf2e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7ff ff5a 	bl	800bd14 <LL_ADC_REG_IsConversionOngoing>
 800be60:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4618      	mov	r0, r3
 800be68:	f7ff ff54 	bl	800bd14 <LL_ADC_REG_IsConversionOngoing>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d14c      	bne.n	800bf0c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800be72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be74:	2b00      	cmp	r3, #0
 800be76:	d149      	bne.n	800bf0c <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800be78:	4b30      	ldr	r3, [pc, #192]	; (800bf3c <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800be7a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d028      	beq.n	800bed6 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800be84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	6859      	ldr	r1, [r3, #4]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800be96:	035b      	lsls	r3, r3, #13
 800be98:	430b      	orrs	r3, r1
 800be9a:	431a      	orrs	r2, r3
 800be9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be9e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800bea0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800bea4:	f7ff fef6 	bl	800bc94 <LL_ADC_IsEnabled>
 800bea8:	4604      	mov	r4, r0
 800beaa:	4823      	ldr	r0, [pc, #140]	; (800bf38 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800beac:	f7ff fef2 	bl	800bc94 <LL_ADC_IsEnabled>
 800beb0:	4603      	mov	r3, r0
 800beb2:	4323      	orrs	r3, r4
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d133      	bne.n	800bf20 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800beb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800bec0:	f023 030f 	bic.w	r3, r3, #15
 800bec4:	683a      	ldr	r2, [r7, #0]
 800bec6:	6811      	ldr	r1, [r2, #0]
 800bec8:	683a      	ldr	r2, [r7, #0]
 800beca:	6892      	ldr	r2, [r2, #8]
 800becc:	430a      	orrs	r2, r1
 800bece:	431a      	orrs	r2, r3
 800bed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bed2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800bed4:	e024      	b.n	800bf20 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800bed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bed8:	689b      	ldr	r3, [r3, #8]
 800beda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bee0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800bee2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800bee6:	f7ff fed5 	bl	800bc94 <LL_ADC_IsEnabled>
 800beea:	4604      	mov	r4, r0
 800beec:	4812      	ldr	r0, [pc, #72]	; (800bf38 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800beee:	f7ff fed1 	bl	800bc94 <LL_ADC_IsEnabled>
 800bef2:	4603      	mov	r3, r0
 800bef4:	4323      	orrs	r3, r4
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d112      	bne.n	800bf20 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800befa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800befc:	689b      	ldr	r3, [r3, #8]
 800befe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800bf02:	f023 030f 	bic.w	r3, r3, #15
 800bf06:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bf08:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800bf0a:	e009      	b.n	800bf20 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf10:	f043 0220 	orr.w	r2, r3, #32
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800bf1e:	e000      	b.n	800bf22 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800bf20:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800bf2a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3784      	adds	r7, #132	; 0x84
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd90      	pop	{r4, r7, pc}
 800bf36:	bf00      	nop
 800bf38:	50000100 	.word	0x50000100
 800bf3c:	50000300 	.word	0x50000300

0800bf40 <__NVIC_SetPriorityGrouping>:
{
 800bf40:	b480      	push	{r7}
 800bf42:	b085      	sub	sp, #20
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f003 0307 	and.w	r3, r3, #7
 800bf4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bf50:	4b0c      	ldr	r3, [pc, #48]	; (800bf84 <__NVIC_SetPriorityGrouping+0x44>)
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bf56:	68ba      	ldr	r2, [r7, #8]
 800bf58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bf5c:	4013      	ands	r3, r2
 800bf5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bf68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800bf6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bf72:	4a04      	ldr	r2, [pc, #16]	; (800bf84 <__NVIC_SetPriorityGrouping+0x44>)
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	60d3      	str	r3, [r2, #12]
}
 800bf78:	bf00      	nop
 800bf7a:	3714      	adds	r7, #20
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr
 800bf84:	e000ed00 	.word	0xe000ed00

0800bf88 <__NVIC_GetPriorityGrouping>:
{
 800bf88:	b480      	push	{r7}
 800bf8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bf8c:	4b04      	ldr	r3, [pc, #16]	; (800bfa0 <__NVIC_GetPriorityGrouping+0x18>)
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	0a1b      	lsrs	r3, r3, #8
 800bf92:	f003 0307 	and.w	r3, r3, #7
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr
 800bfa0:	e000ed00 	.word	0xe000ed00

0800bfa4 <__NVIC_EnableIRQ>:
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b083      	sub	sp, #12
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	4603      	mov	r3, r0
 800bfac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bfae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	db0b      	blt.n	800bfce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bfb6:	79fb      	ldrb	r3, [r7, #7]
 800bfb8:	f003 021f 	and.w	r2, r3, #31
 800bfbc:	4907      	ldr	r1, [pc, #28]	; (800bfdc <__NVIC_EnableIRQ+0x38>)
 800bfbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfc2:	095b      	lsrs	r3, r3, #5
 800bfc4:	2001      	movs	r0, #1
 800bfc6:	fa00 f202 	lsl.w	r2, r0, r2
 800bfca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bfce:	bf00      	nop
 800bfd0:	370c      	adds	r7, #12
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr
 800bfda:	bf00      	nop
 800bfdc:	e000e100 	.word	0xe000e100

0800bfe0 <__NVIC_SetPriority>:
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	6039      	str	r1, [r7, #0]
 800bfea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bfec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	db0a      	blt.n	800c00a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	b2da      	uxtb	r2, r3
 800bff8:	490c      	ldr	r1, [pc, #48]	; (800c02c <__NVIC_SetPriority+0x4c>)
 800bffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bffe:	0112      	lsls	r2, r2, #4
 800c000:	b2d2      	uxtb	r2, r2
 800c002:	440b      	add	r3, r1
 800c004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c008:	e00a      	b.n	800c020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	b2da      	uxtb	r2, r3
 800c00e:	4908      	ldr	r1, [pc, #32]	; (800c030 <__NVIC_SetPriority+0x50>)
 800c010:	79fb      	ldrb	r3, [r7, #7]
 800c012:	f003 030f 	and.w	r3, r3, #15
 800c016:	3b04      	subs	r3, #4
 800c018:	0112      	lsls	r2, r2, #4
 800c01a:	b2d2      	uxtb	r2, r2
 800c01c:	440b      	add	r3, r1
 800c01e:	761a      	strb	r2, [r3, #24]
}
 800c020:	bf00      	nop
 800c022:	370c      	adds	r7, #12
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr
 800c02c:	e000e100 	.word	0xe000e100
 800c030:	e000ed00 	.word	0xe000ed00

0800c034 <NVIC_EncodePriority>:
{
 800c034:	b480      	push	{r7}
 800c036:	b089      	sub	sp, #36	; 0x24
 800c038:	af00      	add	r7, sp, #0
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f003 0307 	and.w	r3, r3, #7
 800c046:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c048:	69fb      	ldr	r3, [r7, #28]
 800c04a:	f1c3 0307 	rsb	r3, r3, #7
 800c04e:	2b04      	cmp	r3, #4
 800c050:	bf28      	it	cs
 800c052:	2304      	movcs	r3, #4
 800c054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	3304      	adds	r3, #4
 800c05a:	2b06      	cmp	r3, #6
 800c05c:	d902      	bls.n	800c064 <NVIC_EncodePriority+0x30>
 800c05e:	69fb      	ldr	r3, [r7, #28]
 800c060:	3b03      	subs	r3, #3
 800c062:	e000      	b.n	800c066 <NVIC_EncodePriority+0x32>
 800c064:	2300      	movs	r3, #0
 800c066:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	fa02 f303 	lsl.w	r3, r2, r3
 800c072:	43da      	mvns	r2, r3
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	401a      	ands	r2, r3
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c07c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	fa01 f303 	lsl.w	r3, r1, r3
 800c086:	43d9      	mvns	r1, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c08c:	4313      	orrs	r3, r2
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3724      	adds	r7, #36	; 0x24
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr

0800c09a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b082      	sub	sp, #8
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f7ff ff4c 	bl	800bf40 <__NVIC_SetPriorityGrouping>
}
 800c0a8:	bf00      	nop
 800c0aa:	3708      	adds	r7, #8
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b086      	sub	sp, #24
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	60b9      	str	r1, [r7, #8]
 800c0ba:	607a      	str	r2, [r7, #4]
 800c0bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c0be:	f7ff ff63 	bl	800bf88 <__NVIC_GetPriorityGrouping>
 800c0c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	68b9      	ldr	r1, [r7, #8]
 800c0c8:	6978      	ldr	r0, [r7, #20]
 800c0ca:	f7ff ffb3 	bl	800c034 <NVIC_EncodePriority>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0d4:	4611      	mov	r1, r2
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7ff ff82 	bl	800bfe0 <__NVIC_SetPriority>
}
 800c0dc:	bf00      	nop
 800c0de:	3718      	adds	r7, #24
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c0ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7ff ff56 	bl	800bfa4 <__NVIC_EnableIRQ>
}
 800c0f8:	bf00      	nop
 800c0fa:	3708      	adds	r7, #8
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d101      	bne.n	800c112 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800c10e:	2301      	movs	r3, #1
 800c110:	e08d      	b.n	800c22e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	461a      	mov	r2, r3
 800c118:	4b47      	ldr	r3, [pc, #284]	; (800c238 <HAL_DMA_Init+0x138>)
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d80f      	bhi.n	800c13e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	461a      	mov	r2, r3
 800c124:	4b45      	ldr	r3, [pc, #276]	; (800c23c <HAL_DMA_Init+0x13c>)
 800c126:	4413      	add	r3, r2
 800c128:	4a45      	ldr	r2, [pc, #276]	; (800c240 <HAL_DMA_Init+0x140>)
 800c12a:	fba2 2303 	umull	r2, r3, r2, r3
 800c12e:	091b      	lsrs	r3, r3, #4
 800c130:	009a      	lsls	r2, r3, #2
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4a42      	ldr	r2, [pc, #264]	; (800c244 <HAL_DMA_Init+0x144>)
 800c13a:	641a      	str	r2, [r3, #64]	; 0x40
 800c13c:	e00e      	b.n	800c15c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	461a      	mov	r2, r3
 800c144:	4b40      	ldr	r3, [pc, #256]	; (800c248 <HAL_DMA_Init+0x148>)
 800c146:	4413      	add	r3, r2
 800c148:	4a3d      	ldr	r2, [pc, #244]	; (800c240 <HAL_DMA_Init+0x140>)
 800c14a:	fba2 2303 	umull	r2, r3, r2, r3
 800c14e:	091b      	lsrs	r3, r3, #4
 800c150:	009a      	lsls	r2, r3, #2
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	4a3c      	ldr	r2, [pc, #240]	; (800c24c <HAL_DMA_Init+0x14c>)
 800c15a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2202      	movs	r2, #2
 800c160:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c176:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800c180:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	691b      	ldr	r3, [r3, #16]
 800c186:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c18c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	699b      	ldr	r3, [r3, #24]
 800c192:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c198:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6a1b      	ldr	r3, [r3, #32]
 800c19e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800c1a0:	68fa      	ldr	r2, [r7, #12]
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	68fa      	ldr	r2, [r7, #12]
 800c1ac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f000 fa2c 	bl	800c60c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	689b      	ldr	r3, [r3, #8]
 800c1b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1bc:	d102      	bne.n	800c1c4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	685a      	ldr	r2, [r3, #4]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1cc:	b2d2      	uxtb	r2, r2
 800c1ce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c1d8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d010      	beq.n	800c204 <HAL_DMA_Init+0x104>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	2b04      	cmp	r3, #4
 800c1e8:	d80c      	bhi.n	800c204 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f000 fa4c 	bl	800c688 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800c200:	605a      	str	r2, [r3, #4]
 800c202:	e008      	b.n	800c216 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2200      	movs	r2, #0
 800c208:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2200      	movs	r2, #0
 800c20e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2200      	movs	r2, #0
 800c214:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2201      	movs	r2, #1
 800c220:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c22c:	2300      	movs	r3, #0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3710      	adds	r7, #16
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	40020407 	.word	0x40020407
 800c23c:	bffdfff8 	.word	0xbffdfff8
 800c240:	cccccccd 	.word	0xcccccccd
 800c244:	40020000 	.word	0x40020000
 800c248:	bffdfbf8 	.word	0xbffdfbf8
 800c24c:	40020400 	.word	0x40020400

0800c250 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
 800c25c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c25e:	2300      	movs	r3, #0
 800c260:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d101      	bne.n	800c270 <HAL_DMA_Start_IT+0x20>
 800c26c:	2302      	movs	r3, #2
 800c26e:	e066      	b.n	800c33e <HAL_DMA_Start_IT+0xee>
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c27e:	b2db      	uxtb	r3, r3
 800c280:	2b01      	cmp	r3, #1
 800c282:	d155      	bne.n	800c330 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2202      	movs	r2, #2
 800c288:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2200      	movs	r2, #0
 800c290:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	681a      	ldr	r2, [r3, #0]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f022 0201 	bic.w	r2, r2, #1
 800c2a0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	68b9      	ldr	r1, [r7, #8]
 800c2a8:	68f8      	ldr	r0, [r7, #12]
 800c2aa:	f000 f970 	bl	800c58e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d008      	beq.n	800c2c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f042 020e 	orr.w	r2, r2, #14
 800c2c4:	601a      	str	r2, [r3, #0]
 800c2c6:	e00f      	b.n	800c2e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f022 0204 	bic.w	r2, r2, #4
 800c2d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f042 020a 	orr.w	r2, r2, #10
 800c2e6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d007      	beq.n	800c306 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2fa:	681a      	ldr	r2, [r3, #0]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c304:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d007      	beq.n	800c31e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c312:	681a      	ldr	r2, [r3, #0]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c318:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c31c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	681a      	ldr	r2, [r3, #0]
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f042 0201 	orr.w	r2, r2, #1
 800c32c:	601a      	str	r2, [r3, #0]
 800c32e:	e005      	b.n	800c33c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2200      	movs	r2, #0
 800c334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800c338:	2302      	movs	r3, #2
 800c33a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800c33c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3718      	adds	r7, #24
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}

0800c346 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c346:	b580      	push	{r7, lr}
 800c348:	b084      	sub	sp, #16
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c34e:	2300      	movs	r3, #0
 800c350:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	2b02      	cmp	r3, #2
 800c35c:	d00d      	beq.n	800c37a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2204      	movs	r2, #4
 800c362:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2201      	movs	r2, #1
 800c368:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800c374:	2301      	movs	r3, #1
 800c376:	73fb      	strb	r3, [r7, #15]
 800c378:	e047      	b.n	800c40a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	681a      	ldr	r2, [r3, #0]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f022 020e 	bic.w	r2, r2, #14
 800c388:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	681a      	ldr	r2, [r3, #0]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f022 0201 	bic.w	r2, r2, #1
 800c398:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c3a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c3a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ae:	f003 021f 	and.w	r2, r3, #31
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b6:	2101      	movs	r1, #1
 800c3b8:	fa01 f202 	lsl.w	r2, r1, r2
 800c3bc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c3c6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00c      	beq.n	800c3ea <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c3de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800c3e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d003      	beq.n	800c40a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	4798      	blx	r3
    }
  }
  return status;
 800c40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c430:	f003 031f 	and.w	r3, r3, #31
 800c434:	2204      	movs	r2, #4
 800c436:	409a      	lsls	r2, r3
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	4013      	ands	r3, r2
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d026      	beq.n	800c48e <HAL_DMA_IRQHandler+0x7a>
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	f003 0304 	and.w	r3, r3, #4
 800c446:	2b00      	cmp	r3, #0
 800c448:	d021      	beq.n	800c48e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f003 0320 	and.w	r3, r3, #32
 800c454:	2b00      	cmp	r3, #0
 800c456:	d107      	bne.n	800c468 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	681a      	ldr	r2, [r3, #0]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f022 0204 	bic.w	r2, r2, #4
 800c466:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c46c:	f003 021f 	and.w	r2, r3, #31
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c474:	2104      	movs	r1, #4
 800c476:	fa01 f202 	lsl.w	r2, r1, r2
 800c47a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c480:	2b00      	cmp	r3, #0
 800c482:	d071      	beq.n	800c568 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800c48c:	e06c      	b.n	800c568 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c492:	f003 031f 	and.w	r3, r3, #31
 800c496:	2202      	movs	r2, #2
 800c498:	409a      	lsls	r2, r3
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	4013      	ands	r3, r2
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d02e      	beq.n	800c500 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	f003 0302 	and.w	r3, r3, #2
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d029      	beq.n	800c500 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f003 0320 	and.w	r3, r3, #32
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d10b      	bne.n	800c4d2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	681a      	ldr	r2, [r3, #0]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f022 020a 	bic.w	r2, r2, #10
 800c4c8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4d6:	f003 021f 	and.w	r2, r3, #31
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4de:	2102      	movs	r1, #2
 800c4e0:	fa01 f202 	lsl.w	r2, r1, r2
 800c4e4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d038      	beq.n	800c568 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800c4fe:	e033      	b.n	800c568 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c504:	f003 031f 	and.w	r3, r3, #31
 800c508:	2208      	movs	r2, #8
 800c50a:	409a      	lsls	r2, r3
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	4013      	ands	r3, r2
 800c510:	2b00      	cmp	r3, #0
 800c512:	d02a      	beq.n	800c56a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	f003 0308 	and.w	r3, r3, #8
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d025      	beq.n	800c56a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	681a      	ldr	r2, [r3, #0]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f022 020e 	bic.w	r2, r2, #14
 800c52c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c532:	f003 021f 	and.w	r2, r3, #31
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c53a:	2101      	movs	r1, #1
 800c53c:	fa01 f202 	lsl.w	r2, r1, r2
 800c540:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2201      	movs	r2, #1
 800c546:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2201      	movs	r2, #1
 800c54c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2200      	movs	r2, #0
 800c554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d004      	beq.n	800c56a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c568:	bf00      	nop
 800c56a:	bf00      	nop
}
 800c56c:	3710      	adds	r7, #16
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}

0800c572 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800c572:	b480      	push	{r7}
 800c574:	b083      	sub	sp, #12
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c580:	b2db      	uxtb	r3, r3
}
 800c582:	4618      	mov	r0, r3
 800c584:	370c      	adds	r7, #12
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr

0800c58e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c58e:	b480      	push	{r7}
 800c590:	b085      	sub	sp, #20
 800c592:	af00      	add	r7, sp, #0
 800c594:	60f8      	str	r0, [r7, #12]
 800c596:	60b9      	str	r1, [r7, #8]
 800c598:	607a      	str	r2, [r7, #4]
 800c59a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c5a4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d004      	beq.n	800c5b8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5b2:	68fa      	ldr	r2, [r7, #12]
 800c5b4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800c5b6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5bc:	f003 021f 	and.w	r2, r3, #31
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5c4:	2101      	movs	r1, #1
 800c5c6:	fa01 f202 	lsl.w	r2, r1, r2
 800c5ca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	683a      	ldr	r2, [r7, #0]
 800c5d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	689b      	ldr	r3, [r3, #8]
 800c5d8:	2b10      	cmp	r3, #16
 800c5da:	d108      	bne.n	800c5ee <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	68ba      	ldr	r2, [r7, #8]
 800c5ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800c5ec:	e007      	b.n	800c5fe <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	68ba      	ldr	r2, [r7, #8]
 800c5f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	60da      	str	r2, [r3, #12]
}
 800c5fe:	bf00      	nop
 800c600:	3714      	adds	r7, #20
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr
	...

0800c60c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b087      	sub	sp, #28
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	461a      	mov	r2, r3
 800c61a:	4b16      	ldr	r3, [pc, #88]	; (800c674 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d802      	bhi.n	800c626 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800c620:	4b15      	ldr	r3, [pc, #84]	; (800c678 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800c622:	617b      	str	r3, [r7, #20]
 800c624:	e001      	b.n	800c62a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800c626:	4b15      	ldr	r3, [pc, #84]	; (800c67c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800c628:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	b2db      	uxtb	r3, r3
 800c634:	3b08      	subs	r3, #8
 800c636:	4a12      	ldr	r2, [pc, #72]	; (800c680 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800c638:	fba2 2303 	umull	r2, r3, r2, r3
 800c63c:	091b      	lsrs	r3, r3, #4
 800c63e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c644:	089b      	lsrs	r3, r3, #2
 800c646:	009a      	lsls	r2, r3, #2
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	4413      	add	r3, r2
 800c64c:	461a      	mov	r2, r3
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	4a0b      	ldr	r2, [pc, #44]	; (800c684 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800c656:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f003 031f 	and.w	r3, r3, #31
 800c65e:	2201      	movs	r2, #1
 800c660:	409a      	lsls	r2, r3
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c666:	bf00      	nop
 800c668:	371c      	adds	r7, #28
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr
 800c672:	bf00      	nop
 800c674:	40020407 	.word	0x40020407
 800c678:	40020800 	.word	0x40020800
 800c67c:	40020820 	.word	0x40020820
 800c680:	cccccccd 	.word	0xcccccccd
 800c684:	40020880 	.word	0x40020880

0800c688 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c688:	b480      	push	{r7}
 800c68a:	b085      	sub	sp, #20
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	b2db      	uxtb	r3, r3
 800c696:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c698:	68fa      	ldr	r2, [r7, #12]
 800c69a:	4b0b      	ldr	r3, [pc, #44]	; (800c6c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800c69c:	4413      	add	r3, r2
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	4a08      	ldr	r2, [pc, #32]	; (800c6cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800c6aa:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	3b01      	subs	r3, #1
 800c6b0:	f003 031f 	and.w	r3, r3, #31
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	409a      	lsls	r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800c6bc:	bf00      	nop
 800c6be:	3714      	adds	r7, #20
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr
 800c6c8:	1000823f 	.word	0x1000823f
 800c6cc:	40020940 	.word	0x40020940

0800c6d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b087      	sub	sp, #28
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c6de:	e15a      	b.n	800c996 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	2101      	movs	r1, #1
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	fa01 f303 	lsl.w	r3, r1, r3
 800c6ec:	4013      	ands	r3, r2
 800c6ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	f000 814c 	beq.w	800c990 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d003      	beq.n	800c708 <HAL_GPIO_Init+0x38>
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	2b12      	cmp	r3, #18
 800c706:	d123      	bne.n	800c750 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	08da      	lsrs	r2, r3, #3
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	3208      	adds	r2, #8
 800c710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c714:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	f003 0307 	and.w	r3, r3, #7
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	220f      	movs	r2, #15
 800c720:	fa02 f303 	lsl.w	r3, r2, r3
 800c724:	43db      	mvns	r3, r3
 800c726:	693a      	ldr	r2, [r7, #16]
 800c728:	4013      	ands	r3, r2
 800c72a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	691a      	ldr	r2, [r3, #16]
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	f003 0307 	and.w	r3, r3, #7
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	fa02 f303 	lsl.w	r3, r2, r3
 800c73c:	693a      	ldr	r2, [r7, #16]
 800c73e:	4313      	orrs	r3, r2
 800c740:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	08da      	lsrs	r2, r3, #3
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	3208      	adds	r2, #8
 800c74a:	6939      	ldr	r1, [r7, #16]
 800c74c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	005b      	lsls	r3, r3, #1
 800c75a:	2203      	movs	r2, #3
 800c75c:	fa02 f303 	lsl.w	r3, r2, r3
 800c760:	43db      	mvns	r3, r3
 800c762:	693a      	ldr	r2, [r7, #16]
 800c764:	4013      	ands	r3, r2
 800c766:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	f003 0203 	and.w	r2, r3, #3
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	005b      	lsls	r3, r3, #1
 800c774:	fa02 f303 	lsl.w	r3, r2, r3
 800c778:	693a      	ldr	r2, [r7, #16]
 800c77a:	4313      	orrs	r3, r2
 800c77c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	693a      	ldr	r2, [r7, #16]
 800c782:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d00b      	beq.n	800c7a4 <HAL_GPIO_Init+0xd4>
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	2b02      	cmp	r3, #2
 800c792:	d007      	beq.n	800c7a4 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c798:	2b11      	cmp	r3, #17
 800c79a:	d003      	beq.n	800c7a4 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	2b12      	cmp	r3, #18
 800c7a2:	d130      	bne.n	800c806 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	689b      	ldr	r3, [r3, #8]
 800c7a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	005b      	lsls	r3, r3, #1
 800c7ae:	2203      	movs	r2, #3
 800c7b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c7b4:	43db      	mvns	r3, r3
 800c7b6:	693a      	ldr	r2, [r7, #16]
 800c7b8:	4013      	ands	r3, r2
 800c7ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	68da      	ldr	r2, [r3, #12]
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	005b      	lsls	r3, r3, #1
 800c7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c7c8:	693a      	ldr	r2, [r7, #16]
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	693a      	ldr	r2, [r7, #16]
 800c7d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c7da:	2201      	movs	r2, #1
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	fa02 f303 	lsl.w	r3, r2, r3
 800c7e2:	43db      	mvns	r3, r3
 800c7e4:	693a      	ldr	r2, [r7, #16]
 800c7e6:	4013      	ands	r3, r2
 800c7e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	091b      	lsrs	r3, r3, #4
 800c7f0:	f003 0201 	and.w	r2, r3, #1
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c7fa:	693a      	ldr	r2, [r7, #16]
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	693a      	ldr	r2, [r7, #16]
 800c804:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	005b      	lsls	r3, r3, #1
 800c810:	2203      	movs	r2, #3
 800c812:	fa02 f303 	lsl.w	r3, r2, r3
 800c816:	43db      	mvns	r3, r3
 800c818:	693a      	ldr	r2, [r7, #16]
 800c81a:	4013      	ands	r3, r2
 800c81c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	689a      	ldr	r2, [r3, #8]
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	005b      	lsls	r3, r3, #1
 800c826:	fa02 f303 	lsl.w	r3, r2, r3
 800c82a:	693a      	ldr	r2, [r7, #16]
 800c82c:	4313      	orrs	r3, r2
 800c82e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	693a      	ldr	r2, [r7, #16]
 800c834:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c83e:	2b00      	cmp	r3, #0
 800c840:	f000 80a6 	beq.w	800c990 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c844:	4b5b      	ldr	r3, [pc, #364]	; (800c9b4 <HAL_GPIO_Init+0x2e4>)
 800c846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c848:	4a5a      	ldr	r2, [pc, #360]	; (800c9b4 <HAL_GPIO_Init+0x2e4>)
 800c84a:	f043 0301 	orr.w	r3, r3, #1
 800c84e:	6613      	str	r3, [r2, #96]	; 0x60
 800c850:	4b58      	ldr	r3, [pc, #352]	; (800c9b4 <HAL_GPIO_Init+0x2e4>)
 800c852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c854:	f003 0301 	and.w	r3, r3, #1
 800c858:	60bb      	str	r3, [r7, #8]
 800c85a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c85c:	4a56      	ldr	r2, [pc, #344]	; (800c9b8 <HAL_GPIO_Init+0x2e8>)
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	089b      	lsrs	r3, r3, #2
 800c862:	3302      	adds	r3, #2
 800c864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c868:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	f003 0303 	and.w	r3, r3, #3
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	220f      	movs	r2, #15
 800c874:	fa02 f303 	lsl.w	r3, r2, r3
 800c878:	43db      	mvns	r3, r3
 800c87a:	693a      	ldr	r2, [r7, #16]
 800c87c:	4013      	ands	r3, r2
 800c87e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c886:	d01f      	beq.n	800c8c8 <HAL_GPIO_Init+0x1f8>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	4a4c      	ldr	r2, [pc, #304]	; (800c9bc <HAL_GPIO_Init+0x2ec>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d019      	beq.n	800c8c4 <HAL_GPIO_Init+0x1f4>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	4a4b      	ldr	r2, [pc, #300]	; (800c9c0 <HAL_GPIO_Init+0x2f0>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d013      	beq.n	800c8c0 <HAL_GPIO_Init+0x1f0>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	4a4a      	ldr	r2, [pc, #296]	; (800c9c4 <HAL_GPIO_Init+0x2f4>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d00d      	beq.n	800c8bc <HAL_GPIO_Init+0x1ec>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	4a49      	ldr	r2, [pc, #292]	; (800c9c8 <HAL_GPIO_Init+0x2f8>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d007      	beq.n	800c8b8 <HAL_GPIO_Init+0x1e8>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	4a48      	ldr	r2, [pc, #288]	; (800c9cc <HAL_GPIO_Init+0x2fc>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d101      	bne.n	800c8b4 <HAL_GPIO_Init+0x1e4>
 800c8b0:	2305      	movs	r3, #5
 800c8b2:	e00a      	b.n	800c8ca <HAL_GPIO_Init+0x1fa>
 800c8b4:	2306      	movs	r3, #6
 800c8b6:	e008      	b.n	800c8ca <HAL_GPIO_Init+0x1fa>
 800c8b8:	2304      	movs	r3, #4
 800c8ba:	e006      	b.n	800c8ca <HAL_GPIO_Init+0x1fa>
 800c8bc:	2303      	movs	r3, #3
 800c8be:	e004      	b.n	800c8ca <HAL_GPIO_Init+0x1fa>
 800c8c0:	2302      	movs	r3, #2
 800c8c2:	e002      	b.n	800c8ca <HAL_GPIO_Init+0x1fa>
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	e000      	b.n	800c8ca <HAL_GPIO_Init+0x1fa>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	697a      	ldr	r2, [r7, #20]
 800c8cc:	f002 0203 	and.w	r2, r2, #3
 800c8d0:	0092      	lsls	r2, r2, #2
 800c8d2:	4093      	lsls	r3, r2
 800c8d4:	693a      	ldr	r2, [r7, #16]
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c8da:	4937      	ldr	r1, [pc, #220]	; (800c9b8 <HAL_GPIO_Init+0x2e8>)
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	089b      	lsrs	r3, r3, #2
 800c8e0:	3302      	adds	r3, #2
 800c8e2:	693a      	ldr	r2, [r7, #16]
 800c8e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800c8e8:	4b39      	ldr	r3, [pc, #228]	; (800c9d0 <HAL_GPIO_Init+0x300>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	43db      	mvns	r3, r3
 800c8f2:	693a      	ldr	r2, [r7, #16]
 800c8f4:	4013      	ands	r3, r2
 800c8f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c900:	2b00      	cmp	r3, #0
 800c902:	d003      	beq.n	800c90c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800c904:	693a      	ldr	r2, [r7, #16]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	4313      	orrs	r3, r2
 800c90a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c90c:	4a30      	ldr	r2, [pc, #192]	; (800c9d0 <HAL_GPIO_Init+0x300>)
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800c912:	4b2f      	ldr	r3, [pc, #188]	; (800c9d0 <HAL_GPIO_Init+0x300>)
 800c914:	685b      	ldr	r3, [r3, #4]
 800c916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	43db      	mvns	r3, r3
 800c91c:	693a      	ldr	r2, [r7, #16]
 800c91e:	4013      	ands	r3, r2
 800c920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d003      	beq.n	800c936 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800c92e:	693a      	ldr	r2, [r7, #16]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	4313      	orrs	r3, r2
 800c934:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c936:	4a26      	ldr	r2, [pc, #152]	; (800c9d0 <HAL_GPIO_Init+0x300>)
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c93c:	4b24      	ldr	r3, [pc, #144]	; (800c9d0 <HAL_GPIO_Init+0x300>)
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	43db      	mvns	r3, r3
 800c946:	693a      	ldr	r2, [r7, #16]
 800c948:	4013      	ands	r3, r2
 800c94a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c954:	2b00      	cmp	r3, #0
 800c956:	d003      	beq.n	800c960 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800c958:	693a      	ldr	r2, [r7, #16]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	4313      	orrs	r3, r2
 800c95e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c960:	4a1b      	ldr	r2, [pc, #108]	; (800c9d0 <HAL_GPIO_Init+0x300>)
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c966:	4b1a      	ldr	r3, [pc, #104]	; (800c9d0 <HAL_GPIO_Init+0x300>)
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	43db      	mvns	r3, r3
 800c970:	693a      	ldr	r2, [r7, #16]
 800c972:	4013      	ands	r3, r2
 800c974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d003      	beq.n	800c98a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800c982:	693a      	ldr	r2, [r7, #16]
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	4313      	orrs	r3, r2
 800c988:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c98a:	4a11      	ldr	r2, [pc, #68]	; (800c9d0 <HAL_GPIO_Init+0x300>)
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	3301      	adds	r3, #1
 800c994:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	681a      	ldr	r2, [r3, #0]
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	fa22 f303 	lsr.w	r3, r2, r3
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	f47f ae9d 	bne.w	800c6e0 <HAL_GPIO_Init+0x10>
  }
}
 800c9a6:	bf00      	nop
 800c9a8:	371c      	adds	r7, #28
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop
 800c9b4:	40021000 	.word	0x40021000
 800c9b8:	40010000 	.word	0x40010000
 800c9bc:	48000400 	.word	0x48000400
 800c9c0:	48000800 	.word	0x48000800
 800c9c4:	48000c00 	.word	0x48000c00
 800c9c8:	48001000 	.word	0x48001000
 800c9cc:	48001400 	.word	0x48001400
 800c9d0:	40010400 	.word	0x40010400

0800c9d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b085      	sub	sp, #20
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	460b      	mov	r3, r1
 800c9de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	691a      	ldr	r2, [r3, #16]
 800c9e4:	887b      	ldrh	r3, [r7, #2]
 800c9e6:	4013      	ands	r3, r2
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d002      	beq.n	800c9f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	73fb      	strb	r3, [r7, #15]
 800c9f0:	e001      	b.n	800c9f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c9f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3714      	adds	r7, #20
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr

0800ca04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	807b      	strh	r3, [r7, #2]
 800ca10:	4613      	mov	r3, r2
 800ca12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ca14:	787b      	ldrb	r3, [r7, #1]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d003      	beq.n	800ca22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ca1a:	887a      	ldrh	r2, [r7, #2]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ca20:	e002      	b.n	800ca28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ca22:	887a      	ldrh	r2, [r7, #2]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ca28:	bf00      	nop
 800ca2a:	370c      	adds	r7, #12
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr

0800ca34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800ca3e:	4b08      	ldr	r3, [pc, #32]	; (800ca60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ca40:	695a      	ldr	r2, [r3, #20]
 800ca42:	88fb      	ldrh	r3, [r7, #6]
 800ca44:	4013      	ands	r3, r2
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d006      	beq.n	800ca58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ca4a:	4a05      	ldr	r2, [pc, #20]	; (800ca60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ca4c:	88fb      	ldrh	r3, [r7, #6]
 800ca4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ca50:	88fb      	ldrh	r3, [r7, #6]
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7fd f80a 	bl	8009a6c <HAL_GPIO_EXTI_Callback>
  }
}
 800ca58:	bf00      	nop
 800ca5a:	3708      	adds	r7, #8
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	40010400 	.word	0x40010400

0800ca64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ca64:	b480      	push	{r7}
 800ca66:	b085      	sub	sp, #20
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d141      	bne.n	800caf6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ca72:	4b4b      	ldr	r3, [pc, #300]	; (800cba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ca7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca7e:	d131      	bne.n	800cae4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ca80:	4b47      	ldr	r3, [pc, #284]	; (800cba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca86:	4a46      	ldr	r2, [pc, #280]	; (800cba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ca90:	4b43      	ldr	r3, [pc, #268]	; (800cba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ca98:	4a41      	ldr	r2, [pc, #260]	; (800cba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ca9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800caa0:	4b40      	ldr	r3, [pc, #256]	; (800cba4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	2232      	movs	r2, #50	; 0x32
 800caa6:	fb02 f303 	mul.w	r3, r2, r3
 800caaa:	4a3f      	ldr	r2, [pc, #252]	; (800cba8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800caac:	fba2 2303 	umull	r2, r3, r2, r3
 800cab0:	0c9b      	lsrs	r3, r3, #18
 800cab2:	3301      	adds	r3, #1
 800cab4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cab6:	e002      	b.n	800cabe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	3b01      	subs	r3, #1
 800cabc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cabe:	4b38      	ldr	r3, [pc, #224]	; (800cba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cac0:	695b      	ldr	r3, [r3, #20]
 800cac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800caca:	d102      	bne.n	800cad2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d1f2      	bne.n	800cab8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cad2:	4b33      	ldr	r3, [pc, #204]	; (800cba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cad4:	695b      	ldr	r3, [r3, #20]
 800cad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cade:	d158      	bne.n	800cb92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800cae0:	2303      	movs	r3, #3
 800cae2:	e057      	b.n	800cb94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cae4:	4b2e      	ldr	r3, [pc, #184]	; (800cba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800caea:	4a2d      	ldr	r2, [pc, #180]	; (800cba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800caec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800caf0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800caf4:	e04d      	b.n	800cb92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cafc:	d141      	bne.n	800cb82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800cafe:	4b28      	ldr	r3, [pc, #160]	; (800cba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cb06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb0a:	d131      	bne.n	800cb70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cb0c:	4b24      	ldr	r3, [pc, #144]	; (800cba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb12:	4a23      	ldr	r2, [pc, #140]	; (800cba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cb1c:	4b20      	ldr	r3, [pc, #128]	; (800cba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cb24:	4a1e      	ldr	r2, [pc, #120]	; (800cba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cb2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800cb2c:	4b1d      	ldr	r3, [pc, #116]	; (800cba4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2232      	movs	r2, #50	; 0x32
 800cb32:	fb02 f303 	mul.w	r3, r2, r3
 800cb36:	4a1c      	ldr	r2, [pc, #112]	; (800cba8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800cb38:	fba2 2303 	umull	r2, r3, r2, r3
 800cb3c:	0c9b      	lsrs	r3, r3, #18
 800cb3e:	3301      	adds	r3, #1
 800cb40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cb42:	e002      	b.n	800cb4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	3b01      	subs	r3, #1
 800cb48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cb4a:	4b15      	ldr	r3, [pc, #84]	; (800cba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb4c:	695b      	ldr	r3, [r3, #20]
 800cb4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb56:	d102      	bne.n	800cb5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d1f2      	bne.n	800cb44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cb5e:	4b10      	ldr	r3, [pc, #64]	; (800cba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb60:	695b      	ldr	r3, [r3, #20]
 800cb62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb6a:	d112      	bne.n	800cb92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800cb6c:	2303      	movs	r3, #3
 800cb6e:	e011      	b.n	800cb94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cb70:	4b0b      	ldr	r3, [pc, #44]	; (800cba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb76:	4a0a      	ldr	r2, [pc, #40]	; (800cba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800cb80:	e007      	b.n	800cb92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800cb82:	4b07      	ldr	r3, [pc, #28]	; (800cba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cb8a:	4a05      	ldr	r2, [pc, #20]	; (800cba0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cb90:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800cb92:	2300      	movs	r3, #0
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3714      	adds	r7, #20
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr
 800cba0:	40007000 	.word	0x40007000
 800cba4:	2000000c 	.word	0x2000000c
 800cba8:	431bde83 	.word	0x431bde83

0800cbac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b088      	sub	sp, #32
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d101      	bne.n	800cbbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e308      	b.n	800d1d0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f003 0301 	and.w	r3, r3, #1
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d075      	beq.n	800ccb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cbca:	4ba3      	ldr	r3, [pc, #652]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cbcc:	689b      	ldr	r3, [r3, #8]
 800cbce:	f003 030c 	and.w	r3, r3, #12
 800cbd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cbd4:	4ba0      	ldr	r3, [pc, #640]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	f003 0303 	and.w	r3, r3, #3
 800cbdc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800cbde:	69bb      	ldr	r3, [r7, #24]
 800cbe0:	2b0c      	cmp	r3, #12
 800cbe2:	d102      	bne.n	800cbea <HAL_RCC_OscConfig+0x3e>
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	2b03      	cmp	r3, #3
 800cbe8:	d002      	beq.n	800cbf0 <HAL_RCC_OscConfig+0x44>
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	2b08      	cmp	r3, #8
 800cbee:	d10b      	bne.n	800cc08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cbf0:	4b99      	ldr	r3, [pc, #612]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d05b      	beq.n	800ccb4 <HAL_RCC_OscConfig+0x108>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d157      	bne.n	800ccb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800cc04:	2301      	movs	r3, #1
 800cc06:	e2e3      	b.n	800d1d0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc10:	d106      	bne.n	800cc20 <HAL_RCC_OscConfig+0x74>
 800cc12:	4b91      	ldr	r3, [pc, #580]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a90      	ldr	r2, [pc, #576]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cc18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc1c:	6013      	str	r3, [r2, #0]
 800cc1e:	e01d      	b.n	800cc5c <HAL_RCC_OscConfig+0xb0>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cc28:	d10c      	bne.n	800cc44 <HAL_RCC_OscConfig+0x98>
 800cc2a:	4b8b      	ldr	r3, [pc, #556]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	4a8a      	ldr	r2, [pc, #552]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cc30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cc34:	6013      	str	r3, [r2, #0]
 800cc36:	4b88      	ldr	r3, [pc, #544]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a87      	ldr	r2, [pc, #540]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cc3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc40:	6013      	str	r3, [r2, #0]
 800cc42:	e00b      	b.n	800cc5c <HAL_RCC_OscConfig+0xb0>
 800cc44:	4b84      	ldr	r3, [pc, #528]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a83      	ldr	r2, [pc, #524]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cc4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc4e:	6013      	str	r3, [r2, #0]
 800cc50:	4b81      	ldr	r3, [pc, #516]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4a80      	ldr	r2, [pc, #512]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cc56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cc5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d013      	beq.n	800cc8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc64:	f7fd ff70 	bl	800ab48 <HAL_GetTick>
 800cc68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cc6a:	e008      	b.n	800cc7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc6c:	f7fd ff6c 	bl	800ab48 <HAL_GetTick>
 800cc70:	4602      	mov	r2, r0
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	1ad3      	subs	r3, r2, r3
 800cc76:	2b64      	cmp	r3, #100	; 0x64
 800cc78:	d901      	bls.n	800cc7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800cc7a:	2303      	movs	r3, #3
 800cc7c:	e2a8      	b.n	800d1d0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cc7e:	4b76      	ldr	r3, [pc, #472]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d0f0      	beq.n	800cc6c <HAL_RCC_OscConfig+0xc0>
 800cc8a:	e014      	b.n	800ccb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc8c:	f7fd ff5c 	bl	800ab48 <HAL_GetTick>
 800cc90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cc92:	e008      	b.n	800cca6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc94:	f7fd ff58 	bl	800ab48 <HAL_GetTick>
 800cc98:	4602      	mov	r2, r0
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	1ad3      	subs	r3, r2, r3
 800cc9e:	2b64      	cmp	r3, #100	; 0x64
 800cca0:	d901      	bls.n	800cca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cca2:	2303      	movs	r3, #3
 800cca4:	e294      	b.n	800d1d0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cca6:	4b6c      	ldr	r3, [pc, #432]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d1f0      	bne.n	800cc94 <HAL_RCC_OscConfig+0xe8>
 800ccb2:	e000      	b.n	800ccb6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ccb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f003 0302 	and.w	r3, r3, #2
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d075      	beq.n	800cdae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ccc2:	4b65      	ldr	r3, [pc, #404]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	f003 030c 	and.w	r3, r3, #12
 800ccca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cccc:	4b62      	ldr	r3, [pc, #392]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	f003 0303 	and.w	r3, r3, #3
 800ccd4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	2b0c      	cmp	r3, #12
 800ccda:	d102      	bne.n	800cce2 <HAL_RCC_OscConfig+0x136>
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	2b02      	cmp	r3, #2
 800cce0:	d002      	beq.n	800cce8 <HAL_RCC_OscConfig+0x13c>
 800cce2:	69bb      	ldr	r3, [r7, #24]
 800cce4:	2b04      	cmp	r3, #4
 800cce6:	d11f      	bne.n	800cd28 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cce8:	4b5b      	ldr	r3, [pc, #364]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d005      	beq.n	800cd00 <HAL_RCC_OscConfig+0x154>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d101      	bne.n	800cd00 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	e267      	b.n	800d1d0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd00:	4b55      	ldr	r3, [pc, #340]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	691b      	ldr	r3, [r3, #16]
 800cd0c:	061b      	lsls	r3, r3, #24
 800cd0e:	4952      	ldr	r1, [pc, #328]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cd10:	4313      	orrs	r3, r2
 800cd12:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800cd14:	4b51      	ldr	r3, [pc, #324]	; (800ce5c <HAL_RCC_OscConfig+0x2b0>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7fc ffc9 	bl	8009cb0 <HAL_InitTick>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d043      	beq.n	800cdac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800cd24:	2301      	movs	r3, #1
 800cd26:	e253      	b.n	800d1d0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	68db      	ldr	r3, [r3, #12]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d023      	beq.n	800cd78 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cd30:	4b49      	ldr	r3, [pc, #292]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a48      	ldr	r2, [pc, #288]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cd36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd3c:	f7fd ff04 	bl	800ab48 <HAL_GetTick>
 800cd40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cd42:	e008      	b.n	800cd56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cd44:	f7fd ff00 	bl	800ab48 <HAL_GetTick>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	1ad3      	subs	r3, r2, r3
 800cd4e:	2b02      	cmp	r3, #2
 800cd50:	d901      	bls.n	800cd56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800cd52:	2303      	movs	r3, #3
 800cd54:	e23c      	b.n	800d1d0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cd56:	4b40      	ldr	r3, [pc, #256]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d0f0      	beq.n	800cd44 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd62:	4b3d      	ldr	r3, [pc, #244]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	691b      	ldr	r3, [r3, #16]
 800cd6e:	061b      	lsls	r3, r3, #24
 800cd70:	4939      	ldr	r1, [pc, #228]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cd72:	4313      	orrs	r3, r2
 800cd74:	604b      	str	r3, [r1, #4]
 800cd76:	e01a      	b.n	800cdae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cd78:	4b37      	ldr	r3, [pc, #220]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a36      	ldr	r2, [pc, #216]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cd7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd84:	f7fd fee0 	bl	800ab48 <HAL_GetTick>
 800cd88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cd8a:	e008      	b.n	800cd9e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cd8c:	f7fd fedc 	bl	800ab48 <HAL_GetTick>
 800cd90:	4602      	mov	r2, r0
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	1ad3      	subs	r3, r2, r3
 800cd96:	2b02      	cmp	r3, #2
 800cd98:	d901      	bls.n	800cd9e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800cd9a:	2303      	movs	r3, #3
 800cd9c:	e218      	b.n	800d1d0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cd9e:	4b2e      	ldr	r3, [pc, #184]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d1f0      	bne.n	800cd8c <HAL_RCC_OscConfig+0x1e0>
 800cdaa:	e000      	b.n	800cdae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cdac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f003 0308 	and.w	r3, r3, #8
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d03c      	beq.n	800ce34 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	695b      	ldr	r3, [r3, #20]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d01c      	beq.n	800cdfc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cdc2:	4b25      	ldr	r3, [pc, #148]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cdc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cdc8:	4a23      	ldr	r2, [pc, #140]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cdca:	f043 0301 	orr.w	r3, r3, #1
 800cdce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cdd2:	f7fd feb9 	bl	800ab48 <HAL_GetTick>
 800cdd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cdd8:	e008      	b.n	800cdec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cdda:	f7fd feb5 	bl	800ab48 <HAL_GetTick>
 800cdde:	4602      	mov	r2, r0
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	1ad3      	subs	r3, r2, r3
 800cde4:	2b02      	cmp	r3, #2
 800cde6:	d901      	bls.n	800cdec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800cde8:	2303      	movs	r3, #3
 800cdea:	e1f1      	b.n	800d1d0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cdec:	4b1a      	ldr	r3, [pc, #104]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cdee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cdf2:	f003 0302 	and.w	r3, r3, #2
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d0ef      	beq.n	800cdda <HAL_RCC_OscConfig+0x22e>
 800cdfa:	e01b      	b.n	800ce34 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cdfc:	4b16      	ldr	r3, [pc, #88]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800cdfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce02:	4a15      	ldr	r2, [pc, #84]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800ce04:	f023 0301 	bic.w	r3, r3, #1
 800ce08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce0c:	f7fd fe9c 	bl	800ab48 <HAL_GetTick>
 800ce10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ce12:	e008      	b.n	800ce26 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ce14:	f7fd fe98 	bl	800ab48 <HAL_GetTick>
 800ce18:	4602      	mov	r2, r0
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	1ad3      	subs	r3, r2, r3
 800ce1e:	2b02      	cmp	r3, #2
 800ce20:	d901      	bls.n	800ce26 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800ce22:	2303      	movs	r3, #3
 800ce24:	e1d4      	b.n	800d1d0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ce26:	4b0c      	ldr	r3, [pc, #48]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800ce28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ce2c:	f003 0302 	and.w	r3, r3, #2
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d1ef      	bne.n	800ce14 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f003 0304 	and.w	r3, r3, #4
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	f000 80ab 	beq.w	800cf98 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ce42:	2300      	movs	r3, #0
 800ce44:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ce46:	4b04      	ldr	r3, [pc, #16]	; (800ce58 <HAL_RCC_OscConfig+0x2ac>)
 800ce48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d106      	bne.n	800ce60 <HAL_RCC_OscConfig+0x2b4>
 800ce52:	2301      	movs	r3, #1
 800ce54:	e005      	b.n	800ce62 <HAL_RCC_OscConfig+0x2b6>
 800ce56:	bf00      	nop
 800ce58:	40021000 	.word	0x40021000
 800ce5c:	20000010 	.word	0x20000010
 800ce60:	2300      	movs	r3, #0
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d00d      	beq.n	800ce82 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ce66:	4baf      	ldr	r3, [pc, #700]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800ce68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce6a:	4aae      	ldr	r2, [pc, #696]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800ce6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce70:	6593      	str	r3, [r2, #88]	; 0x58
 800ce72:	4bac      	ldr	r3, [pc, #688]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800ce74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce7a:	60fb      	str	r3, [r7, #12]
 800ce7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ce7e:	2301      	movs	r3, #1
 800ce80:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ce82:	4ba9      	ldr	r3, [pc, #676]	; (800d128 <HAL_RCC_OscConfig+0x57c>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d118      	bne.n	800cec0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ce8e:	4ba6      	ldr	r3, [pc, #664]	; (800d128 <HAL_RCC_OscConfig+0x57c>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4aa5      	ldr	r2, [pc, #660]	; (800d128 <HAL_RCC_OscConfig+0x57c>)
 800ce94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ce9a:	f7fd fe55 	bl	800ab48 <HAL_GetTick>
 800ce9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cea0:	e008      	b.n	800ceb4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cea2:	f7fd fe51 	bl	800ab48 <HAL_GetTick>
 800cea6:	4602      	mov	r2, r0
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	1ad3      	subs	r3, r2, r3
 800ceac:	2b02      	cmp	r3, #2
 800ceae:	d901      	bls.n	800ceb4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800ceb0:	2303      	movs	r3, #3
 800ceb2:	e18d      	b.n	800d1d0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ceb4:	4b9c      	ldr	r3, [pc, #624]	; (800d128 <HAL_RCC_OscConfig+0x57c>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d0f0      	beq.n	800cea2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	689b      	ldr	r3, [r3, #8]
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d108      	bne.n	800ceda <HAL_RCC_OscConfig+0x32e>
 800cec8:	4b96      	ldr	r3, [pc, #600]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800ceca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cece:	4a95      	ldr	r2, [pc, #596]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800ced0:	f043 0301 	orr.w	r3, r3, #1
 800ced4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ced8:	e024      	b.n	800cf24 <HAL_RCC_OscConfig+0x378>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	689b      	ldr	r3, [r3, #8]
 800cede:	2b05      	cmp	r3, #5
 800cee0:	d110      	bne.n	800cf04 <HAL_RCC_OscConfig+0x358>
 800cee2:	4b90      	ldr	r3, [pc, #576]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800cee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cee8:	4a8e      	ldr	r2, [pc, #568]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800ceea:	f043 0304 	orr.w	r3, r3, #4
 800ceee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cef2:	4b8c      	ldr	r3, [pc, #560]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800cef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cef8:	4a8a      	ldr	r2, [pc, #552]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800cefa:	f043 0301 	orr.w	r3, r3, #1
 800cefe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cf02:	e00f      	b.n	800cf24 <HAL_RCC_OscConfig+0x378>
 800cf04:	4b87      	ldr	r3, [pc, #540]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800cf06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf0a:	4a86      	ldr	r2, [pc, #536]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800cf0c:	f023 0301 	bic.w	r3, r3, #1
 800cf10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cf14:	4b83      	ldr	r3, [pc, #524]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800cf16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf1a:	4a82      	ldr	r2, [pc, #520]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800cf1c:	f023 0304 	bic.w	r3, r3, #4
 800cf20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	689b      	ldr	r3, [r3, #8]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d016      	beq.n	800cf5a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf2c:	f7fd fe0c 	bl	800ab48 <HAL_GetTick>
 800cf30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cf32:	e00a      	b.n	800cf4a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf34:	f7fd fe08 	bl	800ab48 <HAL_GetTick>
 800cf38:	4602      	mov	r2, r0
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	1ad3      	subs	r3, r2, r3
 800cf3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d901      	bls.n	800cf4a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800cf46:	2303      	movs	r3, #3
 800cf48:	e142      	b.n	800d1d0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cf4a:	4b76      	ldr	r3, [pc, #472]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800cf4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf50:	f003 0302 	and.w	r3, r3, #2
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d0ed      	beq.n	800cf34 <HAL_RCC_OscConfig+0x388>
 800cf58:	e015      	b.n	800cf86 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf5a:	f7fd fdf5 	bl	800ab48 <HAL_GetTick>
 800cf5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cf60:	e00a      	b.n	800cf78 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf62:	f7fd fdf1 	bl	800ab48 <HAL_GetTick>
 800cf66:	4602      	mov	r2, r0
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	1ad3      	subs	r3, r2, r3
 800cf6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d901      	bls.n	800cf78 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800cf74:	2303      	movs	r3, #3
 800cf76:	e12b      	b.n	800d1d0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cf78:	4b6a      	ldr	r3, [pc, #424]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800cf7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf7e:	f003 0302 	and.w	r3, r3, #2
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d1ed      	bne.n	800cf62 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cf86:	7ffb      	ldrb	r3, [r7, #31]
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d105      	bne.n	800cf98 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cf8c:	4b65      	ldr	r3, [pc, #404]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800cf8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf90:	4a64      	ldr	r2, [pc, #400]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800cf92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f003 0320 	and.w	r3, r3, #32
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d03c      	beq.n	800d01e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	699b      	ldr	r3, [r3, #24]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d01c      	beq.n	800cfe6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cfac:	4b5d      	ldr	r3, [pc, #372]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800cfae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cfb2:	4a5c      	ldr	r2, [pc, #368]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800cfb4:	f043 0301 	orr.w	r3, r3, #1
 800cfb8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfbc:	f7fd fdc4 	bl	800ab48 <HAL_GetTick>
 800cfc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cfc2:	e008      	b.n	800cfd6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cfc4:	f7fd fdc0 	bl	800ab48 <HAL_GetTick>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	1ad3      	subs	r3, r2, r3
 800cfce:	2b02      	cmp	r3, #2
 800cfd0:	d901      	bls.n	800cfd6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800cfd2:	2303      	movs	r3, #3
 800cfd4:	e0fc      	b.n	800d1d0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cfd6:	4b53      	ldr	r3, [pc, #332]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800cfd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cfdc:	f003 0302 	and.w	r3, r3, #2
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d0ef      	beq.n	800cfc4 <HAL_RCC_OscConfig+0x418>
 800cfe4:	e01b      	b.n	800d01e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cfe6:	4b4f      	ldr	r3, [pc, #316]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800cfe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cfec:	4a4d      	ldr	r2, [pc, #308]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800cfee:	f023 0301 	bic.w	r3, r3, #1
 800cff2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cff6:	f7fd fda7 	bl	800ab48 <HAL_GetTick>
 800cffa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cffc:	e008      	b.n	800d010 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cffe:	f7fd fda3 	bl	800ab48 <HAL_GetTick>
 800d002:	4602      	mov	r2, r0
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	1ad3      	subs	r3, r2, r3
 800d008:	2b02      	cmp	r3, #2
 800d00a:	d901      	bls.n	800d010 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800d00c:	2303      	movs	r3, #3
 800d00e:	e0df      	b.n	800d1d0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d010:	4b44      	ldr	r3, [pc, #272]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800d012:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d016:	f003 0302 	and.w	r3, r3, #2
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d1ef      	bne.n	800cffe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	69db      	ldr	r3, [r3, #28]
 800d022:	2b00      	cmp	r3, #0
 800d024:	f000 80d3 	beq.w	800d1ce <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d028:	4b3e      	ldr	r3, [pc, #248]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800d02a:	689b      	ldr	r3, [r3, #8]
 800d02c:	f003 030c 	and.w	r3, r3, #12
 800d030:	2b0c      	cmp	r3, #12
 800d032:	f000 808d 	beq.w	800d150 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	69db      	ldr	r3, [r3, #28]
 800d03a:	2b02      	cmp	r3, #2
 800d03c:	d15a      	bne.n	800d0f4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d03e:	4b39      	ldr	r3, [pc, #228]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	4a38      	ldr	r2, [pc, #224]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800d044:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d04a:	f7fd fd7d 	bl	800ab48 <HAL_GetTick>
 800d04e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d050:	e008      	b.n	800d064 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d052:	f7fd fd79 	bl	800ab48 <HAL_GetTick>
 800d056:	4602      	mov	r2, r0
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	1ad3      	subs	r3, r2, r3
 800d05c:	2b02      	cmp	r3, #2
 800d05e:	d901      	bls.n	800d064 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800d060:	2303      	movs	r3, #3
 800d062:	e0b5      	b.n	800d1d0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d064:	4b2f      	ldr	r3, [pc, #188]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d1f0      	bne.n	800d052 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d070:	4b2c      	ldr	r3, [pc, #176]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800d072:	68da      	ldr	r2, [r3, #12]
 800d074:	4b2d      	ldr	r3, [pc, #180]	; (800d12c <HAL_RCC_OscConfig+0x580>)
 800d076:	4013      	ands	r3, r2
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	6a11      	ldr	r1, [r2, #32]
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d080:	3a01      	subs	r2, #1
 800d082:	0112      	lsls	r2, r2, #4
 800d084:	4311      	orrs	r1, r2
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d08a:	0212      	lsls	r2, r2, #8
 800d08c:	4311      	orrs	r1, r2
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d092:	0852      	lsrs	r2, r2, #1
 800d094:	3a01      	subs	r2, #1
 800d096:	0552      	lsls	r2, r2, #21
 800d098:	4311      	orrs	r1, r2
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d09e:	0852      	lsrs	r2, r2, #1
 800d0a0:	3a01      	subs	r2, #1
 800d0a2:	0652      	lsls	r2, r2, #25
 800d0a4:	4311      	orrs	r1, r2
 800d0a6:	687a      	ldr	r2, [r7, #4]
 800d0a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d0aa:	06d2      	lsls	r2, r2, #27
 800d0ac:	430a      	orrs	r2, r1
 800d0ae:	491d      	ldr	r1, [pc, #116]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800d0b0:	4313      	orrs	r3, r2
 800d0b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d0b4:	4b1b      	ldr	r3, [pc, #108]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a1a      	ldr	r2, [pc, #104]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800d0ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d0be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d0c0:	4b18      	ldr	r3, [pc, #96]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800d0c2:	68db      	ldr	r3, [r3, #12]
 800d0c4:	4a17      	ldr	r2, [pc, #92]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800d0c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d0ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0cc:	f7fd fd3c 	bl	800ab48 <HAL_GetTick>
 800d0d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d0d2:	e008      	b.n	800d0e6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d0d4:	f7fd fd38 	bl	800ab48 <HAL_GetTick>
 800d0d8:	4602      	mov	r2, r0
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	1ad3      	subs	r3, r2, r3
 800d0de:	2b02      	cmp	r3, #2
 800d0e0:	d901      	bls.n	800d0e6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800d0e2:	2303      	movs	r3, #3
 800d0e4:	e074      	b.n	800d1d0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d0e6:	4b0f      	ldr	r3, [pc, #60]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d0f0      	beq.n	800d0d4 <HAL_RCC_OscConfig+0x528>
 800d0f2:	e06c      	b.n	800d1ce <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d0f4:	4b0b      	ldr	r3, [pc, #44]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	4a0a      	ldr	r2, [pc, #40]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800d0fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d0fe:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800d100:	4b08      	ldr	r3, [pc, #32]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800d102:	68db      	ldr	r3, [r3, #12]
 800d104:	4a07      	ldr	r2, [pc, #28]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800d106:	f023 0303 	bic.w	r3, r3, #3
 800d10a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800d10c:	4b05      	ldr	r3, [pc, #20]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800d10e:	68db      	ldr	r3, [r3, #12]
 800d110:	4a04      	ldr	r2, [pc, #16]	; (800d124 <HAL_RCC_OscConfig+0x578>)
 800d112:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800d116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d11a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d11c:	f7fd fd14 	bl	800ab48 <HAL_GetTick>
 800d120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d122:	e00e      	b.n	800d142 <HAL_RCC_OscConfig+0x596>
 800d124:	40021000 	.word	0x40021000
 800d128:	40007000 	.word	0x40007000
 800d12c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d130:	f7fd fd0a 	bl	800ab48 <HAL_GetTick>
 800d134:	4602      	mov	r2, r0
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	1ad3      	subs	r3, r2, r3
 800d13a:	2b02      	cmp	r3, #2
 800d13c:	d901      	bls.n	800d142 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800d13e:	2303      	movs	r3, #3
 800d140:	e046      	b.n	800d1d0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d142:	4b25      	ldr	r3, [pc, #148]	; (800d1d8 <HAL_RCC_OscConfig+0x62c>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d1f0      	bne.n	800d130 <HAL_RCC_OscConfig+0x584>
 800d14e:	e03e      	b.n	800d1ce <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	69db      	ldr	r3, [r3, #28]
 800d154:	2b01      	cmp	r3, #1
 800d156:	d101      	bne.n	800d15c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800d158:	2301      	movs	r3, #1
 800d15a:	e039      	b.n	800d1d0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800d15c:	4b1e      	ldr	r3, [pc, #120]	; (800d1d8 <HAL_RCC_OscConfig+0x62c>)
 800d15e:	68db      	ldr	r3, [r3, #12]
 800d160:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	f003 0203 	and.w	r2, r3, #3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6a1b      	ldr	r3, [r3, #32]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d12c      	bne.n	800d1ca <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17a:	3b01      	subs	r3, #1
 800d17c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d17e:	429a      	cmp	r2, r3
 800d180:	d123      	bne.n	800d1ca <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d18c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d18e:	429a      	cmp	r2, r3
 800d190:	d11b      	bne.n	800d1ca <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d19c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d113      	bne.n	800d1ca <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ac:	085b      	lsrs	r3, r3, #1
 800d1ae:	3b01      	subs	r3, #1
 800d1b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d109      	bne.n	800d1ca <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1c0:	085b      	lsrs	r3, r3, #1
 800d1c2:	3b01      	subs	r3, #1
 800d1c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d001      	beq.n	800d1ce <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	e000      	b.n	800d1d0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800d1ce:	2300      	movs	r3, #0
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3720      	adds	r7, #32
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}
 800d1d8:	40021000 	.word	0x40021000

0800d1dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b086      	sub	sp, #24
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d101      	bne.n	800d1f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	e11e      	b.n	800d432 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d1f4:	4b91      	ldr	r3, [pc, #580]	; (800d43c <HAL_RCC_ClockConfig+0x260>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f003 030f 	and.w	r3, r3, #15
 800d1fc:	683a      	ldr	r2, [r7, #0]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d910      	bls.n	800d224 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d202:	4b8e      	ldr	r3, [pc, #568]	; (800d43c <HAL_RCC_ClockConfig+0x260>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f023 020f 	bic.w	r2, r3, #15
 800d20a:	498c      	ldr	r1, [pc, #560]	; (800d43c <HAL_RCC_ClockConfig+0x260>)
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	4313      	orrs	r3, r2
 800d210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d212:	4b8a      	ldr	r3, [pc, #552]	; (800d43c <HAL_RCC_ClockConfig+0x260>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f003 030f 	and.w	r3, r3, #15
 800d21a:	683a      	ldr	r2, [r7, #0]
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d001      	beq.n	800d224 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d220:	2301      	movs	r3, #1
 800d222:	e106      	b.n	800d432 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f003 0301 	and.w	r3, r3, #1
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d073      	beq.n	800d318 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	2b03      	cmp	r3, #3
 800d236:	d129      	bne.n	800d28c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d238:	4b81      	ldr	r3, [pc, #516]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d240:	2b00      	cmp	r3, #0
 800d242:	d101      	bne.n	800d248 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800d244:	2301      	movs	r3, #1
 800d246:	e0f4      	b.n	800d432 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800d248:	f000 f9ba 	bl	800d5c0 <RCC_GetSysClockFreqFromPLLSource>
 800d24c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	4a7c      	ldr	r2, [pc, #496]	; (800d444 <HAL_RCC_ClockConfig+0x268>)
 800d252:	4293      	cmp	r3, r2
 800d254:	d93f      	bls.n	800d2d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d256:	4b7a      	ldr	r3, [pc, #488]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d258:	689b      	ldr	r3, [r3, #8]
 800d25a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d009      	beq.n	800d276 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d033      	beq.n	800d2d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d272:	2b00      	cmp	r3, #0
 800d274:	d12f      	bne.n	800d2d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d276:	4b72      	ldr	r3, [pc, #456]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d278:	689b      	ldr	r3, [r3, #8]
 800d27a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d27e:	4a70      	ldr	r2, [pc, #448]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d284:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d286:	2380      	movs	r3, #128	; 0x80
 800d288:	617b      	str	r3, [r7, #20]
 800d28a:	e024      	b.n	800d2d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	2b02      	cmp	r3, #2
 800d292:	d107      	bne.n	800d2a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d294:	4b6a      	ldr	r3, [pc, #424]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d109      	bne.n	800d2b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	e0c6      	b.n	800d432 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d2a4:	4b66      	ldr	r3, [pc, #408]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d101      	bne.n	800d2b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e0be      	b.n	800d432 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800d2b4:	f000 f8ce 	bl	800d454 <HAL_RCC_GetSysClockFreq>
 800d2b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	4a61      	ldr	r2, [pc, #388]	; (800d444 <HAL_RCC_ClockConfig+0x268>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d909      	bls.n	800d2d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d2c2:	4b5f      	ldr	r3, [pc, #380]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d2c4:	689b      	ldr	r3, [r3, #8]
 800d2c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d2ca:	4a5d      	ldr	r2, [pc, #372]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d2d2:	2380      	movs	r3, #128	; 0x80
 800d2d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d2d6:	4b5a      	ldr	r3, [pc, #360]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d2d8:	689b      	ldr	r3, [r3, #8]
 800d2da:	f023 0203 	bic.w	r2, r3, #3
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	685b      	ldr	r3, [r3, #4]
 800d2e2:	4957      	ldr	r1, [pc, #348]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2e8:	f7fd fc2e 	bl	800ab48 <HAL_GetTick>
 800d2ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d2ee:	e00a      	b.n	800d306 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d2f0:	f7fd fc2a 	bl	800ab48 <HAL_GetTick>
 800d2f4:	4602      	mov	r2, r0
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	1ad3      	subs	r3, r2, r3
 800d2fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2fe:	4293      	cmp	r3, r2
 800d300:	d901      	bls.n	800d306 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800d302:	2303      	movs	r3, #3
 800d304:	e095      	b.n	800d432 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d306:	4b4e      	ldr	r3, [pc, #312]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d308:	689b      	ldr	r3, [r3, #8]
 800d30a:	f003 020c 	and.w	r2, r3, #12
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	429a      	cmp	r2, r3
 800d316:	d1eb      	bne.n	800d2f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f003 0302 	and.w	r3, r3, #2
 800d320:	2b00      	cmp	r3, #0
 800d322:	d023      	beq.n	800d36c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f003 0304 	and.w	r3, r3, #4
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d005      	beq.n	800d33c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d330:	4b43      	ldr	r3, [pc, #268]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	4a42      	ldr	r2, [pc, #264]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d336:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d33a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f003 0308 	and.w	r3, r3, #8
 800d344:	2b00      	cmp	r3, #0
 800d346:	d007      	beq.n	800d358 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800d348:	4b3d      	ldr	r3, [pc, #244]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d350:	4a3b      	ldr	r2, [pc, #236]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d352:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d356:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d358:	4b39      	ldr	r3, [pc, #228]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d35a:	689b      	ldr	r3, [r3, #8]
 800d35c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	689b      	ldr	r3, [r3, #8]
 800d364:	4936      	ldr	r1, [pc, #216]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d366:	4313      	orrs	r3, r2
 800d368:	608b      	str	r3, [r1, #8]
 800d36a:	e008      	b.n	800d37e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	2b80      	cmp	r3, #128	; 0x80
 800d370:	d105      	bne.n	800d37e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d372:	4b33      	ldr	r3, [pc, #204]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d374:	689b      	ldr	r3, [r3, #8]
 800d376:	4a32      	ldr	r2, [pc, #200]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d378:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d37c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d37e:	4b2f      	ldr	r3, [pc, #188]	; (800d43c <HAL_RCC_ClockConfig+0x260>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f003 030f 	and.w	r3, r3, #15
 800d386:	683a      	ldr	r2, [r7, #0]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d21d      	bcs.n	800d3c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d38c:	4b2b      	ldr	r3, [pc, #172]	; (800d43c <HAL_RCC_ClockConfig+0x260>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f023 020f 	bic.w	r2, r3, #15
 800d394:	4929      	ldr	r1, [pc, #164]	; (800d43c <HAL_RCC_ClockConfig+0x260>)
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	4313      	orrs	r3, r2
 800d39a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d39c:	f7fd fbd4 	bl	800ab48 <HAL_GetTick>
 800d3a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d3a2:	e00a      	b.n	800d3ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d3a4:	f7fd fbd0 	bl	800ab48 <HAL_GetTick>
 800d3a8:	4602      	mov	r2, r0
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	1ad3      	subs	r3, r2, r3
 800d3ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d901      	bls.n	800d3ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800d3b6:	2303      	movs	r3, #3
 800d3b8:	e03b      	b.n	800d432 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d3ba:	4b20      	ldr	r3, [pc, #128]	; (800d43c <HAL_RCC_ClockConfig+0x260>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	f003 030f 	and.w	r3, r3, #15
 800d3c2:	683a      	ldr	r2, [r7, #0]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d1ed      	bne.n	800d3a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f003 0304 	and.w	r3, r3, #4
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d008      	beq.n	800d3e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d3d4:	4b1a      	ldr	r3, [pc, #104]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	68db      	ldr	r3, [r3, #12]
 800d3e0:	4917      	ldr	r1, [pc, #92]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f003 0308 	and.w	r3, r3, #8
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d009      	beq.n	800d406 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d3f2:	4b13      	ldr	r3, [pc, #76]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d3f4:	689b      	ldr	r3, [r3, #8]
 800d3f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	691b      	ldr	r3, [r3, #16]
 800d3fe:	00db      	lsls	r3, r3, #3
 800d400:	490f      	ldr	r1, [pc, #60]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d402:	4313      	orrs	r3, r2
 800d404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d406:	f000 f825 	bl	800d454 <HAL_RCC_GetSysClockFreq>
 800d40a:	4601      	mov	r1, r0
 800d40c:	4b0c      	ldr	r3, [pc, #48]	; (800d440 <HAL_RCC_ClockConfig+0x264>)
 800d40e:	689b      	ldr	r3, [r3, #8]
 800d410:	091b      	lsrs	r3, r3, #4
 800d412:	f003 030f 	and.w	r3, r3, #15
 800d416:	4a0c      	ldr	r2, [pc, #48]	; (800d448 <HAL_RCC_ClockConfig+0x26c>)
 800d418:	5cd3      	ldrb	r3, [r2, r3]
 800d41a:	f003 031f 	and.w	r3, r3, #31
 800d41e:	fa21 f303 	lsr.w	r3, r1, r3
 800d422:	4a0a      	ldr	r2, [pc, #40]	; (800d44c <HAL_RCC_ClockConfig+0x270>)
 800d424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d426:	4b0a      	ldr	r3, [pc, #40]	; (800d450 <HAL_RCC_ClockConfig+0x274>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7fc fc40 	bl	8009cb0 <HAL_InitTick>
 800d430:	4603      	mov	r3, r0
}
 800d432:	4618      	mov	r0, r3
 800d434:	3718      	adds	r7, #24
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop
 800d43c:	40022000 	.word	0x40022000
 800d440:	40021000 	.word	0x40021000
 800d444:	04c4b400 	.word	0x04c4b400
 800d448:	08019cf0 	.word	0x08019cf0
 800d44c:	2000000c 	.word	0x2000000c
 800d450:	20000010 	.word	0x20000010

0800d454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d454:	b480      	push	{r7}
 800d456:	b087      	sub	sp, #28
 800d458:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d45a:	4b2c      	ldr	r3, [pc, #176]	; (800d50c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d45c:	689b      	ldr	r3, [r3, #8]
 800d45e:	f003 030c 	and.w	r3, r3, #12
 800d462:	2b04      	cmp	r3, #4
 800d464:	d102      	bne.n	800d46c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d466:	4b2a      	ldr	r3, [pc, #168]	; (800d510 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d468:	613b      	str	r3, [r7, #16]
 800d46a:	e047      	b.n	800d4fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800d46c:	4b27      	ldr	r3, [pc, #156]	; (800d50c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d46e:	689b      	ldr	r3, [r3, #8]
 800d470:	f003 030c 	and.w	r3, r3, #12
 800d474:	2b08      	cmp	r3, #8
 800d476:	d102      	bne.n	800d47e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d478:	4b26      	ldr	r3, [pc, #152]	; (800d514 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d47a:	613b      	str	r3, [r7, #16]
 800d47c:	e03e      	b.n	800d4fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800d47e:	4b23      	ldr	r3, [pc, #140]	; (800d50c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d480:	689b      	ldr	r3, [r3, #8]
 800d482:	f003 030c 	and.w	r3, r3, #12
 800d486:	2b0c      	cmp	r3, #12
 800d488:	d136      	bne.n	800d4f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d48a:	4b20      	ldr	r3, [pc, #128]	; (800d50c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	f003 0303 	and.w	r3, r3, #3
 800d492:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d494:	4b1d      	ldr	r3, [pc, #116]	; (800d50c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d496:	68db      	ldr	r3, [r3, #12]
 800d498:	091b      	lsrs	r3, r3, #4
 800d49a:	f003 030f 	and.w	r3, r3, #15
 800d49e:	3301      	adds	r3, #1
 800d4a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2b03      	cmp	r3, #3
 800d4a6:	d10c      	bne.n	800d4c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d4a8:	4a1a      	ldr	r2, [pc, #104]	; (800d514 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4b0:	4a16      	ldr	r2, [pc, #88]	; (800d50c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d4b2:	68d2      	ldr	r2, [r2, #12]
 800d4b4:	0a12      	lsrs	r2, r2, #8
 800d4b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d4ba:	fb02 f303 	mul.w	r3, r2, r3
 800d4be:	617b      	str	r3, [r7, #20]
      break;
 800d4c0:	e00c      	b.n	800d4dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d4c2:	4a13      	ldr	r2, [pc, #76]	; (800d510 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4ca:	4a10      	ldr	r2, [pc, #64]	; (800d50c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d4cc:	68d2      	ldr	r2, [r2, #12]
 800d4ce:	0a12      	lsrs	r2, r2, #8
 800d4d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d4d4:	fb02 f303 	mul.w	r3, r2, r3
 800d4d8:	617b      	str	r3, [r7, #20]
      break;
 800d4da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d4dc:	4b0b      	ldr	r3, [pc, #44]	; (800d50c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d4de:	68db      	ldr	r3, [r3, #12]
 800d4e0:	0e5b      	lsrs	r3, r3, #25
 800d4e2:	f003 0303 	and.w	r3, r3, #3
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	005b      	lsls	r3, r3, #1
 800d4ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800d4ec:	697a      	ldr	r2, [r7, #20]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4f4:	613b      	str	r3, [r7, #16]
 800d4f6:	e001      	b.n	800d4fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d4fc:	693b      	ldr	r3, [r7, #16]
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	371c      	adds	r7, #28
 800d502:	46bd      	mov	sp, r7
 800d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop
 800d50c:	40021000 	.word	0x40021000
 800d510:	00f42400 	.word	0x00f42400
 800d514:	007a1200 	.word	0x007a1200

0800d518 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d518:	b480      	push	{r7}
 800d51a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d51c:	4b03      	ldr	r3, [pc, #12]	; (800d52c <HAL_RCC_GetHCLKFreq+0x14>)
 800d51e:	681b      	ldr	r3, [r3, #0]
}
 800d520:	4618      	mov	r0, r3
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr
 800d52a:	bf00      	nop
 800d52c:	2000000c 	.word	0x2000000c

0800d530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d534:	f7ff fff0 	bl	800d518 <HAL_RCC_GetHCLKFreq>
 800d538:	4601      	mov	r1, r0
 800d53a:	4b06      	ldr	r3, [pc, #24]	; (800d554 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d53c:	689b      	ldr	r3, [r3, #8]
 800d53e:	0a1b      	lsrs	r3, r3, #8
 800d540:	f003 0307 	and.w	r3, r3, #7
 800d544:	4a04      	ldr	r2, [pc, #16]	; (800d558 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d546:	5cd3      	ldrb	r3, [r2, r3]
 800d548:	f003 031f 	and.w	r3, r3, #31
 800d54c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d550:	4618      	mov	r0, r3
 800d552:	bd80      	pop	{r7, pc}
 800d554:	40021000 	.word	0x40021000
 800d558:	08019d00 	.word	0x08019d00

0800d55c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b083      	sub	sp, #12
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	220f      	movs	r2, #15
 800d56a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800d56c:	4b12      	ldr	r3, [pc, #72]	; (800d5b8 <HAL_RCC_GetClockConfig+0x5c>)
 800d56e:	689b      	ldr	r3, [r3, #8]
 800d570:	f003 0203 	and.w	r2, r3, #3
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800d578:	4b0f      	ldr	r3, [pc, #60]	; (800d5b8 <HAL_RCC_GetClockConfig+0x5c>)
 800d57a:	689b      	ldr	r3, [r3, #8]
 800d57c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800d584:	4b0c      	ldr	r3, [pc, #48]	; (800d5b8 <HAL_RCC_GetClockConfig+0x5c>)
 800d586:	689b      	ldr	r3, [r3, #8]
 800d588:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800d590:	4b09      	ldr	r3, [pc, #36]	; (800d5b8 <HAL_RCC_GetClockConfig+0x5c>)
 800d592:	689b      	ldr	r3, [r3, #8]
 800d594:	08db      	lsrs	r3, r3, #3
 800d596:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800d59e:	4b07      	ldr	r3, [pc, #28]	; (800d5bc <HAL_RCC_GetClockConfig+0x60>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f003 020f 	and.w	r2, r3, #15
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	601a      	str	r2, [r3, #0]
}
 800d5aa:	bf00      	nop
 800d5ac:	370c      	adds	r7, #12
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr
 800d5b6:	bf00      	nop
 800d5b8:	40021000 	.word	0x40021000
 800d5bc:	40022000 	.word	0x40022000

0800d5c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d5c0:	b480      	push	{r7}
 800d5c2:	b087      	sub	sp, #28
 800d5c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d5c6:	4b1e      	ldr	r3, [pc, #120]	; (800d640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	f003 0303 	and.w	r3, r3, #3
 800d5ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d5d0:	4b1b      	ldr	r3, [pc, #108]	; (800d640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d5d2:	68db      	ldr	r3, [r3, #12]
 800d5d4:	091b      	lsrs	r3, r3, #4
 800d5d6:	f003 030f 	and.w	r3, r3, #15
 800d5da:	3301      	adds	r3, #1
 800d5dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d5de:	693b      	ldr	r3, [r7, #16]
 800d5e0:	2b03      	cmp	r3, #3
 800d5e2:	d10c      	bne.n	800d5fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d5e4:	4a17      	ldr	r2, [pc, #92]	; (800d644 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5ec:	4a14      	ldr	r2, [pc, #80]	; (800d640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d5ee:	68d2      	ldr	r2, [r2, #12]
 800d5f0:	0a12      	lsrs	r2, r2, #8
 800d5f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d5f6:	fb02 f303 	mul.w	r3, r2, r3
 800d5fa:	617b      	str	r3, [r7, #20]
    break;
 800d5fc:	e00c      	b.n	800d618 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d5fe:	4a12      	ldr	r2, [pc, #72]	; (800d648 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	fbb2 f3f3 	udiv	r3, r2, r3
 800d606:	4a0e      	ldr	r2, [pc, #56]	; (800d640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d608:	68d2      	ldr	r2, [r2, #12]
 800d60a:	0a12      	lsrs	r2, r2, #8
 800d60c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d610:	fb02 f303 	mul.w	r3, r2, r3
 800d614:	617b      	str	r3, [r7, #20]
    break;
 800d616:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d618:	4b09      	ldr	r3, [pc, #36]	; (800d640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d61a:	68db      	ldr	r3, [r3, #12]
 800d61c:	0e5b      	lsrs	r3, r3, #25
 800d61e:	f003 0303 	and.w	r3, r3, #3
 800d622:	3301      	adds	r3, #1
 800d624:	005b      	lsls	r3, r3, #1
 800d626:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800d628:	697a      	ldr	r2, [r7, #20]
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d630:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800d632:	687b      	ldr	r3, [r7, #4]
}
 800d634:	4618      	mov	r0, r3
 800d636:	371c      	adds	r7, #28
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr
 800d640:	40021000 	.word	0x40021000
 800d644:	007a1200 	.word	0x007a1200
 800d648:	00f42400 	.word	0x00f42400

0800d64c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b086      	sub	sp, #24
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d654:	2300      	movs	r3, #0
 800d656:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d658:	2300      	movs	r3, #0
 800d65a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d664:	2b00      	cmp	r3, #0
 800d666:	f000 8098 	beq.w	800d79a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d66a:	2300      	movs	r3, #0
 800d66c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d66e:	4b43      	ldr	r3, [pc, #268]	; (800d77c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d676:	2b00      	cmp	r3, #0
 800d678:	d10d      	bne.n	800d696 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d67a:	4b40      	ldr	r3, [pc, #256]	; (800d77c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d67c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d67e:	4a3f      	ldr	r2, [pc, #252]	; (800d77c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d684:	6593      	str	r3, [r2, #88]	; 0x58
 800d686:	4b3d      	ldr	r3, [pc, #244]	; (800d77c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d68a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d68e:	60bb      	str	r3, [r7, #8]
 800d690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d692:	2301      	movs	r3, #1
 800d694:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d696:	4b3a      	ldr	r3, [pc, #232]	; (800d780 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4a39      	ldr	r2, [pc, #228]	; (800d780 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d69c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d6a2:	f7fd fa51 	bl	800ab48 <HAL_GetTick>
 800d6a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d6a8:	e009      	b.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d6aa:	f7fd fa4d 	bl	800ab48 <HAL_GetTick>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	1ad3      	subs	r3, r2, r3
 800d6b4:	2b02      	cmp	r3, #2
 800d6b6:	d902      	bls.n	800d6be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800d6b8:	2303      	movs	r3, #3
 800d6ba:	74fb      	strb	r3, [r7, #19]
        break;
 800d6bc:	e005      	b.n	800d6ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d6be:	4b30      	ldr	r3, [pc, #192]	; (800d780 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d0ef      	beq.n	800d6aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800d6ca:	7cfb      	ldrb	r3, [r7, #19]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d159      	bne.n	800d784 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d6d0:	4b2a      	ldr	r3, [pc, #168]	; (800d77c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d6da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d01e      	beq.n	800d720 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6e6:	697a      	ldr	r2, [r7, #20]
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d019      	beq.n	800d720 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d6ec:	4b23      	ldr	r3, [pc, #140]	; (800d77c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d6f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d6f8:	4b20      	ldr	r3, [pc, #128]	; (800d77c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d6fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6fe:	4a1f      	ldr	r2, [pc, #124]	; (800d77c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d708:	4b1c      	ldr	r3, [pc, #112]	; (800d77c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d70a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d70e:	4a1b      	ldr	r2, [pc, #108]	; (800d77c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d718:	4a18      	ldr	r2, [pc, #96]	; (800d77c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	f003 0301 	and.w	r3, r3, #1
 800d726:	2b00      	cmp	r3, #0
 800d728:	d016      	beq.n	800d758 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d72a:	f7fd fa0d 	bl	800ab48 <HAL_GetTick>
 800d72e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d730:	e00b      	b.n	800d74a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d732:	f7fd fa09 	bl	800ab48 <HAL_GetTick>
 800d736:	4602      	mov	r2, r0
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	1ad3      	subs	r3, r2, r3
 800d73c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d740:	4293      	cmp	r3, r2
 800d742:	d902      	bls.n	800d74a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800d744:	2303      	movs	r3, #3
 800d746:	74fb      	strb	r3, [r7, #19]
            break;
 800d748:	e006      	b.n	800d758 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d74a:	4b0c      	ldr	r3, [pc, #48]	; (800d77c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d74c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d750:	f003 0302 	and.w	r3, r3, #2
 800d754:	2b00      	cmp	r3, #0
 800d756:	d0ec      	beq.n	800d732 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d758:	7cfb      	ldrb	r3, [r7, #19]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d10b      	bne.n	800d776 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d75e:	4b07      	ldr	r3, [pc, #28]	; (800d77c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d764:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d76c:	4903      	ldr	r1, [pc, #12]	; (800d77c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d76e:	4313      	orrs	r3, r2
 800d770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d774:	e008      	b.n	800d788 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d776:	7cfb      	ldrb	r3, [r7, #19]
 800d778:	74bb      	strb	r3, [r7, #18]
 800d77a:	e005      	b.n	800d788 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d77c:	40021000 	.word	0x40021000
 800d780:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d784:	7cfb      	ldrb	r3, [r7, #19]
 800d786:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d788:	7c7b      	ldrb	r3, [r7, #17]
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d105      	bne.n	800d79a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d78e:	4ba6      	ldr	r3, [pc, #664]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d792:	4aa5      	ldr	r2, [pc, #660]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d798:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f003 0301 	and.w	r3, r3, #1
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d00a      	beq.n	800d7bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d7a6:	4ba0      	ldr	r3, [pc, #640]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d7a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7ac:	f023 0203 	bic.w	r2, r3, #3
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	685b      	ldr	r3, [r3, #4]
 800d7b4:	499c      	ldr	r1, [pc, #624]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d7b6:	4313      	orrs	r3, r2
 800d7b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f003 0302 	and.w	r3, r3, #2
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d00a      	beq.n	800d7de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d7c8:	4b97      	ldr	r3, [pc, #604]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d7ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7ce:	f023 020c 	bic.w	r2, r3, #12
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	689b      	ldr	r3, [r3, #8]
 800d7d6:	4994      	ldr	r1, [pc, #592]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d7d8:	4313      	orrs	r3, r2
 800d7da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f003 0304 	and.w	r3, r3, #4
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00a      	beq.n	800d800 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d7ea:	4b8f      	ldr	r3, [pc, #572]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d7ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	68db      	ldr	r3, [r3, #12]
 800d7f8:	498b      	ldr	r1, [pc, #556]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d7fa:	4313      	orrs	r3, r2
 800d7fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f003 0308 	and.w	r3, r3, #8
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d00a      	beq.n	800d822 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d80c:	4b86      	ldr	r3, [pc, #536]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d80e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d812:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	691b      	ldr	r3, [r3, #16]
 800d81a:	4983      	ldr	r1, [pc, #524]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d81c:	4313      	orrs	r3, r2
 800d81e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f003 0320 	and.w	r3, r3, #32
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d00a      	beq.n	800d844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d82e:	4b7e      	ldr	r3, [pc, #504]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d834:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	695b      	ldr	r3, [r3, #20]
 800d83c:	497a      	ldr	r1, [pc, #488]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d83e:	4313      	orrs	r3, r2
 800d840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d00a      	beq.n	800d866 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d850:	4b75      	ldr	r3, [pc, #468]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d856:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	699b      	ldr	r3, [r3, #24]
 800d85e:	4972      	ldr	r1, [pc, #456]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d860:	4313      	orrs	r3, r2
 800d862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d00a      	beq.n	800d888 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d872:	4b6d      	ldr	r3, [pc, #436]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d878:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	69db      	ldr	r3, [r3, #28]
 800d880:	4969      	ldr	r1, [pc, #420]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d882:	4313      	orrs	r3, r2
 800d884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00a      	beq.n	800d8aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d894:	4b64      	ldr	r3, [pc, #400]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d89a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6a1b      	ldr	r3, [r3, #32]
 800d8a2:	4961      	ldr	r1, [pc, #388]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d8a4:	4313      	orrs	r3, r2
 800d8a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d00a      	beq.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d8b6:	4b5c      	ldr	r3, [pc, #368]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d8b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c4:	4958      	ldr	r1, [pc, #352]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d015      	beq.n	800d904 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d8d8:	4b53      	ldr	r3, [pc, #332]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d8da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8e6:	4950      	ldr	r1, [pc, #320]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8f6:	d105      	bne.n	800d904 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d8f8:	4b4b      	ldr	r3, [pc, #300]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d8fa:	68db      	ldr	r3, [r3, #12]
 800d8fc:	4a4a      	ldr	r2, [pc, #296]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d8fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d902:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d015      	beq.n	800d93c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d910:	4b45      	ldr	r3, [pc, #276]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d916:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d91e:	4942      	ldr	r1, [pc, #264]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d920:	4313      	orrs	r3, r2
 800d922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d92a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d92e:	d105      	bne.n	800d93c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d930:	4b3d      	ldr	r3, [pc, #244]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d932:	68db      	ldr	r3, [r3, #12]
 800d934:	4a3c      	ldr	r2, [pc, #240]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d936:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d93a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d944:	2b00      	cmp	r3, #0
 800d946:	d015      	beq.n	800d974 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d948:	4b37      	ldr	r3, [pc, #220]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d94a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d94e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d956:	4934      	ldr	r1, [pc, #208]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d958:	4313      	orrs	r3, r2
 800d95a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d962:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d966:	d105      	bne.n	800d974 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d968:	4b2f      	ldr	r3, [pc, #188]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d96a:	68db      	ldr	r3, [r3, #12]
 800d96c:	4a2e      	ldr	r2, [pc, #184]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d96e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d972:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d015      	beq.n	800d9ac <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d980:	4b29      	ldr	r3, [pc, #164]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d986:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d98e:	4926      	ldr	r1, [pc, #152]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d990:	4313      	orrs	r3, r2
 800d992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d99a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d99e:	d105      	bne.n	800d9ac <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d9a0:	4b21      	ldr	r3, [pc, #132]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d9a2:	68db      	ldr	r3, [r3, #12]
 800d9a4:	4a20      	ldr	r2, [pc, #128]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d9a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d015      	beq.n	800d9e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d9b8:	4b1b      	ldr	r3, [pc, #108]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d9ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c6:	4918      	ldr	r1, [pc, #96]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d9d6:	d105      	bne.n	800d9e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d9d8:	4b13      	ldr	r3, [pc, #76]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d9da:	68db      	ldr	r3, [r3, #12]
 800d9dc:	4a12      	ldr	r2, [pc, #72]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d9de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d015      	beq.n	800da1c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d9f0:	4b0d      	ldr	r3, [pc, #52]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800d9f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9fe:	490a      	ldr	r1, [pc, #40]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800da00:	4313      	orrs	r3, r2
 800da02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800da0e:	d105      	bne.n	800da1c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800da10:	4b05      	ldr	r3, [pc, #20]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800da12:	68db      	ldr	r3, [r3, #12]
 800da14:	4a04      	ldr	r2, [pc, #16]	; (800da28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800da16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800da1a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800da1c:	7cbb      	ldrb	r3, [r7, #18]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3718      	adds	r7, #24
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop
 800da28:	40021000 	.word	0x40021000

0800da2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d101      	bne.n	800da3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800da3a:	2301      	movs	r3, #1
 800da3c:	e084      	b.n	800db48 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2200      	movs	r2, #0
 800da42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d106      	bne.n	800da5e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2200      	movs	r2, #0
 800da54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f7fc f877 	bl	8009b4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2202      	movs	r2, #2
 800da62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da74:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	68db      	ldr	r3, [r3, #12]
 800da7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800da7e:	d902      	bls.n	800da86 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800da80:	2300      	movs	r3, #0
 800da82:	60fb      	str	r3, [r7, #12]
 800da84:	e002      	b.n	800da8c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800da86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	68db      	ldr	r3, [r3, #12]
 800da90:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800da94:	d007      	beq.n	800daa6 <HAL_SPI_Init+0x7a>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	68db      	ldr	r3, [r3, #12]
 800da9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800da9e:	d002      	beq.n	800daa6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2200      	movs	r2, #0
 800daa4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d10b      	bne.n	800dac6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	68db      	ldr	r3, [r3, #12]
 800dab2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dab6:	d903      	bls.n	800dac0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2202      	movs	r2, #2
 800dabc:	631a      	str	r2, [r3, #48]	; 0x30
 800dabe:	e002      	b.n	800dac6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2201      	movs	r2, #1
 800dac4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	685a      	ldr	r2, [r3, #4]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	689b      	ldr	r3, [r3, #8]
 800dace:	431a      	orrs	r2, r3
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	691b      	ldr	r3, [r3, #16]
 800dad4:	431a      	orrs	r2, r3
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	695b      	ldr	r3, [r3, #20]
 800dada:	431a      	orrs	r2, r3
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	699b      	ldr	r3, [r3, #24]
 800dae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dae4:	431a      	orrs	r2, r3
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	69db      	ldr	r3, [r3, #28]
 800daea:	431a      	orrs	r2, r3
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6a1b      	ldr	r3, [r3, #32]
 800daf0:	ea42 0103 	orr.w	r1, r2, r3
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	430a      	orrs	r2, r1
 800dafe:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	699b      	ldr	r3, [r3, #24]
 800db04:	0c1b      	lsrs	r3, r3, #16
 800db06:	f003 0204 	and.w	r2, r3, #4
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db0e:	431a      	orrs	r2, r3
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db14:	431a      	orrs	r2, r3
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	ea42 0103 	orr.w	r1, r2, r3
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	68fa      	ldr	r2, [r7, #12]
 800db24:	430a      	orrs	r2, r1
 800db26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	69da      	ldr	r2, [r3, #28]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800db36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2200      	movs	r2, #0
 800db3c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2201      	movs	r2, #1
 800db42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800db46:	2300      	movs	r3, #0
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3710      	adds	r7, #16
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b088      	sub	sp, #32
 800db54:	af00      	add	r7, sp, #0
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	60b9      	str	r1, [r7, #8]
 800db5a:	603b      	str	r3, [r7, #0]
 800db5c:	4613      	mov	r3, r2
 800db5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800db60:	2300      	movs	r3, #0
 800db62:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800db6a:	2b01      	cmp	r3, #1
 800db6c:	d101      	bne.n	800db72 <HAL_SPI_Transmit+0x22>
 800db6e:	2302      	movs	r3, #2
 800db70:	e150      	b.n	800de14 <HAL_SPI_Transmit+0x2c4>
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2201      	movs	r2, #1
 800db76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db7a:	f7fc ffe5 	bl	800ab48 <HAL_GetTick>
 800db7e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800db80:	88fb      	ldrh	r3, [r7, #6]
 800db82:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	d002      	beq.n	800db96 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800db90:	2302      	movs	r3, #2
 800db92:	77fb      	strb	r3, [r7, #31]
    goto error;
 800db94:	e135      	b.n	800de02 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d002      	beq.n	800dba2 <HAL_SPI_Transmit+0x52>
 800db9c:	88fb      	ldrh	r3, [r7, #6]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d102      	bne.n	800dba8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800dba2:	2301      	movs	r3, #1
 800dba4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800dba6:	e12c      	b.n	800de02 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2203      	movs	r2, #3
 800dbac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	68ba      	ldr	r2, [r7, #8]
 800dbba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	88fa      	ldrh	r2, [r7, #6]
 800dbc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	88fa      	ldrh	r2, [r7, #6]
 800dbc6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	689b      	ldr	r3, [r3, #8]
 800dbee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dbf2:	d107      	bne.n	800dc04 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	681a      	ldr	r2, [r3, #0]
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dc02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc0e:	2b40      	cmp	r3, #64	; 0x40
 800dc10:	d007      	beq.n	800dc22 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	68db      	ldr	r3, [r3, #12]
 800dc26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dc2a:	d94b      	bls.n	800dcc4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d002      	beq.n	800dc3a <HAL_SPI_Transmit+0xea>
 800dc34:	8afb      	ldrh	r3, [r7, #22]
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d13e      	bne.n	800dcb8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc3e:	881a      	ldrh	r2, [r3, #0]
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc4a:	1c9a      	adds	r2, r3, #2
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc54:	b29b      	uxth	r3, r3
 800dc56:	3b01      	subs	r3, #1
 800dc58:	b29a      	uxth	r2, r3
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800dc5e:	e02b      	b.n	800dcb8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	f003 0302 	and.w	r3, r3, #2
 800dc6a:	2b02      	cmp	r3, #2
 800dc6c:	d112      	bne.n	800dc94 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc72:	881a      	ldrh	r2, [r3, #0]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc7e:	1c9a      	adds	r2, r3, #2
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc88:	b29b      	uxth	r3, r3
 800dc8a:	3b01      	subs	r3, #1
 800dc8c:	b29a      	uxth	r2, r3
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dc92:	e011      	b.n	800dcb8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc94:	f7fc ff58 	bl	800ab48 <HAL_GetTick>
 800dc98:	4602      	mov	r2, r0
 800dc9a:	69bb      	ldr	r3, [r7, #24]
 800dc9c:	1ad3      	subs	r3, r2, r3
 800dc9e:	683a      	ldr	r2, [r7, #0]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d803      	bhi.n	800dcac <HAL_SPI_Transmit+0x15c>
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcaa:	d102      	bne.n	800dcb2 <HAL_SPI_Transmit+0x162>
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d102      	bne.n	800dcb8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800dcb2:	2303      	movs	r3, #3
 800dcb4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800dcb6:	e0a4      	b.n	800de02 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d1ce      	bne.n	800dc60 <HAL_SPI_Transmit+0x110>
 800dcc2:	e07c      	b.n	800ddbe <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d002      	beq.n	800dcd2 <HAL_SPI_Transmit+0x182>
 800dccc:	8afb      	ldrh	r3, [r7, #22]
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	d170      	bne.n	800ddb4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d912      	bls.n	800dd02 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dce0:	881a      	ldrh	r2, [r3, #0]
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcec:	1c9a      	adds	r2, r3, #2
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	3b02      	subs	r3, #2
 800dcfa:	b29a      	uxth	r2, r3
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dd00:	e058      	b.n	800ddb4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	330c      	adds	r3, #12
 800dd0c:	7812      	ldrb	r2, [r2, #0]
 800dd0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd14:	1c5a      	adds	r2, r3, #1
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	3b01      	subs	r3, #1
 800dd22:	b29a      	uxth	r2, r3
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800dd28:	e044      	b.n	800ddb4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	689b      	ldr	r3, [r3, #8]
 800dd30:	f003 0302 	and.w	r3, r3, #2
 800dd34:	2b02      	cmp	r3, #2
 800dd36:	d12b      	bne.n	800dd90 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d912      	bls.n	800dd68 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd46:	881a      	ldrh	r2, [r3, #0]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd52:	1c9a      	adds	r2, r3, #2
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	3b02      	subs	r3, #2
 800dd60:	b29a      	uxth	r2, r3
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dd66:	e025      	b.n	800ddb4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	330c      	adds	r3, #12
 800dd72:	7812      	ldrb	r2, [r2, #0]
 800dd74:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd7a:	1c5a      	adds	r2, r3, #1
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd84:	b29b      	uxth	r3, r3
 800dd86:	3b01      	subs	r3, #1
 800dd88:	b29a      	uxth	r2, r3
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800dd8e:	e011      	b.n	800ddb4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd90:	f7fc feda 	bl	800ab48 <HAL_GetTick>
 800dd94:	4602      	mov	r2, r0
 800dd96:	69bb      	ldr	r3, [r7, #24]
 800dd98:	1ad3      	subs	r3, r2, r3
 800dd9a:	683a      	ldr	r2, [r7, #0]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d803      	bhi.n	800dda8 <HAL_SPI_Transmit+0x258>
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dda6:	d102      	bne.n	800ddae <HAL_SPI_Transmit+0x25e>
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d102      	bne.n	800ddb4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800ddae:	2303      	movs	r3, #3
 800ddb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ddb2:	e026      	b.n	800de02 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddb8:	b29b      	uxth	r3, r3
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d1b5      	bne.n	800dd2a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ddbe:	69ba      	ldr	r2, [r7, #24]
 800ddc0:	6839      	ldr	r1, [r7, #0]
 800ddc2:	68f8      	ldr	r0, [r7, #12]
 800ddc4:	f000 fdb5 	bl	800e932 <SPI_EndRxTxTransaction>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d002      	beq.n	800ddd4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	2220      	movs	r2, #32
 800ddd2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	689b      	ldr	r3, [r3, #8]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d10a      	bne.n	800ddf2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dddc:	2300      	movs	r3, #0
 800ddde:	613b      	str	r3, [r7, #16]
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	613b      	str	r3, [r7, #16]
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	689b      	ldr	r3, [r3, #8]
 800ddee:	613b      	str	r3, [r7, #16]
 800ddf0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d002      	beq.n	800de00 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	77fb      	strb	r3, [r7, #31]
 800ddfe:	e000      	b.n	800de02 <HAL_SPI_Transmit+0x2b2>
  }

error:
 800de00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2201      	movs	r2, #1
 800de06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2200      	movs	r2, #0
 800de0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800de12:	7ffb      	ldrb	r3, [r7, #31]
}
 800de14:	4618      	mov	r0, r3
 800de16:	3720      	adds	r7, #32
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b08a      	sub	sp, #40	; 0x28
 800de20:	af00      	add	r7, sp, #0
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	60b9      	str	r1, [r7, #8]
 800de26:	607a      	str	r2, [r7, #4]
 800de28:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800de2a:	2301      	movs	r3, #1
 800de2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800de2e:	2300      	movs	r3, #0
 800de30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800de3a:	2b01      	cmp	r3, #1
 800de3c:	d101      	bne.n	800de42 <HAL_SPI_TransmitReceive+0x26>
 800de3e:	2302      	movs	r3, #2
 800de40:	e1fb      	b.n	800e23a <HAL_SPI_TransmitReceive+0x41e>
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2201      	movs	r2, #1
 800de46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800de4a:	f7fc fe7d 	bl	800ab48 <HAL_GetTick>
 800de4e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800de56:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800de5e:	887b      	ldrh	r3, [r7, #2]
 800de60:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800de62:	887b      	ldrh	r3, [r7, #2]
 800de64:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800de66:	7efb      	ldrb	r3, [r7, #27]
 800de68:	2b01      	cmp	r3, #1
 800de6a:	d00e      	beq.n	800de8a <HAL_SPI_TransmitReceive+0x6e>
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800de72:	d106      	bne.n	800de82 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	689b      	ldr	r3, [r3, #8]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d102      	bne.n	800de82 <HAL_SPI_TransmitReceive+0x66>
 800de7c:	7efb      	ldrb	r3, [r7, #27]
 800de7e:	2b04      	cmp	r3, #4
 800de80:	d003      	beq.n	800de8a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800de82:	2302      	movs	r3, #2
 800de84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800de88:	e1cd      	b.n	800e226 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d005      	beq.n	800de9c <HAL_SPI_TransmitReceive+0x80>
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d002      	beq.n	800de9c <HAL_SPI_TransmitReceive+0x80>
 800de96:	887b      	ldrh	r3, [r7, #2]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d103      	bne.n	800dea4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800de9c:	2301      	movs	r3, #1
 800de9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800dea2:	e1c0      	b.n	800e226 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800deaa:	b2db      	uxtb	r3, r3
 800deac:	2b04      	cmp	r3, #4
 800deae:	d003      	beq.n	800deb8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	2205      	movs	r2, #5
 800deb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	2200      	movs	r2, #0
 800debc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	687a      	ldr	r2, [r7, #4]
 800dec2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	887a      	ldrh	r2, [r7, #2]
 800dec8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	887a      	ldrh	r2, [r7, #2]
 800ded0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	68ba      	ldr	r2, [r7, #8]
 800ded8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	887a      	ldrh	r2, [r7, #2]
 800dede:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	887a      	ldrh	r2, [r7, #2]
 800dee4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2200      	movs	r2, #0
 800deea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2200      	movs	r2, #0
 800def0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	68db      	ldr	r3, [r3, #12]
 800def6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800defa:	d802      	bhi.n	800df02 <HAL_SPI_TransmitReceive+0xe6>
 800defc:	8a3b      	ldrh	r3, [r7, #16]
 800defe:	2b01      	cmp	r3, #1
 800df00:	d908      	bls.n	800df14 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	685a      	ldr	r2, [r3, #4]
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800df10:	605a      	str	r2, [r3, #4]
 800df12:	e007      	b.n	800df24 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	685a      	ldr	r2, [r3, #4]
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800df22:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df2e:	2b40      	cmp	r3, #64	; 0x40
 800df30:	d007      	beq.n	800df42 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	681a      	ldr	r2, [r3, #0]
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800df40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	68db      	ldr	r3, [r3, #12]
 800df46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800df4a:	d97c      	bls.n	800e046 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d002      	beq.n	800df5a <HAL_SPI_TransmitReceive+0x13e>
 800df54:	8a7b      	ldrh	r3, [r7, #18]
 800df56:	2b01      	cmp	r3, #1
 800df58:	d169      	bne.n	800e02e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df5e:	881a      	ldrh	r2, [r3, #0]
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df6a:	1c9a      	adds	r2, r3, #2
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df74:	b29b      	uxth	r3, r3
 800df76:	3b01      	subs	r3, #1
 800df78:	b29a      	uxth	r2, r3
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800df7e:	e056      	b.n	800e02e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	689b      	ldr	r3, [r3, #8]
 800df86:	f003 0302 	and.w	r3, r3, #2
 800df8a:	2b02      	cmp	r3, #2
 800df8c:	d11b      	bne.n	800dfc6 <HAL_SPI_TransmitReceive+0x1aa>
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800df92:	b29b      	uxth	r3, r3
 800df94:	2b00      	cmp	r3, #0
 800df96:	d016      	beq.n	800dfc6 <HAL_SPI_TransmitReceive+0x1aa>
 800df98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d113      	bne.n	800dfc6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfa2:	881a      	ldrh	r2, [r3, #0]
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfae:	1c9a      	adds	r2, r3, #2
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfb8:	b29b      	uxth	r3, r3
 800dfba:	3b01      	subs	r3, #1
 800dfbc:	b29a      	uxth	r2, r3
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	689b      	ldr	r3, [r3, #8]
 800dfcc:	f003 0301 	and.w	r3, r3, #1
 800dfd0:	2b01      	cmp	r3, #1
 800dfd2:	d11c      	bne.n	800e00e <HAL_SPI_TransmitReceive+0x1f2>
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d016      	beq.n	800e00e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	68da      	ldr	r2, [r3, #12]
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfea:	b292      	uxth	r2, r2
 800dfec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dff2:	1c9a      	adds	r2, r3, #2
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800dffe:	b29b      	uxth	r3, r3
 800e000:	3b01      	subs	r3, #1
 800e002:	b29a      	uxth	r2, r3
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e00a:	2301      	movs	r3, #1
 800e00c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e00e:	f7fc fd9b 	bl	800ab48 <HAL_GetTick>
 800e012:	4602      	mov	r2, r0
 800e014:	69fb      	ldr	r3, [r7, #28]
 800e016:	1ad3      	subs	r3, r2, r3
 800e018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d807      	bhi.n	800e02e <HAL_SPI_TransmitReceive+0x212>
 800e01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e024:	d003      	beq.n	800e02e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800e026:	2303      	movs	r3, #3
 800e028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e02c:	e0fb      	b.n	800e226 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e032:	b29b      	uxth	r3, r3
 800e034:	2b00      	cmp	r3, #0
 800e036:	d1a3      	bne.n	800df80 <HAL_SPI_TransmitReceive+0x164>
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e03e:	b29b      	uxth	r3, r3
 800e040:	2b00      	cmp	r3, #0
 800e042:	d19d      	bne.n	800df80 <HAL_SPI_TransmitReceive+0x164>
 800e044:	e0df      	b.n	800e206 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	685b      	ldr	r3, [r3, #4]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d003      	beq.n	800e056 <HAL_SPI_TransmitReceive+0x23a>
 800e04e:	8a7b      	ldrh	r3, [r7, #18]
 800e050:	2b01      	cmp	r3, #1
 800e052:	f040 80cb 	bne.w	800e1ec <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d912      	bls.n	800e086 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e064:	881a      	ldrh	r2, [r3, #0]
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e070:	1c9a      	adds	r2, r3, #2
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	3b02      	subs	r3, #2
 800e07e:	b29a      	uxth	r2, r3
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e084:	e0b2      	b.n	800e1ec <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	330c      	adds	r3, #12
 800e090:	7812      	ldrb	r2, [r2, #0]
 800e092:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e098:	1c5a      	adds	r2, r3, #1
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	3b01      	subs	r3, #1
 800e0a6:	b29a      	uxth	r2, r3
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e0ac:	e09e      	b.n	800e1ec <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	689b      	ldr	r3, [r3, #8]
 800e0b4:	f003 0302 	and.w	r3, r3, #2
 800e0b8:	2b02      	cmp	r3, #2
 800e0ba:	d134      	bne.n	800e126 <HAL_SPI_TransmitReceive+0x30a>
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e0c0:	b29b      	uxth	r3, r3
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d02f      	beq.n	800e126 <HAL_SPI_TransmitReceive+0x30a>
 800e0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d12c      	bne.n	800e126 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d912      	bls.n	800e0fc <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0da:	881a      	ldrh	r2, [r3, #0]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0e6:	1c9a      	adds	r2, r3, #2
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	3b02      	subs	r3, #2
 800e0f4:	b29a      	uxth	r2, r3
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e0fa:	e012      	b.n	800e122 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	330c      	adds	r3, #12
 800e106:	7812      	ldrb	r2, [r2, #0]
 800e108:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e10e:	1c5a      	adds	r2, r3, #1
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e118:	b29b      	uxth	r3, r3
 800e11a:	3b01      	subs	r3, #1
 800e11c:	b29a      	uxth	r2, r3
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e122:	2300      	movs	r3, #0
 800e124:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	f003 0301 	and.w	r3, r3, #1
 800e130:	2b01      	cmp	r3, #1
 800e132:	d148      	bne.n	800e1c6 <HAL_SPI_TransmitReceive+0x3aa>
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d042      	beq.n	800e1c6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e146:	b29b      	uxth	r3, r3
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d923      	bls.n	800e194 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	68da      	ldr	r2, [r3, #12]
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e156:	b292      	uxth	r2, r2
 800e158:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e15e:	1c9a      	adds	r2, r3, #2
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	3b02      	subs	r3, #2
 800e16e:	b29a      	uxth	r2, r3
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d81f      	bhi.n	800e1c2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	685a      	ldr	r2, [r3, #4]
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e190:	605a      	str	r2, [r3, #4]
 800e192:	e016      	b.n	800e1c2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f103 020c 	add.w	r2, r3, #12
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1a0:	7812      	ldrb	r2, [r2, #0]
 800e1a2:	b2d2      	uxtb	r2, r2
 800e1a4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1aa:	1c5a      	adds	r2, r3, #1
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	3b01      	subs	r3, #1
 800e1ba:	b29a      	uxth	r2, r3
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e1c6:	f7fc fcbf 	bl	800ab48 <HAL_GetTick>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	69fb      	ldr	r3, [r7, #28]
 800e1ce:	1ad3      	subs	r3, r2, r3
 800e1d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d803      	bhi.n	800e1de <HAL_SPI_TransmitReceive+0x3c2>
 800e1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1dc:	d102      	bne.n	800e1e4 <HAL_SPI_TransmitReceive+0x3c8>
 800e1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d103      	bne.n	800e1ec <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800e1e4:	2303      	movs	r3, #3
 800e1e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800e1ea:	e01c      	b.n	800e226 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e1f0:	b29b      	uxth	r3, r3
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	f47f af5b 	bne.w	800e0ae <HAL_SPI_TransmitReceive+0x292>
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	2b00      	cmp	r3, #0
 800e202:	f47f af54 	bne.w	800e0ae <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e206:	69fa      	ldr	r2, [r7, #28]
 800e208:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e20a:	68f8      	ldr	r0, [r7, #12]
 800e20c:	f000 fb91 	bl	800e932 <SPI_EndRxTxTransaction>
 800e210:	4603      	mov	r3, r0
 800e212:	2b00      	cmp	r3, #0
 800e214:	d006      	beq.n	800e224 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800e216:	2301      	movs	r3, #1
 800e218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	2220      	movs	r2, #32
 800e220:	661a      	str	r2, [r3, #96]	; 0x60
 800e222:	e000      	b.n	800e226 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800e224:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2201      	movs	r2, #1
 800e22a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2200      	movs	r2, #0
 800e232:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e236:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3728      	adds	r7, #40	; 0x28
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
	...

0800e244 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b086      	sub	sp, #24
 800e248:	af00      	add	r7, sp, #0
 800e24a:	60f8      	str	r0, [r7, #12]
 800e24c:	60b9      	str	r1, [r7, #8]
 800e24e:	4613      	mov	r3, r2
 800e250:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e252:	2300      	movs	r3, #0
 800e254:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d101      	bne.n	800e264 <HAL_SPI_Transmit_DMA+0x20>
 800e260:	2302      	movs	r3, #2
 800e262:	e0d0      	b.n	800e406 <HAL_SPI_Transmit_DMA+0x1c2>
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2201      	movs	r2, #1
 800e268:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e272:	b2db      	uxtb	r3, r3
 800e274:	2b01      	cmp	r3, #1
 800e276:	d002      	beq.n	800e27e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800e278:	2302      	movs	r3, #2
 800e27a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e27c:	e0be      	b.n	800e3fc <HAL_SPI_Transmit_DMA+0x1b8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d002      	beq.n	800e28a <HAL_SPI_Transmit_DMA+0x46>
 800e284:	88fb      	ldrh	r3, [r7, #6]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d102      	bne.n	800e290 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800e28a:	2301      	movs	r3, #1
 800e28c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e28e:	e0b5      	b.n	800e3fc <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2203      	movs	r2, #3
 800e294:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	2200      	movs	r2, #0
 800e29c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	68ba      	ldr	r2, [r7, #8]
 800e2a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	88fa      	ldrh	r2, [r7, #6]
 800e2a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	88fa      	ldrh	r2, [r7, #6]
 800e2ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	689b      	ldr	r3, [r3, #8]
 800e2d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2da:	d107      	bne.n	800e2ec <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	681a      	ldr	r2, [r3, #0]
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e2ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2f0:	4a47      	ldr	r2, [pc, #284]	; (800e410 <HAL_SPI_Transmit_DMA+0x1cc>)
 800e2f2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2f8:	4a46      	ldr	r2, [pc, #280]	; (800e414 <HAL_SPI_Transmit_DMA+0x1d0>)
 800e2fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e300:	4a45      	ldr	r2, [pc, #276]	; (800e418 <HAL_SPI_Transmit_DMA+0x1d4>)
 800e302:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e308:	2200      	movs	r2, #0
 800e30a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	685a      	ldr	r2, [r3, #4]
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e31a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e324:	d82d      	bhi.n	800e382 <HAL_SPI_Transmit_DMA+0x13e>
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e32a:	699b      	ldr	r3, [r3, #24]
 800e32c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e330:	d127      	bne.n	800e382 <HAL_SPI_Transmit_DMA+0x13e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e336:	b29b      	uxth	r3, r3
 800e338:	f003 0301 	and.w	r3, r3, #1
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d10f      	bne.n	800e360 <HAL_SPI_Transmit_DMA+0x11c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	685a      	ldr	r2, [r3, #4]
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e34e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e354:	b29b      	uxth	r3, r3
 800e356:	085b      	lsrs	r3, r3, #1
 800e358:	b29a      	uxth	r2, r3
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e35e:	e010      	b.n	800e382 <HAL_SPI_Transmit_DMA+0x13e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	685a      	ldr	r2, [r3, #4]
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e36e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e374:	b29b      	uxth	r3, r3
 800e376:	085b      	lsrs	r3, r3, #1
 800e378:	b29b      	uxth	r3, r3
 800e37a:	3301      	adds	r3, #1
 800e37c:	b29a      	uxth	r2, r3
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e38a:	4619      	mov	r1, r3
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	330c      	adds	r3, #12
 800e392:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e398:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e39a:	f7fd ff59 	bl	800c250 <HAL_DMA_Start_IT>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d00c      	beq.n	800e3be <HAL_SPI_Transmit_DMA+0x17a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3a8:	f043 0210 	orr.w	r2, r3, #16
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800e3bc:	e01e      	b.n	800e3fc <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3c8:	2b40      	cmp	r3, #64	; 0x40
 800e3ca:	d007      	beq.n	800e3dc <HAL_SPI_Transmit_DMA+0x198>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	681a      	ldr	r2, [r3, #0]
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e3da:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	685a      	ldr	r2, [r3, #4]
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f042 0220 	orr.w	r2, r2, #32
 800e3ea:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	685a      	ldr	r2, [r3, #4]
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f042 0202 	orr.w	r2, r2, #2
 800e3fa:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2200      	movs	r2, #0
 800e400:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e404:	7dfb      	ldrb	r3, [r7, #23]
}
 800e406:	4618      	mov	r0, r3
 800e408:	3718      	adds	r7, #24
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}
 800e40e:	bf00      	nop
 800e410:	0800e6ff 	.word	0x0800e6ff
 800e414:	0800e659 	.word	0x0800e659
 800e418:	0800e71b 	.word	0x0800e71b

0800e41c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b088      	sub	sp, #32
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	685b      	ldr	r3, [r3, #4]
 800e42a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	689b      	ldr	r3, [r3, #8]
 800e432:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e434:	69bb      	ldr	r3, [r7, #24]
 800e436:	099b      	lsrs	r3, r3, #6
 800e438:	f003 0301 	and.w	r3, r3, #1
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d10f      	bne.n	800e460 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e440:	69bb      	ldr	r3, [r7, #24]
 800e442:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e446:	2b00      	cmp	r3, #0
 800e448:	d00a      	beq.n	800e460 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e44a:	69fb      	ldr	r3, [r7, #28]
 800e44c:	099b      	lsrs	r3, r3, #6
 800e44e:	f003 0301 	and.w	r3, r3, #1
 800e452:	2b00      	cmp	r3, #0
 800e454:	d004      	beq.n	800e460 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	4798      	blx	r3
    return;
 800e45e:	e0d8      	b.n	800e612 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800e460:	69bb      	ldr	r3, [r7, #24]
 800e462:	085b      	lsrs	r3, r3, #1
 800e464:	f003 0301 	and.w	r3, r3, #1
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d00a      	beq.n	800e482 <HAL_SPI_IRQHandler+0x66>
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	09db      	lsrs	r3, r3, #7
 800e470:	f003 0301 	and.w	r3, r3, #1
 800e474:	2b00      	cmp	r3, #0
 800e476:	d004      	beq.n	800e482 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	4798      	blx	r3
    return;
 800e480:	e0c7      	b.n	800e612 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e482:	69bb      	ldr	r3, [r7, #24]
 800e484:	095b      	lsrs	r3, r3, #5
 800e486:	f003 0301 	and.w	r3, r3, #1
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d10c      	bne.n	800e4a8 <HAL_SPI_IRQHandler+0x8c>
 800e48e:	69bb      	ldr	r3, [r7, #24]
 800e490:	099b      	lsrs	r3, r3, #6
 800e492:	f003 0301 	and.w	r3, r3, #1
 800e496:	2b00      	cmp	r3, #0
 800e498:	d106      	bne.n	800e4a8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800e49a:	69bb      	ldr	r3, [r7, #24]
 800e49c:	0a1b      	lsrs	r3, r3, #8
 800e49e:	f003 0301 	and.w	r3, r3, #1
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	f000 80b5 	beq.w	800e612 <HAL_SPI_IRQHandler+0x1f6>
 800e4a8:	69fb      	ldr	r3, [r7, #28]
 800e4aa:	095b      	lsrs	r3, r3, #5
 800e4ac:	f003 0301 	and.w	r3, r3, #1
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	f000 80ae 	beq.w	800e612 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e4b6:	69bb      	ldr	r3, [r7, #24]
 800e4b8:	099b      	lsrs	r3, r3, #6
 800e4ba:	f003 0301 	and.w	r3, r3, #1
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d023      	beq.n	800e50a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e4c8:	b2db      	uxtb	r3, r3
 800e4ca:	2b03      	cmp	r3, #3
 800e4cc:	d011      	beq.n	800e4f2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e4d2:	f043 0204 	orr.w	r2, r3, #4
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e4da:	2300      	movs	r3, #0
 800e4dc:	617b      	str	r3, [r7, #20]
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	68db      	ldr	r3, [r3, #12]
 800e4e4:	617b      	str	r3, [r7, #20]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	689b      	ldr	r3, [r3, #8]
 800e4ec:	617b      	str	r3, [r7, #20]
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	e00b      	b.n	800e50a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	613b      	str	r3, [r7, #16]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	68db      	ldr	r3, [r3, #12]
 800e4fc:	613b      	str	r3, [r7, #16]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	689b      	ldr	r3, [r3, #8]
 800e504:	613b      	str	r3, [r7, #16]
 800e506:	693b      	ldr	r3, [r7, #16]
        return;
 800e508:	e083      	b.n	800e612 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e50a:	69bb      	ldr	r3, [r7, #24]
 800e50c:	095b      	lsrs	r3, r3, #5
 800e50e:	f003 0301 	and.w	r3, r3, #1
 800e512:	2b00      	cmp	r3, #0
 800e514:	d014      	beq.n	800e540 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e51a:	f043 0201 	orr.w	r2, r3, #1
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e522:	2300      	movs	r3, #0
 800e524:	60fb      	str	r3, [r7, #12]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	689b      	ldr	r3, [r3, #8]
 800e52c:	60fb      	str	r3, [r7, #12]
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e53c:	601a      	str	r2, [r3, #0]
 800e53e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e540:	69bb      	ldr	r3, [r7, #24]
 800e542:	0a1b      	lsrs	r3, r3, #8
 800e544:	f003 0301 	and.w	r3, r3, #1
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d00c      	beq.n	800e566 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e550:	f043 0208 	orr.w	r2, r3, #8
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e558:	2300      	movs	r3, #0
 800e55a:	60bb      	str	r3, [r7, #8]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	689b      	ldr	r3, [r3, #8]
 800e562:	60bb      	str	r3, [r7, #8]
 800e564:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d050      	beq.n	800e610 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	685a      	ldr	r2, [r3, #4]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e57c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2201      	movs	r2, #1
 800e582:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800e586:	69fb      	ldr	r3, [r7, #28]
 800e588:	f003 0302 	and.w	r3, r3, #2
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d104      	bne.n	800e59a <HAL_SPI_IRQHandler+0x17e>
 800e590:	69fb      	ldr	r3, [r7, #28]
 800e592:	f003 0301 	and.w	r3, r3, #1
 800e596:	2b00      	cmp	r3, #0
 800e598:	d034      	beq.n	800e604 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	685a      	ldr	r2, [r3, #4]
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f022 0203 	bic.w	r2, r2, #3
 800e5a8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d011      	beq.n	800e5d6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5b6:	4a18      	ldr	r2, [pc, #96]	; (800e618 <HAL_SPI_IRQHandler+0x1fc>)
 800e5b8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7fd fec1 	bl	800c346 <HAL_DMA_Abort_IT>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d005      	beq.n	800e5d6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e5ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d016      	beq.n	800e60c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5e2:	4a0d      	ldr	r2, [pc, #52]	; (800e618 <HAL_SPI_IRQHandler+0x1fc>)
 800e5e4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7fd feab 	bl	800c346 <HAL_DMA_Abort_IT>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d00a      	beq.n	800e60c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e5fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800e602:	e003      	b.n	800e60c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f000 f81d 	bl	800e644 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e60a:	e000      	b.n	800e60e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800e60c:	bf00      	nop
    return;
 800e60e:	bf00      	nop
 800e610:	bf00      	nop
  }
}
 800e612:	3720      	adds	r7, #32
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	0800e75b 	.word	0x0800e75b

0800e61c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800e624:	bf00      	nop
 800e626:	370c      	adds	r7, #12
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr

0800e630 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e630:	b480      	push	{r7}
 800e632:	b083      	sub	sp, #12
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800e638:	bf00      	nop
 800e63a:	370c      	adds	r7, #12
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr

0800e644 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e644:	b480      	push	{r7}
 800e646:	b083      	sub	sp, #12
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e64c:	bf00      	nop
 800e64e:	370c      	adds	r7, #12
 800e650:	46bd      	mov	sp, r7
 800e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e656:	4770      	bx	lr

0800e658 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b086      	sub	sp, #24
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e664:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e666:	f7fc fa6f 	bl	800ab48 <HAL_GetTick>
 800e66a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	f003 0320 	and.w	r3, r3, #32
 800e676:	2b20      	cmp	r3, #32
 800e678:	d03b      	beq.n	800e6f2 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	685a      	ldr	r2, [r3, #4]
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	f022 0220 	bic.w	r2, r2, #32
 800e688:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	685a      	ldr	r2, [r3, #4]
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f022 0202 	bic.w	r2, r2, #2
 800e698:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e69a:	693a      	ldr	r2, [r7, #16]
 800e69c:	2164      	movs	r1, #100	; 0x64
 800e69e:	6978      	ldr	r0, [r7, #20]
 800e6a0:	f000 f947 	bl	800e932 <SPI_EndRxTxTransaction>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d005      	beq.n	800e6b6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6ae:	f043 0220 	orr.w	r2, r3, #32
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	689b      	ldr	r3, [r3, #8]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d10a      	bne.n	800e6d4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e6be:	2300      	movs	r3, #0
 800e6c0:	60fb      	str	r3, [r7, #12]
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	60fb      	str	r3, [r7, #12]
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	689b      	ldr	r3, [r3, #8]
 800e6d0:	60fb      	str	r3, [r7, #12]
 800e6d2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	2201      	movs	r2, #1
 800e6de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d003      	beq.n	800e6f2 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e6ea:	6978      	ldr	r0, [r7, #20]
 800e6ec:	f7ff ffaa 	bl	800e644 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e6f0:	e002      	b.n	800e6f8 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800e6f2:	6978      	ldr	r0, [r7, #20]
 800e6f4:	f7ff ff92 	bl	800e61c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e6f8:	3718      	adds	r7, #24
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}

0800e6fe <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e6fe:	b580      	push	{r7, lr}
 800e700:	b084      	sub	sp, #16
 800e702:	af00      	add	r7, sp, #0
 800e704:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e70a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800e70c:	68f8      	ldr	r0, [r7, #12]
 800e70e:	f7ff ff8f 	bl	800e630 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e712:	bf00      	nop
 800e714:	3710      	adds	r7, #16
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}

0800e71a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e71a:	b580      	push	{r7, lr}
 800e71c:	b084      	sub	sp, #16
 800e71e:	af00      	add	r7, sp, #0
 800e720:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e726:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	685a      	ldr	r2, [r3, #4]
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f022 0203 	bic.w	r2, r2, #3
 800e736:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e73c:	f043 0210 	orr.w	r2, r3, #16
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2201      	movs	r2, #1
 800e748:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	f7ff ff79 	bl	800e644 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e752:	bf00      	nop
 800e754:	3710      	adds	r7, #16
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b084      	sub	sp, #16
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e766:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	2200      	movs	r2, #0
 800e76c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2200      	movs	r2, #0
 800e774:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e776:	68f8      	ldr	r0, [r7, #12]
 800e778:	f7ff ff64 	bl	800e644 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e77c:	bf00      	nop
 800e77e:	3710      	adds	r7, #16
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}

0800e784 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b084      	sub	sp, #16
 800e788:	af00      	add	r7, sp, #0
 800e78a:	60f8      	str	r0, [r7, #12]
 800e78c:	60b9      	str	r1, [r7, #8]
 800e78e:	603b      	str	r3, [r7, #0]
 800e790:	4613      	mov	r3, r2
 800e792:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e794:	e04c      	b.n	800e830 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e79c:	d048      	beq.n	800e830 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e79e:	f7fc f9d3 	bl	800ab48 <HAL_GetTick>
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	69bb      	ldr	r3, [r7, #24]
 800e7a6:	1ad3      	subs	r3, r2, r3
 800e7a8:	683a      	ldr	r2, [r7, #0]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d902      	bls.n	800e7b4 <SPI_WaitFlagStateUntilTimeout+0x30>
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d13d      	bne.n	800e830 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	685a      	ldr	r2, [r3, #4]
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e7c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	685b      	ldr	r3, [r3, #4]
 800e7c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e7cc:	d111      	bne.n	800e7f2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	689b      	ldr	r3, [r3, #8]
 800e7d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e7d6:	d004      	beq.n	800e7e2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	689b      	ldr	r3, [r3, #8]
 800e7dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e7e0:	d107      	bne.n	800e7f2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	681a      	ldr	r2, [r3, #0]
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e7f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7fa:	d10f      	bne.n	800e81c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	681a      	ldr	r2, [r3, #0]
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e80a:	601a      	str	r2, [r3, #0]
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e81a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	2201      	movs	r2, #1
 800e820:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2200      	movs	r2, #0
 800e828:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e82c:	2303      	movs	r3, #3
 800e82e:	e00f      	b.n	800e850 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	689a      	ldr	r2, [r3, #8]
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	4013      	ands	r3, r2
 800e83a:	68ba      	ldr	r2, [r7, #8]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	bf0c      	ite	eq
 800e840:	2301      	moveq	r3, #1
 800e842:	2300      	movne	r3, #0
 800e844:	b2db      	uxtb	r3, r3
 800e846:	461a      	mov	r2, r3
 800e848:	79fb      	ldrb	r3, [r7, #7]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d1a3      	bne.n	800e796 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800e84e:	2300      	movs	r3, #0
}
 800e850:	4618      	mov	r0, r3
 800e852:	3710      	adds	r7, #16
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}

0800e858 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b084      	sub	sp, #16
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	60f8      	str	r0, [r7, #12]
 800e860:	60b9      	str	r1, [r7, #8]
 800e862:	607a      	str	r2, [r7, #4]
 800e864:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800e866:	e057      	b.n	800e918 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e86e:	d106      	bne.n	800e87e <SPI_WaitFifoStateUntilTimeout+0x26>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d103      	bne.n	800e87e <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	330c      	adds	r3, #12
 800e87c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e884:	d048      	beq.n	800e918 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e886:	f7fc f95f 	bl	800ab48 <HAL_GetTick>
 800e88a:	4602      	mov	r2, r0
 800e88c:	69bb      	ldr	r3, [r7, #24]
 800e88e:	1ad3      	subs	r3, r2, r3
 800e890:	683a      	ldr	r2, [r7, #0]
 800e892:	429a      	cmp	r2, r3
 800e894:	d902      	bls.n	800e89c <SPI_WaitFifoStateUntilTimeout+0x44>
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d13d      	bne.n	800e918 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	685a      	ldr	r2, [r3, #4]
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e8aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e8b4:	d111      	bne.n	800e8da <SPI_WaitFifoStateUntilTimeout+0x82>
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	689b      	ldr	r3, [r3, #8]
 800e8ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8be:	d004      	beq.n	800e8ca <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	689b      	ldr	r3, [r3, #8]
 800e8c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8c8:	d107      	bne.n	800e8da <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	681a      	ldr	r2, [r3, #0]
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e8d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8e2:	d10f      	bne.n	800e904 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	681a      	ldr	r2, [r3, #0]
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e8f2:	601a      	str	r2, [r3, #0]
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e902:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2201      	movs	r2, #1
 800e908:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	2200      	movs	r2, #0
 800e910:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800e914:	2303      	movs	r3, #3
 800e916:	e008      	b.n	800e92a <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	689a      	ldr	r2, [r3, #8]
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	4013      	ands	r3, r2
 800e922:	687a      	ldr	r2, [r7, #4]
 800e924:	429a      	cmp	r2, r3
 800e926:	d19f      	bne.n	800e868 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800e928:	2300      	movs	r3, #0
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}

0800e932 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e932:	b580      	push	{r7, lr}
 800e934:	b086      	sub	sp, #24
 800e936:	af02      	add	r7, sp, #8
 800e938:	60f8      	str	r0, [r7, #12]
 800e93a:	60b9      	str	r1, [r7, #8]
 800e93c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	9300      	str	r3, [sp, #0]
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	2200      	movs	r2, #0
 800e946:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e94a:	68f8      	ldr	r0, [r7, #12]
 800e94c:	f7ff ff84 	bl	800e858 <SPI_WaitFifoStateUntilTimeout>
 800e950:	4603      	mov	r3, r0
 800e952:	2b00      	cmp	r3, #0
 800e954:	d007      	beq.n	800e966 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e95a:	f043 0220 	orr.w	r2, r3, #32
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e962:	2303      	movs	r3, #3
 800e964:	e027      	b.n	800e9b6 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	9300      	str	r3, [sp, #0]
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	2200      	movs	r2, #0
 800e96e:	2180      	movs	r1, #128	; 0x80
 800e970:	68f8      	ldr	r0, [r7, #12]
 800e972:	f7ff ff07 	bl	800e784 <SPI_WaitFlagStateUntilTimeout>
 800e976:	4603      	mov	r3, r0
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d007      	beq.n	800e98c <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e980:	f043 0220 	orr.w	r2, r3, #32
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e988:	2303      	movs	r3, #3
 800e98a:	e014      	b.n	800e9b6 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	2200      	movs	r2, #0
 800e994:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e998:	68f8      	ldr	r0, [r7, #12]
 800e99a:	f7ff ff5d 	bl	800e858 <SPI_WaitFifoStateUntilTimeout>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d007      	beq.n	800e9b4 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9a8:	f043 0220 	orr.w	r2, r3, #32
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e9b0:	2303      	movs	r3, #3
 800e9b2:	e000      	b.n	800e9b6 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800e9b4:	2300      	movs	r3, #0
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3710      	adds	r7, #16
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}

0800e9be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e9be:	b580      	push	{r7, lr}
 800e9c0:	b082      	sub	sp, #8
 800e9c2:	af00      	add	r7, sp, #0
 800e9c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d101      	bne.n	800e9d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	e01d      	b.n	800ea0c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9d6:	b2db      	uxtb	r3, r3
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d106      	bne.n	800e9ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f000 f815 	bl	800ea14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2202      	movs	r2, #2
 800e9ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681a      	ldr	r2, [r3, #0]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	3304      	adds	r3, #4
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	4610      	mov	r0, r2
 800e9fe:	f000 f9e5 	bl	800edcc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2201      	movs	r2, #1
 800ea06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ea0a:	2300      	movs	r3, #0
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3708      	adds	r7, #8
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b083      	sub	sp, #12
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ea1c:	bf00      	nop
 800ea1e:	370c      	adds	r7, #12
 800ea20:	46bd      	mov	sp, r7
 800ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea26:	4770      	bx	lr

0800ea28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ea28:	b480      	push	{r7}
 800ea2a:	b085      	sub	sp, #20
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	68da      	ldr	r2, [r3, #12]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	f042 0201 	orr.w	r2, r2, #1
 800ea3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	689a      	ldr	r2, [r3, #8]
 800ea46:	4b0c      	ldr	r3, [pc, #48]	; (800ea78 <HAL_TIM_Base_Start_IT+0x50>)
 800ea48:	4013      	ands	r3, r2
 800ea4a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	2b06      	cmp	r3, #6
 800ea50:	d00b      	beq.n	800ea6a <HAL_TIM_Base_Start_IT+0x42>
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea58:	d007      	beq.n	800ea6a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	f042 0201 	orr.w	r2, r2, #1
 800ea68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ea6a:	2300      	movs	r3, #0
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3714      	adds	r7, #20
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr
 800ea78:	00010007 	.word	0x00010007

0800ea7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	691b      	ldr	r3, [r3, #16]
 800ea8a:	f003 0302 	and.w	r3, r3, #2
 800ea8e:	2b02      	cmp	r3, #2
 800ea90:	d122      	bne.n	800ead8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	68db      	ldr	r3, [r3, #12]
 800ea98:	f003 0302 	and.w	r3, r3, #2
 800ea9c:	2b02      	cmp	r3, #2
 800ea9e:	d11b      	bne.n	800ead8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f06f 0202 	mvn.w	r2, #2
 800eaa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2201      	movs	r2, #1
 800eaae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	699b      	ldr	r3, [r3, #24]
 800eab6:	f003 0303 	and.w	r3, r3, #3
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d003      	beq.n	800eac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f000 f965 	bl	800ed8e <HAL_TIM_IC_CaptureCallback>
 800eac4:	e005      	b.n	800ead2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f000 f957 	bl	800ed7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f000 f968 	bl	800eda2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2200      	movs	r2, #0
 800ead6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	691b      	ldr	r3, [r3, #16]
 800eade:	f003 0304 	and.w	r3, r3, #4
 800eae2:	2b04      	cmp	r3, #4
 800eae4:	d122      	bne.n	800eb2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	68db      	ldr	r3, [r3, #12]
 800eaec:	f003 0304 	and.w	r3, r3, #4
 800eaf0:	2b04      	cmp	r3, #4
 800eaf2:	d11b      	bne.n	800eb2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	f06f 0204 	mvn.w	r2, #4
 800eafc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2202      	movs	r2, #2
 800eb02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	699b      	ldr	r3, [r3, #24]
 800eb0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d003      	beq.n	800eb1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f000 f93b 	bl	800ed8e <HAL_TIM_IC_CaptureCallback>
 800eb18:	e005      	b.n	800eb26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f000 f92d 	bl	800ed7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f000 f93e 	bl	800eda2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	691b      	ldr	r3, [r3, #16]
 800eb32:	f003 0308 	and.w	r3, r3, #8
 800eb36:	2b08      	cmp	r3, #8
 800eb38:	d122      	bne.n	800eb80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	68db      	ldr	r3, [r3, #12]
 800eb40:	f003 0308 	and.w	r3, r3, #8
 800eb44:	2b08      	cmp	r3, #8
 800eb46:	d11b      	bne.n	800eb80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f06f 0208 	mvn.w	r2, #8
 800eb50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2204      	movs	r2, #4
 800eb56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	69db      	ldr	r3, [r3, #28]
 800eb5e:	f003 0303 	and.w	r3, r3, #3
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d003      	beq.n	800eb6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f000 f911 	bl	800ed8e <HAL_TIM_IC_CaptureCallback>
 800eb6c:	e005      	b.n	800eb7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f000 f903 	bl	800ed7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f000 f914 	bl	800eda2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	691b      	ldr	r3, [r3, #16]
 800eb86:	f003 0310 	and.w	r3, r3, #16
 800eb8a:	2b10      	cmp	r3, #16
 800eb8c:	d122      	bne.n	800ebd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	68db      	ldr	r3, [r3, #12]
 800eb94:	f003 0310 	and.w	r3, r3, #16
 800eb98:	2b10      	cmp	r3, #16
 800eb9a:	d11b      	bne.n	800ebd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	f06f 0210 	mvn.w	r2, #16
 800eba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2208      	movs	r2, #8
 800ebaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	69db      	ldr	r3, [r3, #28]
 800ebb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d003      	beq.n	800ebc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f000 f8e7 	bl	800ed8e <HAL_TIM_IC_CaptureCallback>
 800ebc0:	e005      	b.n	800ebce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f000 f8d9 	bl	800ed7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f000 f8ea 	bl	800eda2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	691b      	ldr	r3, [r3, #16]
 800ebda:	f003 0301 	and.w	r3, r3, #1
 800ebde:	2b01      	cmp	r3, #1
 800ebe0:	d10e      	bne.n	800ec00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	68db      	ldr	r3, [r3, #12]
 800ebe8:	f003 0301 	and.w	r3, r3, #1
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	d107      	bne.n	800ec00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	f06f 0201 	mvn.w	r2, #1
 800ebf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f7fa ff4c 	bl	8009a98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	691b      	ldr	r3, [r3, #16]
 800ec06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec0a:	2b80      	cmp	r3, #128	; 0x80
 800ec0c:	d10e      	bne.n	800ec2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec18:	2b80      	cmp	r3, #128	; 0x80
 800ec1a:	d107      	bne.n	800ec2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ec24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f000 f96a 	bl	800ef00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	691b      	ldr	r3, [r3, #16]
 800ec32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec3a:	d10e      	bne.n	800ec5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	68db      	ldr	r3, [r3, #12]
 800ec42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec46:	2b80      	cmp	r3, #128	; 0x80
 800ec48:	d107      	bne.n	800ec5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ec52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f000 f95d 	bl	800ef14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	691b      	ldr	r3, [r3, #16]
 800ec60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec64:	2b40      	cmp	r3, #64	; 0x40
 800ec66:	d10e      	bne.n	800ec86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	68db      	ldr	r3, [r3, #12]
 800ec6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec72:	2b40      	cmp	r3, #64	; 0x40
 800ec74:	d107      	bne.n	800ec86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ec7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f000 f898 	bl	800edb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	691b      	ldr	r3, [r3, #16]
 800ec8c:	f003 0320 	and.w	r3, r3, #32
 800ec90:	2b20      	cmp	r3, #32
 800ec92:	d10e      	bne.n	800ecb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	68db      	ldr	r3, [r3, #12]
 800ec9a:	f003 0320 	and.w	r3, r3, #32
 800ec9e:	2b20      	cmp	r3, #32
 800eca0:	d107      	bne.n	800ecb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	f06f 0220 	mvn.w	r2, #32
 800ecaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f000 f91d 	bl	800eeec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	691b      	ldr	r3, [r3, #16]
 800ecb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ecbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ecc0:	d10f      	bne.n	800ece2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	68db      	ldr	r3, [r3, #12]
 800ecc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eccc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ecd0:	d107      	bne.n	800ece2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ecda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f000 f923 	bl	800ef28 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	691b      	ldr	r3, [r3, #16]
 800ece8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ecec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ecf0:	d10f      	bne.n	800ed12 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	68db      	ldr	r3, [r3, #12]
 800ecf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ecfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ed00:	d107      	bne.n	800ed12 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800ed0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f000 f915 	bl	800ef3c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	691b      	ldr	r3, [r3, #16]
 800ed18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ed1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed20:	d10f      	bne.n	800ed42 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	68db      	ldr	r3, [r3, #12]
 800ed28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ed2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed30:	d107      	bne.n	800ed42 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800ed3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f000 f907 	bl	800ef50 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	691b      	ldr	r3, [r3, #16]
 800ed48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ed4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ed50:	d10f      	bne.n	800ed72 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	68db      	ldr	r3, [r3, #12]
 800ed58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ed5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ed60:	d107      	bne.n	800ed72 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800ed6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f000 f8f9 	bl	800ef64 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ed72:	bf00      	nop
 800ed74:	3708      	adds	r7, #8
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}

0800ed7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ed7a:	b480      	push	{r7}
 800ed7c:	b083      	sub	sp, #12
 800ed7e:	af00      	add	r7, sp, #0
 800ed80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ed82:	bf00      	nop
 800ed84:	370c      	adds	r7, #12
 800ed86:	46bd      	mov	sp, r7
 800ed88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8c:	4770      	bx	lr

0800ed8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ed8e:	b480      	push	{r7}
 800ed90:	b083      	sub	sp, #12
 800ed92:	af00      	add	r7, sp, #0
 800ed94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ed96:	bf00      	nop
 800ed98:	370c      	adds	r7, #12
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda0:	4770      	bx	lr

0800eda2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eda2:	b480      	push	{r7}
 800eda4:	b083      	sub	sp, #12
 800eda6:	af00      	add	r7, sp, #0
 800eda8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800edaa:	bf00      	nop
 800edac:	370c      	adds	r7, #12
 800edae:	46bd      	mov	sp, r7
 800edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb4:	4770      	bx	lr

0800edb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800edb6:	b480      	push	{r7}
 800edb8:	b083      	sub	sp, #12
 800edba:	af00      	add	r7, sp, #0
 800edbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800edbe:	bf00      	nop
 800edc0:	370c      	adds	r7, #12
 800edc2:	46bd      	mov	sp, r7
 800edc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc8:	4770      	bx	lr
	...

0800edcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800edcc:	b480      	push	{r7}
 800edce:	b085      	sub	sp, #20
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	4a3c      	ldr	r2, [pc, #240]	; (800eed0 <TIM_Base_SetConfig+0x104>)
 800ede0:	4293      	cmp	r3, r2
 800ede2:	d00f      	beq.n	800ee04 <TIM_Base_SetConfig+0x38>
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800edea:	d00b      	beq.n	800ee04 <TIM_Base_SetConfig+0x38>
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	4a39      	ldr	r2, [pc, #228]	; (800eed4 <TIM_Base_SetConfig+0x108>)
 800edf0:	4293      	cmp	r3, r2
 800edf2:	d007      	beq.n	800ee04 <TIM_Base_SetConfig+0x38>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	4a38      	ldr	r2, [pc, #224]	; (800eed8 <TIM_Base_SetConfig+0x10c>)
 800edf8:	4293      	cmp	r3, r2
 800edfa:	d003      	beq.n	800ee04 <TIM_Base_SetConfig+0x38>
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	4a37      	ldr	r2, [pc, #220]	; (800eedc <TIM_Base_SetConfig+0x110>)
 800ee00:	4293      	cmp	r3, r2
 800ee02:	d108      	bne.n	800ee16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	685b      	ldr	r3, [r3, #4]
 800ee10:	68fa      	ldr	r2, [r7, #12]
 800ee12:	4313      	orrs	r3, r2
 800ee14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	4a2d      	ldr	r2, [pc, #180]	; (800eed0 <TIM_Base_SetConfig+0x104>)
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d01b      	beq.n	800ee56 <TIM_Base_SetConfig+0x8a>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee24:	d017      	beq.n	800ee56 <TIM_Base_SetConfig+0x8a>
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	4a2a      	ldr	r2, [pc, #168]	; (800eed4 <TIM_Base_SetConfig+0x108>)
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d013      	beq.n	800ee56 <TIM_Base_SetConfig+0x8a>
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	4a29      	ldr	r2, [pc, #164]	; (800eed8 <TIM_Base_SetConfig+0x10c>)
 800ee32:	4293      	cmp	r3, r2
 800ee34:	d00f      	beq.n	800ee56 <TIM_Base_SetConfig+0x8a>
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	4a28      	ldr	r2, [pc, #160]	; (800eedc <TIM_Base_SetConfig+0x110>)
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d00b      	beq.n	800ee56 <TIM_Base_SetConfig+0x8a>
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	4a27      	ldr	r2, [pc, #156]	; (800eee0 <TIM_Base_SetConfig+0x114>)
 800ee42:	4293      	cmp	r3, r2
 800ee44:	d007      	beq.n	800ee56 <TIM_Base_SetConfig+0x8a>
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	4a26      	ldr	r2, [pc, #152]	; (800eee4 <TIM_Base_SetConfig+0x118>)
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	d003      	beq.n	800ee56 <TIM_Base_SetConfig+0x8a>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	4a25      	ldr	r2, [pc, #148]	; (800eee8 <TIM_Base_SetConfig+0x11c>)
 800ee52:	4293      	cmp	r3, r2
 800ee54:	d108      	bne.n	800ee68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	68db      	ldr	r3, [r3, #12]
 800ee62:	68fa      	ldr	r2, [r7, #12]
 800ee64:	4313      	orrs	r3, r2
 800ee66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	695b      	ldr	r3, [r3, #20]
 800ee72:	4313      	orrs	r3, r2
 800ee74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	68fa      	ldr	r2, [r7, #12]
 800ee7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	689a      	ldr	r2, [r3, #8]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	681a      	ldr	r2, [r3, #0]
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	4a10      	ldr	r2, [pc, #64]	; (800eed0 <TIM_Base_SetConfig+0x104>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d00f      	beq.n	800eeb4 <TIM_Base_SetConfig+0xe8>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	4a11      	ldr	r2, [pc, #68]	; (800eedc <TIM_Base_SetConfig+0x110>)
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	d00b      	beq.n	800eeb4 <TIM_Base_SetConfig+0xe8>
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	4a10      	ldr	r2, [pc, #64]	; (800eee0 <TIM_Base_SetConfig+0x114>)
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d007      	beq.n	800eeb4 <TIM_Base_SetConfig+0xe8>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	4a0f      	ldr	r2, [pc, #60]	; (800eee4 <TIM_Base_SetConfig+0x118>)
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d003      	beq.n	800eeb4 <TIM_Base_SetConfig+0xe8>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	4a0e      	ldr	r2, [pc, #56]	; (800eee8 <TIM_Base_SetConfig+0x11c>)
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d103      	bne.n	800eebc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	691a      	ldr	r2, [r3, #16]
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2201      	movs	r2, #1
 800eec0:	615a      	str	r2, [r3, #20]
}
 800eec2:	bf00      	nop
 800eec4:	3714      	adds	r7, #20
 800eec6:	46bd      	mov	sp, r7
 800eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eecc:	4770      	bx	lr
 800eece:	bf00      	nop
 800eed0:	40012c00 	.word	0x40012c00
 800eed4:	40000400 	.word	0x40000400
 800eed8:	40000800 	.word	0x40000800
 800eedc:	40013400 	.word	0x40013400
 800eee0:	40014000 	.word	0x40014000
 800eee4:	40014400 	.word	0x40014400
 800eee8:	40014800 	.word	0x40014800

0800eeec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b083      	sub	sp, #12
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eef4:	bf00      	nop
 800eef6:	370c      	adds	r7, #12
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr

0800ef00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b083      	sub	sp, #12
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ef08:	bf00      	nop
 800ef0a:	370c      	adds	r7, #12
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr

0800ef14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ef14:	b480      	push	{r7}
 800ef16:	b083      	sub	sp, #12
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ef1c:	bf00      	nop
 800ef1e:	370c      	adds	r7, #12
 800ef20:	46bd      	mov	sp, r7
 800ef22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef26:	4770      	bx	lr

0800ef28 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ef28:	b480      	push	{r7}
 800ef2a:	b083      	sub	sp, #12
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ef30:	bf00      	nop
 800ef32:	370c      	adds	r7, #12
 800ef34:	46bd      	mov	sp, r7
 800ef36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3a:	4770      	bx	lr

0800ef3c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b083      	sub	sp, #12
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ef44:	bf00      	nop
 800ef46:	370c      	adds	r7, #12
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4e:	4770      	bx	lr

0800ef50 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ef50:	b480      	push	{r7}
 800ef52:	b083      	sub	sp, #12
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ef58:	bf00      	nop
 800ef5a:	370c      	adds	r7, #12
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr

0800ef64 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b083      	sub	sp, #12
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ef6c:	bf00      	nop
 800ef6e:	370c      	adds	r7, #12
 800ef70:	46bd      	mov	sp, r7
 800ef72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef76:	4770      	bx	lr

0800ef78 <LL_DMA_ConfigTransfer>:
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b087      	sub	sp, #28
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800ef88:	4a0e      	ldr	r2, [pc, #56]	; (800efc4 <LL_DMA_ConfigTransfer+0x4c>)
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	4413      	add	r3, r2
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	461a      	mov	r2, r3
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	4413      	add	r3, r2
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800ef9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efa0:	4908      	ldr	r1, [pc, #32]	; (800efc4 <LL_DMA_ConfigTransfer+0x4c>)
 800efa2:	68ba      	ldr	r2, [r7, #8]
 800efa4:	440a      	add	r2, r1
 800efa6:	7812      	ldrb	r2, [r2, #0]
 800efa8:	4611      	mov	r1, r2
 800efaa:	697a      	ldr	r2, [r7, #20]
 800efac:	440a      	add	r2, r1
 800efae:	4611      	mov	r1, r2
 800efb0:	687a      	ldr	r2, [r7, #4]
 800efb2:	4313      	orrs	r3, r2
 800efb4:	600b      	str	r3, [r1, #0]
}
 800efb6:	bf00      	nop
 800efb8:	371c      	adds	r7, #28
 800efba:	46bd      	mov	sp, r7
 800efbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc0:	4770      	bx	lr
 800efc2:	bf00      	nop
 800efc4:	08019d18 	.word	0x08019d18

0800efc8 <LL_DMA_SetDataLength>:
{
 800efc8:	b480      	push	{r7}
 800efca:	b087      	sub	sp, #28
 800efcc:	af00      	add	r7, sp, #0
 800efce:	60f8      	str	r0, [r7, #12]
 800efd0:	60b9      	str	r1, [r7, #8]
 800efd2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800efd8:	4a0d      	ldr	r2, [pc, #52]	; (800f010 <LL_DMA_SetDataLength+0x48>)
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	4413      	add	r3, r2
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	461a      	mov	r2, r3
 800efe2:	697b      	ldr	r3, [r7, #20]
 800efe4:	4413      	add	r3, r2
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	0c1b      	lsrs	r3, r3, #16
 800efea:	041b      	lsls	r3, r3, #16
 800efec:	4908      	ldr	r1, [pc, #32]	; (800f010 <LL_DMA_SetDataLength+0x48>)
 800efee:	68ba      	ldr	r2, [r7, #8]
 800eff0:	440a      	add	r2, r1
 800eff2:	7812      	ldrb	r2, [r2, #0]
 800eff4:	4611      	mov	r1, r2
 800eff6:	697a      	ldr	r2, [r7, #20]
 800eff8:	440a      	add	r2, r1
 800effa:	4611      	mov	r1, r2
 800effc:	687a      	ldr	r2, [r7, #4]
 800effe:	4313      	orrs	r3, r2
 800f000:	604b      	str	r3, [r1, #4]
}
 800f002:	bf00      	nop
 800f004:	371c      	adds	r7, #28
 800f006:	46bd      	mov	sp, r7
 800f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00c:	4770      	bx	lr
 800f00e:	bf00      	nop
 800f010:	08019d18 	.word	0x08019d18

0800f014 <LL_DMA_SetMemoryAddress>:
{
 800f014:	b480      	push	{r7}
 800f016:	b087      	sub	sp, #28
 800f018:	af00      	add	r7, sp, #0
 800f01a:	60f8      	str	r0, [r7, #12]
 800f01c:	60b9      	str	r1, [r7, #8]
 800f01e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 800f024:	4a07      	ldr	r2, [pc, #28]	; (800f044 <LL_DMA_SetMemoryAddress+0x30>)
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	4413      	add	r3, r2
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	461a      	mov	r2, r3
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	4413      	add	r3, r2
 800f032:	461a      	mov	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	60d3      	str	r3, [r2, #12]
}
 800f038:	bf00      	nop
 800f03a:	371c      	adds	r7, #28
 800f03c:	46bd      	mov	sp, r7
 800f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f042:	4770      	bx	lr
 800f044:	08019d18 	.word	0x08019d18

0800f048 <LL_DMA_SetPeriphAddress>:
{
 800f048:	b480      	push	{r7}
 800f04a:	b087      	sub	sp, #28
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	60f8      	str	r0, [r7, #12]
 800f050:	60b9      	str	r1, [r7, #8]
 800f052:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800f058:	4a07      	ldr	r2, [pc, #28]	; (800f078 <LL_DMA_SetPeriphAddress+0x30>)
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	4413      	add	r3, r2
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	461a      	mov	r2, r3
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	4413      	add	r3, r2
 800f066:	461a      	mov	r2, r3
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6093      	str	r3, [r2, #8]
}
 800f06c:	bf00      	nop
 800f06e:	371c      	adds	r7, #28
 800f070:	46bd      	mov	sp, r7
 800f072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f076:	4770      	bx	lr
 800f078:	08019d18 	.word	0x08019d18

0800f07c <LL_DMA_SetPeriphRequest>:
{
 800f07c:	b480      	push	{r7}
 800f07e:	b087      	sub	sp, #28
 800f080:	af00      	add	r7, sp, #0
 800f082:	60f8      	str	r0, [r7, #12]
 800f084:	60b9      	str	r1, [r7, #8]
 800f086:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	0a9b      	lsrs	r3, r3, #10
 800f08c:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800f090:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800f094:	00db      	lsls	r3, r3, #3
 800f096:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 800f098:	68ba      	ldr	r2, [r7, #8]
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	4413      	add	r3, r2
 800f09e:	009b      	lsls	r3, r3, #2
 800f0a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f0a4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800f0ae:	68ba      	ldr	r2, [r7, #8]
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	4413      	add	r3, r2
 800f0b4:	009b      	lsls	r3, r3, #2
 800f0b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f0ba:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800f0be:	687a      	ldr	r2, [r7, #4]
 800f0c0:	430a      	orrs	r2, r1
 800f0c2:	601a      	str	r2, [r3, #0]
}
 800f0c4:	bf00      	nop
 800f0c6:	371c      	adds	r7, #28
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr

0800f0d0 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	60f8      	str	r0, [r7, #12]
 800f0d8:	60b9      	str	r1, [r7, #8]
 800f0da:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800f0e4:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 800f0ea:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800f0f0:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800f0f6:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800f0fc:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800f102:	4313      	orrs	r3, r2
 800f104:	461a      	mov	r2, r3
 800f106:	68b9      	ldr	r1, [r7, #8]
 800f108:	68f8      	ldr	r0, [r7, #12]
 800f10a:	f7ff ff35 	bl	800ef78 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	685b      	ldr	r3, [r3, #4]
 800f112:	461a      	mov	r2, r3
 800f114:	68b9      	ldr	r1, [r7, #8]
 800f116:	68f8      	ldr	r0, [r7, #12]
 800f118:	f7ff ff7c 	bl	800f014 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	461a      	mov	r2, r3
 800f122:	68b9      	ldr	r1, [r7, #8]
 800f124:	68f8      	ldr	r0, [r7, #12]
 800f126:	f7ff ff8f 	bl	800f048 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	6a1b      	ldr	r3, [r3, #32]
 800f12e:	461a      	mov	r2, r3
 800f130:	68b9      	ldr	r1, [r7, #8]
 800f132:	68f8      	ldr	r0, [r7, #12]
 800f134:	f7ff ff48 	bl	800efc8 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f13c:	461a      	mov	r2, r3
 800f13e:	68b9      	ldr	r1, [r7, #8]
 800f140:	68f8      	ldr	r0, [r7, #12]
 800f142:	f7ff ff9b 	bl	800f07c <LL_DMA_SetPeriphRequest>

  return (uint32_t)SUCCESS;
 800f146:	2300      	movs	r3, #0
}
 800f148:	4618      	mov	r0, r3
 800f14a:	3710      	adds	r7, #16
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}

0800f150 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800f150:	b480      	push	{r7}
 800f152:	b083      	sub	sp, #12
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = (uint32_t)0x00000000U;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2200      	movs	r2, #0
 800f15c:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = (uint32_t)0x00000000U;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2200      	movs	r2, #0
 800f162:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2200      	movs	r2, #0
 800f168:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2200      	movs	r2, #0
 800f16e:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2200      	movs	r2, #0
 800f174:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2200      	movs	r2, #0
 800f17a:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2200      	movs	r2, #0
 800f180:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2200      	movs	r2, #0
 800f186:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = (uint32_t)0x00000000U;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2200      	movs	r2, #0
 800f18c:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2200      	movs	r2, #0
 800f192:	625a      	str	r2, [r3, #36]	; 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2200      	movs	r2, #0
 800f198:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f19a:	bf00      	nop
 800f19c:	370c      	adds	r7, #12
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a4:	4770      	bx	lr

0800f1a6 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800f1a6:	b480      	push	{r7}
 800f1a8:	b089      	sub	sp, #36	; 0x24
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	60f8      	str	r0, [r7, #12]
 800f1ae:	60b9      	str	r1, [r7, #8]
 800f1b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681a      	ldr	r2, [r3, #0]
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	fa93 f3a3 	rbit	r3, r3
 800f1c0:	613b      	str	r3, [r7, #16]
  return result;
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	fab3 f383 	clz	r3, r3
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	005b      	lsls	r3, r3, #1
 800f1cc:	2103      	movs	r1, #3
 800f1ce:	fa01 f303 	lsl.w	r3, r1, r3
 800f1d2:	43db      	mvns	r3, r3
 800f1d4:	401a      	ands	r2, r3
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f1da:	69fb      	ldr	r3, [r7, #28]
 800f1dc:	fa93 f3a3 	rbit	r3, r3
 800f1e0:	61bb      	str	r3, [r7, #24]
  return result;
 800f1e2:	69bb      	ldr	r3, [r7, #24]
 800f1e4:	fab3 f383 	clz	r3, r3
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	005b      	lsls	r3, r3, #1
 800f1ec:	6879      	ldr	r1, [r7, #4]
 800f1ee:	fa01 f303 	lsl.w	r3, r1, r3
 800f1f2:	431a      	orrs	r2, r3
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	601a      	str	r2, [r3, #0]
}
 800f1f8:	bf00      	nop
 800f1fa:	3724      	adds	r7, #36	; 0x24
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr

0800f204 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800f204:	b480      	push	{r7}
 800f206:	b085      	sub	sp, #20
 800f208:	af00      	add	r7, sp, #0
 800f20a:	60f8      	str	r0, [r7, #12]
 800f20c:	60b9      	str	r1, [r7, #8]
 800f20e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	685a      	ldr	r2, [r3, #4]
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	43db      	mvns	r3, r3
 800f218:	401a      	ands	r2, r3
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	6879      	ldr	r1, [r7, #4]
 800f21e:	fb01 f303 	mul.w	r3, r1, r3
 800f222:	431a      	orrs	r2, r3
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	605a      	str	r2, [r3, #4]
}
 800f228:	bf00      	nop
 800f22a:	3714      	adds	r7, #20
 800f22c:	46bd      	mov	sp, r7
 800f22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f232:	4770      	bx	lr

0800f234 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800f234:	b480      	push	{r7}
 800f236:	b089      	sub	sp, #36	; 0x24
 800f238:	af00      	add	r7, sp, #0
 800f23a:	60f8      	str	r0, [r7, #12]
 800f23c:	60b9      	str	r1, [r7, #8]
 800f23e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	689a      	ldr	r2, [r3, #8]
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	fa93 f3a3 	rbit	r3, r3
 800f24e:	613b      	str	r3, [r7, #16]
  return result;
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	fab3 f383 	clz	r3, r3
 800f256:	b2db      	uxtb	r3, r3
 800f258:	005b      	lsls	r3, r3, #1
 800f25a:	2103      	movs	r1, #3
 800f25c:	fa01 f303 	lsl.w	r3, r1, r3
 800f260:	43db      	mvns	r3, r3
 800f262:	401a      	ands	r2, r3
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	fa93 f3a3 	rbit	r3, r3
 800f26e:	61bb      	str	r3, [r7, #24]
  return result;
 800f270:	69bb      	ldr	r3, [r7, #24]
 800f272:	fab3 f383 	clz	r3, r3
 800f276:	b2db      	uxtb	r3, r3
 800f278:	005b      	lsls	r3, r3, #1
 800f27a:	6879      	ldr	r1, [r7, #4]
 800f27c:	fa01 f303 	lsl.w	r3, r1, r3
 800f280:	431a      	orrs	r2, r3
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800f286:	bf00      	nop
 800f288:	3724      	adds	r7, #36	; 0x24
 800f28a:	46bd      	mov	sp, r7
 800f28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f290:	4770      	bx	lr

0800f292 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800f292:	b480      	push	{r7}
 800f294:	b089      	sub	sp, #36	; 0x24
 800f296:	af00      	add	r7, sp, #0
 800f298:	60f8      	str	r0, [r7, #12]
 800f29a:	60b9      	str	r1, [r7, #8]
 800f29c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	68da      	ldr	r2, [r3, #12]
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	fa93 f3a3 	rbit	r3, r3
 800f2ac:	613b      	str	r3, [r7, #16]
  return result;
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	fab3 f383 	clz	r3, r3
 800f2b4:	b2db      	uxtb	r3, r3
 800f2b6:	005b      	lsls	r3, r3, #1
 800f2b8:	2103      	movs	r1, #3
 800f2ba:	fa01 f303 	lsl.w	r3, r1, r3
 800f2be:	43db      	mvns	r3, r3
 800f2c0:	401a      	ands	r2, r3
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	fa93 f3a3 	rbit	r3, r3
 800f2cc:	61bb      	str	r3, [r7, #24]
  return result;
 800f2ce:	69bb      	ldr	r3, [r7, #24]
 800f2d0:	fab3 f383 	clz	r3, r3
 800f2d4:	b2db      	uxtb	r3, r3
 800f2d6:	005b      	lsls	r3, r3, #1
 800f2d8:	6879      	ldr	r1, [r7, #4]
 800f2da:	fa01 f303 	lsl.w	r3, r1, r3
 800f2de:	431a      	orrs	r2, r3
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	60da      	str	r2, [r3, #12]
}
 800f2e4:	bf00      	nop
 800f2e6:	3724      	adds	r7, #36	; 0x24
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ee:	4770      	bx	lr

0800f2f0 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b089      	sub	sp, #36	; 0x24
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	60f8      	str	r0, [r7, #12]
 800f2f8:	60b9      	str	r1, [r7, #8]
 800f2fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	6a1a      	ldr	r2, [r3, #32]
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	fa93 f3a3 	rbit	r3, r3
 800f30a:	613b      	str	r3, [r7, #16]
  return result;
 800f30c:	693b      	ldr	r3, [r7, #16]
 800f30e:	fab3 f383 	clz	r3, r3
 800f312:	b2db      	uxtb	r3, r3
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	210f      	movs	r1, #15
 800f318:	fa01 f303 	lsl.w	r3, r1, r3
 800f31c:	43db      	mvns	r3, r3
 800f31e:	401a      	ands	r2, r3
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f324:	69fb      	ldr	r3, [r7, #28]
 800f326:	fa93 f3a3 	rbit	r3, r3
 800f32a:	61bb      	str	r3, [r7, #24]
  return result;
 800f32c:	69bb      	ldr	r3, [r7, #24]
 800f32e:	fab3 f383 	clz	r3, r3
 800f332:	b2db      	uxtb	r3, r3
 800f334:	009b      	lsls	r3, r3, #2
 800f336:	6879      	ldr	r1, [r7, #4]
 800f338:	fa01 f303 	lsl.w	r3, r1, r3
 800f33c:	431a      	orrs	r2, r3
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800f342:	bf00      	nop
 800f344:	3724      	adds	r7, #36	; 0x24
 800f346:	46bd      	mov	sp, r7
 800f348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34c:	4770      	bx	lr

0800f34e <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800f34e:	b480      	push	{r7}
 800f350:	b089      	sub	sp, #36	; 0x24
 800f352:	af00      	add	r7, sp, #0
 800f354:	60f8      	str	r0, [r7, #12]
 800f356:	60b9      	str	r1, [r7, #8]
 800f358:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	0a1b      	lsrs	r3, r3, #8
 800f362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	fa93 f3a3 	rbit	r3, r3
 800f36a:	613b      	str	r3, [r7, #16]
  return result;
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	fab3 f383 	clz	r3, r3
 800f372:	b2db      	uxtb	r3, r3
 800f374:	009b      	lsls	r3, r3, #2
 800f376:	210f      	movs	r1, #15
 800f378:	fa01 f303 	lsl.w	r3, r1, r3
 800f37c:	43db      	mvns	r3, r3
 800f37e:	401a      	ands	r2, r3
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	0a1b      	lsrs	r3, r3, #8
 800f384:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f386:	69fb      	ldr	r3, [r7, #28]
 800f388:	fa93 f3a3 	rbit	r3, r3
 800f38c:	61bb      	str	r3, [r7, #24]
  return result;
 800f38e:	69bb      	ldr	r3, [r7, #24]
 800f390:	fab3 f383 	clz	r3, r3
 800f394:	b2db      	uxtb	r3, r3
 800f396:	009b      	lsls	r3, r3, #2
 800f398:	6879      	ldr	r1, [r7, #4]
 800f39a:	fa01 f303 	lsl.w	r3, r1, r3
 800f39e:	431a      	orrs	r2, r3
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800f3a4:	bf00      	nop
 800f3a6:	3724      	adds	r7, #36	; 0x24
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr

0800f3b0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b086      	sub	sp, #24
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	fa93 f3a3 	rbit	r3, r3
 800f3c6:	60bb      	str	r3, [r7, #8]
  return result;
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	fab3 f383 	clz	r3, r3
 800f3ce:	b2db      	uxtb	r3, r3
 800f3d0:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f3d2:	e040      	b.n	800f456 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	681a      	ldr	r2, [r3, #0]
 800f3d8:	2101      	movs	r1, #1
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	fa01 f303 	lsl.w	r3, r1, r3
 800f3e0:	4013      	ands	r3, r2
 800f3e2:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800f3e4:	693b      	ldr	r3, [r7, #16]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d032      	beq.n	800f450 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	685b      	ldr	r3, [r3, #4]
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	6939      	ldr	r1, [r7, #16]
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f7ff fed7 	bl	800f1a6 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	2b01      	cmp	r3, #1
 800f3fe:	d003      	beq.n	800f408 <LL_GPIO_Init+0x58>
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	685b      	ldr	r3, [r3, #4]
 800f404:	2b02      	cmp	r3, #2
 800f406:	d106      	bne.n	800f416 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	689b      	ldr	r3, [r3, #8]
 800f40c:	461a      	mov	r2, r3
 800f40e:	6939      	ldr	r1, [r7, #16]
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f7ff ff0f 	bl	800f234 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	691b      	ldr	r3, [r3, #16]
 800f41a:	461a      	mov	r2, r3
 800f41c:	6939      	ldr	r1, [r7, #16]
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f7ff ff37 	bl	800f292 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	685b      	ldr	r3, [r3, #4]
 800f428:	2b02      	cmp	r3, #2
 800f42a:	d111      	bne.n	800f450 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800f42c:	693b      	ldr	r3, [r7, #16]
 800f42e:	2bff      	cmp	r3, #255	; 0xff
 800f430:	d807      	bhi.n	800f442 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	695b      	ldr	r3, [r3, #20]
 800f436:	461a      	mov	r2, r3
 800f438:	6939      	ldr	r1, [r7, #16]
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f7ff ff58 	bl	800f2f0 <LL_GPIO_SetAFPin_0_7>
 800f440:	e006      	b.n	800f450 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	695b      	ldr	r3, [r3, #20]
 800f446:	461a      	mov	r2, r3
 800f448:	6939      	ldr	r1, [r7, #16]
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f7ff ff7f 	bl	800f34e <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800f450:	697b      	ldr	r3, [r7, #20]
 800f452:	3301      	adds	r3, #1
 800f454:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	681a      	ldr	r2, [r3, #0]
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	fa22 f303 	lsr.w	r3, r2, r3
 800f460:	2b00      	cmp	r3, #0
 800f462:	d1b7      	bne.n	800f3d4 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	685b      	ldr	r3, [r3, #4]
 800f468:	2b01      	cmp	r3, #1
 800f46a:	d003      	beq.n	800f474 <LL_GPIO_Init+0xc4>
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	2b02      	cmp	r3, #2
 800f472:	d107      	bne.n	800f484 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	6819      	ldr	r1, [r3, #0]
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	68db      	ldr	r3, [r3, #12]
 800f47c:	461a      	mov	r2, r3
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f7ff fec0 	bl	800f204 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800f484:	2300      	movs	r3, #0
}
 800f486:	4618      	mov	r0, r3
 800f488:	3718      	adds	r7, #24
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
	...

0800f490 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800f490:	b480      	push	{r7}
 800f492:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800f494:	4b07      	ldr	r3, [pc, #28]	; (800f4b4 <LL_RCC_HSI_IsReady+0x24>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f49c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4a0:	d101      	bne.n	800f4a6 <LL_RCC_HSI_IsReady+0x16>
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	e000      	b.n	800f4a8 <LL_RCC_HSI_IsReady+0x18>
 800f4a6:	2300      	movs	r3, #0
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b0:	4770      	bx	lr
 800f4b2:	bf00      	nop
 800f4b4:	40021000 	.word	0x40021000

0800f4b8 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800f4bc:	4b07      	ldr	r3, [pc, #28]	; (800f4dc <LL_RCC_LSE_IsReady+0x24>)
 800f4be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f4c2:	f003 0302 	and.w	r3, r3, #2
 800f4c6:	2b02      	cmp	r3, #2
 800f4c8:	d101      	bne.n	800f4ce <LL_RCC_LSE_IsReady+0x16>
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	e000      	b.n	800f4d0 <LL_RCC_LSE_IsReady+0x18>
 800f4ce:	2300      	movs	r3, #0
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d8:	4770      	bx	lr
 800f4da:	bf00      	nop
 800f4dc:	40021000 	.word	0x40021000

0800f4e0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800f4e0:	b480      	push	{r7}
 800f4e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800f4e4:	4b04      	ldr	r3, [pc, #16]	; (800f4f8 <LL_RCC_GetSysClkSource+0x18>)
 800f4e6:	689b      	ldr	r3, [r3, #8]
 800f4e8:	f003 030c 	and.w	r3, r3, #12
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f4:	4770      	bx	lr
 800f4f6:	bf00      	nop
 800f4f8:	40021000 	.word	0x40021000

0800f4fc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800f500:	4b04      	ldr	r3, [pc, #16]	; (800f514 <LL_RCC_GetAHBPrescaler+0x18>)
 800f502:	689b      	ldr	r3, [r3, #8]
 800f504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800f508:	4618      	mov	r0, r3
 800f50a:	46bd      	mov	sp, r7
 800f50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f510:	4770      	bx	lr
 800f512:	bf00      	nop
 800f514:	40021000 	.word	0x40021000

0800f518 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800f518:	b480      	push	{r7}
 800f51a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800f51c:	4b04      	ldr	r3, [pc, #16]	; (800f530 <LL_RCC_GetAPB1Prescaler+0x18>)
 800f51e:	689b      	ldr	r3, [r3, #8]
 800f520:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800f524:	4618      	mov	r0, r3
 800f526:	46bd      	mov	sp, r7
 800f528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52c:	4770      	bx	lr
 800f52e:	bf00      	nop
 800f530:	40021000 	.word	0x40021000

0800f534 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800f534:	b480      	push	{r7}
 800f536:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800f538:	4b04      	ldr	r3, [pc, #16]	; (800f54c <LL_RCC_GetAPB2Prescaler+0x18>)
 800f53a:	689b      	ldr	r3, [r3, #8]
 800f53c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800f540:	4618      	mov	r0, r3
 800f542:	46bd      	mov	sp, r7
 800f544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f548:	4770      	bx	lr
 800f54a:	bf00      	nop
 800f54c:	40021000 	.word	0x40021000

0800f550 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800f550:	b480      	push	{r7}
 800f552:	b083      	sub	sp, #12
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800f558:	4b06      	ldr	r3, [pc, #24]	; (800f574 <LL_RCC_GetUSARTClockSource+0x24>)
 800f55a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	401a      	ands	r2, r3
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	041b      	lsls	r3, r3, #16
 800f566:	4313      	orrs	r3, r2
}
 800f568:	4618      	mov	r0, r3
 800f56a:	370c      	adds	r7, #12
 800f56c:	46bd      	mov	sp, r7
 800f56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f572:	4770      	bx	lr
 800f574:	40021000 	.word	0x40021000

0800f578 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 800f578:	b480      	push	{r7}
 800f57a:	b083      	sub	sp, #12
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800f580:	4b06      	ldr	r3, [pc, #24]	; (800f59c <LL_RCC_GetUARTClockSource+0x24>)
 800f582:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	401a      	ands	r2, r3
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	041b      	lsls	r3, r3, #16
 800f58e:	4313      	orrs	r3, r2
}
 800f590:	4618      	mov	r0, r3
 800f592:	370c      	adds	r7, #12
 800f594:	46bd      	mov	sp, r7
 800f596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59a:	4770      	bx	lr
 800f59c:	40021000 	.word	0x40021000

0800f5a0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800f5a0:	b480      	push	{r7}
 800f5a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800f5a4:	4b04      	ldr	r3, [pc, #16]	; (800f5b8 <LL_RCC_PLL_GetMainSource+0x18>)
 800f5a6:	68db      	ldr	r3, [r3, #12]
 800f5a8:	f003 0303 	and.w	r3, r3, #3
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr
 800f5b6:	bf00      	nop
 800f5b8:	40021000 	.word	0x40021000

0800f5bc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800f5bc:	b480      	push	{r7}
 800f5be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800f5c0:	4b04      	ldr	r3, [pc, #16]	; (800f5d4 <LL_RCC_PLL_GetN+0x18>)
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	0a1b      	lsrs	r3, r3, #8
 800f5c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d2:	4770      	bx	lr
 800f5d4:	40021000 	.word	0x40021000

0800f5d8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800f5d8:	b480      	push	{r7}
 800f5da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800f5dc:	4b04      	ldr	r3, [pc, #16]	; (800f5f0 <LL_RCC_PLL_GetR+0x18>)
 800f5de:	68db      	ldr	r3, [r3, #12]
 800f5e0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ec:	4770      	bx	lr
 800f5ee:	bf00      	nop
 800f5f0:	40021000 	.word	0x40021000

0800f5f4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_14
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800f5f8:	4b04      	ldr	r3, [pc, #16]	; (800f60c <LL_RCC_PLL_GetDivider+0x18>)
 800f5fa:	68db      	ldr	r3, [r3, #12]
 800f5fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800f600:	4618      	mov	r0, r3
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr
 800f60a:	bf00      	nop
 800f60c:	40021000 	.word	0x40021000

0800f610 <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b084      	sub	sp, #16
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800f618:	2300      	movs	r3, #0
 800f61a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2b03      	cmp	r3, #3
 800f620:	d12e      	bne.n	800f680 <LL_RCC_GetUSARTClockFreq+0x70>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f7ff ff94 	bl	800f550 <LL_RCC_GetUSARTClockSource>
 800f628:	4603      	mov	r3, r0
 800f62a:	4a50      	ldr	r2, [pc, #320]	; (800f76c <LL_RCC_GetUSARTClockFreq+0x15c>)
 800f62c:	4293      	cmp	r3, r2
 800f62e:	d009      	beq.n	800f644 <LL_RCC_GetUSARTClockFreq+0x34>
 800f630:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 800f634:	d00e      	beq.n	800f654 <LL_RCC_GetUSARTClockFreq+0x44>
 800f636:	4a4e      	ldr	r2, [pc, #312]	; (800f770 <LL_RCC_GetUSARTClockFreq+0x160>)
 800f638:	4293      	cmp	r3, r2
 800f63a:	d114      	bne.n	800f666 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800f63c:	f000 f8ec 	bl	800f818 <RCC_GetSystemClockFreq>
 800f640:	60f8      	str	r0, [r7, #12]
        break;
 800f642:	e08d      	b.n	800f760 <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800f644:	f7ff ff24 	bl	800f490 <LL_RCC_HSI_IsReady>
 800f648:	4603      	mov	r3, r0
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d07b      	beq.n	800f746 <LL_RCC_GetUSARTClockFreq+0x136>
        {
          usart_frequency = HSI_VALUE;
 800f64e:	4b49      	ldr	r3, [pc, #292]	; (800f774 <LL_RCC_GetUSARTClockFreq+0x164>)
 800f650:	60fb      	str	r3, [r7, #12]
        }
        break;
 800f652:	e078      	b.n	800f746 <LL_RCC_GetUSARTClockFreq+0x136>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800f654:	f7ff ff30 	bl	800f4b8 <LL_RCC_LSE_IsReady>
 800f658:	4603      	mov	r3, r0
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d075      	beq.n	800f74a <LL_RCC_GetUSARTClockFreq+0x13a>
        {
          usart_frequency = LSE_VALUE;
 800f65e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f662:	60fb      	str	r3, [r7, #12]
        }
        break;
 800f664:	e071      	b.n	800f74a <LL_RCC_GetUSARTClockFreq+0x13a>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800f666:	f000 f8d7 	bl	800f818 <RCC_GetSystemClockFreq>
 800f66a:	4603      	mov	r3, r0
 800f66c:	4618      	mov	r0, r3
 800f66e:	f000 f8f5 	bl	800f85c <RCC_GetHCLKClockFreq>
 800f672:	4603      	mov	r3, r0
 800f674:	4618      	mov	r0, r3
 800f676:	f000 f91f 	bl	800f8b8 <RCC_GetPCLK2ClockFreq>
 800f67a:	60f8      	str	r0, [r7, #12]
        break;
 800f67c:	bf00      	nop
 800f67e:	e06f      	b.n	800f760 <LL_RCC_GetUSARTClockFreq+0x150>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2b0c      	cmp	r3, #12
 800f684:	d12e      	bne.n	800f6e4 <LL_RCC_GetUSARTClockFreq+0xd4>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f7ff ff62 	bl	800f550 <LL_RCC_GetUSARTClockSource>
 800f68c:	4603      	mov	r3, r0
 800f68e:	4a3a      	ldr	r2, [pc, #232]	; (800f778 <LL_RCC_GetUSARTClockFreq+0x168>)
 800f690:	4293      	cmp	r3, r2
 800f692:	d009      	beq.n	800f6a8 <LL_RCC_GetUSARTClockFreq+0x98>
 800f694:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 800f698:	d00e      	beq.n	800f6b8 <LL_RCC_GetUSARTClockFreq+0xa8>
 800f69a:	4a38      	ldr	r2, [pc, #224]	; (800f77c <LL_RCC_GetUSARTClockFreq+0x16c>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d114      	bne.n	800f6ca <LL_RCC_GetUSARTClockFreq+0xba>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800f6a0:	f000 f8ba 	bl	800f818 <RCC_GetSystemClockFreq>
 800f6a4:	60f8      	str	r0, [r7, #12]
        break;
 800f6a6:	e05b      	b.n	800f760 <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800f6a8:	f7ff fef2 	bl	800f490 <LL_RCC_HSI_IsReady>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d04d      	beq.n	800f74e <LL_RCC_GetUSARTClockFreq+0x13e>
        {
          usart_frequency = HSI_VALUE;
 800f6b2:	4b30      	ldr	r3, [pc, #192]	; (800f774 <LL_RCC_GetUSARTClockFreq+0x164>)
 800f6b4:	60fb      	str	r3, [r7, #12]
        }
        break;
 800f6b6:	e04a      	b.n	800f74e <LL_RCC_GetUSARTClockFreq+0x13e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800f6b8:	f7ff fefe 	bl	800f4b8 <LL_RCC_LSE_IsReady>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d047      	beq.n	800f752 <LL_RCC_GetUSARTClockFreq+0x142>
        {
          usart_frequency = LSE_VALUE;
 800f6c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f6c6:	60fb      	str	r3, [r7, #12]
        }
        break;
 800f6c8:	e043      	b.n	800f752 <LL_RCC_GetUSARTClockFreq+0x142>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800f6ca:	f000 f8a5 	bl	800f818 <RCC_GetSystemClockFreq>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f000 f8c3 	bl	800f85c <RCC_GetHCLKClockFreq>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f000 f8d7 	bl	800f88c <RCC_GetPCLK1ClockFreq>
 800f6de:	60f8      	str	r0, [r7, #12]
        break;
 800f6e0:	bf00      	nop
 800f6e2:	e03d      	b.n	800f760 <LL_RCC_GetUSARTClockFreq+0x150>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2b30      	cmp	r3, #48	; 0x30
 800f6e8:	d135      	bne.n	800f756 <LL_RCC_GetUSARTClockFreq+0x146>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800f6ea:	6878      	ldr	r0, [r7, #4]
 800f6ec:	f7ff ff30 	bl	800f550 <LL_RCC_GetUSARTClockSource>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	4a23      	ldr	r2, [pc, #140]	; (800f780 <LL_RCC_GetUSARTClockFreq+0x170>)
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d009      	beq.n	800f70c <LL_RCC_GetUSARTClockFreq+0xfc>
 800f6f8:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800f6fc:	d00e      	beq.n	800f71c <LL_RCC_GetUSARTClockFreq+0x10c>
 800f6fe:	4a21      	ldr	r2, [pc, #132]	; (800f784 <LL_RCC_GetUSARTClockFreq+0x174>)
 800f700:	4293      	cmp	r3, r2
 800f702:	d114      	bne.n	800f72e <LL_RCC_GetUSARTClockFreq+0x11e>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 800f704:	f000 f888 	bl	800f818 <RCC_GetSystemClockFreq>
 800f708:	60f8      	str	r0, [r7, #12]
          break;
 800f70a:	e029      	b.n	800f760 <LL_RCC_GetUSARTClockFreq+0x150>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 800f70c:	f7ff fec0 	bl	800f490 <LL_RCC_HSI_IsReady>
 800f710:	4603      	mov	r3, r0
 800f712:	2b00      	cmp	r3, #0
 800f714:	d021      	beq.n	800f75a <LL_RCC_GetUSARTClockFreq+0x14a>
          {
            usart_frequency = HSI_VALUE;
 800f716:	4b17      	ldr	r3, [pc, #92]	; (800f774 <LL_RCC_GetUSARTClockFreq+0x164>)
 800f718:	60fb      	str	r3, [r7, #12]
          }
          break;
 800f71a:	e01e      	b.n	800f75a <LL_RCC_GetUSARTClockFreq+0x14a>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 800f71c:	f7ff fecc 	bl	800f4b8 <LL_RCC_LSE_IsReady>
 800f720:	4603      	mov	r3, r0
 800f722:	2b00      	cmp	r3, #0
 800f724:	d01b      	beq.n	800f75e <LL_RCC_GetUSARTClockFreq+0x14e>
          {
            usart_frequency = LSE_VALUE;
 800f726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f72a:	60fb      	str	r3, [r7, #12]
          }
          break;
 800f72c:	e017      	b.n	800f75e <LL_RCC_GetUSARTClockFreq+0x14e>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800f72e:	f000 f873 	bl	800f818 <RCC_GetSystemClockFreq>
 800f732:	4603      	mov	r3, r0
 800f734:	4618      	mov	r0, r3
 800f736:	f000 f891 	bl	800f85c <RCC_GetHCLKClockFreq>
 800f73a:	4603      	mov	r3, r0
 800f73c:	4618      	mov	r0, r3
 800f73e:	f000 f8a5 	bl	800f88c <RCC_GetPCLK1ClockFreq>
 800f742:	60f8      	str	r0, [r7, #12]
          break;
 800f744:	e00c      	b.n	800f760 <LL_RCC_GetUSARTClockFreq+0x150>
        break;
 800f746:	bf00      	nop
 800f748:	e00a      	b.n	800f760 <LL_RCC_GetUSARTClockFreq+0x150>
        break;
 800f74a:	bf00      	nop
 800f74c:	e008      	b.n	800f760 <LL_RCC_GetUSARTClockFreq+0x150>
        break;
 800f74e:	bf00      	nop
 800f750:	e006      	b.n	800f760 <LL_RCC_GetUSARTClockFreq+0x150>
        break;
 800f752:	bf00      	nop
 800f754:	e004      	b.n	800f760 <LL_RCC_GetUSARTClockFreq+0x150>
      }
    }
 800f756:	bf00      	nop
 800f758:	e002      	b.n	800f760 <LL_RCC_GetUSARTClockFreq+0x150>
          break;
 800f75a:	bf00      	nop
 800f75c:	e000      	b.n	800f760 <LL_RCC_GetUSARTClockFreq+0x150>
          break;
 800f75e:	bf00      	nop
  }
  return usart_frequency;
 800f760:	68fb      	ldr	r3, [r7, #12]
}
 800f762:	4618      	mov	r0, r3
 800f764:	3710      	adds	r7, #16
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}
 800f76a:	bf00      	nop
 800f76c:	00030002 	.word	0x00030002
 800f770:	00030001 	.word	0x00030001
 800f774:	00f42400 	.word	0x00f42400
 800f778:	000c0008 	.word	0x000c0008
 800f77c:	000c0004 	.word	0x000c0004
 800f780:	00300020 	.word	0x00300020
 800f784:	00300010 	.word	0x00300010

0800f788 <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b084      	sub	sp, #16
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800f790:	2300      	movs	r3, #0
 800f792:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2bc0      	cmp	r3, #192	; 0xc0
 800f798:	d12d      	bne.n	800f7f6 <LL_RCC_GetUARTClockFreq+0x6e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f7ff feec 	bl	800f578 <LL_RCC_GetUARTClockSource>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	4a1a      	ldr	r2, [pc, #104]	; (800f80c <LL_RCC_GetUARTClockFreq+0x84>)
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d009      	beq.n	800f7bc <LL_RCC_GetUARTClockFreq+0x34>
 800f7a8:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800f7ac:	d00e      	beq.n	800f7cc <LL_RCC_GetUARTClockFreq+0x44>
 800f7ae:	4a18      	ldr	r2, [pc, #96]	; (800f810 <LL_RCC_GetUARTClockFreq+0x88>)
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d114      	bne.n	800f7de <LL_RCC_GetUARTClockFreq+0x56>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800f7b4:	f000 f830 	bl	800f818 <RCC_GetSystemClockFreq>
 800f7b8:	60f8      	str	r0, [r7, #12]
        break;
 800f7ba:	e021      	b.n	800f800 <LL_RCC_GetUARTClockFreq+0x78>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800f7bc:	f7ff fe68 	bl	800f490 <LL_RCC_HSI_IsReady>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d019      	beq.n	800f7fa <LL_RCC_GetUARTClockFreq+0x72>
        {
          uart_frequency = HSI_VALUE;
 800f7c6:	4b13      	ldr	r3, [pc, #76]	; (800f814 <LL_RCC_GetUARTClockFreq+0x8c>)
 800f7c8:	60fb      	str	r3, [r7, #12]
        }
        break;
 800f7ca:	e016      	b.n	800f7fa <LL_RCC_GetUARTClockFreq+0x72>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800f7cc:	f7ff fe74 	bl	800f4b8 <LL_RCC_LSE_IsReady>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d013      	beq.n	800f7fe <LL_RCC_GetUARTClockFreq+0x76>
        {
          uart_frequency = LSE_VALUE;
 800f7d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f7da:	60fb      	str	r3, [r7, #12]
        }
        break;
 800f7dc:	e00f      	b.n	800f7fe <LL_RCC_GetUARTClockFreq+0x76>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800f7de:	f000 f81b 	bl	800f818 <RCC_GetSystemClockFreq>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f000 f839 	bl	800f85c <RCC_GetHCLKClockFreq>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f000 f84d 	bl	800f88c <RCC_GetPCLK1ClockFreq>
 800f7f2:	60f8      	str	r0, [r7, #12]
        break;
 800f7f4:	e004      	b.n	800f800 <LL_RCC_GetUARTClockFreq+0x78>
    }
  }
 800f7f6:	bf00      	nop
 800f7f8:	e002      	b.n	800f800 <LL_RCC_GetUARTClockFreq+0x78>
        break;
 800f7fa:	bf00      	nop
 800f7fc:	e000      	b.n	800f800 <LL_RCC_GetUARTClockFreq+0x78>
        break;
 800f7fe:	bf00      	nop
        break;
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800f800:	68fb      	ldr	r3, [r7, #12]
}
 800f802:	4618      	mov	r0, r3
 800f804:	3710      	adds	r7, #16
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}
 800f80a:	bf00      	nop
 800f80c:	00c00080 	.word	0x00c00080
 800f810:	00c00040 	.word	0x00c00040
 800f814:	00f42400 	.word	0x00f42400

0800f818 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b082      	sub	sp, #8
 800f81c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800f81e:	f7ff fe5f 	bl	800f4e0 <LL_RCC_GetSysClkSource>
 800f822:	4603      	mov	r3, r0
 800f824:	2b08      	cmp	r3, #8
 800f826:	d006      	beq.n	800f836 <RCC_GetSystemClockFreq+0x1e>
 800f828:	2b0c      	cmp	r3, #12
 800f82a:	d007      	beq.n	800f83c <RCC_GetSystemClockFreq+0x24>
 800f82c:	2b04      	cmp	r3, #4
 800f82e:	d109      	bne.n	800f844 <RCC_GetSystemClockFreq+0x2c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800f830:	4b08      	ldr	r3, [pc, #32]	; (800f854 <RCC_GetSystemClockFreq+0x3c>)
 800f832:	607b      	str	r3, [r7, #4]
      break;
 800f834:	e009      	b.n	800f84a <RCC_GetSystemClockFreq+0x32>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800f836:	4b08      	ldr	r3, [pc, #32]	; (800f858 <RCC_GetSystemClockFreq+0x40>)
 800f838:	607b      	str	r3, [r7, #4]
      break;
 800f83a:	e006      	b.n	800f84a <RCC_GetSystemClockFreq+0x32>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800f83c:	f000 f852 	bl	800f8e4 <RCC_PLL_GetFreqDomain_SYS>
 800f840:	6078      	str	r0, [r7, #4]
      break;
 800f842:	e002      	b.n	800f84a <RCC_GetSystemClockFreq+0x32>

    default:
      frequency = HSI_VALUE;
 800f844:	4b03      	ldr	r3, [pc, #12]	; (800f854 <RCC_GetSystemClockFreq+0x3c>)
 800f846:	607b      	str	r3, [r7, #4]
      break;
 800f848:	bf00      	nop
  }

  return frequency;
 800f84a:	687b      	ldr	r3, [r7, #4]
}
 800f84c:	4618      	mov	r0, r3
 800f84e:	3708      	adds	r7, #8
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}
 800f854:	00f42400 	.word	0x00f42400
 800f858:	007a1200 	.word	0x007a1200

0800f85c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800f864:	f7ff fe4a 	bl	800f4fc <LL_RCC_GetAHBPrescaler>
 800f868:	4603      	mov	r3, r0
 800f86a:	091b      	lsrs	r3, r3, #4
 800f86c:	f003 030f 	and.w	r3, r3, #15
 800f870:	4a05      	ldr	r2, [pc, #20]	; (800f888 <RCC_GetHCLKClockFreq+0x2c>)
 800f872:	5cd3      	ldrb	r3, [r2, r3]
 800f874:	f003 031f 	and.w	r3, r3, #31
 800f878:	687a      	ldr	r2, [r7, #4]
 800f87a:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3708      	adds	r7, #8
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
 800f886:	bf00      	nop
 800f888:	08019cf0 	.word	0x08019cf0

0800f88c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b082      	sub	sp, #8
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800f894:	f7ff fe40 	bl	800f518 <LL_RCC_GetAPB1Prescaler>
 800f898:	4603      	mov	r3, r0
 800f89a:	0a1b      	lsrs	r3, r3, #8
 800f89c:	4a05      	ldr	r2, [pc, #20]	; (800f8b4 <RCC_GetPCLK1ClockFreq+0x28>)
 800f89e:	5cd3      	ldrb	r3, [r2, r3]
 800f8a0:	f003 031f 	and.w	r3, r3, #31
 800f8a4:	687a      	ldr	r2, [r7, #4]
 800f8a6:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3708      	adds	r7, #8
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}
 800f8b2:	bf00      	nop
 800f8b4:	08019d00 	.word	0x08019d00

0800f8b8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b082      	sub	sp, #8
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800f8c0:	f7ff fe38 	bl	800f534 <LL_RCC_GetAPB2Prescaler>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	0adb      	lsrs	r3, r3, #11
 800f8c8:	4a05      	ldr	r2, [pc, #20]	; (800f8e0 <RCC_GetPCLK2ClockFreq+0x28>)
 800f8ca:	5cd3      	ldrb	r3, [r2, r3]
 800f8cc:	f003 031f 	and.w	r3, r3, #31
 800f8d0:	687a      	ldr	r2, [r7, #4]
 800f8d2:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3708      	adds	r7, #8
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}
 800f8de:	bf00      	nop
 800f8e0:	08019d00 	.word	0x08019d00

0800f8e4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800f8e4:	b590      	push	{r4, r7, lr}
 800f8e6:	b083      	sub	sp, #12
 800f8e8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800f8ea:	f7ff fe59 	bl	800f5a0 <LL_RCC_PLL_GetMainSource>
 800f8ee:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	2b02      	cmp	r3, #2
 800f8f4:	d002      	beq.n	800f8fc <RCC_PLL_GetFreqDomain_SYS+0x18>
 800f8f6:	2b03      	cmp	r3, #3
 800f8f8:	d003      	beq.n	800f902 <RCC_PLL_GetFreqDomain_SYS+0x1e>
 800f8fa:	e005      	b.n	800f908 <RCC_PLL_GetFreqDomain_SYS+0x24>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800f8fc:	4b10      	ldr	r3, [pc, #64]	; (800f940 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800f8fe:	607b      	str	r3, [r7, #4]
      break;
 800f900:	e005      	b.n	800f90e <RCC_PLL_GetFreqDomain_SYS+0x2a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800f902:	4b10      	ldr	r3, [pc, #64]	; (800f944 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800f904:	607b      	str	r3, [r7, #4]
      break;
 800f906:	e002      	b.n	800f90e <RCC_PLL_GetFreqDomain_SYS+0x2a>

    default:
      pllinputfreq = HSI_VALUE;
 800f908:	4b0d      	ldr	r3, [pc, #52]	; (800f940 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800f90a:	607b      	str	r3, [r7, #4]
      break;
 800f90c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800f90e:	f7ff fe55 	bl	800f5bc <LL_RCC_PLL_GetN>
 800f912:	4602      	mov	r2, r0
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	fb03 f402 	mul.w	r4, r3, r2
 800f91a:	f7ff fe6b 	bl	800f5f4 <LL_RCC_PLL_GetDivider>
 800f91e:	4603      	mov	r3, r0
 800f920:	091b      	lsrs	r3, r3, #4
 800f922:	3301      	adds	r3, #1
 800f924:	fbb4 f4f3 	udiv	r4, r4, r3
 800f928:	f7ff fe56 	bl	800f5d8 <LL_RCC_PLL_GetR>
 800f92c:	4603      	mov	r3, r0
 800f92e:	0e5b      	lsrs	r3, r3, #25
 800f930:	3301      	adds	r3, #1
 800f932:	005b      	lsls	r3, r3, #1
 800f934:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800f938:	4618      	mov	r0, r3
 800f93a:	370c      	adds	r7, #12
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd90      	pop	{r4, r7, pc}
 800f940:	00f42400 	.word	0x00f42400
 800f944:	007a1200 	.word	0x007a1200

0800f948 <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 800f948:	b480      	push	{r7}
 800f94a:	b083      	sub	sp, #12
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	601a      	str	r2, [r3, #0]
}
 800f95c:	bf00      	nop
 800f95e:	370c      	adds	r7, #12
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr

0800f968 <LL_APB1_GRP2_EnableClock>:
{
 800f968:	b480      	push	{r7}
 800f96a:	b085      	sub	sp, #20
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800f970:	4b08      	ldr	r3, [pc, #32]	; (800f994 <LL_APB1_GRP2_EnableClock+0x2c>)
 800f972:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f974:	4907      	ldr	r1, [pc, #28]	; (800f994 <LL_APB1_GRP2_EnableClock+0x2c>)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	4313      	orrs	r3, r2
 800f97a:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800f97c:	4b05      	ldr	r3, [pc, #20]	; (800f994 <LL_APB1_GRP2_EnableClock+0x2c>)
 800f97e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	4013      	ands	r3, r2
 800f984:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f986:	68fb      	ldr	r3, [r7, #12]
}
 800f988:	bf00      	nop
 800f98a:	3714      	adds	r7, #20
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr
 800f994:	40021000 	.word	0x40021000

0800f998 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if(UCPD1 == UCPDx)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	4a11      	ldr	r2, [pc, #68]	; (800f9ec <LL_UCPD_Init+0x54>)
 800f9a6:	4293      	cmp	r3, r2
 800f9a8:	d103      	bne.n	800f9b2 <LL_UCPD_Init+0x1a>
  {
    LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800f9aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f9ae:	f7ff ffdb 	bl	800f968 <LL_APB1_GRP2_EnableClock>
  }


  LL_UCPD_Disable(UCPDx);
 800f9b2:	6878      	ldr	r0, [r7, #4]
 800f9b4:	f7ff ffc8 	bl	800f948 <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681a      	ldr	r2, [r3, #0]
 800f9bc:	4b0c      	ldr	r3, [pc, #48]	; (800f9f0 <LL_UCPD_Init+0x58>)
 800f9be:	4013      	ands	r3, r2
 800f9c0:	683a      	ldr	r2, [r7, #0]
 800f9c2:	6811      	ldr	r1, [r2, #0]
 800f9c4:	683a      	ldr	r2, [r7, #0]
 800f9c6:	6852      	ldr	r2, [r2, #4]
 800f9c8:	02d2      	lsls	r2, r2, #11
 800f9ca:	4311      	orrs	r1, r2
 800f9cc:	683a      	ldr	r2, [r7, #0]
 800f9ce:	6892      	ldr	r2, [r2, #8]
 800f9d0:	0192      	lsls	r2, r2, #6
 800f9d2:	4311      	orrs	r1, r2
 800f9d4:	683a      	ldr	r2, [r7, #0]
 800f9d6:	68d2      	ldr	r2, [r2, #12]
 800f9d8:	430a      	orrs	r2, r1
 800f9da:	431a      	orrs	r2, r3
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 800f9e0:	2300      	movs	r3, #0
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3708      	adds	r7, #8
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}
 800f9ea:	bf00      	nop
 800f9ec:	4000a000 	.word	0x4000a000
 800f9f0:	fff10000 	.word	0xfff10000

0800f9f4 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b083      	sub	sp, #12
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV1;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2207      	movs	r2, #7
 800fa06:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2210      	movs	r2, #16
 800fa0c:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x1A;  /* Divide by 27 to produce HBITCLK */
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	221a      	movs	r2, #26
 800fa12:	60da      	str	r2, [r3, #12]
}
 800fa14:	bf00      	nop
 800fa16:	370c      	adds	r7, #12
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1e:	4770      	bx	lr

0800fa20 <LL_USART_IsEnabled>:
{
 800fa20:	b480      	push	{r7}
 800fa22:	b083      	sub	sp, #12
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f003 0301 	and.w	r3, r3, #1
 800fa30:	2b01      	cmp	r3, #1
 800fa32:	d101      	bne.n	800fa38 <LL_USART_IsEnabled+0x18>
 800fa34:	2301      	movs	r3, #1
 800fa36:	e000      	b.n	800fa3a <LL_USART_IsEnabled+0x1a>
 800fa38:	2300      	movs	r3, #0
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	370c      	adds	r7, #12
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa44:	4770      	bx	lr

0800fa46 <LL_USART_SetPrescaler>:
{
 800fa46:	b480      	push	{r7}
 800fa48:	b083      	sub	sp, #12
 800fa4a:	af00      	add	r7, sp, #0
 800fa4c:	6078      	str	r0, [r7, #4]
 800fa4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa54:	f023 030f 	bic.w	r3, r3, #15
 800fa58:	683a      	ldr	r2, [r7, #0]
 800fa5a:	b292      	uxth	r2, r2
 800fa5c:	431a      	orrs	r2, r3
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800fa62:	bf00      	nop
 800fa64:	370c      	adds	r7, #12
 800fa66:	46bd      	mov	sp, r7
 800fa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6c:	4770      	bx	lr

0800fa6e <LL_USART_SetStopBitsLength>:
{
 800fa6e:	b480      	push	{r7}
 800fa70:	b083      	sub	sp, #12
 800fa72:	af00      	add	r7, sp, #0
 800fa74:	6078      	str	r0, [r7, #4]
 800fa76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	431a      	orrs	r2, r3
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	605a      	str	r2, [r3, #4]
}
 800fa88:	bf00      	nop
 800fa8a:	370c      	adds	r7, #12
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa92:	4770      	bx	lr

0800fa94 <LL_USART_SetHWFlowCtrl>:
{
 800fa94:	b480      	push	{r7}
 800fa96:	b083      	sub	sp, #12
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	689b      	ldr	r3, [r3, #8]
 800faa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	431a      	orrs	r2, r3
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	609a      	str	r2, [r3, #8]
}
 800faae:	bf00      	nop
 800fab0:	370c      	adds	r7, #12
 800fab2:	46bd      	mov	sp, r7
 800fab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab8:	4770      	bx	lr
	...

0800fabc <LL_USART_SetBaudRate>:
{
 800fabc:	b490      	push	{r4, r7}
 800fabe:	b086      	sub	sp, #24
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	60f8      	str	r0, [r7, #12]
 800fac4:	60b9      	str	r1, [r7, #8]
 800fac6:	607a      	str	r2, [r7, #4]
 800fac8:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2b0b      	cmp	r3, #11
 800face:	d835      	bhi.n	800fb3c <LL_USART_SetBaudRate+0x80>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fad6:	d11e      	bne.n	800fb16 <LL_USART_SetBaudRate+0x5a>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	b2db      	uxtb	r3, r3
 800fadc:	461a      	mov	r2, r3
 800fade:	4b1a      	ldr	r3, [pc, #104]	; (800fb48 <LL_USART_SetBaudRate+0x8c>)
 800fae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fae4:	68ba      	ldr	r2, [r7, #8]
 800fae6:	fbb2 f3f3 	udiv	r3, r2, r3
 800faea:	005a      	lsls	r2, r3, #1
 800faec:	6a3b      	ldr	r3, [r7, #32]
 800faee:	085b      	lsrs	r3, r3, #1
 800faf0:	441a      	add	r2, r3
 800faf2:	6a3b      	ldr	r3, [r7, #32]
 800faf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800faf8:	b29b      	uxth	r3, r3
 800fafa:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 800fb02:	401c      	ands	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	085b      	lsrs	r3, r3, #1
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	f003 0307 	and.w	r3, r3, #7
 800fb0e:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	60dc      	str	r4, [r3, #12]
}
 800fb14:	e012      	b.n	800fb3c <LL_USART_SetBaudRate+0x80>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	b2db      	uxtb	r3, r3
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	4b0a      	ldr	r3, [pc, #40]	; (800fb48 <LL_USART_SetBaudRate+0x8c>)
 800fb1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb22:	68ba      	ldr	r2, [r7, #8]
 800fb24:	fbb2 f2f3 	udiv	r2, r2, r3
 800fb28:	6a3b      	ldr	r3, [r7, #32]
 800fb2a:	085b      	lsrs	r3, r3, #1
 800fb2c:	441a      	add	r2, r3
 800fb2e:	6a3b      	ldr	r3, [r7, #32]
 800fb30:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb34:	b29b      	uxth	r3, r3
 800fb36:	461a      	mov	r2, r3
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	60da      	str	r2, [r3, #12]
}
 800fb3c:	bf00      	nop
 800fb3e:	3718      	adds	r7, #24
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bc90      	pop	{r4, r7}
 800fb44:	4770      	bx	lr
 800fb46:	bf00      	nop
 800fb48:	08019d20 	.word	0x08019d20

0800fb4c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b086      	sub	sp, #24
 800fb50:	af02      	add	r7, sp, #8
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800fb56:	2301      	movs	r3, #1
 800fb58:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f7ff ff5e 	bl	800fa20 <LL_USART_IsEnabled>
 800fb64:	4603      	mov	r3, r0
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d15b      	bne.n	800fc22 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681a      	ldr	r2, [r3, #0]
 800fb6e:	4b2f      	ldr	r3, [pc, #188]	; (800fc2c <LL_USART_Init+0xe0>)
 800fb70:	4013      	ands	r3, r2
 800fb72:	683a      	ldr	r2, [r7, #0]
 800fb74:	6891      	ldr	r1, [r2, #8]
 800fb76:	683a      	ldr	r2, [r7, #0]
 800fb78:	6912      	ldr	r2, [r2, #16]
 800fb7a:	4311      	orrs	r1, r2
 800fb7c:	683a      	ldr	r2, [r7, #0]
 800fb7e:	6952      	ldr	r2, [r2, #20]
 800fb80:	4311      	orrs	r1, r2
 800fb82:	683a      	ldr	r2, [r7, #0]
 800fb84:	69d2      	ldr	r2, [r2, #28]
 800fb86:	430a      	orrs	r2, r1
 800fb88:	431a      	orrs	r2, r3
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	68db      	ldr	r3, [r3, #12]
 800fb92:	4619      	mov	r1, r3
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f7ff ff6a 	bl	800fa6e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	699b      	ldr	r3, [r3, #24]
 800fb9e:	4619      	mov	r1, r3
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	f7ff ff77 	bl	800fa94 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	4a21      	ldr	r2, [pc, #132]	; (800fc30 <LL_USART_Init+0xe4>)
 800fbaa:	4293      	cmp	r3, r2
 800fbac:	d104      	bne.n	800fbb8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800fbae:	2003      	movs	r0, #3
 800fbb0:	f7ff fd2e 	bl	800f610 <LL_RCC_GetUSARTClockFreq>
 800fbb4:	60b8      	str	r0, [r7, #8]
 800fbb6:	e019      	b.n	800fbec <LL_USART_Init+0xa0>
    }
    else if (USARTx == USART2)
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	4a1e      	ldr	r2, [pc, #120]	; (800fc34 <LL_USART_Init+0xe8>)
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	d104      	bne.n	800fbca <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800fbc0:	200c      	movs	r0, #12
 800fbc2:	f7ff fd25 	bl	800f610 <LL_RCC_GetUSARTClockFreq>
 800fbc6:	60b8      	str	r0, [r7, #8]
 800fbc8:	e010      	b.n	800fbec <LL_USART_Init+0xa0>
    }
    else if (USARTx == USART3)
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	4a1a      	ldr	r2, [pc, #104]	; (800fc38 <LL_USART_Init+0xec>)
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d104      	bne.n	800fbdc <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800fbd2:	2030      	movs	r0, #48	; 0x30
 800fbd4:	f7ff fd1c 	bl	800f610 <LL_RCC_GetUSARTClockFreq>
 800fbd8:	60b8      	str	r0, [r7, #8]
 800fbda:	e007      	b.n	800fbec <LL_USART_Init+0xa0>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	4a17      	ldr	r2, [pc, #92]	; (800fc3c <LL_USART_Init+0xf0>)
 800fbe0:	4293      	cmp	r3, r2
 800fbe2:	d103      	bne.n	800fbec <LL_USART_Init+0xa0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800fbe4:	20c0      	movs	r0, #192	; 0xc0
 800fbe6:	f7ff fdcf 	bl	800f788 <LL_RCC_GetUARTClockFreq>
 800fbea:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d011      	beq.n	800fc16 <LL_USART_Init+0xca>
        && (USART_InitStruct->BaudRate != 0U))
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	685b      	ldr	r3, [r3, #4]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d00d      	beq.n	800fc16 <LL_USART_Init+0xca>
    {
      status = SUCCESS;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	681a      	ldr	r2, [r3, #0]
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	69d9      	ldr	r1, [r3, #28]
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	685b      	ldr	r3, [r3, #4]
 800fc0a:	9300      	str	r3, [sp, #0]
 800fc0c:	460b      	mov	r3, r1
 800fc0e:	68b9      	ldr	r1, [r7, #8]
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	f7ff ff53 	bl	800fabc <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	4619      	mov	r1, r3
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f7ff ff12 	bl	800fa46 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800fc22:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3710      	adds	r7, #16
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}
 800fc2c:	efff69f3 	.word	0xefff69f3
 800fc30:	40013800 	.word	0x40013800
 800fc34:	40004400 	.word	0x40004400
 800fc38:	40004800 	.word	0x40004800
 800fc3c:	40004c00 	.word	0x40004c00

0800fc40 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b085      	sub	sp, #20
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	4603      	mov	r3, r0
 800fc48:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800fc4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fc52:	2b84      	cmp	r3, #132	; 0x84
 800fc54:	d005      	beq.n	800fc62 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800fc56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	4413      	add	r3, r2
 800fc5e:	3303      	adds	r3, #3
 800fc60:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800fc62:	68fb      	ldr	r3, [r7, #12]
}
 800fc64:	4618      	mov	r0, r3
 800fc66:	3714      	adds	r7, #20
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr

0800fc70 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800fc70:	b480      	push	{r7}
 800fc72:	b083      	sub	sp, #12
 800fc74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc76:	f3ef 8305 	mrs	r3, IPSR
 800fc7a:	607b      	str	r3, [r7, #4]
  return(result);
 800fc7c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	bf14      	ite	ne
 800fc82:	2301      	movne	r3, #1
 800fc84:	2300      	moveq	r3, #0
 800fc86:	b2db      	uxtb	r3, r3
}
 800fc88:	4618      	mov	r0, r3
 800fc8a:	370c      	adds	r7, #12
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc92:	4770      	bx	lr

0800fc94 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800fc98:	f001 ff10 	bl	8011abc <vTaskStartScheduler>
  
  return osOK;
 800fc9c:	2300      	movs	r3, #0
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	bd80      	pop	{r7, pc}

0800fca2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800fca2:	b580      	push	{r7, lr}
 800fca4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800fca6:	f7ff ffe3 	bl	800fc70 <inHandlerMode>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d003      	beq.n	800fcb8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800fcb0:	f002 f804 	bl	8011cbc <xTaskGetTickCountFromISR>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	e002      	b.n	800fcbe <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800fcb8:	f001 fff0 	bl	8011c9c <xTaskGetTickCount>
 800fcbc:	4603      	mov	r3, r0
  }
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	bd80      	pop	{r7, pc}

0800fcc2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800fcc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcc4:	b087      	sub	sp, #28
 800fcc6:	af02      	add	r7, sp, #8
 800fcc8:	6078      	str	r0, [r7, #4]
 800fcca:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	685c      	ldr	r4, [r3, #4]
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fcd8:	b29e      	uxth	r6, r3
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fce0:	4618      	mov	r0, r3
 800fce2:	f7ff ffad 	bl	800fc40 <makeFreeRtosPriority>
 800fce6:	4602      	mov	r2, r0
 800fce8:	f107 030c 	add.w	r3, r7, #12
 800fcec:	9301      	str	r3, [sp, #4]
 800fcee:	9200      	str	r2, [sp, #0]
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	4632      	mov	r2, r6
 800fcf4:	4629      	mov	r1, r5
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	f001 fcf5 	bl	80116e6 <xTaskCreate>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	2b01      	cmp	r3, #1
 800fd00:	d001      	beq.n	800fd06 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800fd02:	2300      	movs	r3, #0
 800fd04:	e000      	b.n	800fd08 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800fd06:	68fb      	ldr	r3, [r7, #12]
}
 800fd08:	4618      	mov	r0, r3
 800fd0a:	3714      	adds	r7, #20
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fd10 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b082      	sub	sp, #8
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f001 fe0d 	bl	8011938 <vTaskDelete>
  return osOK;
 800fd1e:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3708      	adds	r7, #8
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}

0800fd28 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b084      	sub	sp, #16
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d001      	beq.n	800fd3e <osDelay+0x16>
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	e000      	b.n	800fd40 <osDelay+0x18>
 800fd3e:	2301      	movs	r3, #1
 800fd40:	4618      	mov	r0, r3
 800fd42:	f001 fe87 	bl	8011a54 <vTaskDelay>
  
  return osOK;
 800fd46:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3710      	adds	r7, #16
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b084      	sub	sp, #16
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	d110      	bne.n	800fd82 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800fd60:	2203      	movs	r2, #3
 800fd62:	2100      	movs	r1, #0
 800fd64:	2001      	movs	r0, #1
 800fd66:	f000 fe93 	bl	8010a90 <xQueueGenericCreate>
 800fd6a:	60f8      	str	r0, [r7, #12]
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d005      	beq.n	800fd7e <osSemaphoreCreate+0x2e>
 800fd72:	2300      	movs	r3, #0
 800fd74:	2200      	movs	r2, #0
 800fd76:	2100      	movs	r1, #0
 800fd78:	68f8      	ldr	r0, [r7, #12]
 800fd7a:	f000 ff13 	bl	8010ba4 <xQueueGenericSend>
    return sema;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	e006      	b.n	800fd90 <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	683a      	ldr	r2, [r7, #0]
 800fd86:	4611      	mov	r1, r2
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f000 fed9 	bl	8010b40 <xQueueCreateCountingSemaphore>
 800fd8e:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	3710      	adds	r7, #16
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}

0800fd98 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b084      	sub	sp, #16
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800fda2:	2300      	movs	r3, #0
 800fda4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d101      	bne.n	800fdb0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800fdac:	2380      	movs	r3, #128	; 0x80
 800fdae:	e03a      	b.n	800fe26 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fdba:	d103      	bne.n	800fdc4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800fdbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fdc0:	60fb      	str	r3, [r7, #12]
 800fdc2:	e009      	b.n	800fdd8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d006      	beq.n	800fdd8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d101      	bne.n	800fdd8 <osSemaphoreWait+0x40>
      ticks = 1;
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800fdd8:	f7ff ff4a 	bl	800fc70 <inHandlerMode>
 800fddc:	4603      	mov	r3, r0
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d017      	beq.n	800fe12 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fde2:	f107 0308 	add.w	r3, r7, #8
 800fde6:	461a      	mov	r2, r3
 800fde8:	2100      	movs	r1, #0
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f001 fad6 	bl	801139c <xQueueReceiveFromISR>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d001      	beq.n	800fdfa <osSemaphoreWait+0x62>
      return osErrorOS;
 800fdf6:	23ff      	movs	r3, #255	; 0xff
 800fdf8:	e015      	b.n	800fe26 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d011      	beq.n	800fe24 <osSemaphoreWait+0x8c>
 800fe00:	4b0b      	ldr	r3, [pc, #44]	; (800fe30 <osSemaphoreWait+0x98>)
 800fe02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe06:	601a      	str	r2, [r3, #0]
 800fe08:	f3bf 8f4f 	dsb	sy
 800fe0c:	f3bf 8f6f 	isb	sy
 800fe10:	e008      	b.n	800fe24 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800fe12:	68f9      	ldr	r1, [r7, #12]
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	f001 f9b9 	bl	801118c <xQueueSemaphoreTake>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	2b01      	cmp	r3, #1
 800fe1e:	d001      	beq.n	800fe24 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800fe20:	23ff      	movs	r3, #255	; 0xff
 800fe22:	e000      	b.n	800fe26 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800fe24:	2300      	movs	r3, #0
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	3710      	adds	r7, #16
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}
 800fe2e:	bf00      	nop
 800fe30:	e000ed04 	.word	0xe000ed04

0800fe34 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b084      	sub	sp, #16
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800fe40:	2300      	movs	r3, #0
 800fe42:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800fe44:	f7ff ff14 	bl	800fc70 <inHandlerMode>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d016      	beq.n	800fe7c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fe4e:	f107 0308 	add.w	r3, r7, #8
 800fe52:	4619      	mov	r1, r3
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f001 f833 	bl	8010ec0 <xQueueGiveFromISR>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b01      	cmp	r3, #1
 800fe5e:	d001      	beq.n	800fe64 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800fe60:	23ff      	movs	r3, #255	; 0xff
 800fe62:	e017      	b.n	800fe94 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d013      	beq.n	800fe92 <osSemaphoreRelease+0x5e>
 800fe6a:	4b0c      	ldr	r3, [pc, #48]	; (800fe9c <osSemaphoreRelease+0x68>)
 800fe6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe70:	601a      	str	r2, [r3, #0]
 800fe72:	f3bf 8f4f 	dsb	sy
 800fe76:	f3bf 8f6f 	isb	sy
 800fe7a:	e00a      	b.n	800fe92 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	2200      	movs	r2, #0
 800fe80:	2100      	movs	r1, #0
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f000 fe8e 	bl	8010ba4 <xQueueGenericSend>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	2b01      	cmp	r3, #1
 800fe8c:	d001      	beq.n	800fe92 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800fe8e:	23ff      	movs	r3, #255	; 0xff
 800fe90:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800fe92:	68fb      	ldr	r3, [r7, #12]
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	3710      	adds	r7, #16
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	e000ed04 	.word	0xe000ed04

0800fea0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b082      	sub	sp, #8
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6818      	ldr	r0, [r3, #0]
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	685b      	ldr	r3, [r3, #4]
 800feb2:	2200      	movs	r2, #0
 800feb4:	4619      	mov	r1, r3
 800feb6:	f000 fdeb 	bl	8010a90 <xQueueGenericCreate>
 800feba:	4603      	mov	r3, r0
#endif
}
 800febc:	4618      	mov	r0, r3
 800febe:	3708      	adds	r7, #8
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b086      	sub	sp, #24
 800fec8:	af00      	add	r7, sp, #0
 800feca:	60f8      	str	r0, [r7, #12]
 800fecc:	60b9      	str	r1, [r7, #8]
 800fece:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800fed0:	2300      	movs	r3, #0
 800fed2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d101      	bne.n	800fee2 <osMessagePut+0x1e>
    ticks = 1;
 800fede:	2301      	movs	r3, #1
 800fee0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800fee2:	f7ff fec5 	bl	800fc70 <inHandlerMode>
 800fee6:	4603      	mov	r3, r0
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d018      	beq.n	800ff1e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800feec:	f107 0210 	add.w	r2, r7, #16
 800fef0:	f107 0108 	add.w	r1, r7, #8
 800fef4:	2300      	movs	r3, #0
 800fef6:	68f8      	ldr	r0, [r7, #12]
 800fef8:	f000 ff4e 	bl	8010d98 <xQueueGenericSendFromISR>
 800fefc:	4603      	mov	r3, r0
 800fefe:	2b01      	cmp	r3, #1
 800ff00:	d001      	beq.n	800ff06 <osMessagePut+0x42>
      return osErrorOS;
 800ff02:	23ff      	movs	r3, #255	; 0xff
 800ff04:	e018      	b.n	800ff38 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d014      	beq.n	800ff36 <osMessagePut+0x72>
 800ff0c:	4b0c      	ldr	r3, [pc, #48]	; (800ff40 <osMessagePut+0x7c>)
 800ff0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff12:	601a      	str	r2, [r3, #0]
 800ff14:	f3bf 8f4f 	dsb	sy
 800ff18:	f3bf 8f6f 	isb	sy
 800ff1c:	e00b      	b.n	800ff36 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ff1e:	f107 0108 	add.w	r1, r7, #8
 800ff22:	2300      	movs	r3, #0
 800ff24:	697a      	ldr	r2, [r7, #20]
 800ff26:	68f8      	ldr	r0, [r7, #12]
 800ff28:	f000 fe3c 	bl	8010ba4 <xQueueGenericSend>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	2b01      	cmp	r3, #1
 800ff30:	d001      	beq.n	800ff36 <osMessagePut+0x72>
      return osErrorOS;
 800ff32:	23ff      	movs	r3, #255	; 0xff
 800ff34:	e000      	b.n	800ff38 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ff36:	2300      	movs	r3, #0
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3718      	adds	r7, #24
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}
 800ff40:	e000ed04 	.word	0xe000ed04

0800ff44 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ff44:	b590      	push	{r4, r7, lr}
 800ff46:	b08b      	sub	sp, #44	; 0x2c
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	60f8      	str	r0, [r7, #12]
 800ff4c:	60b9      	str	r1, [r7, #8]
 800ff4e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ff54:	2300      	movs	r3, #0
 800ff56:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d10a      	bne.n	800ff74 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ff5e:	2380      	movs	r3, #128	; 0x80
 800ff60:	617b      	str	r3, [r7, #20]
    return event;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	461c      	mov	r4, r3
 800ff66:	f107 0314 	add.w	r3, r7, #20
 800ff6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ff6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ff72:	e054      	b.n	801001e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ff74:	2300      	movs	r3, #0
 800ff76:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ff78:	2300      	movs	r3, #0
 800ff7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff82:	d103      	bne.n	800ff8c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ff84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff88:	627b      	str	r3, [r7, #36]	; 0x24
 800ff8a:	e009      	b.n	800ffa0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d006      	beq.n	800ffa0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800ff96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d101      	bne.n	800ffa0 <osMessageGet+0x5c>
      ticks = 1;
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ffa0:	f7ff fe66 	bl	800fc70 <inHandlerMode>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d01c      	beq.n	800ffe4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ffaa:	f107 0220 	add.w	r2, r7, #32
 800ffae:	f107 0314 	add.w	r3, r7, #20
 800ffb2:	3304      	adds	r3, #4
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	68b8      	ldr	r0, [r7, #8]
 800ffb8:	f001 f9f0 	bl	801139c <xQueueReceiveFromISR>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b01      	cmp	r3, #1
 800ffc0:	d102      	bne.n	800ffc8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ffc2:	2310      	movs	r3, #16
 800ffc4:	617b      	str	r3, [r7, #20]
 800ffc6:	e001      	b.n	800ffcc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ffc8:	2300      	movs	r3, #0
 800ffca:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ffcc:	6a3b      	ldr	r3, [r7, #32]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d01d      	beq.n	801000e <osMessageGet+0xca>
 800ffd2:	4b15      	ldr	r3, [pc, #84]	; (8010028 <osMessageGet+0xe4>)
 800ffd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffd8:	601a      	str	r2, [r3, #0]
 800ffda:	f3bf 8f4f 	dsb	sy
 800ffde:	f3bf 8f6f 	isb	sy
 800ffe2:	e014      	b.n	801000e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ffe4:	f107 0314 	add.w	r3, r7, #20
 800ffe8:	3304      	adds	r3, #4
 800ffea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffec:	4619      	mov	r1, r3
 800ffee:	68b8      	ldr	r0, [r7, #8]
 800fff0:	f000 fff0 	bl	8010fd4 <xQueueReceive>
 800fff4:	4603      	mov	r3, r0
 800fff6:	2b01      	cmp	r3, #1
 800fff8:	d102      	bne.n	8010000 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800fffa:	2310      	movs	r3, #16
 800fffc:	617b      	str	r3, [r7, #20]
 800fffe:	e006      	b.n	801000e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8010000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010002:	2b00      	cmp	r3, #0
 8010004:	d101      	bne.n	801000a <osMessageGet+0xc6>
 8010006:	2300      	movs	r3, #0
 8010008:	e000      	b.n	801000c <osMessageGet+0xc8>
 801000a:	2340      	movs	r3, #64	; 0x40
 801000c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	461c      	mov	r4, r3
 8010012:	f107 0314 	add.w	r3, r7, #20
 8010016:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801001a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801001e:	68f8      	ldr	r0, [r7, #12]
 8010020:	372c      	adds	r7, #44	; 0x2c
 8010022:	46bd      	mov	sp, r7
 8010024:	bd90      	pop	{r4, r7, pc}
 8010026:	bf00      	nop
 8010028:	e000ed04 	.word	0xe000ed04

0801002c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b08a      	sub	sp, #40	; 0x28
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010034:	2300      	movs	r3, #0
 8010036:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010038:	f001 fd86 	bl	8011b48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801003c:	4b57      	ldr	r3, [pc, #348]	; (801019c <pvPortMalloc+0x170>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d101      	bne.n	8010048 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010044:	f000 f90c 	bl	8010260 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010048:	4b55      	ldr	r3, [pc, #340]	; (80101a0 <pvPortMalloc+0x174>)
 801004a:	681a      	ldr	r2, [r3, #0]
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	4013      	ands	r3, r2
 8010050:	2b00      	cmp	r3, #0
 8010052:	f040 808c 	bne.w	801016e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d01c      	beq.n	8010096 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 801005c:	2208      	movs	r2, #8
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	4413      	add	r3, r2
 8010062:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f003 0307 	and.w	r3, r3, #7
 801006a:	2b00      	cmp	r3, #0
 801006c:	d013      	beq.n	8010096 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f023 0307 	bic.w	r3, r3, #7
 8010074:	3308      	adds	r3, #8
 8010076:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f003 0307 	and.w	r3, r3, #7
 801007e:	2b00      	cmp	r3, #0
 8010080:	d009      	beq.n	8010096 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010082:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010086:	f383 8811 	msr	BASEPRI, r3
 801008a:	f3bf 8f6f 	isb	sy
 801008e:	f3bf 8f4f 	dsb	sy
 8010092:	617b      	str	r3, [r7, #20]
 8010094:	e7fe      	b.n	8010094 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d068      	beq.n	801016e <pvPortMalloc+0x142>
 801009c:	4b41      	ldr	r3, [pc, #260]	; (80101a4 <pvPortMalloc+0x178>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	687a      	ldr	r2, [r7, #4]
 80100a2:	429a      	cmp	r2, r3
 80100a4:	d863      	bhi.n	801016e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80100a6:	4b40      	ldr	r3, [pc, #256]	; (80101a8 <pvPortMalloc+0x17c>)
 80100a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80100aa:	4b3f      	ldr	r3, [pc, #252]	; (80101a8 <pvPortMalloc+0x17c>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80100b0:	e004      	b.n	80100bc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80100b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80100b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80100bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	687a      	ldr	r2, [r7, #4]
 80100c2:	429a      	cmp	r2, r3
 80100c4:	d903      	bls.n	80100ce <pvPortMalloc+0xa2>
 80100c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d1f1      	bne.n	80100b2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80100ce:	4b33      	ldr	r3, [pc, #204]	; (801019c <pvPortMalloc+0x170>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d04a      	beq.n	801016e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80100d8:	6a3b      	ldr	r3, [r7, #32]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	2208      	movs	r2, #8
 80100de:	4413      	add	r3, r2
 80100e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80100e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e4:	681a      	ldr	r2, [r3, #0]
 80100e6:	6a3b      	ldr	r3, [r7, #32]
 80100e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80100ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ec:	685a      	ldr	r2, [r3, #4]
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	1ad2      	subs	r2, r2, r3
 80100f2:	2308      	movs	r3, #8
 80100f4:	005b      	lsls	r3, r3, #1
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d91e      	bls.n	8010138 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80100fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	4413      	add	r3, r2
 8010100:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010102:	69bb      	ldr	r3, [r7, #24]
 8010104:	f003 0307 	and.w	r3, r3, #7
 8010108:	2b00      	cmp	r3, #0
 801010a:	d009      	beq.n	8010120 <pvPortMalloc+0xf4>
 801010c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010110:	f383 8811 	msr	BASEPRI, r3
 8010114:	f3bf 8f6f 	isb	sy
 8010118:	f3bf 8f4f 	dsb	sy
 801011c:	613b      	str	r3, [r7, #16]
 801011e:	e7fe      	b.n	801011e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010122:	685a      	ldr	r2, [r3, #4]
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	1ad2      	subs	r2, r2, r3
 8010128:	69bb      	ldr	r3, [r7, #24]
 801012a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801012c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801012e:	687a      	ldr	r2, [r7, #4]
 8010130:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010132:	69b8      	ldr	r0, [r7, #24]
 8010134:	f000 f8f6 	bl	8010324 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010138:	4b1a      	ldr	r3, [pc, #104]	; (80101a4 <pvPortMalloc+0x178>)
 801013a:	681a      	ldr	r2, [r3, #0]
 801013c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801013e:	685b      	ldr	r3, [r3, #4]
 8010140:	1ad3      	subs	r3, r2, r3
 8010142:	4a18      	ldr	r2, [pc, #96]	; (80101a4 <pvPortMalloc+0x178>)
 8010144:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010146:	4b17      	ldr	r3, [pc, #92]	; (80101a4 <pvPortMalloc+0x178>)
 8010148:	681a      	ldr	r2, [r3, #0]
 801014a:	4b18      	ldr	r3, [pc, #96]	; (80101ac <pvPortMalloc+0x180>)
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	429a      	cmp	r2, r3
 8010150:	d203      	bcs.n	801015a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010152:	4b14      	ldr	r3, [pc, #80]	; (80101a4 <pvPortMalloc+0x178>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	4a15      	ldr	r2, [pc, #84]	; (80101ac <pvPortMalloc+0x180>)
 8010158:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801015a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015c:	685a      	ldr	r2, [r3, #4]
 801015e:	4b10      	ldr	r3, [pc, #64]	; (80101a0 <pvPortMalloc+0x174>)
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	431a      	orrs	r2, r3
 8010164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010166:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801016a:	2200      	movs	r2, #0
 801016c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801016e:	f001 fcf9 	bl	8011b64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010172:	69fb      	ldr	r3, [r7, #28]
 8010174:	f003 0307 	and.w	r3, r3, #7
 8010178:	2b00      	cmp	r3, #0
 801017a:	d009      	beq.n	8010190 <pvPortMalloc+0x164>
 801017c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010180:	f383 8811 	msr	BASEPRI, r3
 8010184:	f3bf 8f6f 	isb	sy
 8010188:	f3bf 8f4f 	dsb	sy
 801018c:	60fb      	str	r3, [r7, #12]
 801018e:	e7fe      	b.n	801018e <pvPortMalloc+0x162>
	return pvReturn;
 8010190:	69fb      	ldr	r3, [r7, #28]
}
 8010192:	4618      	mov	r0, r3
 8010194:	3728      	adds	r7, #40	; 0x28
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}
 801019a:	bf00      	nop
 801019c:	20002108 	.word	0x20002108
 80101a0:	20002114 	.word	0x20002114
 80101a4:	2000210c 	.word	0x2000210c
 80101a8:	20002100 	.word	0x20002100
 80101ac:	20002110 	.word	0x20002110

080101b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b086      	sub	sp, #24
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d046      	beq.n	8010250 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80101c2:	2308      	movs	r3, #8
 80101c4:	425b      	negs	r3, r3
 80101c6:	697a      	ldr	r2, [r7, #20]
 80101c8:	4413      	add	r3, r2
 80101ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80101d0:	693b      	ldr	r3, [r7, #16]
 80101d2:	685a      	ldr	r2, [r3, #4]
 80101d4:	4b20      	ldr	r3, [pc, #128]	; (8010258 <vPortFree+0xa8>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	4013      	ands	r3, r2
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d109      	bne.n	80101f2 <vPortFree+0x42>
 80101de:	f04f 0330 	mov.w	r3, #48	; 0x30
 80101e2:	f383 8811 	msr	BASEPRI, r3
 80101e6:	f3bf 8f6f 	isb	sy
 80101ea:	f3bf 8f4f 	dsb	sy
 80101ee:	60fb      	str	r3, [r7, #12]
 80101f0:	e7fe      	b.n	80101f0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80101f2:	693b      	ldr	r3, [r7, #16]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d009      	beq.n	801020e <vPortFree+0x5e>
 80101fa:	f04f 0330 	mov.w	r3, #48	; 0x30
 80101fe:	f383 8811 	msr	BASEPRI, r3
 8010202:	f3bf 8f6f 	isb	sy
 8010206:	f3bf 8f4f 	dsb	sy
 801020a:	60bb      	str	r3, [r7, #8]
 801020c:	e7fe      	b.n	801020c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	685a      	ldr	r2, [r3, #4]
 8010212:	4b11      	ldr	r3, [pc, #68]	; (8010258 <vPortFree+0xa8>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	4013      	ands	r3, r2
 8010218:	2b00      	cmp	r3, #0
 801021a:	d019      	beq.n	8010250 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801021c:	693b      	ldr	r3, [r7, #16]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d115      	bne.n	8010250 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	685a      	ldr	r2, [r3, #4]
 8010228:	4b0b      	ldr	r3, [pc, #44]	; (8010258 <vPortFree+0xa8>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	43db      	mvns	r3, r3
 801022e:	401a      	ands	r2, r3
 8010230:	693b      	ldr	r3, [r7, #16]
 8010232:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010234:	f001 fc88 	bl	8011b48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010238:	693b      	ldr	r3, [r7, #16]
 801023a:	685a      	ldr	r2, [r3, #4]
 801023c:	4b07      	ldr	r3, [pc, #28]	; (801025c <vPortFree+0xac>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4413      	add	r3, r2
 8010242:	4a06      	ldr	r2, [pc, #24]	; (801025c <vPortFree+0xac>)
 8010244:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010246:	6938      	ldr	r0, [r7, #16]
 8010248:	f000 f86c 	bl	8010324 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801024c:	f001 fc8a 	bl	8011b64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010250:	bf00      	nop
 8010252:	3718      	adds	r7, #24
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}
 8010258:	20002114 	.word	0x20002114
 801025c:	2000210c 	.word	0x2000210c

08010260 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010260:	b480      	push	{r7}
 8010262:	b085      	sub	sp, #20
 8010264:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010266:	f241 3388 	movw	r3, #5000	; 0x1388
 801026a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801026c:	4b27      	ldr	r3, [pc, #156]	; (801030c <prvHeapInit+0xac>)
 801026e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	f003 0307 	and.w	r3, r3, #7
 8010276:	2b00      	cmp	r3, #0
 8010278:	d00c      	beq.n	8010294 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	3307      	adds	r3, #7
 801027e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	f023 0307 	bic.w	r3, r3, #7
 8010286:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010288:	68ba      	ldr	r2, [r7, #8]
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	1ad3      	subs	r3, r2, r3
 801028e:	4a1f      	ldr	r2, [pc, #124]	; (801030c <prvHeapInit+0xac>)
 8010290:	4413      	add	r3, r2
 8010292:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010298:	4a1d      	ldr	r2, [pc, #116]	; (8010310 <prvHeapInit+0xb0>)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801029e:	4b1c      	ldr	r3, [pc, #112]	; (8010310 <prvHeapInit+0xb0>)
 80102a0:	2200      	movs	r2, #0
 80102a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	68ba      	ldr	r2, [r7, #8]
 80102a8:	4413      	add	r3, r2
 80102aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80102ac:	2208      	movs	r2, #8
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	1a9b      	subs	r3, r3, r2
 80102b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	f023 0307 	bic.w	r3, r3, #7
 80102ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	4a15      	ldr	r2, [pc, #84]	; (8010314 <prvHeapInit+0xb4>)
 80102c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80102c2:	4b14      	ldr	r3, [pc, #80]	; (8010314 <prvHeapInit+0xb4>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	2200      	movs	r2, #0
 80102c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80102ca:	4b12      	ldr	r3, [pc, #72]	; (8010314 <prvHeapInit+0xb4>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	2200      	movs	r2, #0
 80102d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	68fa      	ldr	r2, [r7, #12]
 80102da:	1ad2      	subs	r2, r2, r3
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80102e0:	4b0c      	ldr	r3, [pc, #48]	; (8010314 <prvHeapInit+0xb4>)
 80102e2:	681a      	ldr	r2, [r3, #0]
 80102e4:	683b      	ldr	r3, [r7, #0]
 80102e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	685b      	ldr	r3, [r3, #4]
 80102ec:	4a0a      	ldr	r2, [pc, #40]	; (8010318 <prvHeapInit+0xb8>)
 80102ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	685b      	ldr	r3, [r3, #4]
 80102f4:	4a09      	ldr	r2, [pc, #36]	; (801031c <prvHeapInit+0xbc>)
 80102f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80102f8:	4b09      	ldr	r3, [pc, #36]	; (8010320 <prvHeapInit+0xc0>)
 80102fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80102fe:	601a      	str	r2, [r3, #0]
}
 8010300:	bf00      	nop
 8010302:	3714      	adds	r7, #20
 8010304:	46bd      	mov	sp, r7
 8010306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030a:	4770      	bx	lr
 801030c:	20000d78 	.word	0x20000d78
 8010310:	20002100 	.word	0x20002100
 8010314:	20002108 	.word	0x20002108
 8010318:	20002110 	.word	0x20002110
 801031c:	2000210c 	.word	0x2000210c
 8010320:	20002114 	.word	0x20002114

08010324 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010324:	b480      	push	{r7}
 8010326:	b085      	sub	sp, #20
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801032c:	4b28      	ldr	r3, [pc, #160]	; (80103d0 <prvInsertBlockIntoFreeList+0xac>)
 801032e:	60fb      	str	r3, [r7, #12]
 8010330:	e002      	b.n	8010338 <prvInsertBlockIntoFreeList+0x14>
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	60fb      	str	r3, [r7, #12]
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	687a      	ldr	r2, [r7, #4]
 801033e:	429a      	cmp	r2, r3
 8010340:	d8f7      	bhi.n	8010332 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	685b      	ldr	r3, [r3, #4]
 801034a:	68ba      	ldr	r2, [r7, #8]
 801034c:	4413      	add	r3, r2
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	429a      	cmp	r2, r3
 8010352:	d108      	bne.n	8010366 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	685a      	ldr	r2, [r3, #4]
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	685b      	ldr	r3, [r3, #4]
 801035c:	441a      	add	r2, r3
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	685b      	ldr	r3, [r3, #4]
 801036e:	68ba      	ldr	r2, [r7, #8]
 8010370:	441a      	add	r2, r3
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	429a      	cmp	r2, r3
 8010378:	d118      	bne.n	80103ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	681a      	ldr	r2, [r3, #0]
 801037e:	4b15      	ldr	r3, [pc, #84]	; (80103d4 <prvInsertBlockIntoFreeList+0xb0>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	429a      	cmp	r2, r3
 8010384:	d00d      	beq.n	80103a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	685a      	ldr	r2, [r3, #4]
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	441a      	add	r2, r3
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	681a      	ldr	r2, [r3, #0]
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	601a      	str	r2, [r3, #0]
 80103a0:	e008      	b.n	80103b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80103a2:	4b0c      	ldr	r3, [pc, #48]	; (80103d4 <prvInsertBlockIntoFreeList+0xb0>)
 80103a4:	681a      	ldr	r2, [r3, #0]
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	601a      	str	r2, [r3, #0]
 80103aa:	e003      	b.n	80103b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	681a      	ldr	r2, [r3, #0]
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80103b4:	68fa      	ldr	r2, [r7, #12]
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	429a      	cmp	r2, r3
 80103ba:	d002      	beq.n	80103c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	687a      	ldr	r2, [r7, #4]
 80103c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80103c2:	bf00      	nop
 80103c4:	3714      	adds	r7, #20
 80103c6:	46bd      	mov	sp, r7
 80103c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103cc:	4770      	bx	lr
 80103ce:	bf00      	nop
 80103d0:	20002100 	.word	0x20002100
 80103d4:	20002108 	.word	0x20002108

080103d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80103d8:	b480      	push	{r7}
 80103da:	b083      	sub	sp, #12
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f103 0208 	add.w	r2, r3, #8
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80103f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	f103 0208 	add.w	r2, r3, #8
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f103 0208 	add.w	r2, r3, #8
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2200      	movs	r2, #0
 801040a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801040c:	bf00      	nop
 801040e:	370c      	adds	r7, #12
 8010410:	46bd      	mov	sp, r7
 8010412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010416:	4770      	bx	lr

08010418 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010418:	b480      	push	{r7}
 801041a:	b083      	sub	sp, #12
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2200      	movs	r2, #0
 8010424:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010426:	bf00      	nop
 8010428:	370c      	adds	r7, #12
 801042a:	46bd      	mov	sp, r7
 801042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010430:	4770      	bx	lr

08010432 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010432:	b480      	push	{r7}
 8010434:	b085      	sub	sp, #20
 8010436:	af00      	add	r7, sp, #0
 8010438:	6078      	str	r0, [r7, #4]
 801043a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	685b      	ldr	r3, [r3, #4]
 8010440:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	68fa      	ldr	r2, [r7, #12]
 8010446:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	689a      	ldr	r2, [r3, #8]
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	689b      	ldr	r3, [r3, #8]
 8010454:	683a      	ldr	r2, [r7, #0]
 8010456:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	683a      	ldr	r2, [r7, #0]
 801045c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	687a      	ldr	r2, [r7, #4]
 8010462:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	1c5a      	adds	r2, r3, #1
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	601a      	str	r2, [r3, #0]
}
 801046e:	bf00      	nop
 8010470:	3714      	adds	r7, #20
 8010472:	46bd      	mov	sp, r7
 8010474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010478:	4770      	bx	lr

0801047a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801047a:	b480      	push	{r7}
 801047c:	b085      	sub	sp, #20
 801047e:	af00      	add	r7, sp, #0
 8010480:	6078      	str	r0, [r7, #4]
 8010482:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010490:	d103      	bne.n	801049a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	691b      	ldr	r3, [r3, #16]
 8010496:	60fb      	str	r3, [r7, #12]
 8010498:	e00c      	b.n	80104b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	3308      	adds	r3, #8
 801049e:	60fb      	str	r3, [r7, #12]
 80104a0:	e002      	b.n	80104a8 <vListInsert+0x2e>
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	685b      	ldr	r3, [r3, #4]
 80104a6:	60fb      	str	r3, [r7, #12]
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	685b      	ldr	r3, [r3, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	68ba      	ldr	r2, [r7, #8]
 80104b0:	429a      	cmp	r2, r3
 80104b2:	d2f6      	bcs.n	80104a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	685a      	ldr	r2, [r3, #4]
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	685b      	ldr	r3, [r3, #4]
 80104c0:	683a      	ldr	r2, [r7, #0]
 80104c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	68fa      	ldr	r2, [r7, #12]
 80104c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	683a      	ldr	r2, [r7, #0]
 80104ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	687a      	ldr	r2, [r7, #4]
 80104d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	1c5a      	adds	r2, r3, #1
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	601a      	str	r2, [r3, #0]
}
 80104e0:	bf00      	nop
 80104e2:	3714      	adds	r7, #20
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr

080104ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80104ec:	b480      	push	{r7}
 80104ee:	b085      	sub	sp, #20
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	691b      	ldr	r3, [r3, #16]
 80104f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	685b      	ldr	r3, [r3, #4]
 80104fe:	687a      	ldr	r2, [r7, #4]
 8010500:	6892      	ldr	r2, [r2, #8]
 8010502:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	689b      	ldr	r3, [r3, #8]
 8010508:	687a      	ldr	r2, [r7, #4]
 801050a:	6852      	ldr	r2, [r2, #4]
 801050c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	685b      	ldr	r3, [r3, #4]
 8010512:	687a      	ldr	r2, [r7, #4]
 8010514:	429a      	cmp	r2, r3
 8010516:	d103      	bne.n	8010520 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	689a      	ldr	r2, [r3, #8]
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2200      	movs	r2, #0
 8010524:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	1e5a      	subs	r2, r3, #1
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	681b      	ldr	r3, [r3, #0]
}
 8010534:	4618      	mov	r0, r3
 8010536:	3714      	adds	r7, #20
 8010538:	46bd      	mov	sp, r7
 801053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053e:	4770      	bx	lr

08010540 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010540:	b480      	push	{r7}
 8010542:	b085      	sub	sp, #20
 8010544:	af00      	add	r7, sp, #0
 8010546:	60f8      	str	r0, [r7, #12]
 8010548:	60b9      	str	r1, [r7, #8]
 801054a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	3b04      	subs	r3, #4
 8010550:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010558:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	3b04      	subs	r3, #4
 801055e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	f023 0201 	bic.w	r2, r3, #1
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	3b04      	subs	r3, #4
 801056e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010570:	4a0c      	ldr	r2, [pc, #48]	; (80105a4 <pxPortInitialiseStack+0x64>)
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	3b14      	subs	r3, #20
 801057a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801057c:	687a      	ldr	r2, [r7, #4]
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	3b04      	subs	r3, #4
 8010586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	f06f 0202 	mvn.w	r2, #2
 801058e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	3b20      	subs	r3, #32
 8010594:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010596:	68fb      	ldr	r3, [r7, #12]
}
 8010598:	4618      	mov	r0, r3
 801059a:	3714      	adds	r7, #20
 801059c:	46bd      	mov	sp, r7
 801059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a2:	4770      	bx	lr
 80105a4:	080105a9 	.word	0x080105a9

080105a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80105a8:	b480      	push	{r7}
 80105aa:	b085      	sub	sp, #20
 80105ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80105ae:	2300      	movs	r3, #0
 80105b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80105b2:	4b11      	ldr	r3, [pc, #68]	; (80105f8 <prvTaskExitError+0x50>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80105ba:	d009      	beq.n	80105d0 <prvTaskExitError+0x28>
 80105bc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80105c0:	f383 8811 	msr	BASEPRI, r3
 80105c4:	f3bf 8f6f 	isb	sy
 80105c8:	f3bf 8f4f 	dsb	sy
 80105cc:	60fb      	str	r3, [r7, #12]
 80105ce:	e7fe      	b.n	80105ce <prvTaskExitError+0x26>
 80105d0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80105d4:	f383 8811 	msr	BASEPRI, r3
 80105d8:	f3bf 8f6f 	isb	sy
 80105dc:	f3bf 8f4f 	dsb	sy
 80105e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80105e2:	bf00      	nop
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d0fc      	beq.n	80105e4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80105ea:	bf00      	nop
 80105ec:	3714      	adds	r7, #20
 80105ee:	46bd      	mov	sp, r7
 80105f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f4:	4770      	bx	lr
 80105f6:	bf00      	nop
 80105f8:	20000018 	.word	0x20000018
 80105fc:	00000000 	.word	0x00000000

08010600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010600:	4b07      	ldr	r3, [pc, #28]	; (8010620 <pxCurrentTCBConst2>)
 8010602:	6819      	ldr	r1, [r3, #0]
 8010604:	6808      	ldr	r0, [r1, #0]
 8010606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801060a:	f380 8809 	msr	PSP, r0
 801060e:	f3bf 8f6f 	isb	sy
 8010612:	f04f 0000 	mov.w	r0, #0
 8010616:	f380 8811 	msr	BASEPRI, r0
 801061a:	4770      	bx	lr
 801061c:	f3af 8000 	nop.w

08010620 <pxCurrentTCBConst2>:
 8010620:	20002120 	.word	0x20002120
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010624:	bf00      	nop
 8010626:	bf00      	nop

08010628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010628:	4808      	ldr	r0, [pc, #32]	; (801064c <prvPortStartFirstTask+0x24>)
 801062a:	6800      	ldr	r0, [r0, #0]
 801062c:	6800      	ldr	r0, [r0, #0]
 801062e:	f380 8808 	msr	MSP, r0
 8010632:	f04f 0000 	mov.w	r0, #0
 8010636:	f380 8814 	msr	CONTROL, r0
 801063a:	b662      	cpsie	i
 801063c:	b661      	cpsie	f
 801063e:	f3bf 8f4f 	dsb	sy
 8010642:	f3bf 8f6f 	isb	sy
 8010646:	df00      	svc	0
 8010648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801064a:	bf00      	nop
 801064c:	e000ed08 	.word	0xe000ed08

08010650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b086      	sub	sp, #24
 8010654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010656:	4b44      	ldr	r3, [pc, #272]	; (8010768 <xPortStartScheduler+0x118>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	4a44      	ldr	r2, [pc, #272]	; (801076c <xPortStartScheduler+0x11c>)
 801065c:	4293      	cmp	r3, r2
 801065e:	d109      	bne.n	8010674 <xPortStartScheduler+0x24>
 8010660:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010664:	f383 8811 	msr	BASEPRI, r3
 8010668:	f3bf 8f6f 	isb	sy
 801066c:	f3bf 8f4f 	dsb	sy
 8010670:	613b      	str	r3, [r7, #16]
 8010672:	e7fe      	b.n	8010672 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010674:	4b3c      	ldr	r3, [pc, #240]	; (8010768 <xPortStartScheduler+0x118>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	4a3d      	ldr	r2, [pc, #244]	; (8010770 <xPortStartScheduler+0x120>)
 801067a:	4293      	cmp	r3, r2
 801067c:	d109      	bne.n	8010692 <xPortStartScheduler+0x42>
 801067e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010682:	f383 8811 	msr	BASEPRI, r3
 8010686:	f3bf 8f6f 	isb	sy
 801068a:	f3bf 8f4f 	dsb	sy
 801068e:	60fb      	str	r3, [r7, #12]
 8010690:	e7fe      	b.n	8010690 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010692:	4b38      	ldr	r3, [pc, #224]	; (8010774 <xPortStartScheduler+0x124>)
 8010694:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	781b      	ldrb	r3, [r3, #0]
 801069a:	b2db      	uxtb	r3, r3
 801069c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	22ff      	movs	r2, #255	; 0xff
 80106a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	b2db      	uxtb	r3, r3
 80106aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80106ac:	78fb      	ldrb	r3, [r7, #3]
 80106ae:	b2db      	uxtb	r3, r3
 80106b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80106b4:	b2da      	uxtb	r2, r3
 80106b6:	4b30      	ldr	r3, [pc, #192]	; (8010778 <xPortStartScheduler+0x128>)
 80106b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80106ba:	4b30      	ldr	r3, [pc, #192]	; (801077c <xPortStartScheduler+0x12c>)
 80106bc:	2207      	movs	r2, #7
 80106be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80106c0:	e009      	b.n	80106d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80106c2:	4b2e      	ldr	r3, [pc, #184]	; (801077c <xPortStartScheduler+0x12c>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	3b01      	subs	r3, #1
 80106c8:	4a2c      	ldr	r2, [pc, #176]	; (801077c <xPortStartScheduler+0x12c>)
 80106ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80106cc:	78fb      	ldrb	r3, [r7, #3]
 80106ce:	b2db      	uxtb	r3, r3
 80106d0:	005b      	lsls	r3, r3, #1
 80106d2:	b2db      	uxtb	r3, r3
 80106d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80106d6:	78fb      	ldrb	r3, [r7, #3]
 80106d8:	b2db      	uxtb	r3, r3
 80106da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106de:	2b80      	cmp	r3, #128	; 0x80
 80106e0:	d0ef      	beq.n	80106c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80106e2:	4b26      	ldr	r3, [pc, #152]	; (801077c <xPortStartScheduler+0x12c>)
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	f1c3 0307 	rsb	r3, r3, #7
 80106ea:	2b04      	cmp	r3, #4
 80106ec:	d009      	beq.n	8010702 <xPortStartScheduler+0xb2>
 80106ee:	f04f 0330 	mov.w	r3, #48	; 0x30
 80106f2:	f383 8811 	msr	BASEPRI, r3
 80106f6:	f3bf 8f6f 	isb	sy
 80106fa:	f3bf 8f4f 	dsb	sy
 80106fe:	60bb      	str	r3, [r7, #8]
 8010700:	e7fe      	b.n	8010700 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010702:	4b1e      	ldr	r3, [pc, #120]	; (801077c <xPortStartScheduler+0x12c>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	021b      	lsls	r3, r3, #8
 8010708:	4a1c      	ldr	r2, [pc, #112]	; (801077c <xPortStartScheduler+0x12c>)
 801070a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801070c:	4b1b      	ldr	r3, [pc, #108]	; (801077c <xPortStartScheduler+0x12c>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010714:	4a19      	ldr	r2, [pc, #100]	; (801077c <xPortStartScheduler+0x12c>)
 8010716:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	b2da      	uxtb	r2, r3
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010720:	4b17      	ldr	r3, [pc, #92]	; (8010780 <xPortStartScheduler+0x130>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	4a16      	ldr	r2, [pc, #88]	; (8010780 <xPortStartScheduler+0x130>)
 8010726:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801072a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801072c:	4b14      	ldr	r3, [pc, #80]	; (8010780 <xPortStartScheduler+0x130>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	4a13      	ldr	r2, [pc, #76]	; (8010780 <xPortStartScheduler+0x130>)
 8010732:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010736:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010738:	f000 f8d6 	bl	80108e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801073c:	4b11      	ldr	r3, [pc, #68]	; (8010784 <xPortStartScheduler+0x134>)
 801073e:	2200      	movs	r2, #0
 8010740:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010742:	f000 f8f5 	bl	8010930 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010746:	4b10      	ldr	r3, [pc, #64]	; (8010788 <xPortStartScheduler+0x138>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	4a0f      	ldr	r2, [pc, #60]	; (8010788 <xPortStartScheduler+0x138>)
 801074c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010750:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010752:	f7ff ff69 	bl	8010628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010756:	f001 fb7f 	bl	8011e58 <vTaskSwitchContext>
	prvTaskExitError();
 801075a:	f7ff ff25 	bl	80105a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801075e:	2300      	movs	r3, #0
}
 8010760:	4618      	mov	r0, r3
 8010762:	3718      	adds	r7, #24
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}
 8010768:	e000ed00 	.word	0xe000ed00
 801076c:	410fc271 	.word	0x410fc271
 8010770:	410fc270 	.word	0x410fc270
 8010774:	e000e400 	.word	0xe000e400
 8010778:	20002118 	.word	0x20002118
 801077c:	2000211c 	.word	0x2000211c
 8010780:	e000ed20 	.word	0xe000ed20
 8010784:	20000018 	.word	0x20000018
 8010788:	e000ef34 	.word	0xe000ef34

0801078c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801078c:	b480      	push	{r7}
 801078e:	b083      	sub	sp, #12
 8010790:	af00      	add	r7, sp, #0
 8010792:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010796:	f383 8811 	msr	BASEPRI, r3
 801079a:	f3bf 8f6f 	isb	sy
 801079e:	f3bf 8f4f 	dsb	sy
 80107a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80107a4:	4b0e      	ldr	r3, [pc, #56]	; (80107e0 <vPortEnterCritical+0x54>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	3301      	adds	r3, #1
 80107aa:	4a0d      	ldr	r2, [pc, #52]	; (80107e0 <vPortEnterCritical+0x54>)
 80107ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80107ae:	4b0c      	ldr	r3, [pc, #48]	; (80107e0 <vPortEnterCritical+0x54>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	2b01      	cmp	r3, #1
 80107b4:	d10e      	bne.n	80107d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80107b6:	4b0b      	ldr	r3, [pc, #44]	; (80107e4 <vPortEnterCritical+0x58>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	b2db      	uxtb	r3, r3
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d009      	beq.n	80107d4 <vPortEnterCritical+0x48>
 80107c0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80107c4:	f383 8811 	msr	BASEPRI, r3
 80107c8:	f3bf 8f6f 	isb	sy
 80107cc:	f3bf 8f4f 	dsb	sy
 80107d0:	603b      	str	r3, [r7, #0]
 80107d2:	e7fe      	b.n	80107d2 <vPortEnterCritical+0x46>
	}
}
 80107d4:	bf00      	nop
 80107d6:	370c      	adds	r7, #12
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr
 80107e0:	20000018 	.word	0x20000018
 80107e4:	e000ed04 	.word	0xe000ed04

080107e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80107e8:	b480      	push	{r7}
 80107ea:	b083      	sub	sp, #12
 80107ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80107ee:	4b11      	ldr	r3, [pc, #68]	; (8010834 <vPortExitCritical+0x4c>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d109      	bne.n	801080a <vPortExitCritical+0x22>
 80107f6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80107fa:	f383 8811 	msr	BASEPRI, r3
 80107fe:	f3bf 8f6f 	isb	sy
 8010802:	f3bf 8f4f 	dsb	sy
 8010806:	607b      	str	r3, [r7, #4]
 8010808:	e7fe      	b.n	8010808 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801080a:	4b0a      	ldr	r3, [pc, #40]	; (8010834 <vPortExitCritical+0x4c>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	3b01      	subs	r3, #1
 8010810:	4a08      	ldr	r2, [pc, #32]	; (8010834 <vPortExitCritical+0x4c>)
 8010812:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010814:	4b07      	ldr	r3, [pc, #28]	; (8010834 <vPortExitCritical+0x4c>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d104      	bne.n	8010826 <vPortExitCritical+0x3e>
 801081c:	2300      	movs	r3, #0
 801081e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8010826:	bf00      	nop
 8010828:	370c      	adds	r7, #12
 801082a:	46bd      	mov	sp, r7
 801082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010830:	4770      	bx	lr
 8010832:	bf00      	nop
 8010834:	20000018 	.word	0x20000018
	...

08010840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010840:	f3ef 8009 	mrs	r0, PSP
 8010844:	f3bf 8f6f 	isb	sy
 8010848:	4b15      	ldr	r3, [pc, #84]	; (80108a0 <pxCurrentTCBConst>)
 801084a:	681a      	ldr	r2, [r3, #0]
 801084c:	f01e 0f10 	tst.w	lr, #16
 8010850:	bf08      	it	eq
 8010852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801085a:	6010      	str	r0, [r2, #0]
 801085c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010860:	f04f 0030 	mov.w	r0, #48	; 0x30
 8010864:	f380 8811 	msr	BASEPRI, r0
 8010868:	f3bf 8f4f 	dsb	sy
 801086c:	f3bf 8f6f 	isb	sy
 8010870:	f001 faf2 	bl	8011e58 <vTaskSwitchContext>
 8010874:	f04f 0000 	mov.w	r0, #0
 8010878:	f380 8811 	msr	BASEPRI, r0
 801087c:	bc09      	pop	{r0, r3}
 801087e:	6819      	ldr	r1, [r3, #0]
 8010880:	6808      	ldr	r0, [r1, #0]
 8010882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010886:	f01e 0f10 	tst.w	lr, #16
 801088a:	bf08      	it	eq
 801088c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010890:	f380 8809 	msr	PSP, r0
 8010894:	f3bf 8f6f 	isb	sy
 8010898:	4770      	bx	lr
 801089a:	bf00      	nop
 801089c:	f3af 8000 	nop.w

080108a0 <pxCurrentTCBConst>:
 80108a0:	20002120 	.word	0x20002120
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80108a4:	bf00      	nop
 80108a6:	bf00      	nop

080108a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b082      	sub	sp, #8
 80108ac:	af00      	add	r7, sp, #0
	__asm volatile
 80108ae:	f04f 0330 	mov.w	r3, #48	; 0x30
 80108b2:	f383 8811 	msr	BASEPRI, r3
 80108b6:	f3bf 8f6f 	isb	sy
 80108ba:	f3bf 8f4f 	dsb	sy
 80108be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80108c0:	f001 fa0e 	bl	8011ce0 <xTaskIncrementTick>
 80108c4:	4603      	mov	r3, r0
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d003      	beq.n	80108d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80108ca:	4b06      	ldr	r3, [pc, #24]	; (80108e4 <SysTick_Handler+0x3c>)
 80108cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108d0:	601a      	str	r2, [r3, #0]
 80108d2:	2300      	movs	r3, #0
 80108d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80108dc:	bf00      	nop
 80108de:	3708      	adds	r7, #8
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}
 80108e4:	e000ed04 	.word	0xe000ed04

080108e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80108e8:	b480      	push	{r7}
 80108ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80108ec:	4b0b      	ldr	r3, [pc, #44]	; (801091c <vPortSetupTimerInterrupt+0x34>)
 80108ee:	2200      	movs	r2, #0
 80108f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80108f2:	4b0b      	ldr	r3, [pc, #44]	; (8010920 <vPortSetupTimerInterrupt+0x38>)
 80108f4:	2200      	movs	r2, #0
 80108f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80108f8:	4b0a      	ldr	r3, [pc, #40]	; (8010924 <vPortSetupTimerInterrupt+0x3c>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	4a0a      	ldr	r2, [pc, #40]	; (8010928 <vPortSetupTimerInterrupt+0x40>)
 80108fe:	fba2 2303 	umull	r2, r3, r2, r3
 8010902:	099b      	lsrs	r3, r3, #6
 8010904:	4a09      	ldr	r2, [pc, #36]	; (801092c <vPortSetupTimerInterrupt+0x44>)
 8010906:	3b01      	subs	r3, #1
 8010908:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801090a:	4b04      	ldr	r3, [pc, #16]	; (801091c <vPortSetupTimerInterrupt+0x34>)
 801090c:	2207      	movs	r2, #7
 801090e:	601a      	str	r2, [r3, #0]
}
 8010910:	bf00      	nop
 8010912:	46bd      	mov	sp, r7
 8010914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010918:	4770      	bx	lr
 801091a:	bf00      	nop
 801091c:	e000e010 	.word	0xe000e010
 8010920:	e000e018 	.word	0xe000e018
 8010924:	2000000c 	.word	0x2000000c
 8010928:	10624dd3 	.word	0x10624dd3
 801092c:	e000e014 	.word	0xe000e014

08010930 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010930:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010940 <vPortEnableVFP+0x10>
 8010934:	6801      	ldr	r1, [r0, #0]
 8010936:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801093a:	6001      	str	r1, [r0, #0]
 801093c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801093e:	bf00      	nop
 8010940:	e000ed88 	.word	0xe000ed88

08010944 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010944:	b480      	push	{r7}
 8010946:	b085      	sub	sp, #20
 8010948:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801094a:	f3ef 8305 	mrs	r3, IPSR
 801094e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	2b0f      	cmp	r3, #15
 8010954:	d913      	bls.n	801097e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010956:	4a16      	ldr	r2, [pc, #88]	; (80109b0 <vPortValidateInterruptPriority+0x6c>)
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	4413      	add	r3, r2
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010960:	4b14      	ldr	r3, [pc, #80]	; (80109b4 <vPortValidateInterruptPriority+0x70>)
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	7afa      	ldrb	r2, [r7, #11]
 8010966:	429a      	cmp	r2, r3
 8010968:	d209      	bcs.n	801097e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801096a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801096e:	f383 8811 	msr	BASEPRI, r3
 8010972:	f3bf 8f6f 	isb	sy
 8010976:	f3bf 8f4f 	dsb	sy
 801097a:	607b      	str	r3, [r7, #4]
 801097c:	e7fe      	b.n	801097c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801097e:	4b0e      	ldr	r3, [pc, #56]	; (80109b8 <vPortValidateInterruptPriority+0x74>)
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010986:	4b0d      	ldr	r3, [pc, #52]	; (80109bc <vPortValidateInterruptPriority+0x78>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	429a      	cmp	r2, r3
 801098c:	d909      	bls.n	80109a2 <vPortValidateInterruptPriority+0x5e>
 801098e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010992:	f383 8811 	msr	BASEPRI, r3
 8010996:	f3bf 8f6f 	isb	sy
 801099a:	f3bf 8f4f 	dsb	sy
 801099e:	603b      	str	r3, [r7, #0]
 80109a0:	e7fe      	b.n	80109a0 <vPortValidateInterruptPriority+0x5c>
	}
 80109a2:	bf00      	nop
 80109a4:	3714      	adds	r7, #20
 80109a6:	46bd      	mov	sp, r7
 80109a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ac:	4770      	bx	lr
 80109ae:	bf00      	nop
 80109b0:	e000e3f0 	.word	0xe000e3f0
 80109b4:	20002118 	.word	0x20002118
 80109b8:	e000ed0c 	.word	0xe000ed0c
 80109bc:	2000211c 	.word	0x2000211c

080109c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b084      	sub	sp, #16
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
 80109c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d109      	bne.n	80109e8 <xQueueGenericReset+0x28>
 80109d4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80109d8:	f383 8811 	msr	BASEPRI, r3
 80109dc:	f3bf 8f6f 	isb	sy
 80109e0:	f3bf 8f4f 	dsb	sy
 80109e4:	60bb      	str	r3, [r7, #8]
 80109e6:	e7fe      	b.n	80109e6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80109e8:	f7ff fed0 	bl	801078c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	681a      	ldr	r2, [r3, #0]
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109f4:	68f9      	ldr	r1, [r7, #12]
 80109f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80109f8:	fb01 f303 	mul.w	r3, r1, r3
 80109fc:	441a      	add	r2, r3
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	2200      	movs	r2, #0
 8010a06:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	681a      	ldr	r2, [r3, #0]
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	681a      	ldr	r2, [r3, #0]
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a18:	3b01      	subs	r3, #1
 8010a1a:	68f9      	ldr	r1, [r7, #12]
 8010a1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010a1e:	fb01 f303 	mul.w	r3, r1, r3
 8010a22:	441a      	add	r2, r3
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	22ff      	movs	r2, #255	; 0xff
 8010a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	22ff      	movs	r2, #255	; 0xff
 8010a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d114      	bne.n	8010a68 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	691b      	ldr	r3, [r3, #16]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d01a      	beq.n	8010a7c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	3310      	adds	r3, #16
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f001 fa82 	bl	8011f54 <xTaskRemoveFromEventList>
 8010a50:	4603      	mov	r3, r0
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d012      	beq.n	8010a7c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010a56:	4b0d      	ldr	r3, [pc, #52]	; (8010a8c <xQueueGenericReset+0xcc>)
 8010a58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a5c:	601a      	str	r2, [r3, #0]
 8010a5e:	f3bf 8f4f 	dsb	sy
 8010a62:	f3bf 8f6f 	isb	sy
 8010a66:	e009      	b.n	8010a7c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	3310      	adds	r3, #16
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f7ff fcb3 	bl	80103d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	3324      	adds	r3, #36	; 0x24
 8010a76:	4618      	mov	r0, r3
 8010a78:	f7ff fcae 	bl	80103d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010a7c:	f7ff feb4 	bl	80107e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010a80:	2301      	movs	r3, #1
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	3710      	adds	r7, #16
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}
 8010a8a:	bf00      	nop
 8010a8c:	e000ed04 	.word	0xe000ed04

08010a90 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b08a      	sub	sp, #40	; 0x28
 8010a94:	af02      	add	r7, sp, #8
 8010a96:	60f8      	str	r0, [r7, #12]
 8010a98:	60b9      	str	r1, [r7, #8]
 8010a9a:	4613      	mov	r3, r2
 8010a9c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d109      	bne.n	8010ab8 <xQueueGenericCreate+0x28>
 8010aa4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010aa8:	f383 8811 	msr	BASEPRI, r3
 8010aac:	f3bf 8f6f 	isb	sy
 8010ab0:	f3bf 8f4f 	dsb	sy
 8010ab4:	613b      	str	r3, [r7, #16]
 8010ab6:	e7fe      	b.n	8010ab6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d102      	bne.n	8010ac4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	61fb      	str	r3, [r7, #28]
 8010ac2:	e004      	b.n	8010ace <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	68ba      	ldr	r2, [r7, #8]
 8010ac8:	fb02 f303 	mul.w	r3, r2, r3
 8010acc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8010ace:	69fb      	ldr	r3, [r7, #28]
 8010ad0:	3348      	adds	r3, #72	; 0x48
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f7ff faaa 	bl	801002c <pvPortMalloc>
 8010ad8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010ada:	69bb      	ldr	r3, [r7, #24]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d00b      	beq.n	8010af8 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8010ae0:	69bb      	ldr	r3, [r7, #24]
 8010ae2:	3348      	adds	r3, #72	; 0x48
 8010ae4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010ae6:	79fa      	ldrb	r2, [r7, #7]
 8010ae8:	69bb      	ldr	r3, [r7, #24]
 8010aea:	9300      	str	r3, [sp, #0]
 8010aec:	4613      	mov	r3, r2
 8010aee:	697a      	ldr	r2, [r7, #20]
 8010af0:	68b9      	ldr	r1, [r7, #8]
 8010af2:	68f8      	ldr	r0, [r7, #12]
 8010af4:	f000 f805 	bl	8010b02 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8010af8:	69bb      	ldr	r3, [r7, #24]
	}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3720      	adds	r7, #32
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}

08010b02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010b02:	b580      	push	{r7, lr}
 8010b04:	b084      	sub	sp, #16
 8010b06:	af00      	add	r7, sp, #0
 8010b08:	60f8      	str	r0, [r7, #12]
 8010b0a:	60b9      	str	r1, [r7, #8]
 8010b0c:	607a      	str	r2, [r7, #4]
 8010b0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d103      	bne.n	8010b1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010b16:	69bb      	ldr	r3, [r7, #24]
 8010b18:	69ba      	ldr	r2, [r7, #24]
 8010b1a:	601a      	str	r2, [r3, #0]
 8010b1c:	e002      	b.n	8010b24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010b1e:	69bb      	ldr	r3, [r7, #24]
 8010b20:	687a      	ldr	r2, [r7, #4]
 8010b22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010b24:	69bb      	ldr	r3, [r7, #24]
 8010b26:	68fa      	ldr	r2, [r7, #12]
 8010b28:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010b2a:	69bb      	ldr	r3, [r7, #24]
 8010b2c:	68ba      	ldr	r2, [r7, #8]
 8010b2e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010b30:	2101      	movs	r1, #1
 8010b32:	69b8      	ldr	r0, [r7, #24]
 8010b34:	f7ff ff44 	bl	80109c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010b38:	bf00      	nop
 8010b3a:	3710      	adds	r7, #16
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b086      	sub	sp, #24
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
 8010b48:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d109      	bne.n	8010b64 <xQueueCreateCountingSemaphore+0x24>
 8010b50:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010b54:	f383 8811 	msr	BASEPRI, r3
 8010b58:	f3bf 8f6f 	isb	sy
 8010b5c:	f3bf 8f4f 	dsb	sy
 8010b60:	613b      	str	r3, [r7, #16]
 8010b62:	e7fe      	b.n	8010b62 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010b64:	683a      	ldr	r2, [r7, #0]
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d909      	bls.n	8010b80 <xQueueCreateCountingSemaphore+0x40>
 8010b6c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010b70:	f383 8811 	msr	BASEPRI, r3
 8010b74:	f3bf 8f6f 	isb	sy
 8010b78:	f3bf 8f4f 	dsb	sy
 8010b7c:	60fb      	str	r3, [r7, #12]
 8010b7e:	e7fe      	b.n	8010b7e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010b80:	2202      	movs	r2, #2
 8010b82:	2100      	movs	r1, #0
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f7ff ff83 	bl	8010a90 <xQueueGenericCreate>
 8010b8a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d002      	beq.n	8010b98 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010b92:	697b      	ldr	r3, [r7, #20]
 8010b94:	683a      	ldr	r2, [r7, #0]
 8010b96:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010b98:	697b      	ldr	r3, [r7, #20]
	}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	3718      	adds	r7, #24
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}
	...

08010ba4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b08e      	sub	sp, #56	; 0x38
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	60f8      	str	r0, [r7, #12]
 8010bac:	60b9      	str	r1, [r7, #8]
 8010bae:	607a      	str	r2, [r7, #4]
 8010bb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d109      	bne.n	8010bd4 <xQueueGenericSend+0x30>
 8010bc0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010bc4:	f383 8811 	msr	BASEPRI, r3
 8010bc8:	f3bf 8f6f 	isb	sy
 8010bcc:	f3bf 8f4f 	dsb	sy
 8010bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8010bd2:	e7fe      	b.n	8010bd2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d103      	bne.n	8010be2 <xQueueGenericSend+0x3e>
 8010bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d101      	bne.n	8010be6 <xQueueGenericSend+0x42>
 8010be2:	2301      	movs	r3, #1
 8010be4:	e000      	b.n	8010be8 <xQueueGenericSend+0x44>
 8010be6:	2300      	movs	r3, #0
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d109      	bne.n	8010c00 <xQueueGenericSend+0x5c>
 8010bec:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010bf0:	f383 8811 	msr	BASEPRI, r3
 8010bf4:	f3bf 8f6f 	isb	sy
 8010bf8:	f3bf 8f4f 	dsb	sy
 8010bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8010bfe:	e7fe      	b.n	8010bfe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	2b02      	cmp	r3, #2
 8010c04:	d103      	bne.n	8010c0e <xQueueGenericSend+0x6a>
 8010c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c0a:	2b01      	cmp	r3, #1
 8010c0c:	d101      	bne.n	8010c12 <xQueueGenericSend+0x6e>
 8010c0e:	2301      	movs	r3, #1
 8010c10:	e000      	b.n	8010c14 <xQueueGenericSend+0x70>
 8010c12:	2300      	movs	r3, #0
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d109      	bne.n	8010c2c <xQueueGenericSend+0x88>
 8010c18:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010c1c:	f383 8811 	msr	BASEPRI, r3
 8010c20:	f3bf 8f6f 	isb	sy
 8010c24:	f3bf 8f4f 	dsb	sy
 8010c28:	623b      	str	r3, [r7, #32]
 8010c2a:	e7fe      	b.n	8010c2a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010c2c:	f001 fb30 	bl	8012290 <xTaskGetSchedulerState>
 8010c30:	4603      	mov	r3, r0
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d102      	bne.n	8010c3c <xQueueGenericSend+0x98>
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d101      	bne.n	8010c40 <xQueueGenericSend+0x9c>
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	e000      	b.n	8010c42 <xQueueGenericSend+0x9e>
 8010c40:	2300      	movs	r3, #0
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d109      	bne.n	8010c5a <xQueueGenericSend+0xb6>
 8010c46:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010c4a:	f383 8811 	msr	BASEPRI, r3
 8010c4e:	f3bf 8f6f 	isb	sy
 8010c52:	f3bf 8f4f 	dsb	sy
 8010c56:	61fb      	str	r3, [r7, #28]
 8010c58:	e7fe      	b.n	8010c58 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010c5a:	f7ff fd97 	bl	801078c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d302      	bcc.n	8010c70 <xQueueGenericSend+0xcc>
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	2b02      	cmp	r3, #2
 8010c6e:	d129      	bne.n	8010cc4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010c70:	683a      	ldr	r2, [r7, #0]
 8010c72:	68b9      	ldr	r1, [r7, #8]
 8010c74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c76:	f000 fc26 	bl	80114c6 <prvCopyDataToQueue>
 8010c7a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d010      	beq.n	8010ca6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c86:	3324      	adds	r3, #36	; 0x24
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f001 f963 	bl	8011f54 <xTaskRemoveFromEventList>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d013      	beq.n	8010cbc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010c94:	4b3f      	ldr	r3, [pc, #252]	; (8010d94 <xQueueGenericSend+0x1f0>)
 8010c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c9a:	601a      	str	r2, [r3, #0]
 8010c9c:	f3bf 8f4f 	dsb	sy
 8010ca0:	f3bf 8f6f 	isb	sy
 8010ca4:	e00a      	b.n	8010cbc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d007      	beq.n	8010cbc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010cac:	4b39      	ldr	r3, [pc, #228]	; (8010d94 <xQueueGenericSend+0x1f0>)
 8010cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cb2:	601a      	str	r2, [r3, #0]
 8010cb4:	f3bf 8f4f 	dsb	sy
 8010cb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010cbc:	f7ff fd94 	bl	80107e8 <vPortExitCritical>
				return pdPASS;
 8010cc0:	2301      	movs	r3, #1
 8010cc2:	e063      	b.n	8010d8c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d103      	bne.n	8010cd2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010cca:	f7ff fd8d 	bl	80107e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	e05c      	b.n	8010d8c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d106      	bne.n	8010ce6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010cd8:	f107 0314 	add.w	r3, r7, #20
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f001 f99b 	bl	8012018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010ce6:	f7ff fd7f 	bl	80107e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010cea:	f000 ff2d 	bl	8011b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010cee:	f7ff fd4d 	bl	801078c <vPortEnterCritical>
 8010cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010cf8:	b25b      	sxtb	r3, r3
 8010cfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010cfe:	d103      	bne.n	8010d08 <xQueueGenericSend+0x164>
 8010d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d02:	2200      	movs	r2, #0
 8010d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d0e:	b25b      	sxtb	r3, r3
 8010d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d14:	d103      	bne.n	8010d1e <xQueueGenericSend+0x17a>
 8010d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d18:	2200      	movs	r2, #0
 8010d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010d1e:	f7ff fd63 	bl	80107e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010d22:	1d3a      	adds	r2, r7, #4
 8010d24:	f107 0314 	add.w	r3, r7, #20
 8010d28:	4611      	mov	r1, r2
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f001 f98a 	bl	8012044 <xTaskCheckForTimeOut>
 8010d30:	4603      	mov	r3, r0
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d124      	bne.n	8010d80 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010d36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d38:	f000 fcbd 	bl	80116b6 <prvIsQueueFull>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d018      	beq.n	8010d74 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d44:	3310      	adds	r3, #16
 8010d46:	687a      	ldr	r2, [r7, #4]
 8010d48:	4611      	mov	r1, r2
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f001 f8de 	bl	8011f0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010d50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d52:	f000 fc48 	bl	80115e6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010d56:	f000 ff05 	bl	8011b64 <xTaskResumeAll>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	f47f af7c 	bne.w	8010c5a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8010d62:	4b0c      	ldr	r3, [pc, #48]	; (8010d94 <xQueueGenericSend+0x1f0>)
 8010d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d68:	601a      	str	r2, [r3, #0]
 8010d6a:	f3bf 8f4f 	dsb	sy
 8010d6e:	f3bf 8f6f 	isb	sy
 8010d72:	e772      	b.n	8010c5a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d76:	f000 fc36 	bl	80115e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010d7a:	f000 fef3 	bl	8011b64 <xTaskResumeAll>
 8010d7e:	e76c      	b.n	8010c5a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010d80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d82:	f000 fc30 	bl	80115e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010d86:	f000 feed 	bl	8011b64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010d8a:	2300      	movs	r3, #0
		}
	}
}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	3738      	adds	r7, #56	; 0x38
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}
 8010d94:	e000ed04 	.word	0xe000ed04

08010d98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b08e      	sub	sp, #56	; 0x38
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	60f8      	str	r0, [r7, #12]
 8010da0:	60b9      	str	r1, [r7, #8]
 8010da2:	607a      	str	r2, [r7, #4]
 8010da4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d109      	bne.n	8010dc4 <xQueueGenericSendFromISR+0x2c>
 8010db0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010db4:	f383 8811 	msr	BASEPRI, r3
 8010db8:	f3bf 8f6f 	isb	sy
 8010dbc:	f3bf 8f4f 	dsb	sy
 8010dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8010dc2:	e7fe      	b.n	8010dc2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d103      	bne.n	8010dd2 <xQueueGenericSendFromISR+0x3a>
 8010dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d101      	bne.n	8010dd6 <xQueueGenericSendFromISR+0x3e>
 8010dd2:	2301      	movs	r3, #1
 8010dd4:	e000      	b.n	8010dd8 <xQueueGenericSendFromISR+0x40>
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d109      	bne.n	8010df0 <xQueueGenericSendFromISR+0x58>
 8010ddc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010de0:	f383 8811 	msr	BASEPRI, r3
 8010de4:	f3bf 8f6f 	isb	sy
 8010de8:	f3bf 8f4f 	dsb	sy
 8010dec:	623b      	str	r3, [r7, #32]
 8010dee:	e7fe      	b.n	8010dee <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	2b02      	cmp	r3, #2
 8010df4:	d103      	bne.n	8010dfe <xQueueGenericSendFromISR+0x66>
 8010df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010dfa:	2b01      	cmp	r3, #1
 8010dfc:	d101      	bne.n	8010e02 <xQueueGenericSendFromISR+0x6a>
 8010dfe:	2301      	movs	r3, #1
 8010e00:	e000      	b.n	8010e04 <xQueueGenericSendFromISR+0x6c>
 8010e02:	2300      	movs	r3, #0
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d109      	bne.n	8010e1c <xQueueGenericSendFromISR+0x84>
 8010e08:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010e0c:	f383 8811 	msr	BASEPRI, r3
 8010e10:	f3bf 8f6f 	isb	sy
 8010e14:	f3bf 8f4f 	dsb	sy
 8010e18:	61fb      	str	r3, [r7, #28]
 8010e1a:	e7fe      	b.n	8010e1a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010e1c:	f7ff fd92 	bl	8010944 <vPortValidateInterruptPriority>
	__asm volatile
 8010e20:	f3ef 8211 	mrs	r2, BASEPRI
 8010e24:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010e28:	f383 8811 	msr	BASEPRI, r3
 8010e2c:	f3bf 8f6f 	isb	sy
 8010e30:	f3bf 8f4f 	dsb	sy
 8010e34:	61ba      	str	r2, [r7, #24]
 8010e36:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010e38:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e44:	429a      	cmp	r2, r3
 8010e46:	d302      	bcc.n	8010e4e <xQueueGenericSendFromISR+0xb6>
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	2b02      	cmp	r3, #2
 8010e4c:	d12c      	bne.n	8010ea8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010e58:	683a      	ldr	r2, [r7, #0]
 8010e5a:	68b9      	ldr	r1, [r7, #8]
 8010e5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e5e:	f000 fb32 	bl	80114c6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010e62:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e6a:	d112      	bne.n	8010e92 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d016      	beq.n	8010ea2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e76:	3324      	adds	r3, #36	; 0x24
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f001 f86b 	bl	8011f54 <xTaskRemoveFromEventList>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d00e      	beq.n	8010ea2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d00b      	beq.n	8010ea2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2201      	movs	r2, #1
 8010e8e:	601a      	str	r2, [r3, #0]
 8010e90:	e007      	b.n	8010ea2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010e92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010e96:	3301      	adds	r3, #1
 8010e98:	b2db      	uxtb	r3, r3
 8010e9a:	b25a      	sxtb	r2, r3
 8010e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010ea2:	2301      	movs	r3, #1
 8010ea4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010ea6:	e001      	b.n	8010eac <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8010eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eae:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010eb0:	693b      	ldr	r3, [r7, #16]
 8010eb2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010eb8:	4618      	mov	r0, r3
 8010eba:	3738      	adds	r7, #56	; 0x38
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}

08010ec0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b08e      	sub	sp, #56	; 0x38
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
 8010ec8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d109      	bne.n	8010ee8 <xQueueGiveFromISR+0x28>
	__asm volatile
 8010ed4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010ed8:	f383 8811 	msr	BASEPRI, r3
 8010edc:	f3bf 8f6f 	isb	sy
 8010ee0:	f3bf 8f4f 	dsb	sy
 8010ee4:	623b      	str	r3, [r7, #32]
 8010ee6:	e7fe      	b.n	8010ee6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d009      	beq.n	8010f04 <xQueueGiveFromISR+0x44>
 8010ef0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010ef4:	f383 8811 	msr	BASEPRI, r3
 8010ef8:	f3bf 8f6f 	isb	sy
 8010efc:	f3bf 8f4f 	dsb	sy
 8010f00:	61fb      	str	r3, [r7, #28]
 8010f02:	e7fe      	b.n	8010f02 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d103      	bne.n	8010f14 <xQueueGiveFromISR+0x54>
 8010f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f0e:	685b      	ldr	r3, [r3, #4]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d101      	bne.n	8010f18 <xQueueGiveFromISR+0x58>
 8010f14:	2301      	movs	r3, #1
 8010f16:	e000      	b.n	8010f1a <xQueueGiveFromISR+0x5a>
 8010f18:	2300      	movs	r3, #0
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d109      	bne.n	8010f32 <xQueueGiveFromISR+0x72>
 8010f1e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010f22:	f383 8811 	msr	BASEPRI, r3
 8010f26:	f3bf 8f6f 	isb	sy
 8010f2a:	f3bf 8f4f 	dsb	sy
 8010f2e:	61bb      	str	r3, [r7, #24]
 8010f30:	e7fe      	b.n	8010f30 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010f32:	f7ff fd07 	bl	8010944 <vPortValidateInterruptPriority>
	__asm volatile
 8010f36:	f3ef 8211 	mrs	r2, BASEPRI
 8010f3a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010f3e:	f383 8811 	msr	BASEPRI, r3
 8010f42:	f3bf 8f6f 	isb	sy
 8010f46:	f3bf 8f4f 	dsb	sy
 8010f4a:	617a      	str	r2, [r7, #20]
 8010f4c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010f4e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010f50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	d22b      	bcs.n	8010fba <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f6e:	1c5a      	adds	r2, r3, #1
 8010f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f72:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010f74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f7c:	d112      	bne.n	8010fa4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d016      	beq.n	8010fb4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f88:	3324      	adds	r3, #36	; 0x24
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f000 ffe2 	bl	8011f54 <xTaskRemoveFromEventList>
 8010f90:	4603      	mov	r3, r0
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d00e      	beq.n	8010fb4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d00b      	beq.n	8010fb4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	2201      	movs	r2, #1
 8010fa0:	601a      	str	r2, [r3, #0]
 8010fa2:	e007      	b.n	8010fb4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fa8:	3301      	adds	r3, #1
 8010faa:	b2db      	uxtb	r3, r3
 8010fac:	b25a      	sxtb	r2, r3
 8010fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010fb4:	2301      	movs	r3, #1
 8010fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8010fb8:	e001      	b.n	8010fbe <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8010fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fc0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3738      	adds	r7, #56	; 0x38
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
	...

08010fd4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b08c      	sub	sp, #48	; 0x30
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	60f8      	str	r0, [r7, #12]
 8010fdc:	60b9      	str	r1, [r7, #8]
 8010fde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d109      	bne.n	8011002 <xQueueReceive+0x2e>
	__asm volatile
 8010fee:	f04f 0330 	mov.w	r3, #48	; 0x30
 8010ff2:	f383 8811 	msr	BASEPRI, r3
 8010ff6:	f3bf 8f6f 	isb	sy
 8010ffa:	f3bf 8f4f 	dsb	sy
 8010ffe:	623b      	str	r3, [r7, #32]
 8011000:	e7fe      	b.n	8011000 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011002:	68bb      	ldr	r3, [r7, #8]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d103      	bne.n	8011010 <xQueueReceive+0x3c>
 8011008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801100c:	2b00      	cmp	r3, #0
 801100e:	d101      	bne.n	8011014 <xQueueReceive+0x40>
 8011010:	2301      	movs	r3, #1
 8011012:	e000      	b.n	8011016 <xQueueReceive+0x42>
 8011014:	2300      	movs	r3, #0
 8011016:	2b00      	cmp	r3, #0
 8011018:	d109      	bne.n	801102e <xQueueReceive+0x5a>
 801101a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801101e:	f383 8811 	msr	BASEPRI, r3
 8011022:	f3bf 8f6f 	isb	sy
 8011026:	f3bf 8f4f 	dsb	sy
 801102a:	61fb      	str	r3, [r7, #28]
 801102c:	e7fe      	b.n	801102c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801102e:	f001 f92f 	bl	8012290 <xTaskGetSchedulerState>
 8011032:	4603      	mov	r3, r0
 8011034:	2b00      	cmp	r3, #0
 8011036:	d102      	bne.n	801103e <xQueueReceive+0x6a>
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d101      	bne.n	8011042 <xQueueReceive+0x6e>
 801103e:	2301      	movs	r3, #1
 8011040:	e000      	b.n	8011044 <xQueueReceive+0x70>
 8011042:	2300      	movs	r3, #0
 8011044:	2b00      	cmp	r3, #0
 8011046:	d109      	bne.n	801105c <xQueueReceive+0x88>
 8011048:	f04f 0330 	mov.w	r3, #48	; 0x30
 801104c:	f383 8811 	msr	BASEPRI, r3
 8011050:	f3bf 8f6f 	isb	sy
 8011054:	f3bf 8f4f 	dsb	sy
 8011058:	61bb      	str	r3, [r7, #24]
 801105a:	e7fe      	b.n	801105a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 801105c:	f7ff fb96 	bl	801078c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011064:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011068:	2b00      	cmp	r3, #0
 801106a:	d01f      	beq.n	80110ac <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801106c:	68b9      	ldr	r1, [r7, #8]
 801106e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011070:	f000 fa93 	bl	801159a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011076:	1e5a      	subs	r2, r3, #1
 8011078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801107a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801107c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801107e:	691b      	ldr	r3, [r3, #16]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d00f      	beq.n	80110a4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011086:	3310      	adds	r3, #16
 8011088:	4618      	mov	r0, r3
 801108a:	f000 ff63 	bl	8011f54 <xTaskRemoveFromEventList>
 801108e:	4603      	mov	r3, r0
 8011090:	2b00      	cmp	r3, #0
 8011092:	d007      	beq.n	80110a4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011094:	4b3c      	ldr	r3, [pc, #240]	; (8011188 <xQueueReceive+0x1b4>)
 8011096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801109a:	601a      	str	r2, [r3, #0]
 801109c:	f3bf 8f4f 	dsb	sy
 80110a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80110a4:	f7ff fba0 	bl	80107e8 <vPortExitCritical>
				return pdPASS;
 80110a8:	2301      	movs	r3, #1
 80110aa:	e069      	b.n	8011180 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d103      	bne.n	80110ba <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80110b2:	f7ff fb99 	bl	80107e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80110b6:	2300      	movs	r3, #0
 80110b8:	e062      	b.n	8011180 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80110ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d106      	bne.n	80110ce <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80110c0:	f107 0310 	add.w	r3, r7, #16
 80110c4:	4618      	mov	r0, r3
 80110c6:	f000 ffa7 	bl	8012018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80110ca:	2301      	movs	r3, #1
 80110cc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80110ce:	f7ff fb8b 	bl	80107e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80110d2:	f000 fd39 	bl	8011b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80110d6:	f7ff fb59 	bl	801078c <vPortEnterCritical>
 80110da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80110e0:	b25b      	sxtb	r3, r3
 80110e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110e6:	d103      	bne.n	80110f0 <xQueueReceive+0x11c>
 80110e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ea:	2200      	movs	r2, #0
 80110ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80110f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80110f6:	b25b      	sxtb	r3, r3
 80110f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110fc:	d103      	bne.n	8011106 <xQueueReceive+0x132>
 80110fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011100:	2200      	movs	r2, #0
 8011102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011106:	f7ff fb6f 	bl	80107e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801110a:	1d3a      	adds	r2, r7, #4
 801110c:	f107 0310 	add.w	r3, r7, #16
 8011110:	4611      	mov	r1, r2
 8011112:	4618      	mov	r0, r3
 8011114:	f000 ff96 	bl	8012044 <xTaskCheckForTimeOut>
 8011118:	4603      	mov	r3, r0
 801111a:	2b00      	cmp	r3, #0
 801111c:	d123      	bne.n	8011166 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801111e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011120:	f000 fab3 	bl	801168a <prvIsQueueEmpty>
 8011124:	4603      	mov	r3, r0
 8011126:	2b00      	cmp	r3, #0
 8011128:	d017      	beq.n	801115a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801112a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801112c:	3324      	adds	r3, #36	; 0x24
 801112e:	687a      	ldr	r2, [r7, #4]
 8011130:	4611      	mov	r1, r2
 8011132:	4618      	mov	r0, r3
 8011134:	f000 feea 	bl	8011f0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801113a:	f000 fa54 	bl	80115e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801113e:	f000 fd11 	bl	8011b64 <xTaskResumeAll>
 8011142:	4603      	mov	r3, r0
 8011144:	2b00      	cmp	r3, #0
 8011146:	d189      	bne.n	801105c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8011148:	4b0f      	ldr	r3, [pc, #60]	; (8011188 <xQueueReceive+0x1b4>)
 801114a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801114e:	601a      	str	r2, [r3, #0]
 8011150:	f3bf 8f4f 	dsb	sy
 8011154:	f3bf 8f6f 	isb	sy
 8011158:	e780      	b.n	801105c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801115a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801115c:	f000 fa43 	bl	80115e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011160:	f000 fd00 	bl	8011b64 <xTaskResumeAll>
 8011164:	e77a      	b.n	801105c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011168:	f000 fa3d 	bl	80115e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801116c:	f000 fcfa 	bl	8011b64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011172:	f000 fa8a 	bl	801168a <prvIsQueueEmpty>
 8011176:	4603      	mov	r3, r0
 8011178:	2b00      	cmp	r3, #0
 801117a:	f43f af6f 	beq.w	801105c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801117e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8011180:	4618      	mov	r0, r3
 8011182:	3730      	adds	r7, #48	; 0x30
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}
 8011188:	e000ed04 	.word	0xe000ed04

0801118c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b08e      	sub	sp, #56	; 0x38
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
 8011194:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011196:	2300      	movs	r3, #0
 8011198:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801119e:	2300      	movs	r3, #0
 80111a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80111a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d109      	bne.n	80111bc <xQueueSemaphoreTake+0x30>
 80111a8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80111ac:	f383 8811 	msr	BASEPRI, r3
 80111b0:	f3bf 8f6f 	isb	sy
 80111b4:	f3bf 8f4f 	dsb	sy
 80111b8:	623b      	str	r3, [r7, #32]
 80111ba:	e7fe      	b.n	80111ba <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80111bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d009      	beq.n	80111d8 <xQueueSemaphoreTake+0x4c>
 80111c4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80111c8:	f383 8811 	msr	BASEPRI, r3
 80111cc:	f3bf 8f6f 	isb	sy
 80111d0:	f3bf 8f4f 	dsb	sy
 80111d4:	61fb      	str	r3, [r7, #28]
 80111d6:	e7fe      	b.n	80111d6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80111d8:	f001 f85a 	bl	8012290 <xTaskGetSchedulerState>
 80111dc:	4603      	mov	r3, r0
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d102      	bne.n	80111e8 <xQueueSemaphoreTake+0x5c>
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d101      	bne.n	80111ec <xQueueSemaphoreTake+0x60>
 80111e8:	2301      	movs	r3, #1
 80111ea:	e000      	b.n	80111ee <xQueueSemaphoreTake+0x62>
 80111ec:	2300      	movs	r3, #0
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d109      	bne.n	8011206 <xQueueSemaphoreTake+0x7a>
 80111f2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80111f6:	f383 8811 	msr	BASEPRI, r3
 80111fa:	f3bf 8f6f 	isb	sy
 80111fe:	f3bf 8f4f 	dsb	sy
 8011202:	61bb      	str	r3, [r7, #24]
 8011204:	e7fe      	b.n	8011204 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8011206:	f7ff fac1 	bl	801078c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801120e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011212:	2b00      	cmp	r3, #0
 8011214:	d024      	beq.n	8011260 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011218:	1e5a      	subs	r2, r3, #1
 801121a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801121e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d104      	bne.n	8011230 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8011226:	f001 f9f9 	bl	801261c <pvTaskIncrementMutexHeldCount>
 801122a:	4602      	mov	r2, r0
 801122c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801122e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011232:	691b      	ldr	r3, [r3, #16]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d00f      	beq.n	8011258 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801123a:	3310      	adds	r3, #16
 801123c:	4618      	mov	r0, r3
 801123e:	f000 fe89 	bl	8011f54 <xTaskRemoveFromEventList>
 8011242:	4603      	mov	r3, r0
 8011244:	2b00      	cmp	r3, #0
 8011246:	d007      	beq.n	8011258 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011248:	4b53      	ldr	r3, [pc, #332]	; (8011398 <xQueueSemaphoreTake+0x20c>)
 801124a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801124e:	601a      	str	r2, [r3, #0]
 8011250:	f3bf 8f4f 	dsb	sy
 8011254:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011258:	f7ff fac6 	bl	80107e8 <vPortExitCritical>
				return pdPASS;
 801125c:	2301      	movs	r3, #1
 801125e:	e096      	b.n	801138e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d110      	bne.n	8011288 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011268:	2b00      	cmp	r3, #0
 801126a:	d009      	beq.n	8011280 <xQueueSemaphoreTake+0xf4>
 801126c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011270:	f383 8811 	msr	BASEPRI, r3
 8011274:	f3bf 8f6f 	isb	sy
 8011278:	f3bf 8f4f 	dsb	sy
 801127c:	617b      	str	r3, [r7, #20]
 801127e:	e7fe      	b.n	801127e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011280:	f7ff fab2 	bl	80107e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011284:	2300      	movs	r3, #0
 8011286:	e082      	b.n	801138e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801128a:	2b00      	cmp	r3, #0
 801128c:	d106      	bne.n	801129c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801128e:	f107 030c 	add.w	r3, r7, #12
 8011292:	4618      	mov	r0, r3
 8011294:	f000 fec0 	bl	8012018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011298:	2301      	movs	r3, #1
 801129a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801129c:	f7ff faa4 	bl	80107e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80112a0:	f000 fc52 	bl	8011b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80112a4:	f7ff fa72 	bl	801078c <vPortEnterCritical>
 80112a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80112ae:	b25b      	sxtb	r3, r3
 80112b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80112b4:	d103      	bne.n	80112be <xQueueSemaphoreTake+0x132>
 80112b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112b8:	2200      	movs	r2, #0
 80112ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80112be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80112c4:	b25b      	sxtb	r3, r3
 80112c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80112ca:	d103      	bne.n	80112d4 <xQueueSemaphoreTake+0x148>
 80112cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ce:	2200      	movs	r2, #0
 80112d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80112d4:	f7ff fa88 	bl	80107e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80112d8:	463a      	mov	r2, r7
 80112da:	f107 030c 	add.w	r3, r7, #12
 80112de:	4611      	mov	r1, r2
 80112e0:	4618      	mov	r0, r3
 80112e2:	f000 feaf 	bl	8012044 <xTaskCheckForTimeOut>
 80112e6:	4603      	mov	r3, r0
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d132      	bne.n	8011352 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80112ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112ee:	f000 f9cc 	bl	801168a <prvIsQueueEmpty>
 80112f2:	4603      	mov	r3, r0
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d026      	beq.n	8011346 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80112f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d109      	bne.n	8011314 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8011300:	f7ff fa44 	bl	801078c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8011304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011306:	685b      	ldr	r3, [r3, #4]
 8011308:	4618      	mov	r0, r3
 801130a:	f000 ffdf 	bl	80122cc <xTaskPriorityInherit>
 801130e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011310:	f7ff fa6a 	bl	80107e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011316:	3324      	adds	r3, #36	; 0x24
 8011318:	683a      	ldr	r2, [r7, #0]
 801131a:	4611      	mov	r1, r2
 801131c:	4618      	mov	r0, r3
 801131e:	f000 fdf5 	bl	8011f0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011322:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011324:	f000 f95f 	bl	80115e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011328:	f000 fc1c 	bl	8011b64 <xTaskResumeAll>
 801132c:	4603      	mov	r3, r0
 801132e:	2b00      	cmp	r3, #0
 8011330:	f47f af69 	bne.w	8011206 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8011334:	4b18      	ldr	r3, [pc, #96]	; (8011398 <xQueueSemaphoreTake+0x20c>)
 8011336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801133a:	601a      	str	r2, [r3, #0]
 801133c:	f3bf 8f4f 	dsb	sy
 8011340:	f3bf 8f6f 	isb	sy
 8011344:	e75f      	b.n	8011206 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011346:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011348:	f000 f94d 	bl	80115e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801134c:	f000 fc0a 	bl	8011b64 <xTaskResumeAll>
 8011350:	e759      	b.n	8011206 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011352:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011354:	f000 f947 	bl	80115e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011358:	f000 fc04 	bl	8011b64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801135c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801135e:	f000 f994 	bl	801168a <prvIsQueueEmpty>
 8011362:	4603      	mov	r3, r0
 8011364:	2b00      	cmp	r3, #0
 8011366:	f43f af4e 	beq.w	8011206 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801136a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801136c:	2b00      	cmp	r3, #0
 801136e:	d00d      	beq.n	801138c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8011370:	f7ff fa0c 	bl	801078c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011374:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011376:	f000 f88e 	bl	8011496 <prvGetDisinheritPriorityAfterTimeout>
 801137a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 801137c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801137e:	685b      	ldr	r3, [r3, #4]
 8011380:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011382:	4618      	mov	r0, r3
 8011384:	f001 f8ac 	bl	80124e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011388:	f7ff fa2e 	bl	80107e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801138c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801138e:	4618      	mov	r0, r3
 8011390:	3738      	adds	r7, #56	; 0x38
 8011392:	46bd      	mov	sp, r7
 8011394:	bd80      	pop	{r7, pc}
 8011396:	bf00      	nop
 8011398:	e000ed04 	.word	0xe000ed04

0801139c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b08e      	sub	sp, #56	; 0x38
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	60f8      	str	r0, [r7, #12]
 80113a4:	60b9      	str	r1, [r7, #8]
 80113a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80113ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d109      	bne.n	80113c6 <xQueueReceiveFromISR+0x2a>
 80113b2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80113b6:	f383 8811 	msr	BASEPRI, r3
 80113ba:	f3bf 8f6f 	isb	sy
 80113be:	f3bf 8f4f 	dsb	sy
 80113c2:	623b      	str	r3, [r7, #32]
 80113c4:	e7fe      	b.n	80113c4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80113c6:	68bb      	ldr	r3, [r7, #8]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d103      	bne.n	80113d4 <xQueueReceiveFromISR+0x38>
 80113cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d101      	bne.n	80113d8 <xQueueReceiveFromISR+0x3c>
 80113d4:	2301      	movs	r3, #1
 80113d6:	e000      	b.n	80113da <xQueueReceiveFromISR+0x3e>
 80113d8:	2300      	movs	r3, #0
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d109      	bne.n	80113f2 <xQueueReceiveFromISR+0x56>
 80113de:	f04f 0330 	mov.w	r3, #48	; 0x30
 80113e2:	f383 8811 	msr	BASEPRI, r3
 80113e6:	f3bf 8f6f 	isb	sy
 80113ea:	f3bf 8f4f 	dsb	sy
 80113ee:	61fb      	str	r3, [r7, #28]
 80113f0:	e7fe      	b.n	80113f0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80113f2:	f7ff faa7 	bl	8010944 <vPortValidateInterruptPriority>
	__asm volatile
 80113f6:	f3ef 8211 	mrs	r2, BASEPRI
 80113fa:	f04f 0330 	mov.w	r3, #48	; 0x30
 80113fe:	f383 8811 	msr	BASEPRI, r3
 8011402:	f3bf 8f6f 	isb	sy
 8011406:	f3bf 8f4f 	dsb	sy
 801140a:	61ba      	str	r2, [r7, #24]
 801140c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801140e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011410:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011416:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801141a:	2b00      	cmp	r3, #0
 801141c:	d02f      	beq.n	801147e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801141e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011420:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011428:	68b9      	ldr	r1, [r7, #8]
 801142a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801142c:	f000 f8b5 	bl	801159a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011432:	1e5a      	subs	r2, r3, #1
 8011434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011436:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011438:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801143c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011440:	d112      	bne.n	8011468 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011444:	691b      	ldr	r3, [r3, #16]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d016      	beq.n	8011478 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801144a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801144c:	3310      	adds	r3, #16
 801144e:	4618      	mov	r0, r3
 8011450:	f000 fd80 	bl	8011f54 <xTaskRemoveFromEventList>
 8011454:	4603      	mov	r3, r0
 8011456:	2b00      	cmp	r3, #0
 8011458:	d00e      	beq.n	8011478 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d00b      	beq.n	8011478 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2201      	movs	r2, #1
 8011464:	601a      	str	r2, [r3, #0]
 8011466:	e007      	b.n	8011478 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801146c:	3301      	adds	r3, #1
 801146e:	b2db      	uxtb	r3, r3
 8011470:	b25a      	sxtb	r2, r3
 8011472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011478:	2301      	movs	r3, #1
 801147a:	637b      	str	r3, [r7, #52]	; 0x34
 801147c:	e001      	b.n	8011482 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 801147e:	2300      	movs	r3, #0
 8011480:	637b      	str	r3, [r7, #52]	; 0x34
 8011482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011484:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011486:	693b      	ldr	r3, [r7, #16]
 8011488:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801148c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801148e:	4618      	mov	r0, r3
 8011490:	3738      	adds	r7, #56	; 0x38
 8011492:	46bd      	mov	sp, r7
 8011494:	bd80      	pop	{r7, pc}

08011496 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011496:	b480      	push	{r7}
 8011498:	b085      	sub	sp, #20
 801149a:	af00      	add	r7, sp, #0
 801149c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d006      	beq.n	80114b4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	f1c3 0307 	rsb	r3, r3, #7
 80114b0:	60fb      	str	r3, [r7, #12]
 80114b2:	e001      	b.n	80114b8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80114b4:	2300      	movs	r3, #0
 80114b6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80114b8:	68fb      	ldr	r3, [r7, #12]
	}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3714      	adds	r7, #20
 80114be:	46bd      	mov	sp, r7
 80114c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c4:	4770      	bx	lr

080114c6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80114c6:	b580      	push	{r7, lr}
 80114c8:	b086      	sub	sp, #24
 80114ca:	af00      	add	r7, sp, #0
 80114cc:	60f8      	str	r0, [r7, #12]
 80114ce:	60b9      	str	r1, [r7, #8]
 80114d0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80114d2:	2300      	movs	r3, #0
 80114d4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114da:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d10d      	bne.n	8011500 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d14d      	bne.n	8011588 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	685b      	ldr	r3, [r3, #4]
 80114f0:	4618      	mov	r0, r3
 80114f2:	f000 ff71 	bl	80123d8 <xTaskPriorityDisinherit>
 80114f6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	2200      	movs	r2, #0
 80114fc:	605a      	str	r2, [r3, #4]
 80114fe:	e043      	b.n	8011588 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d119      	bne.n	801153a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	6898      	ldr	r0, [r3, #8]
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801150e:	461a      	mov	r2, r3
 8011510:	68b9      	ldr	r1, [r7, #8]
 8011512:	f004 faf7 	bl	8015b04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	689a      	ldr	r2, [r3, #8]
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801151e:	441a      	add	r2, r3
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	689a      	ldr	r2, [r3, #8]
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	685b      	ldr	r3, [r3, #4]
 801152c:	429a      	cmp	r2, r3
 801152e:	d32b      	bcc.n	8011588 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	681a      	ldr	r2, [r3, #0]
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	609a      	str	r2, [r3, #8]
 8011538:	e026      	b.n	8011588 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	68d8      	ldr	r0, [r3, #12]
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011542:	461a      	mov	r2, r3
 8011544:	68b9      	ldr	r1, [r7, #8]
 8011546:	f004 fadd 	bl	8015b04 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	68da      	ldr	r2, [r3, #12]
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011552:	425b      	negs	r3, r3
 8011554:	441a      	add	r2, r3
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	68da      	ldr	r2, [r3, #12]
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	429a      	cmp	r2, r3
 8011564:	d207      	bcs.n	8011576 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	685a      	ldr	r2, [r3, #4]
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801156e:	425b      	negs	r3, r3
 8011570:	441a      	add	r2, r3
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2b02      	cmp	r3, #2
 801157a:	d105      	bne.n	8011588 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801157c:	693b      	ldr	r3, [r7, #16]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d002      	beq.n	8011588 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	3b01      	subs	r3, #1
 8011586:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011588:	693b      	ldr	r3, [r7, #16]
 801158a:	1c5a      	adds	r2, r3, #1
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011590:	697b      	ldr	r3, [r7, #20]
}
 8011592:	4618      	mov	r0, r3
 8011594:	3718      	adds	r7, #24
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}

0801159a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801159a:	b580      	push	{r7, lr}
 801159c:	b082      	sub	sp, #8
 801159e:	af00      	add	r7, sp, #0
 80115a0:	6078      	str	r0, [r7, #4]
 80115a2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d018      	beq.n	80115de <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	68da      	ldr	r2, [r3, #12]
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115b4:	441a      	add	r2, r3
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	68da      	ldr	r2, [r3, #12]
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	429a      	cmp	r2, r3
 80115c4:	d303      	bcc.n	80115ce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	68d9      	ldr	r1, [r3, #12]
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115d6:	461a      	mov	r2, r3
 80115d8:	6838      	ldr	r0, [r7, #0]
 80115da:	f004 fa93 	bl	8015b04 <memcpy>
	}
}
 80115de:	bf00      	nop
 80115e0:	3708      	adds	r7, #8
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bd80      	pop	{r7, pc}

080115e6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80115e6:	b580      	push	{r7, lr}
 80115e8:	b084      	sub	sp, #16
 80115ea:	af00      	add	r7, sp, #0
 80115ec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80115ee:	f7ff f8cd 	bl	801078c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115f8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80115fa:	e011      	b.n	8011620 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011600:	2b00      	cmp	r3, #0
 8011602:	d012      	beq.n	801162a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	3324      	adds	r3, #36	; 0x24
 8011608:	4618      	mov	r0, r3
 801160a:	f000 fca3 	bl	8011f54 <xTaskRemoveFromEventList>
 801160e:	4603      	mov	r3, r0
 8011610:	2b00      	cmp	r3, #0
 8011612:	d001      	beq.n	8011618 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011614:	f000 fd76 	bl	8012104 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011618:	7bfb      	ldrb	r3, [r7, #15]
 801161a:	3b01      	subs	r3, #1
 801161c:	b2db      	uxtb	r3, r3
 801161e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011624:	2b00      	cmp	r3, #0
 8011626:	dce9      	bgt.n	80115fc <prvUnlockQueue+0x16>
 8011628:	e000      	b.n	801162c <prvUnlockQueue+0x46>
					break;
 801162a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	22ff      	movs	r2, #255	; 0xff
 8011630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011634:	f7ff f8d8 	bl	80107e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011638:	f7ff f8a8 	bl	801078c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011642:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011644:	e011      	b.n	801166a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	691b      	ldr	r3, [r3, #16]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d012      	beq.n	8011674 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	3310      	adds	r3, #16
 8011652:	4618      	mov	r0, r3
 8011654:	f000 fc7e 	bl	8011f54 <xTaskRemoveFromEventList>
 8011658:	4603      	mov	r3, r0
 801165a:	2b00      	cmp	r3, #0
 801165c:	d001      	beq.n	8011662 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801165e:	f000 fd51 	bl	8012104 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011662:	7bbb      	ldrb	r3, [r7, #14]
 8011664:	3b01      	subs	r3, #1
 8011666:	b2db      	uxtb	r3, r3
 8011668:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801166a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801166e:	2b00      	cmp	r3, #0
 8011670:	dce9      	bgt.n	8011646 <prvUnlockQueue+0x60>
 8011672:	e000      	b.n	8011676 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011674:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	22ff      	movs	r2, #255	; 0xff
 801167a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801167e:	f7ff f8b3 	bl	80107e8 <vPortExitCritical>
}
 8011682:	bf00      	nop
 8011684:	3710      	adds	r7, #16
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}

0801168a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801168a:	b580      	push	{r7, lr}
 801168c:	b084      	sub	sp, #16
 801168e:	af00      	add	r7, sp, #0
 8011690:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011692:	f7ff f87b 	bl	801078c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801169a:	2b00      	cmp	r3, #0
 801169c:	d102      	bne.n	80116a4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801169e:	2301      	movs	r3, #1
 80116a0:	60fb      	str	r3, [r7, #12]
 80116a2:	e001      	b.n	80116a8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80116a4:	2300      	movs	r3, #0
 80116a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80116a8:	f7ff f89e 	bl	80107e8 <vPortExitCritical>

	return xReturn;
 80116ac:	68fb      	ldr	r3, [r7, #12]
}
 80116ae:	4618      	mov	r0, r3
 80116b0:	3710      	adds	r7, #16
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}

080116b6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80116b6:	b580      	push	{r7, lr}
 80116b8:	b084      	sub	sp, #16
 80116ba:	af00      	add	r7, sp, #0
 80116bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80116be:	f7ff f865 	bl	801078c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116ca:	429a      	cmp	r2, r3
 80116cc:	d102      	bne.n	80116d4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80116ce:	2301      	movs	r3, #1
 80116d0:	60fb      	str	r3, [r7, #12]
 80116d2:	e001      	b.n	80116d8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80116d4:	2300      	movs	r3, #0
 80116d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80116d8:	f7ff f886 	bl	80107e8 <vPortExitCritical>

	return xReturn;
 80116dc:	68fb      	ldr	r3, [r7, #12]
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3710      	adds	r7, #16
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}

080116e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80116e6:	b580      	push	{r7, lr}
 80116e8:	b08c      	sub	sp, #48	; 0x30
 80116ea:	af04      	add	r7, sp, #16
 80116ec:	60f8      	str	r0, [r7, #12]
 80116ee:	60b9      	str	r1, [r7, #8]
 80116f0:	603b      	str	r3, [r7, #0]
 80116f2:	4613      	mov	r3, r2
 80116f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80116f6:	88fb      	ldrh	r3, [r7, #6]
 80116f8:	009b      	lsls	r3, r3, #2
 80116fa:	4618      	mov	r0, r3
 80116fc:	f7fe fc96 	bl	801002c <pvPortMalloc>
 8011700:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011702:	697b      	ldr	r3, [r7, #20]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d00e      	beq.n	8011726 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8011708:	2054      	movs	r0, #84	; 0x54
 801170a:	f7fe fc8f 	bl	801002c <pvPortMalloc>
 801170e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011710:	69fb      	ldr	r3, [r7, #28]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d003      	beq.n	801171e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011716:	69fb      	ldr	r3, [r7, #28]
 8011718:	697a      	ldr	r2, [r7, #20]
 801171a:	631a      	str	r2, [r3, #48]	; 0x30
 801171c:	e005      	b.n	801172a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801171e:	6978      	ldr	r0, [r7, #20]
 8011720:	f7fe fd46 	bl	80101b0 <vPortFree>
 8011724:	e001      	b.n	801172a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011726:	2300      	movs	r3, #0
 8011728:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801172a:	69fb      	ldr	r3, [r7, #28]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d013      	beq.n	8011758 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011730:	88fa      	ldrh	r2, [r7, #6]
 8011732:	2300      	movs	r3, #0
 8011734:	9303      	str	r3, [sp, #12]
 8011736:	69fb      	ldr	r3, [r7, #28]
 8011738:	9302      	str	r3, [sp, #8]
 801173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801173c:	9301      	str	r3, [sp, #4]
 801173e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011740:	9300      	str	r3, [sp, #0]
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	68b9      	ldr	r1, [r7, #8]
 8011746:	68f8      	ldr	r0, [r7, #12]
 8011748:	f000 f80e 	bl	8011768 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801174c:	69f8      	ldr	r0, [r7, #28]
 801174e:	f000 f889 	bl	8011864 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011752:	2301      	movs	r3, #1
 8011754:	61bb      	str	r3, [r7, #24]
 8011756:	e002      	b.n	801175e <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801175c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801175e:	69bb      	ldr	r3, [r7, #24]
	}
 8011760:	4618      	mov	r0, r3
 8011762:	3720      	adds	r7, #32
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}

08011768 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b088      	sub	sp, #32
 801176c:	af00      	add	r7, sp, #0
 801176e:	60f8      	str	r0, [r7, #12]
 8011770:	60b9      	str	r1, [r7, #8]
 8011772:	607a      	str	r2, [r7, #4]
 8011774:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8011776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011780:	3b01      	subs	r3, #1
 8011782:	009b      	lsls	r3, r3, #2
 8011784:	4413      	add	r3, r2
 8011786:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8011788:	69bb      	ldr	r3, [r7, #24]
 801178a:	f023 0307 	bic.w	r3, r3, #7
 801178e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011790:	69bb      	ldr	r3, [r7, #24]
 8011792:	f003 0307 	and.w	r3, r3, #7
 8011796:	2b00      	cmp	r3, #0
 8011798:	d009      	beq.n	80117ae <prvInitialiseNewTask+0x46>
	__asm volatile
 801179a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801179e:	f383 8811 	msr	BASEPRI, r3
 80117a2:	f3bf 8f6f 	isb	sy
 80117a6:	f3bf 8f4f 	dsb	sy
 80117aa:	617b      	str	r3, [r7, #20]
 80117ac:	e7fe      	b.n	80117ac <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80117ae:	2300      	movs	r3, #0
 80117b0:	61fb      	str	r3, [r7, #28]
 80117b2:	e012      	b.n	80117da <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80117b4:	68ba      	ldr	r2, [r7, #8]
 80117b6:	69fb      	ldr	r3, [r7, #28]
 80117b8:	4413      	add	r3, r2
 80117ba:	7819      	ldrb	r1, [r3, #0]
 80117bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117be:	69fb      	ldr	r3, [r7, #28]
 80117c0:	4413      	add	r3, r2
 80117c2:	3334      	adds	r3, #52	; 0x34
 80117c4:	460a      	mov	r2, r1
 80117c6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80117c8:	68ba      	ldr	r2, [r7, #8]
 80117ca:	69fb      	ldr	r3, [r7, #28]
 80117cc:	4413      	add	r3, r2
 80117ce:	781b      	ldrb	r3, [r3, #0]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d006      	beq.n	80117e2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80117d4:	69fb      	ldr	r3, [r7, #28]
 80117d6:	3301      	adds	r3, #1
 80117d8:	61fb      	str	r3, [r7, #28]
 80117da:	69fb      	ldr	r3, [r7, #28]
 80117dc:	2b0f      	cmp	r3, #15
 80117de:	d9e9      	bls.n	80117b4 <prvInitialiseNewTask+0x4c>
 80117e0:	e000      	b.n	80117e4 <prvInitialiseNewTask+0x7c>
		{
			break;
 80117e2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80117e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117e6:	2200      	movs	r2, #0
 80117e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80117ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ee:	2b06      	cmp	r3, #6
 80117f0:	d901      	bls.n	80117f6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80117f2:	2306      	movs	r3, #6
 80117f4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80117f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117fa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80117fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011800:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011804:	2200      	movs	r2, #0
 8011806:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801180a:	3304      	adds	r3, #4
 801180c:	4618      	mov	r0, r3
 801180e:	f7fe fe03 	bl	8010418 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011814:	3318      	adds	r3, #24
 8011816:	4618      	mov	r0, r3
 8011818:	f7fe fdfe 	bl	8010418 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801181c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801181e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011820:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011824:	f1c3 0207 	rsb	r2, r3, #7
 8011828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801182a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801182c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801182e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011830:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011834:	2200      	movs	r2, #0
 8011836:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801183a:	2200      	movs	r2, #0
 801183c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011840:	683a      	ldr	r2, [r7, #0]
 8011842:	68f9      	ldr	r1, [r7, #12]
 8011844:	69b8      	ldr	r0, [r7, #24]
 8011846:	f7fe fe7b 	bl	8010540 <pxPortInitialiseStack>
 801184a:	4602      	mov	r2, r0
 801184c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801184e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8011850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011852:	2b00      	cmp	r3, #0
 8011854:	d002      	beq.n	801185c <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801185a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801185c:	bf00      	nop
 801185e:	3720      	adds	r7, #32
 8011860:	46bd      	mov	sp, r7
 8011862:	bd80      	pop	{r7, pc}

08011864 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b082      	sub	sp, #8
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801186c:	f7fe ff8e 	bl	801078c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011870:	4b2a      	ldr	r3, [pc, #168]	; (801191c <prvAddNewTaskToReadyList+0xb8>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	3301      	adds	r3, #1
 8011876:	4a29      	ldr	r2, [pc, #164]	; (801191c <prvAddNewTaskToReadyList+0xb8>)
 8011878:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801187a:	4b29      	ldr	r3, [pc, #164]	; (8011920 <prvAddNewTaskToReadyList+0xbc>)
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d109      	bne.n	8011896 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011882:	4a27      	ldr	r2, [pc, #156]	; (8011920 <prvAddNewTaskToReadyList+0xbc>)
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011888:	4b24      	ldr	r3, [pc, #144]	; (801191c <prvAddNewTaskToReadyList+0xb8>)
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	2b01      	cmp	r3, #1
 801188e:	d110      	bne.n	80118b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011890:	f000 fc5c 	bl	801214c <prvInitialiseTaskLists>
 8011894:	e00d      	b.n	80118b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011896:	4b23      	ldr	r3, [pc, #140]	; (8011924 <prvAddNewTaskToReadyList+0xc0>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d109      	bne.n	80118b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801189e:	4b20      	ldr	r3, [pc, #128]	; (8011920 <prvAddNewTaskToReadyList+0xbc>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118a8:	429a      	cmp	r2, r3
 80118aa:	d802      	bhi.n	80118b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80118ac:	4a1c      	ldr	r2, [pc, #112]	; (8011920 <prvAddNewTaskToReadyList+0xbc>)
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80118b2:	4b1d      	ldr	r3, [pc, #116]	; (8011928 <prvAddNewTaskToReadyList+0xc4>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	3301      	adds	r3, #1
 80118b8:	4a1b      	ldr	r2, [pc, #108]	; (8011928 <prvAddNewTaskToReadyList+0xc4>)
 80118ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118c0:	2201      	movs	r2, #1
 80118c2:	409a      	lsls	r2, r3
 80118c4:	4b19      	ldr	r3, [pc, #100]	; (801192c <prvAddNewTaskToReadyList+0xc8>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	4313      	orrs	r3, r2
 80118ca:	4a18      	ldr	r2, [pc, #96]	; (801192c <prvAddNewTaskToReadyList+0xc8>)
 80118cc:	6013      	str	r3, [r2, #0]
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118d2:	4613      	mov	r3, r2
 80118d4:	009b      	lsls	r3, r3, #2
 80118d6:	4413      	add	r3, r2
 80118d8:	009b      	lsls	r3, r3, #2
 80118da:	4a15      	ldr	r2, [pc, #84]	; (8011930 <prvAddNewTaskToReadyList+0xcc>)
 80118dc:	441a      	add	r2, r3
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	3304      	adds	r3, #4
 80118e2:	4619      	mov	r1, r3
 80118e4:	4610      	mov	r0, r2
 80118e6:	f7fe fda4 	bl	8010432 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80118ea:	f7fe ff7d 	bl	80107e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80118ee:	4b0d      	ldr	r3, [pc, #52]	; (8011924 <prvAddNewTaskToReadyList+0xc0>)
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d00e      	beq.n	8011914 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80118f6:	4b0a      	ldr	r3, [pc, #40]	; (8011920 <prvAddNewTaskToReadyList+0xbc>)
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011900:	429a      	cmp	r2, r3
 8011902:	d207      	bcs.n	8011914 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011904:	4b0b      	ldr	r3, [pc, #44]	; (8011934 <prvAddNewTaskToReadyList+0xd0>)
 8011906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801190a:	601a      	str	r2, [r3, #0]
 801190c:	f3bf 8f4f 	dsb	sy
 8011910:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011914:	bf00      	nop
 8011916:	3708      	adds	r7, #8
 8011918:	46bd      	mov	sp, r7
 801191a:	bd80      	pop	{r7, pc}
 801191c:	20002220 	.word	0x20002220
 8011920:	20002120 	.word	0x20002120
 8011924:	2000222c 	.word	0x2000222c
 8011928:	2000223c 	.word	0x2000223c
 801192c:	20002228 	.word	0x20002228
 8011930:	20002124 	.word	0x20002124
 8011934:	e000ed04 	.word	0xe000ed04

08011938 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8011938:	b580      	push	{r7, lr}
 801193a:	b084      	sub	sp, #16
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8011940:	f7fe ff24 	bl	801078c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d102      	bne.n	8011950 <vTaskDelete+0x18>
 801194a:	4b38      	ldr	r3, [pc, #224]	; (8011a2c <vTaskDelete+0xf4>)
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	e000      	b.n	8011952 <vTaskDelete+0x1a>
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	3304      	adds	r3, #4
 8011958:	4618      	mov	r0, r3
 801195a:	f7fe fdc7 	bl	80104ec <uxListRemove>
 801195e:	4603      	mov	r3, r0
 8011960:	2b00      	cmp	r3, #0
 8011962:	d115      	bne.n	8011990 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011968:	4931      	ldr	r1, [pc, #196]	; (8011a30 <vTaskDelete+0xf8>)
 801196a:	4613      	mov	r3, r2
 801196c:	009b      	lsls	r3, r3, #2
 801196e:	4413      	add	r3, r2
 8011970:	009b      	lsls	r3, r3, #2
 8011972:	440b      	add	r3, r1
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d10a      	bne.n	8011990 <vTaskDelete+0x58>
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801197e:	2201      	movs	r2, #1
 8011980:	fa02 f303 	lsl.w	r3, r2, r3
 8011984:	43da      	mvns	r2, r3
 8011986:	4b2b      	ldr	r3, [pc, #172]	; (8011a34 <vTaskDelete+0xfc>)
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	4013      	ands	r3, r2
 801198c:	4a29      	ldr	r2, [pc, #164]	; (8011a34 <vTaskDelete+0xfc>)
 801198e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011994:	2b00      	cmp	r3, #0
 8011996:	d004      	beq.n	80119a2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	3318      	adds	r3, #24
 801199c:	4618      	mov	r0, r3
 801199e:	f7fe fda5 	bl	80104ec <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80119a2:	4b25      	ldr	r3, [pc, #148]	; (8011a38 <vTaskDelete+0x100>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	3301      	adds	r3, #1
 80119a8:	4a23      	ldr	r2, [pc, #140]	; (8011a38 <vTaskDelete+0x100>)
 80119aa:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80119ac:	4b1f      	ldr	r3, [pc, #124]	; (8011a2c <vTaskDelete+0xf4>)
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	68fa      	ldr	r2, [r7, #12]
 80119b2:	429a      	cmp	r2, r3
 80119b4:	d10b      	bne.n	80119ce <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	3304      	adds	r3, #4
 80119ba:	4619      	mov	r1, r3
 80119bc:	481f      	ldr	r0, [pc, #124]	; (8011a3c <vTaskDelete+0x104>)
 80119be:	f7fe fd38 	bl	8010432 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80119c2:	4b1f      	ldr	r3, [pc, #124]	; (8011a40 <vTaskDelete+0x108>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	3301      	adds	r3, #1
 80119c8:	4a1d      	ldr	r2, [pc, #116]	; (8011a40 <vTaskDelete+0x108>)
 80119ca:	6013      	str	r3, [r2, #0]
 80119cc:	e009      	b.n	80119e2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80119ce:	4b1d      	ldr	r3, [pc, #116]	; (8011a44 <vTaskDelete+0x10c>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	3b01      	subs	r3, #1
 80119d4:	4a1b      	ldr	r2, [pc, #108]	; (8011a44 <vTaskDelete+0x10c>)
 80119d6:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80119d8:	68f8      	ldr	r0, [r7, #12]
 80119da:	f000 fc23 	bl	8012224 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80119de:	f000 fc31 	bl	8012244 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80119e2:	f7fe ff01 	bl	80107e8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80119e6:	4b18      	ldr	r3, [pc, #96]	; (8011a48 <vTaskDelete+0x110>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d01a      	beq.n	8011a24 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 80119ee:	4b0f      	ldr	r3, [pc, #60]	; (8011a2c <vTaskDelete+0xf4>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	68fa      	ldr	r2, [r7, #12]
 80119f4:	429a      	cmp	r2, r3
 80119f6:	d115      	bne.n	8011a24 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80119f8:	4b14      	ldr	r3, [pc, #80]	; (8011a4c <vTaskDelete+0x114>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d009      	beq.n	8011a14 <vTaskDelete+0xdc>
 8011a00:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011a04:	f383 8811 	msr	BASEPRI, r3
 8011a08:	f3bf 8f6f 	isb	sy
 8011a0c:	f3bf 8f4f 	dsb	sy
 8011a10:	60bb      	str	r3, [r7, #8]
 8011a12:	e7fe      	b.n	8011a12 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8011a14:	4b0e      	ldr	r3, [pc, #56]	; (8011a50 <vTaskDelete+0x118>)
 8011a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a1a:	601a      	str	r2, [r3, #0]
 8011a1c:	f3bf 8f4f 	dsb	sy
 8011a20:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011a24:	bf00      	nop
 8011a26:	3710      	adds	r7, #16
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bd80      	pop	{r7, pc}
 8011a2c:	20002120 	.word	0x20002120
 8011a30:	20002124 	.word	0x20002124
 8011a34:	20002228 	.word	0x20002228
 8011a38:	2000223c 	.word	0x2000223c
 8011a3c:	200021f4 	.word	0x200021f4
 8011a40:	20002208 	.word	0x20002208
 8011a44:	20002220 	.word	0x20002220
 8011a48:	2000222c 	.word	0x2000222c
 8011a4c:	20002248 	.word	0x20002248
 8011a50:	e000ed04 	.word	0xe000ed04

08011a54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b084      	sub	sp, #16
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d016      	beq.n	8011a94 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011a66:	4b13      	ldr	r3, [pc, #76]	; (8011ab4 <vTaskDelay+0x60>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d009      	beq.n	8011a82 <vTaskDelay+0x2e>
 8011a6e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011a72:	f383 8811 	msr	BASEPRI, r3
 8011a76:	f3bf 8f6f 	isb	sy
 8011a7a:	f3bf 8f4f 	dsb	sy
 8011a7e:	60bb      	str	r3, [r7, #8]
 8011a80:	e7fe      	b.n	8011a80 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8011a82:	f000 f861 	bl	8011b48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011a86:	2100      	movs	r1, #0
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f000 fddb 	bl	8012644 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011a8e:	f000 f869 	bl	8011b64 <xTaskResumeAll>
 8011a92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d107      	bne.n	8011aaa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8011a9a:	4b07      	ldr	r3, [pc, #28]	; (8011ab8 <vTaskDelay+0x64>)
 8011a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011aa0:	601a      	str	r2, [r3, #0]
 8011aa2:	f3bf 8f4f 	dsb	sy
 8011aa6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011aaa:	bf00      	nop
 8011aac:	3710      	adds	r7, #16
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}
 8011ab2:	bf00      	nop
 8011ab4:	20002248 	.word	0x20002248
 8011ab8:	e000ed04 	.word	0xe000ed04

08011abc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b086      	sub	sp, #24
 8011ac0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8011ac2:	4b1b      	ldr	r3, [pc, #108]	; (8011b30 <vTaskStartScheduler+0x74>)
 8011ac4:	9301      	str	r3, [sp, #4]
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	9300      	str	r3, [sp, #0]
 8011aca:	2300      	movs	r3, #0
 8011acc:	2280      	movs	r2, #128	; 0x80
 8011ace:	4919      	ldr	r1, [pc, #100]	; (8011b34 <vTaskStartScheduler+0x78>)
 8011ad0:	4819      	ldr	r0, [pc, #100]	; (8011b38 <vTaskStartScheduler+0x7c>)
 8011ad2:	f7ff fe08 	bl	80116e6 <xTaskCreate>
 8011ad6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	2b01      	cmp	r3, #1
 8011adc:	d115      	bne.n	8011b0a <vTaskStartScheduler+0x4e>
 8011ade:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011ae2:	f383 8811 	msr	BASEPRI, r3
 8011ae6:	f3bf 8f6f 	isb	sy
 8011aea:	f3bf 8f4f 	dsb	sy
 8011aee:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011af0:	4b12      	ldr	r3, [pc, #72]	; (8011b3c <vTaskStartScheduler+0x80>)
 8011af2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011af6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011af8:	4b11      	ldr	r3, [pc, #68]	; (8011b40 <vTaskStartScheduler+0x84>)
 8011afa:	2201      	movs	r2, #1
 8011afc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8011afe:	4b11      	ldr	r3, [pc, #68]	; (8011b44 <vTaskStartScheduler+0x88>)
 8011b00:	2200      	movs	r2, #0
 8011b02:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011b04:	f7fe fda4 	bl	8010650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011b08:	e00d      	b.n	8011b26 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011b10:	d109      	bne.n	8011b26 <vTaskStartScheduler+0x6a>
 8011b12:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011b16:	f383 8811 	msr	BASEPRI, r3
 8011b1a:	f3bf 8f6f 	isb	sy
 8011b1e:	f3bf 8f4f 	dsb	sy
 8011b22:	607b      	str	r3, [r7, #4]
 8011b24:	e7fe      	b.n	8011b24 <vTaskStartScheduler+0x68>
}
 8011b26:	bf00      	nop
 8011b28:	3710      	adds	r7, #16
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bd80      	pop	{r7, pc}
 8011b2e:	bf00      	nop
 8011b30:	20002244 	.word	0x20002244
 8011b34:	08015cb0 	.word	0x08015cb0
 8011b38:	0801211d 	.word	0x0801211d
 8011b3c:	20002240 	.word	0x20002240
 8011b40:	2000222c 	.word	0x2000222c
 8011b44:	20002224 	.word	0x20002224

08011b48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011b48:	b480      	push	{r7}
 8011b4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011b4c:	4b04      	ldr	r3, [pc, #16]	; (8011b60 <vTaskSuspendAll+0x18>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	3301      	adds	r3, #1
 8011b52:	4a03      	ldr	r2, [pc, #12]	; (8011b60 <vTaskSuspendAll+0x18>)
 8011b54:	6013      	str	r3, [r2, #0]
}
 8011b56:	bf00      	nop
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5e:	4770      	bx	lr
 8011b60:	20002248 	.word	0x20002248

08011b64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b084      	sub	sp, #16
 8011b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011b72:	4b41      	ldr	r3, [pc, #260]	; (8011c78 <xTaskResumeAll+0x114>)
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d109      	bne.n	8011b8e <xTaskResumeAll+0x2a>
 8011b7a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011b7e:	f383 8811 	msr	BASEPRI, r3
 8011b82:	f3bf 8f6f 	isb	sy
 8011b86:	f3bf 8f4f 	dsb	sy
 8011b8a:	603b      	str	r3, [r7, #0]
 8011b8c:	e7fe      	b.n	8011b8c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011b8e:	f7fe fdfd 	bl	801078c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011b92:	4b39      	ldr	r3, [pc, #228]	; (8011c78 <xTaskResumeAll+0x114>)
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	3b01      	subs	r3, #1
 8011b98:	4a37      	ldr	r2, [pc, #220]	; (8011c78 <xTaskResumeAll+0x114>)
 8011b9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b9c:	4b36      	ldr	r3, [pc, #216]	; (8011c78 <xTaskResumeAll+0x114>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d161      	bne.n	8011c68 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011ba4:	4b35      	ldr	r3, [pc, #212]	; (8011c7c <xTaskResumeAll+0x118>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d05d      	beq.n	8011c68 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011bac:	e02e      	b.n	8011c0c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8011bae:	4b34      	ldr	r3, [pc, #208]	; (8011c80 <xTaskResumeAll+0x11c>)
 8011bb0:	68db      	ldr	r3, [r3, #12]
 8011bb2:	68db      	ldr	r3, [r3, #12]
 8011bb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	3318      	adds	r3, #24
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7fe fc96 	bl	80104ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	3304      	adds	r3, #4
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f7fe fc91 	bl	80104ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bce:	2201      	movs	r2, #1
 8011bd0:	409a      	lsls	r2, r3
 8011bd2:	4b2c      	ldr	r3, [pc, #176]	; (8011c84 <xTaskResumeAll+0x120>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	4313      	orrs	r3, r2
 8011bd8:	4a2a      	ldr	r2, [pc, #168]	; (8011c84 <xTaskResumeAll+0x120>)
 8011bda:	6013      	str	r3, [r2, #0]
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011be0:	4613      	mov	r3, r2
 8011be2:	009b      	lsls	r3, r3, #2
 8011be4:	4413      	add	r3, r2
 8011be6:	009b      	lsls	r3, r3, #2
 8011be8:	4a27      	ldr	r2, [pc, #156]	; (8011c88 <xTaskResumeAll+0x124>)
 8011bea:	441a      	add	r2, r3
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	3304      	adds	r3, #4
 8011bf0:	4619      	mov	r1, r3
 8011bf2:	4610      	mov	r0, r2
 8011bf4:	f7fe fc1d 	bl	8010432 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bfc:	4b23      	ldr	r3, [pc, #140]	; (8011c8c <xTaskResumeAll+0x128>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c02:	429a      	cmp	r2, r3
 8011c04:	d302      	bcc.n	8011c0c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8011c06:	4b22      	ldr	r3, [pc, #136]	; (8011c90 <xTaskResumeAll+0x12c>)
 8011c08:	2201      	movs	r2, #1
 8011c0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011c0c:	4b1c      	ldr	r3, [pc, #112]	; (8011c80 <xTaskResumeAll+0x11c>)
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d1cc      	bne.n	8011bae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d001      	beq.n	8011c1e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011c1a:	f000 fb13 	bl	8012244 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011c1e:	4b1d      	ldr	r3, [pc, #116]	; (8011c94 <xTaskResumeAll+0x130>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d010      	beq.n	8011c4c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011c2a:	f000 f859 	bl	8011ce0 <xTaskIncrementTick>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d002      	beq.n	8011c3a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8011c34:	4b16      	ldr	r3, [pc, #88]	; (8011c90 <xTaskResumeAll+0x12c>)
 8011c36:	2201      	movs	r2, #1
 8011c38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	3b01      	subs	r3, #1
 8011c3e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d1f1      	bne.n	8011c2a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8011c46:	4b13      	ldr	r3, [pc, #76]	; (8011c94 <xTaskResumeAll+0x130>)
 8011c48:	2200      	movs	r2, #0
 8011c4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011c4c:	4b10      	ldr	r3, [pc, #64]	; (8011c90 <xTaskResumeAll+0x12c>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d009      	beq.n	8011c68 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011c54:	2301      	movs	r3, #1
 8011c56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011c58:	4b0f      	ldr	r3, [pc, #60]	; (8011c98 <xTaskResumeAll+0x134>)
 8011c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c5e:	601a      	str	r2, [r3, #0]
 8011c60:	f3bf 8f4f 	dsb	sy
 8011c64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011c68:	f7fe fdbe 	bl	80107e8 <vPortExitCritical>

	return xAlreadyYielded;
 8011c6c:	68bb      	ldr	r3, [r7, #8]
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	3710      	adds	r7, #16
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}
 8011c76:	bf00      	nop
 8011c78:	20002248 	.word	0x20002248
 8011c7c:	20002220 	.word	0x20002220
 8011c80:	200021e0 	.word	0x200021e0
 8011c84:	20002228 	.word	0x20002228
 8011c88:	20002124 	.word	0x20002124
 8011c8c:	20002120 	.word	0x20002120
 8011c90:	20002234 	.word	0x20002234
 8011c94:	20002230 	.word	0x20002230
 8011c98:	e000ed04 	.word	0xe000ed04

08011c9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011c9c:	b480      	push	{r7}
 8011c9e:	b083      	sub	sp, #12
 8011ca0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011ca2:	4b05      	ldr	r3, [pc, #20]	; (8011cb8 <xTaskGetTickCount+0x1c>)
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011ca8:	687b      	ldr	r3, [r7, #4]
}
 8011caa:	4618      	mov	r0, r3
 8011cac:	370c      	adds	r7, #12
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb4:	4770      	bx	lr
 8011cb6:	bf00      	nop
 8011cb8:	20002224 	.word	0x20002224

08011cbc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b082      	sub	sp, #8
 8011cc0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011cc2:	f7fe fe3f 	bl	8010944 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011cca:	4b04      	ldr	r3, [pc, #16]	; (8011cdc <xTaskGetTickCountFromISR+0x20>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011cd0:	683b      	ldr	r3, [r7, #0]
}
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	3708      	adds	r7, #8
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}
 8011cda:	bf00      	nop
 8011cdc:	20002224 	.word	0x20002224

08011ce0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b086      	sub	sp, #24
 8011ce4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011cea:	4b50      	ldr	r3, [pc, #320]	; (8011e2c <xTaskIncrementTick+0x14c>)
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	f040 808c 	bne.w	8011e0c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011cf4:	4b4e      	ldr	r3, [pc, #312]	; (8011e30 <xTaskIncrementTick+0x150>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	3301      	adds	r3, #1
 8011cfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011cfc:	4a4c      	ldr	r2, [pc, #304]	; (8011e30 <xTaskIncrementTick+0x150>)
 8011cfe:	693b      	ldr	r3, [r7, #16]
 8011d00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011d02:	693b      	ldr	r3, [r7, #16]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d11f      	bne.n	8011d48 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8011d08:	4b4a      	ldr	r3, [pc, #296]	; (8011e34 <xTaskIncrementTick+0x154>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d009      	beq.n	8011d26 <xTaskIncrementTick+0x46>
 8011d12:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011d16:	f383 8811 	msr	BASEPRI, r3
 8011d1a:	f3bf 8f6f 	isb	sy
 8011d1e:	f3bf 8f4f 	dsb	sy
 8011d22:	603b      	str	r3, [r7, #0]
 8011d24:	e7fe      	b.n	8011d24 <xTaskIncrementTick+0x44>
 8011d26:	4b43      	ldr	r3, [pc, #268]	; (8011e34 <xTaskIncrementTick+0x154>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	60fb      	str	r3, [r7, #12]
 8011d2c:	4b42      	ldr	r3, [pc, #264]	; (8011e38 <xTaskIncrementTick+0x158>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	4a40      	ldr	r2, [pc, #256]	; (8011e34 <xTaskIncrementTick+0x154>)
 8011d32:	6013      	str	r3, [r2, #0]
 8011d34:	4a40      	ldr	r2, [pc, #256]	; (8011e38 <xTaskIncrementTick+0x158>)
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	6013      	str	r3, [r2, #0]
 8011d3a:	4b40      	ldr	r3, [pc, #256]	; (8011e3c <xTaskIncrementTick+0x15c>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	3301      	adds	r3, #1
 8011d40:	4a3e      	ldr	r2, [pc, #248]	; (8011e3c <xTaskIncrementTick+0x15c>)
 8011d42:	6013      	str	r3, [r2, #0]
 8011d44:	f000 fa7e 	bl	8012244 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011d48:	4b3d      	ldr	r3, [pc, #244]	; (8011e40 <xTaskIncrementTick+0x160>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	693a      	ldr	r2, [r7, #16]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d34d      	bcc.n	8011dee <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011d52:	4b38      	ldr	r3, [pc, #224]	; (8011e34 <xTaskIncrementTick+0x154>)
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d101      	bne.n	8011d60 <xTaskIncrementTick+0x80>
 8011d5c:	2301      	movs	r3, #1
 8011d5e:	e000      	b.n	8011d62 <xTaskIncrementTick+0x82>
 8011d60:	2300      	movs	r3, #0
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d004      	beq.n	8011d70 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d66:	4b36      	ldr	r3, [pc, #216]	; (8011e40 <xTaskIncrementTick+0x160>)
 8011d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011d6c:	601a      	str	r2, [r3, #0]
					break;
 8011d6e:	e03e      	b.n	8011dee <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011d70:	4b30      	ldr	r3, [pc, #192]	; (8011e34 <xTaskIncrementTick+0x154>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	68db      	ldr	r3, [r3, #12]
 8011d76:	68db      	ldr	r3, [r3, #12]
 8011d78:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011d80:	693a      	ldr	r2, [r7, #16]
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	429a      	cmp	r2, r3
 8011d86:	d203      	bcs.n	8011d90 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011d88:	4a2d      	ldr	r2, [pc, #180]	; (8011e40 <xTaskIncrementTick+0x160>)
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6013      	str	r3, [r2, #0]
						break;
 8011d8e:	e02e      	b.n	8011dee <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	3304      	adds	r3, #4
 8011d94:	4618      	mov	r0, r3
 8011d96:	f7fe fba9 	bl	80104ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d004      	beq.n	8011dac <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	3318      	adds	r3, #24
 8011da6:	4618      	mov	r0, r3
 8011da8:	f7fe fba0 	bl	80104ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011db0:	2201      	movs	r2, #1
 8011db2:	409a      	lsls	r2, r3
 8011db4:	4b23      	ldr	r3, [pc, #140]	; (8011e44 <xTaskIncrementTick+0x164>)
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	4313      	orrs	r3, r2
 8011dba:	4a22      	ldr	r2, [pc, #136]	; (8011e44 <xTaskIncrementTick+0x164>)
 8011dbc:	6013      	str	r3, [r2, #0]
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dc2:	4613      	mov	r3, r2
 8011dc4:	009b      	lsls	r3, r3, #2
 8011dc6:	4413      	add	r3, r2
 8011dc8:	009b      	lsls	r3, r3, #2
 8011dca:	4a1f      	ldr	r2, [pc, #124]	; (8011e48 <xTaskIncrementTick+0x168>)
 8011dcc:	441a      	add	r2, r3
 8011dce:	68bb      	ldr	r3, [r7, #8]
 8011dd0:	3304      	adds	r3, #4
 8011dd2:	4619      	mov	r1, r3
 8011dd4:	4610      	mov	r0, r2
 8011dd6:	f7fe fb2c 	bl	8010432 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011dda:	68bb      	ldr	r3, [r7, #8]
 8011ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dde:	4b1b      	ldr	r3, [pc, #108]	; (8011e4c <xTaskIncrementTick+0x16c>)
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d3b4      	bcc.n	8011d52 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8011de8:	2301      	movs	r3, #1
 8011dea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011dec:	e7b1      	b.n	8011d52 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011dee:	4b17      	ldr	r3, [pc, #92]	; (8011e4c <xTaskIncrementTick+0x16c>)
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011df4:	4914      	ldr	r1, [pc, #80]	; (8011e48 <xTaskIncrementTick+0x168>)
 8011df6:	4613      	mov	r3, r2
 8011df8:	009b      	lsls	r3, r3, #2
 8011dfa:	4413      	add	r3, r2
 8011dfc:	009b      	lsls	r3, r3, #2
 8011dfe:	440b      	add	r3, r1
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	2b01      	cmp	r3, #1
 8011e04:	d907      	bls.n	8011e16 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8011e06:	2301      	movs	r3, #1
 8011e08:	617b      	str	r3, [r7, #20]
 8011e0a:	e004      	b.n	8011e16 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011e0c:	4b10      	ldr	r3, [pc, #64]	; (8011e50 <xTaskIncrementTick+0x170>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	3301      	adds	r3, #1
 8011e12:	4a0f      	ldr	r2, [pc, #60]	; (8011e50 <xTaskIncrementTick+0x170>)
 8011e14:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011e16:	4b0f      	ldr	r3, [pc, #60]	; (8011e54 <xTaskIncrementTick+0x174>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d001      	beq.n	8011e22 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8011e1e:	2301      	movs	r3, #1
 8011e20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011e22:	697b      	ldr	r3, [r7, #20]
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	3718      	adds	r7, #24
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	bd80      	pop	{r7, pc}
 8011e2c:	20002248 	.word	0x20002248
 8011e30:	20002224 	.word	0x20002224
 8011e34:	200021d8 	.word	0x200021d8
 8011e38:	200021dc 	.word	0x200021dc
 8011e3c:	20002238 	.word	0x20002238
 8011e40:	20002240 	.word	0x20002240
 8011e44:	20002228 	.word	0x20002228
 8011e48:	20002124 	.word	0x20002124
 8011e4c:	20002120 	.word	0x20002120
 8011e50:	20002230 	.word	0x20002230
 8011e54:	20002234 	.word	0x20002234

08011e58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011e58:	b480      	push	{r7}
 8011e5a:	b087      	sub	sp, #28
 8011e5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011e5e:	4b26      	ldr	r3, [pc, #152]	; (8011ef8 <vTaskSwitchContext+0xa0>)
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d003      	beq.n	8011e6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011e66:	4b25      	ldr	r3, [pc, #148]	; (8011efc <vTaskSwitchContext+0xa4>)
 8011e68:	2201      	movs	r2, #1
 8011e6a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011e6c:	e03e      	b.n	8011eec <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8011e6e:	4b23      	ldr	r3, [pc, #140]	; (8011efc <vTaskSwitchContext+0xa4>)
 8011e70:	2200      	movs	r2, #0
 8011e72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8011e74:	4b22      	ldr	r3, [pc, #136]	; (8011f00 <vTaskSwitchContext+0xa8>)
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	fab3 f383 	clz	r3, r3
 8011e80:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011e82:	7afb      	ldrb	r3, [r7, #11]
 8011e84:	f1c3 031f 	rsb	r3, r3, #31
 8011e88:	617b      	str	r3, [r7, #20]
 8011e8a:	491e      	ldr	r1, [pc, #120]	; (8011f04 <vTaskSwitchContext+0xac>)
 8011e8c:	697a      	ldr	r2, [r7, #20]
 8011e8e:	4613      	mov	r3, r2
 8011e90:	009b      	lsls	r3, r3, #2
 8011e92:	4413      	add	r3, r2
 8011e94:	009b      	lsls	r3, r3, #2
 8011e96:	440b      	add	r3, r1
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d109      	bne.n	8011eb2 <vTaskSwitchContext+0x5a>
	__asm volatile
 8011e9e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011ea2:	f383 8811 	msr	BASEPRI, r3
 8011ea6:	f3bf 8f6f 	isb	sy
 8011eaa:	f3bf 8f4f 	dsb	sy
 8011eae:	607b      	str	r3, [r7, #4]
 8011eb0:	e7fe      	b.n	8011eb0 <vTaskSwitchContext+0x58>
 8011eb2:	697a      	ldr	r2, [r7, #20]
 8011eb4:	4613      	mov	r3, r2
 8011eb6:	009b      	lsls	r3, r3, #2
 8011eb8:	4413      	add	r3, r2
 8011eba:	009b      	lsls	r3, r3, #2
 8011ebc:	4a11      	ldr	r2, [pc, #68]	; (8011f04 <vTaskSwitchContext+0xac>)
 8011ebe:	4413      	add	r3, r2
 8011ec0:	613b      	str	r3, [r7, #16]
 8011ec2:	693b      	ldr	r3, [r7, #16]
 8011ec4:	685b      	ldr	r3, [r3, #4]
 8011ec6:	685a      	ldr	r2, [r3, #4]
 8011ec8:	693b      	ldr	r3, [r7, #16]
 8011eca:	605a      	str	r2, [r3, #4]
 8011ecc:	693b      	ldr	r3, [r7, #16]
 8011ece:	685a      	ldr	r2, [r3, #4]
 8011ed0:	693b      	ldr	r3, [r7, #16]
 8011ed2:	3308      	adds	r3, #8
 8011ed4:	429a      	cmp	r2, r3
 8011ed6:	d104      	bne.n	8011ee2 <vTaskSwitchContext+0x8a>
 8011ed8:	693b      	ldr	r3, [r7, #16]
 8011eda:	685b      	ldr	r3, [r3, #4]
 8011edc:	685a      	ldr	r2, [r3, #4]
 8011ede:	693b      	ldr	r3, [r7, #16]
 8011ee0:	605a      	str	r2, [r3, #4]
 8011ee2:	693b      	ldr	r3, [r7, #16]
 8011ee4:	685b      	ldr	r3, [r3, #4]
 8011ee6:	68db      	ldr	r3, [r3, #12]
 8011ee8:	4a07      	ldr	r2, [pc, #28]	; (8011f08 <vTaskSwitchContext+0xb0>)
 8011eea:	6013      	str	r3, [r2, #0]
}
 8011eec:	bf00      	nop
 8011eee:	371c      	adds	r7, #28
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef6:	4770      	bx	lr
 8011ef8:	20002248 	.word	0x20002248
 8011efc:	20002234 	.word	0x20002234
 8011f00:	20002228 	.word	0x20002228
 8011f04:	20002124 	.word	0x20002124
 8011f08:	20002120 	.word	0x20002120

08011f0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b084      	sub	sp, #16
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
 8011f14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d109      	bne.n	8011f30 <vTaskPlaceOnEventList+0x24>
 8011f1c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011f20:	f383 8811 	msr	BASEPRI, r3
 8011f24:	f3bf 8f6f 	isb	sy
 8011f28:	f3bf 8f4f 	dsb	sy
 8011f2c:	60fb      	str	r3, [r7, #12]
 8011f2e:	e7fe      	b.n	8011f2e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011f30:	4b07      	ldr	r3, [pc, #28]	; (8011f50 <vTaskPlaceOnEventList+0x44>)
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	3318      	adds	r3, #24
 8011f36:	4619      	mov	r1, r3
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f7fe fa9e 	bl	801047a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011f3e:	2101      	movs	r1, #1
 8011f40:	6838      	ldr	r0, [r7, #0]
 8011f42:	f000 fb7f 	bl	8012644 <prvAddCurrentTaskToDelayedList>
}
 8011f46:	bf00      	nop
 8011f48:	3710      	adds	r7, #16
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}
 8011f4e:	bf00      	nop
 8011f50:	20002120 	.word	0x20002120

08011f54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b086      	sub	sp, #24
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	68db      	ldr	r3, [r3, #12]
 8011f60:	68db      	ldr	r3, [r3, #12]
 8011f62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011f64:	693b      	ldr	r3, [r7, #16]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d109      	bne.n	8011f7e <xTaskRemoveFromEventList+0x2a>
 8011f6a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8011f6e:	f383 8811 	msr	BASEPRI, r3
 8011f72:	f3bf 8f6f 	isb	sy
 8011f76:	f3bf 8f4f 	dsb	sy
 8011f7a:	60fb      	str	r3, [r7, #12]
 8011f7c:	e7fe      	b.n	8011f7c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011f7e:	693b      	ldr	r3, [r7, #16]
 8011f80:	3318      	adds	r3, #24
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7fe fab2 	bl	80104ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011f88:	4b1d      	ldr	r3, [pc, #116]	; (8012000 <xTaskRemoveFromEventList+0xac>)
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d11c      	bne.n	8011fca <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011f90:	693b      	ldr	r3, [r7, #16]
 8011f92:	3304      	adds	r3, #4
 8011f94:	4618      	mov	r0, r3
 8011f96:	f7fe faa9 	bl	80104ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011f9a:	693b      	ldr	r3, [r7, #16]
 8011f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f9e:	2201      	movs	r2, #1
 8011fa0:	409a      	lsls	r2, r3
 8011fa2:	4b18      	ldr	r3, [pc, #96]	; (8012004 <xTaskRemoveFromEventList+0xb0>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	4313      	orrs	r3, r2
 8011fa8:	4a16      	ldr	r2, [pc, #88]	; (8012004 <xTaskRemoveFromEventList+0xb0>)
 8011faa:	6013      	str	r3, [r2, #0]
 8011fac:	693b      	ldr	r3, [r7, #16]
 8011fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fb0:	4613      	mov	r3, r2
 8011fb2:	009b      	lsls	r3, r3, #2
 8011fb4:	4413      	add	r3, r2
 8011fb6:	009b      	lsls	r3, r3, #2
 8011fb8:	4a13      	ldr	r2, [pc, #76]	; (8012008 <xTaskRemoveFromEventList+0xb4>)
 8011fba:	441a      	add	r2, r3
 8011fbc:	693b      	ldr	r3, [r7, #16]
 8011fbe:	3304      	adds	r3, #4
 8011fc0:	4619      	mov	r1, r3
 8011fc2:	4610      	mov	r0, r2
 8011fc4:	f7fe fa35 	bl	8010432 <vListInsertEnd>
 8011fc8:	e005      	b.n	8011fd6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011fca:	693b      	ldr	r3, [r7, #16]
 8011fcc:	3318      	adds	r3, #24
 8011fce:	4619      	mov	r1, r3
 8011fd0:	480e      	ldr	r0, [pc, #56]	; (801200c <xTaskRemoveFromEventList+0xb8>)
 8011fd2:	f7fe fa2e 	bl	8010432 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011fd6:	693b      	ldr	r3, [r7, #16]
 8011fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fda:	4b0d      	ldr	r3, [pc, #52]	; (8012010 <xTaskRemoveFromEventList+0xbc>)
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fe0:	429a      	cmp	r2, r3
 8011fe2:	d905      	bls.n	8011ff0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011fe8:	4b0a      	ldr	r3, [pc, #40]	; (8012014 <xTaskRemoveFromEventList+0xc0>)
 8011fea:	2201      	movs	r2, #1
 8011fec:	601a      	str	r2, [r3, #0]
 8011fee:	e001      	b.n	8011ff4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8011ff4:	697b      	ldr	r3, [r7, #20]
}
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	3718      	adds	r7, #24
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}
 8011ffe:	bf00      	nop
 8012000:	20002248 	.word	0x20002248
 8012004:	20002228 	.word	0x20002228
 8012008:	20002124 	.word	0x20002124
 801200c:	200021e0 	.word	0x200021e0
 8012010:	20002120 	.word	0x20002120
 8012014:	20002234 	.word	0x20002234

08012018 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012018:	b480      	push	{r7}
 801201a:	b083      	sub	sp, #12
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012020:	4b06      	ldr	r3, [pc, #24]	; (801203c <vTaskInternalSetTimeOutState+0x24>)
 8012022:	681a      	ldr	r2, [r3, #0]
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012028:	4b05      	ldr	r3, [pc, #20]	; (8012040 <vTaskInternalSetTimeOutState+0x28>)
 801202a:	681a      	ldr	r2, [r3, #0]
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	605a      	str	r2, [r3, #4]
}
 8012030:	bf00      	nop
 8012032:	370c      	adds	r7, #12
 8012034:	46bd      	mov	sp, r7
 8012036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203a:	4770      	bx	lr
 801203c:	20002238 	.word	0x20002238
 8012040:	20002224 	.word	0x20002224

08012044 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b088      	sub	sp, #32
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
 801204c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d109      	bne.n	8012068 <xTaskCheckForTimeOut+0x24>
 8012054:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012058:	f383 8811 	msr	BASEPRI, r3
 801205c:	f3bf 8f6f 	isb	sy
 8012060:	f3bf 8f4f 	dsb	sy
 8012064:	613b      	str	r3, [r7, #16]
 8012066:	e7fe      	b.n	8012066 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8012068:	683b      	ldr	r3, [r7, #0]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d109      	bne.n	8012082 <xTaskCheckForTimeOut+0x3e>
 801206e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012072:	f383 8811 	msr	BASEPRI, r3
 8012076:	f3bf 8f6f 	isb	sy
 801207a:	f3bf 8f4f 	dsb	sy
 801207e:	60fb      	str	r3, [r7, #12]
 8012080:	e7fe      	b.n	8012080 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8012082:	f7fe fb83 	bl	801078c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012086:	4b1d      	ldr	r3, [pc, #116]	; (80120fc <xTaskCheckForTimeOut+0xb8>)
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	685b      	ldr	r3, [r3, #4]
 8012090:	69ba      	ldr	r2, [r7, #24]
 8012092:	1ad3      	subs	r3, r2, r3
 8012094:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801209e:	d102      	bne.n	80120a6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80120a0:	2300      	movs	r3, #0
 80120a2:	61fb      	str	r3, [r7, #28]
 80120a4:	e023      	b.n	80120ee <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681a      	ldr	r2, [r3, #0]
 80120aa:	4b15      	ldr	r3, [pc, #84]	; (8012100 <xTaskCheckForTimeOut+0xbc>)
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	429a      	cmp	r2, r3
 80120b0:	d007      	beq.n	80120c2 <xTaskCheckForTimeOut+0x7e>
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	685b      	ldr	r3, [r3, #4]
 80120b6:	69ba      	ldr	r2, [r7, #24]
 80120b8:	429a      	cmp	r2, r3
 80120ba:	d302      	bcc.n	80120c2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80120bc:	2301      	movs	r3, #1
 80120be:	61fb      	str	r3, [r7, #28]
 80120c0:	e015      	b.n	80120ee <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	697a      	ldr	r2, [r7, #20]
 80120c8:	429a      	cmp	r2, r3
 80120ca:	d20b      	bcs.n	80120e4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80120cc:	683b      	ldr	r3, [r7, #0]
 80120ce:	681a      	ldr	r2, [r3, #0]
 80120d0:	697b      	ldr	r3, [r7, #20]
 80120d2:	1ad2      	subs	r2, r2, r3
 80120d4:	683b      	ldr	r3, [r7, #0]
 80120d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80120d8:	6878      	ldr	r0, [r7, #4]
 80120da:	f7ff ff9d 	bl	8012018 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80120de:	2300      	movs	r3, #0
 80120e0:	61fb      	str	r3, [r7, #28]
 80120e2:	e004      	b.n	80120ee <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	2200      	movs	r2, #0
 80120e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80120ea:	2301      	movs	r3, #1
 80120ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80120ee:	f7fe fb7b 	bl	80107e8 <vPortExitCritical>

	return xReturn;
 80120f2:	69fb      	ldr	r3, [r7, #28]
}
 80120f4:	4618      	mov	r0, r3
 80120f6:	3720      	adds	r7, #32
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}
 80120fc:	20002224 	.word	0x20002224
 8012100:	20002238 	.word	0x20002238

08012104 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012104:	b480      	push	{r7}
 8012106:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012108:	4b03      	ldr	r3, [pc, #12]	; (8012118 <vTaskMissedYield+0x14>)
 801210a:	2201      	movs	r2, #1
 801210c:	601a      	str	r2, [r3, #0]
}
 801210e:	bf00      	nop
 8012110:	46bd      	mov	sp, r7
 8012112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012116:	4770      	bx	lr
 8012118:	20002234 	.word	0x20002234

0801211c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b082      	sub	sp, #8
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012124:	f000 f852 	bl	80121cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012128:	4b06      	ldr	r3, [pc, #24]	; (8012144 <prvIdleTask+0x28>)
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	2b01      	cmp	r3, #1
 801212e:	d9f9      	bls.n	8012124 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012130:	4b05      	ldr	r3, [pc, #20]	; (8012148 <prvIdleTask+0x2c>)
 8012132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012136:	601a      	str	r2, [r3, #0]
 8012138:	f3bf 8f4f 	dsb	sy
 801213c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012140:	e7f0      	b.n	8012124 <prvIdleTask+0x8>
 8012142:	bf00      	nop
 8012144:	20002124 	.word	0x20002124
 8012148:	e000ed04 	.word	0xe000ed04

0801214c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b082      	sub	sp, #8
 8012150:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012152:	2300      	movs	r3, #0
 8012154:	607b      	str	r3, [r7, #4]
 8012156:	e00c      	b.n	8012172 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012158:	687a      	ldr	r2, [r7, #4]
 801215a:	4613      	mov	r3, r2
 801215c:	009b      	lsls	r3, r3, #2
 801215e:	4413      	add	r3, r2
 8012160:	009b      	lsls	r3, r3, #2
 8012162:	4a12      	ldr	r2, [pc, #72]	; (80121ac <prvInitialiseTaskLists+0x60>)
 8012164:	4413      	add	r3, r2
 8012166:	4618      	mov	r0, r3
 8012168:	f7fe f936 	bl	80103d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	3301      	adds	r3, #1
 8012170:	607b      	str	r3, [r7, #4]
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	2b06      	cmp	r3, #6
 8012176:	d9ef      	bls.n	8012158 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012178:	480d      	ldr	r0, [pc, #52]	; (80121b0 <prvInitialiseTaskLists+0x64>)
 801217a:	f7fe f92d 	bl	80103d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801217e:	480d      	ldr	r0, [pc, #52]	; (80121b4 <prvInitialiseTaskLists+0x68>)
 8012180:	f7fe f92a 	bl	80103d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012184:	480c      	ldr	r0, [pc, #48]	; (80121b8 <prvInitialiseTaskLists+0x6c>)
 8012186:	f7fe f927 	bl	80103d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801218a:	480c      	ldr	r0, [pc, #48]	; (80121bc <prvInitialiseTaskLists+0x70>)
 801218c:	f7fe f924 	bl	80103d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012190:	480b      	ldr	r0, [pc, #44]	; (80121c0 <prvInitialiseTaskLists+0x74>)
 8012192:	f7fe f921 	bl	80103d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012196:	4b0b      	ldr	r3, [pc, #44]	; (80121c4 <prvInitialiseTaskLists+0x78>)
 8012198:	4a05      	ldr	r2, [pc, #20]	; (80121b0 <prvInitialiseTaskLists+0x64>)
 801219a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801219c:	4b0a      	ldr	r3, [pc, #40]	; (80121c8 <prvInitialiseTaskLists+0x7c>)
 801219e:	4a05      	ldr	r2, [pc, #20]	; (80121b4 <prvInitialiseTaskLists+0x68>)
 80121a0:	601a      	str	r2, [r3, #0]
}
 80121a2:	bf00      	nop
 80121a4:	3708      	adds	r7, #8
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}
 80121aa:	bf00      	nop
 80121ac:	20002124 	.word	0x20002124
 80121b0:	200021b0 	.word	0x200021b0
 80121b4:	200021c4 	.word	0x200021c4
 80121b8:	200021e0 	.word	0x200021e0
 80121bc:	200021f4 	.word	0x200021f4
 80121c0:	2000220c 	.word	0x2000220c
 80121c4:	200021d8 	.word	0x200021d8
 80121c8:	200021dc 	.word	0x200021dc

080121cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b082      	sub	sp, #8
 80121d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80121d2:	e019      	b.n	8012208 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80121d4:	f7fe fada 	bl	801078c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80121d8:	4b0f      	ldr	r3, [pc, #60]	; (8012218 <prvCheckTasksWaitingTermination+0x4c>)
 80121da:	68db      	ldr	r3, [r3, #12]
 80121dc:	68db      	ldr	r3, [r3, #12]
 80121de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	3304      	adds	r3, #4
 80121e4:	4618      	mov	r0, r3
 80121e6:	f7fe f981 	bl	80104ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 80121ea:	4b0c      	ldr	r3, [pc, #48]	; (801221c <prvCheckTasksWaitingTermination+0x50>)
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	3b01      	subs	r3, #1
 80121f0:	4a0a      	ldr	r2, [pc, #40]	; (801221c <prvCheckTasksWaitingTermination+0x50>)
 80121f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80121f4:	4b0a      	ldr	r3, [pc, #40]	; (8012220 <prvCheckTasksWaitingTermination+0x54>)
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	3b01      	subs	r3, #1
 80121fa:	4a09      	ldr	r2, [pc, #36]	; (8012220 <prvCheckTasksWaitingTermination+0x54>)
 80121fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80121fe:	f7fe faf3 	bl	80107e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f000 f80e 	bl	8012224 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012208:	4b05      	ldr	r3, [pc, #20]	; (8012220 <prvCheckTasksWaitingTermination+0x54>)
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d1e1      	bne.n	80121d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012210:	bf00      	nop
 8012212:	3708      	adds	r7, #8
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}
 8012218:	200021f4 	.word	0x200021f4
 801221c:	20002220 	.word	0x20002220
 8012220:	20002208 	.word	0x20002208

08012224 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012224:	b580      	push	{r7, lr}
 8012226:	b082      	sub	sp, #8
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012230:	4618      	mov	r0, r3
 8012232:	f7fd ffbd 	bl	80101b0 <vPortFree>
			vPortFree( pxTCB );
 8012236:	6878      	ldr	r0, [r7, #4]
 8012238:	f7fd ffba 	bl	80101b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801223c:	bf00      	nop
 801223e:	3708      	adds	r7, #8
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}

08012244 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012244:	b480      	push	{r7}
 8012246:	b083      	sub	sp, #12
 8012248:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801224a:	4b0f      	ldr	r3, [pc, #60]	; (8012288 <prvResetNextTaskUnblockTime+0x44>)
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d101      	bne.n	8012258 <prvResetNextTaskUnblockTime+0x14>
 8012254:	2301      	movs	r3, #1
 8012256:	e000      	b.n	801225a <prvResetNextTaskUnblockTime+0x16>
 8012258:	2300      	movs	r3, #0
 801225a:	2b00      	cmp	r3, #0
 801225c:	d004      	beq.n	8012268 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801225e:	4b0b      	ldr	r3, [pc, #44]	; (801228c <prvResetNextTaskUnblockTime+0x48>)
 8012260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012264:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012266:	e008      	b.n	801227a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012268:	4b07      	ldr	r3, [pc, #28]	; (8012288 <prvResetNextTaskUnblockTime+0x44>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	68db      	ldr	r3, [r3, #12]
 801226e:	68db      	ldr	r3, [r3, #12]
 8012270:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	685b      	ldr	r3, [r3, #4]
 8012276:	4a05      	ldr	r2, [pc, #20]	; (801228c <prvResetNextTaskUnblockTime+0x48>)
 8012278:	6013      	str	r3, [r2, #0]
}
 801227a:	bf00      	nop
 801227c:	370c      	adds	r7, #12
 801227e:	46bd      	mov	sp, r7
 8012280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012284:	4770      	bx	lr
 8012286:	bf00      	nop
 8012288:	200021d8 	.word	0x200021d8
 801228c:	20002240 	.word	0x20002240

08012290 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012290:	b480      	push	{r7}
 8012292:	b083      	sub	sp, #12
 8012294:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012296:	4b0b      	ldr	r3, [pc, #44]	; (80122c4 <xTaskGetSchedulerState+0x34>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d102      	bne.n	80122a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801229e:	2301      	movs	r3, #1
 80122a0:	607b      	str	r3, [r7, #4]
 80122a2:	e008      	b.n	80122b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80122a4:	4b08      	ldr	r3, [pc, #32]	; (80122c8 <xTaskGetSchedulerState+0x38>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d102      	bne.n	80122b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80122ac:	2302      	movs	r3, #2
 80122ae:	607b      	str	r3, [r7, #4]
 80122b0:	e001      	b.n	80122b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80122b2:	2300      	movs	r3, #0
 80122b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80122b6:	687b      	ldr	r3, [r7, #4]
	}
 80122b8:	4618      	mov	r0, r3
 80122ba:	370c      	adds	r7, #12
 80122bc:	46bd      	mov	sp, r7
 80122be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c2:	4770      	bx	lr
 80122c4:	2000222c 	.word	0x2000222c
 80122c8:	20002248 	.word	0x20002248

080122cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b084      	sub	sp, #16
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80122d8:	2300      	movs	r3, #0
 80122da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d06e      	beq.n	80123c0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122e6:	4b39      	ldr	r3, [pc, #228]	; (80123cc <xTaskPriorityInherit+0x100>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122ec:	429a      	cmp	r2, r3
 80122ee:	d25e      	bcs.n	80123ae <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80122f0:	68bb      	ldr	r3, [r7, #8]
 80122f2:	699b      	ldr	r3, [r3, #24]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	db06      	blt.n	8012306 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122f8:	4b34      	ldr	r3, [pc, #208]	; (80123cc <xTaskPriorityInherit+0x100>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122fe:	f1c3 0207 	rsb	r2, r3, #7
 8012302:	68bb      	ldr	r3, [r7, #8]
 8012304:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	6959      	ldr	r1, [r3, #20]
 801230a:	68bb      	ldr	r3, [r7, #8]
 801230c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801230e:	4613      	mov	r3, r2
 8012310:	009b      	lsls	r3, r3, #2
 8012312:	4413      	add	r3, r2
 8012314:	009b      	lsls	r3, r3, #2
 8012316:	4a2e      	ldr	r2, [pc, #184]	; (80123d0 <xTaskPriorityInherit+0x104>)
 8012318:	4413      	add	r3, r2
 801231a:	4299      	cmp	r1, r3
 801231c:	d101      	bne.n	8012322 <xTaskPriorityInherit+0x56>
 801231e:	2301      	movs	r3, #1
 8012320:	e000      	b.n	8012324 <xTaskPriorityInherit+0x58>
 8012322:	2300      	movs	r3, #0
 8012324:	2b00      	cmp	r3, #0
 8012326:	d03a      	beq.n	801239e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012328:	68bb      	ldr	r3, [r7, #8]
 801232a:	3304      	adds	r3, #4
 801232c:	4618      	mov	r0, r3
 801232e:	f7fe f8dd 	bl	80104ec <uxListRemove>
 8012332:	4603      	mov	r3, r0
 8012334:	2b00      	cmp	r3, #0
 8012336:	d115      	bne.n	8012364 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801233c:	4924      	ldr	r1, [pc, #144]	; (80123d0 <xTaskPriorityInherit+0x104>)
 801233e:	4613      	mov	r3, r2
 8012340:	009b      	lsls	r3, r3, #2
 8012342:	4413      	add	r3, r2
 8012344:	009b      	lsls	r3, r3, #2
 8012346:	440b      	add	r3, r1
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d10a      	bne.n	8012364 <xTaskPriorityInherit+0x98>
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012352:	2201      	movs	r2, #1
 8012354:	fa02 f303 	lsl.w	r3, r2, r3
 8012358:	43da      	mvns	r2, r3
 801235a:	4b1e      	ldr	r3, [pc, #120]	; (80123d4 <xTaskPriorityInherit+0x108>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	4013      	ands	r3, r2
 8012360:	4a1c      	ldr	r2, [pc, #112]	; (80123d4 <xTaskPriorityInherit+0x108>)
 8012362:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012364:	4b19      	ldr	r3, [pc, #100]	; (80123cc <xTaskPriorityInherit+0x100>)
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801236e:	68bb      	ldr	r3, [r7, #8]
 8012370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012372:	2201      	movs	r2, #1
 8012374:	409a      	lsls	r2, r3
 8012376:	4b17      	ldr	r3, [pc, #92]	; (80123d4 <xTaskPriorityInherit+0x108>)
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	4313      	orrs	r3, r2
 801237c:	4a15      	ldr	r2, [pc, #84]	; (80123d4 <xTaskPriorityInherit+0x108>)
 801237e:	6013      	str	r3, [r2, #0]
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012384:	4613      	mov	r3, r2
 8012386:	009b      	lsls	r3, r3, #2
 8012388:	4413      	add	r3, r2
 801238a:	009b      	lsls	r3, r3, #2
 801238c:	4a10      	ldr	r2, [pc, #64]	; (80123d0 <xTaskPriorityInherit+0x104>)
 801238e:	441a      	add	r2, r3
 8012390:	68bb      	ldr	r3, [r7, #8]
 8012392:	3304      	adds	r3, #4
 8012394:	4619      	mov	r1, r3
 8012396:	4610      	mov	r0, r2
 8012398:	f7fe f84b 	bl	8010432 <vListInsertEnd>
 801239c:	e004      	b.n	80123a8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801239e:	4b0b      	ldr	r3, [pc, #44]	; (80123cc <xTaskPriorityInherit+0x100>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123a4:	68bb      	ldr	r3, [r7, #8]
 80123a6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80123a8:	2301      	movs	r3, #1
 80123aa:	60fb      	str	r3, [r7, #12]
 80123ac:	e008      	b.n	80123c0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80123ae:	68bb      	ldr	r3, [r7, #8]
 80123b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80123b2:	4b06      	ldr	r3, [pc, #24]	; (80123cc <xTaskPriorityInherit+0x100>)
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123b8:	429a      	cmp	r2, r3
 80123ba:	d201      	bcs.n	80123c0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80123bc:	2301      	movs	r3, #1
 80123be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80123c0:	68fb      	ldr	r3, [r7, #12]
	}
 80123c2:	4618      	mov	r0, r3
 80123c4:	3710      	adds	r7, #16
 80123c6:	46bd      	mov	sp, r7
 80123c8:	bd80      	pop	{r7, pc}
 80123ca:	bf00      	nop
 80123cc:	20002120 	.word	0x20002120
 80123d0:	20002124 	.word	0x20002124
 80123d4:	20002228 	.word	0x20002228

080123d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b086      	sub	sp, #24
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80123e4:	2300      	movs	r3, #0
 80123e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d06c      	beq.n	80124c8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80123ee:	4b39      	ldr	r3, [pc, #228]	; (80124d4 <xTaskPriorityDisinherit+0xfc>)
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	693a      	ldr	r2, [r7, #16]
 80123f4:	429a      	cmp	r2, r3
 80123f6:	d009      	beq.n	801240c <xTaskPriorityDisinherit+0x34>
 80123f8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80123fc:	f383 8811 	msr	BASEPRI, r3
 8012400:	f3bf 8f6f 	isb	sy
 8012404:	f3bf 8f4f 	dsb	sy
 8012408:	60fb      	str	r3, [r7, #12]
 801240a:	e7fe      	b.n	801240a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 801240c:	693b      	ldr	r3, [r7, #16]
 801240e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012410:	2b00      	cmp	r3, #0
 8012412:	d109      	bne.n	8012428 <xTaskPriorityDisinherit+0x50>
 8012414:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012418:	f383 8811 	msr	BASEPRI, r3
 801241c:	f3bf 8f6f 	isb	sy
 8012420:	f3bf 8f4f 	dsb	sy
 8012424:	60bb      	str	r3, [r7, #8]
 8012426:	e7fe      	b.n	8012426 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8012428:	693b      	ldr	r3, [r7, #16]
 801242a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801242c:	1e5a      	subs	r2, r3, #1
 801242e:	693b      	ldr	r3, [r7, #16]
 8012430:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012432:	693b      	ldr	r3, [r7, #16]
 8012434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801243a:	429a      	cmp	r2, r3
 801243c:	d044      	beq.n	80124c8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801243e:	693b      	ldr	r3, [r7, #16]
 8012440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012442:	2b00      	cmp	r3, #0
 8012444:	d140      	bne.n	80124c8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012446:	693b      	ldr	r3, [r7, #16]
 8012448:	3304      	adds	r3, #4
 801244a:	4618      	mov	r0, r3
 801244c:	f7fe f84e 	bl	80104ec <uxListRemove>
 8012450:	4603      	mov	r3, r0
 8012452:	2b00      	cmp	r3, #0
 8012454:	d115      	bne.n	8012482 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012456:	693b      	ldr	r3, [r7, #16]
 8012458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801245a:	491f      	ldr	r1, [pc, #124]	; (80124d8 <xTaskPriorityDisinherit+0x100>)
 801245c:	4613      	mov	r3, r2
 801245e:	009b      	lsls	r3, r3, #2
 8012460:	4413      	add	r3, r2
 8012462:	009b      	lsls	r3, r3, #2
 8012464:	440b      	add	r3, r1
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d10a      	bne.n	8012482 <xTaskPriorityDisinherit+0xaa>
 801246c:	693b      	ldr	r3, [r7, #16]
 801246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012470:	2201      	movs	r2, #1
 8012472:	fa02 f303 	lsl.w	r3, r2, r3
 8012476:	43da      	mvns	r2, r3
 8012478:	4b18      	ldr	r3, [pc, #96]	; (80124dc <xTaskPriorityDisinherit+0x104>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	4013      	ands	r3, r2
 801247e:	4a17      	ldr	r2, [pc, #92]	; (80124dc <xTaskPriorityDisinherit+0x104>)
 8012480:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012482:	693b      	ldr	r3, [r7, #16]
 8012484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012486:	693b      	ldr	r3, [r7, #16]
 8012488:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801248a:	693b      	ldr	r3, [r7, #16]
 801248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801248e:	f1c3 0207 	rsb	r2, r3, #7
 8012492:	693b      	ldr	r3, [r7, #16]
 8012494:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012496:	693b      	ldr	r3, [r7, #16]
 8012498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801249a:	2201      	movs	r2, #1
 801249c:	409a      	lsls	r2, r3
 801249e:	4b0f      	ldr	r3, [pc, #60]	; (80124dc <xTaskPriorityDisinherit+0x104>)
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	4313      	orrs	r3, r2
 80124a4:	4a0d      	ldr	r2, [pc, #52]	; (80124dc <xTaskPriorityDisinherit+0x104>)
 80124a6:	6013      	str	r3, [r2, #0]
 80124a8:	693b      	ldr	r3, [r7, #16]
 80124aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124ac:	4613      	mov	r3, r2
 80124ae:	009b      	lsls	r3, r3, #2
 80124b0:	4413      	add	r3, r2
 80124b2:	009b      	lsls	r3, r3, #2
 80124b4:	4a08      	ldr	r2, [pc, #32]	; (80124d8 <xTaskPriorityDisinherit+0x100>)
 80124b6:	441a      	add	r2, r3
 80124b8:	693b      	ldr	r3, [r7, #16]
 80124ba:	3304      	adds	r3, #4
 80124bc:	4619      	mov	r1, r3
 80124be:	4610      	mov	r0, r2
 80124c0:	f7fd ffb7 	bl	8010432 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80124c4:	2301      	movs	r3, #1
 80124c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80124c8:	697b      	ldr	r3, [r7, #20]
	}
 80124ca:	4618      	mov	r0, r3
 80124cc:	3718      	adds	r7, #24
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bd80      	pop	{r7, pc}
 80124d2:	bf00      	nop
 80124d4:	20002120 	.word	0x20002120
 80124d8:	20002124 	.word	0x20002124
 80124dc:	20002228 	.word	0x20002228

080124e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b088      	sub	sp, #32
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
 80124e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80124ee:	2301      	movs	r3, #1
 80124f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	f000 8086 	beq.w	8012606 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80124fa:	69bb      	ldr	r3, [r7, #24]
 80124fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d109      	bne.n	8012516 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8012502:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012506:	f383 8811 	msr	BASEPRI, r3
 801250a:	f3bf 8f6f 	isb	sy
 801250e:	f3bf 8f4f 	dsb	sy
 8012512:	60fb      	str	r3, [r7, #12]
 8012514:	e7fe      	b.n	8012514 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012516:	69bb      	ldr	r3, [r7, #24]
 8012518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801251a:	683a      	ldr	r2, [r7, #0]
 801251c:	429a      	cmp	r2, r3
 801251e:	d902      	bls.n	8012526 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012520:	683b      	ldr	r3, [r7, #0]
 8012522:	61fb      	str	r3, [r7, #28]
 8012524:	e002      	b.n	801252c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012526:	69bb      	ldr	r3, [r7, #24]
 8012528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801252a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801252c:	69bb      	ldr	r3, [r7, #24]
 801252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012530:	69fa      	ldr	r2, [r7, #28]
 8012532:	429a      	cmp	r2, r3
 8012534:	d067      	beq.n	8012606 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012536:	69bb      	ldr	r3, [r7, #24]
 8012538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801253a:	697a      	ldr	r2, [r7, #20]
 801253c:	429a      	cmp	r2, r3
 801253e:	d162      	bne.n	8012606 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012540:	4b33      	ldr	r3, [pc, #204]	; (8012610 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	69ba      	ldr	r2, [r7, #24]
 8012546:	429a      	cmp	r2, r3
 8012548:	d109      	bne.n	801255e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 801254a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801254e:	f383 8811 	msr	BASEPRI, r3
 8012552:	f3bf 8f6f 	isb	sy
 8012556:	f3bf 8f4f 	dsb	sy
 801255a:	60bb      	str	r3, [r7, #8]
 801255c:	e7fe      	b.n	801255c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801255e:	69bb      	ldr	r3, [r7, #24]
 8012560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012562:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012564:	69bb      	ldr	r3, [r7, #24]
 8012566:	69fa      	ldr	r2, [r7, #28]
 8012568:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801256a:	69bb      	ldr	r3, [r7, #24]
 801256c:	699b      	ldr	r3, [r3, #24]
 801256e:	2b00      	cmp	r3, #0
 8012570:	db04      	blt.n	801257c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012572:	69fb      	ldr	r3, [r7, #28]
 8012574:	f1c3 0207 	rsb	r2, r3, #7
 8012578:	69bb      	ldr	r3, [r7, #24]
 801257a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801257c:	69bb      	ldr	r3, [r7, #24]
 801257e:	6959      	ldr	r1, [r3, #20]
 8012580:	693a      	ldr	r2, [r7, #16]
 8012582:	4613      	mov	r3, r2
 8012584:	009b      	lsls	r3, r3, #2
 8012586:	4413      	add	r3, r2
 8012588:	009b      	lsls	r3, r3, #2
 801258a:	4a22      	ldr	r2, [pc, #136]	; (8012614 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801258c:	4413      	add	r3, r2
 801258e:	4299      	cmp	r1, r3
 8012590:	d101      	bne.n	8012596 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8012592:	2301      	movs	r3, #1
 8012594:	e000      	b.n	8012598 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8012596:	2300      	movs	r3, #0
 8012598:	2b00      	cmp	r3, #0
 801259a:	d034      	beq.n	8012606 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801259c:	69bb      	ldr	r3, [r7, #24]
 801259e:	3304      	adds	r3, #4
 80125a0:	4618      	mov	r0, r3
 80125a2:	f7fd ffa3 	bl	80104ec <uxListRemove>
 80125a6:	4603      	mov	r3, r0
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d115      	bne.n	80125d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80125ac:	69bb      	ldr	r3, [r7, #24]
 80125ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125b0:	4918      	ldr	r1, [pc, #96]	; (8012614 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80125b2:	4613      	mov	r3, r2
 80125b4:	009b      	lsls	r3, r3, #2
 80125b6:	4413      	add	r3, r2
 80125b8:	009b      	lsls	r3, r3, #2
 80125ba:	440b      	add	r3, r1
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d10a      	bne.n	80125d8 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 80125c2:	69bb      	ldr	r3, [r7, #24]
 80125c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125c6:	2201      	movs	r2, #1
 80125c8:	fa02 f303 	lsl.w	r3, r2, r3
 80125cc:	43da      	mvns	r2, r3
 80125ce:	4b12      	ldr	r3, [pc, #72]	; (8012618 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	4013      	ands	r3, r2
 80125d4:	4a10      	ldr	r2, [pc, #64]	; (8012618 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80125d6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80125d8:	69bb      	ldr	r3, [r7, #24]
 80125da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125dc:	2201      	movs	r2, #1
 80125de:	409a      	lsls	r2, r3
 80125e0:	4b0d      	ldr	r3, [pc, #52]	; (8012618 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	4313      	orrs	r3, r2
 80125e6:	4a0c      	ldr	r2, [pc, #48]	; (8012618 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80125e8:	6013      	str	r3, [r2, #0]
 80125ea:	69bb      	ldr	r3, [r7, #24]
 80125ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125ee:	4613      	mov	r3, r2
 80125f0:	009b      	lsls	r3, r3, #2
 80125f2:	4413      	add	r3, r2
 80125f4:	009b      	lsls	r3, r3, #2
 80125f6:	4a07      	ldr	r2, [pc, #28]	; (8012614 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80125f8:	441a      	add	r2, r3
 80125fa:	69bb      	ldr	r3, [r7, #24]
 80125fc:	3304      	adds	r3, #4
 80125fe:	4619      	mov	r1, r3
 8012600:	4610      	mov	r0, r2
 8012602:	f7fd ff16 	bl	8010432 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012606:	bf00      	nop
 8012608:	3720      	adds	r7, #32
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}
 801260e:	bf00      	nop
 8012610:	20002120 	.word	0x20002120
 8012614:	20002124 	.word	0x20002124
 8012618:	20002228 	.word	0x20002228

0801261c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 801261c:	b480      	push	{r7}
 801261e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012620:	4b07      	ldr	r3, [pc, #28]	; (8012640 <pvTaskIncrementMutexHeldCount+0x24>)
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d004      	beq.n	8012632 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012628:	4b05      	ldr	r3, [pc, #20]	; (8012640 <pvTaskIncrementMutexHeldCount+0x24>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801262e:	3201      	adds	r2, #1
 8012630:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8012632:	4b03      	ldr	r3, [pc, #12]	; (8012640 <pvTaskIncrementMutexHeldCount+0x24>)
 8012634:	681b      	ldr	r3, [r3, #0]
	}
 8012636:	4618      	mov	r0, r3
 8012638:	46bd      	mov	sp, r7
 801263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263e:	4770      	bx	lr
 8012640:	20002120 	.word	0x20002120

08012644 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b084      	sub	sp, #16
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
 801264c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801264e:	4b29      	ldr	r3, [pc, #164]	; (80126f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012654:	4b28      	ldr	r3, [pc, #160]	; (80126f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	3304      	adds	r3, #4
 801265a:	4618      	mov	r0, r3
 801265c:	f7fd ff46 	bl	80104ec <uxListRemove>
 8012660:	4603      	mov	r3, r0
 8012662:	2b00      	cmp	r3, #0
 8012664:	d10b      	bne.n	801267e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8012666:	4b24      	ldr	r3, [pc, #144]	; (80126f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801266c:	2201      	movs	r2, #1
 801266e:	fa02 f303 	lsl.w	r3, r2, r3
 8012672:	43da      	mvns	r2, r3
 8012674:	4b21      	ldr	r3, [pc, #132]	; (80126fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	4013      	ands	r3, r2
 801267a:	4a20      	ldr	r2, [pc, #128]	; (80126fc <prvAddCurrentTaskToDelayedList+0xb8>)
 801267c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012684:	d10a      	bne.n	801269c <prvAddCurrentTaskToDelayedList+0x58>
 8012686:	683b      	ldr	r3, [r7, #0]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d007      	beq.n	801269c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801268c:	4b1a      	ldr	r3, [pc, #104]	; (80126f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	3304      	adds	r3, #4
 8012692:	4619      	mov	r1, r3
 8012694:	481a      	ldr	r0, [pc, #104]	; (8012700 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012696:	f7fd fecc 	bl	8010432 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801269a:	e026      	b.n	80126ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801269c:	68fa      	ldr	r2, [r7, #12]
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	4413      	add	r3, r2
 80126a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80126a4:	4b14      	ldr	r3, [pc, #80]	; (80126f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	68ba      	ldr	r2, [r7, #8]
 80126aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80126ac:	68ba      	ldr	r2, [r7, #8]
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	429a      	cmp	r2, r3
 80126b2:	d209      	bcs.n	80126c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80126b4:	4b13      	ldr	r3, [pc, #76]	; (8012704 <prvAddCurrentTaskToDelayedList+0xc0>)
 80126b6:	681a      	ldr	r2, [r3, #0]
 80126b8:	4b0f      	ldr	r3, [pc, #60]	; (80126f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	3304      	adds	r3, #4
 80126be:	4619      	mov	r1, r3
 80126c0:	4610      	mov	r0, r2
 80126c2:	f7fd feda 	bl	801047a <vListInsert>
}
 80126c6:	e010      	b.n	80126ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80126c8:	4b0f      	ldr	r3, [pc, #60]	; (8012708 <prvAddCurrentTaskToDelayedList+0xc4>)
 80126ca:	681a      	ldr	r2, [r3, #0]
 80126cc:	4b0a      	ldr	r3, [pc, #40]	; (80126f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	3304      	adds	r3, #4
 80126d2:	4619      	mov	r1, r3
 80126d4:	4610      	mov	r0, r2
 80126d6:	f7fd fed0 	bl	801047a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80126da:	4b0c      	ldr	r3, [pc, #48]	; (801270c <prvAddCurrentTaskToDelayedList+0xc8>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	68ba      	ldr	r2, [r7, #8]
 80126e0:	429a      	cmp	r2, r3
 80126e2:	d202      	bcs.n	80126ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80126e4:	4a09      	ldr	r2, [pc, #36]	; (801270c <prvAddCurrentTaskToDelayedList+0xc8>)
 80126e6:	68bb      	ldr	r3, [r7, #8]
 80126e8:	6013      	str	r3, [r2, #0]
}
 80126ea:	bf00      	nop
 80126ec:	3710      	adds	r7, #16
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd80      	pop	{r7, pc}
 80126f2:	bf00      	nop
 80126f4:	20002224 	.word	0x20002224
 80126f8:	20002120 	.word	0x20002120
 80126fc:	20002228 	.word	0x20002228
 8012700:	2000220c 	.word	0x2000220c
 8012704:	200021dc 	.word	0x200021dc
 8012708:	200021d8 	.word	0x200021d8
 801270c:	20002240 	.word	0x20002240

08012710 <__NVIC_EnableIRQ>:
{
 8012710:	b480      	push	{r7}
 8012712:	b083      	sub	sp, #12
 8012714:	af00      	add	r7, sp, #0
 8012716:	4603      	mov	r3, r0
 8012718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801271e:	2b00      	cmp	r3, #0
 8012720:	db0b      	blt.n	801273a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012722:	79fb      	ldrb	r3, [r7, #7]
 8012724:	f003 021f 	and.w	r2, r3, #31
 8012728:	4907      	ldr	r1, [pc, #28]	; (8012748 <__NVIC_EnableIRQ+0x38>)
 801272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801272e:	095b      	lsrs	r3, r3, #5
 8012730:	2001      	movs	r0, #1
 8012732:	fa00 f202 	lsl.w	r2, r0, r2
 8012736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801273a:	bf00      	nop
 801273c:	370c      	adds	r7, #12
 801273e:	46bd      	mov	sp, r7
 8012740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012744:	4770      	bx	lr
 8012746:	bf00      	nop
 8012748:	e000e100 	.word	0xe000e100

0801274c <__NVIC_SetPriority>:
{
 801274c:	b480      	push	{r7}
 801274e:	b083      	sub	sp, #12
 8012750:	af00      	add	r7, sp, #0
 8012752:	4603      	mov	r3, r0
 8012754:	6039      	str	r1, [r7, #0]
 8012756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801275c:	2b00      	cmp	r3, #0
 801275e:	db0a      	blt.n	8012776 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	b2da      	uxtb	r2, r3
 8012764:	490c      	ldr	r1, [pc, #48]	; (8012798 <__NVIC_SetPriority+0x4c>)
 8012766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801276a:	0112      	lsls	r2, r2, #4
 801276c:	b2d2      	uxtb	r2, r2
 801276e:	440b      	add	r3, r1
 8012770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012774:	e00a      	b.n	801278c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012776:	683b      	ldr	r3, [r7, #0]
 8012778:	b2da      	uxtb	r2, r3
 801277a:	4908      	ldr	r1, [pc, #32]	; (801279c <__NVIC_SetPriority+0x50>)
 801277c:	79fb      	ldrb	r3, [r7, #7]
 801277e:	f003 030f 	and.w	r3, r3, #15
 8012782:	3b04      	subs	r3, #4
 8012784:	0112      	lsls	r2, r2, #4
 8012786:	b2d2      	uxtb	r2, r2
 8012788:	440b      	add	r3, r1
 801278a:	761a      	strb	r2, [r3, #24]
}
 801278c:	bf00      	nop
 801278e:	370c      	adds	r7, #12
 8012790:	46bd      	mov	sp, r7
 8012792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012796:	4770      	bx	lr
 8012798:	e000e100 	.word	0xe000e100
 801279c:	e000ed00 	.word	0xe000ed00

080127a0 <LL_AHB2_GRP1_EnableClock>:
{
 80127a0:	b480      	push	{r7}
 80127a2:	b085      	sub	sp, #20
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80127a8:	4b08      	ldr	r3, [pc, #32]	; (80127cc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80127aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80127ac:	4907      	ldr	r1, [pc, #28]	; (80127cc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	4313      	orrs	r3, r2
 80127b2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80127b4:	4b05      	ldr	r3, [pc, #20]	; (80127cc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80127b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	4013      	ands	r3, r2
 80127bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80127be:	68fb      	ldr	r3, [r7, #12]
}
 80127c0:	bf00      	nop
 80127c2:	3714      	adds	r7, #20
 80127c4:	46bd      	mov	sp, r7
 80127c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ca:	4770      	bx	lr
 80127cc:	40021000 	.word	0x40021000

080127d0 <LL_GPIO_SetPinMode>:
{
 80127d0:	b480      	push	{r7}
 80127d2:	b089      	sub	sp, #36	; 0x24
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	60f8      	str	r0, [r7, #12]
 80127d8:	60b9      	str	r1, [r7, #8]
 80127da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	681a      	ldr	r2, [r3, #0]
 80127e0:	68bb      	ldr	r3, [r7, #8]
 80127e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80127e4:	697b      	ldr	r3, [r7, #20]
 80127e6:	fa93 f3a3 	rbit	r3, r3
 80127ea:	613b      	str	r3, [r7, #16]
  return result;
 80127ec:	693b      	ldr	r3, [r7, #16]
 80127ee:	fab3 f383 	clz	r3, r3
 80127f2:	b2db      	uxtb	r3, r3
 80127f4:	005b      	lsls	r3, r3, #1
 80127f6:	2103      	movs	r1, #3
 80127f8:	fa01 f303 	lsl.w	r3, r1, r3
 80127fc:	43db      	mvns	r3, r3
 80127fe:	401a      	ands	r2, r3
 8012800:	68bb      	ldr	r3, [r7, #8]
 8012802:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012804:	69fb      	ldr	r3, [r7, #28]
 8012806:	fa93 f3a3 	rbit	r3, r3
 801280a:	61bb      	str	r3, [r7, #24]
  return result;
 801280c:	69bb      	ldr	r3, [r7, #24]
 801280e:	fab3 f383 	clz	r3, r3
 8012812:	b2db      	uxtb	r3, r3
 8012814:	005b      	lsls	r3, r3, #1
 8012816:	6879      	ldr	r1, [r7, #4]
 8012818:	fa01 f303 	lsl.w	r3, r1, r3
 801281c:	431a      	orrs	r2, r3
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	601a      	str	r2, [r3, #0]
}
 8012822:	bf00      	nop
 8012824:	3724      	adds	r7, #36	; 0x24
 8012826:	46bd      	mov	sp, r7
 8012828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282c:	4770      	bx	lr

0801282e <LL_GPIO_SetPinPull>:
{
 801282e:	b480      	push	{r7}
 8012830:	b089      	sub	sp, #36	; 0x24
 8012832:	af00      	add	r7, sp, #0
 8012834:	60f8      	str	r0, [r7, #12]
 8012836:	60b9      	str	r1, [r7, #8]
 8012838:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	68da      	ldr	r2, [r3, #12]
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012842:	697b      	ldr	r3, [r7, #20]
 8012844:	fa93 f3a3 	rbit	r3, r3
 8012848:	613b      	str	r3, [r7, #16]
  return result;
 801284a:	693b      	ldr	r3, [r7, #16]
 801284c:	fab3 f383 	clz	r3, r3
 8012850:	b2db      	uxtb	r3, r3
 8012852:	005b      	lsls	r3, r3, #1
 8012854:	2103      	movs	r1, #3
 8012856:	fa01 f303 	lsl.w	r3, r1, r3
 801285a:	43db      	mvns	r3, r3
 801285c:	401a      	ands	r2, r3
 801285e:	68bb      	ldr	r3, [r7, #8]
 8012860:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8012862:	69fb      	ldr	r3, [r7, #28]
 8012864:	fa93 f3a3 	rbit	r3, r3
 8012868:	61bb      	str	r3, [r7, #24]
  return result;
 801286a:	69bb      	ldr	r3, [r7, #24]
 801286c:	fab3 f383 	clz	r3, r3
 8012870:	b2db      	uxtb	r3, r3
 8012872:	005b      	lsls	r3, r3, #1
 8012874:	6879      	ldr	r1, [r7, #4]
 8012876:	fa01 f303 	lsl.w	r3, r1, r3
 801287a:	431a      	orrs	r2, r3
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	60da      	str	r2, [r3, #12]
}
 8012880:	bf00      	nop
 8012882:	3724      	adds	r7, #36	; 0x24
 8012884:	46bd      	mov	sp, r7
 8012886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288a:	4770      	bx	lr

0801288c <LL_UCPD_Enable>:
{
 801288c:	b480      	push	{r7}
 801288e:	b083      	sub	sp, #12
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	601a      	str	r2, [r3, #0]
}
 80128a0:	bf00      	nop
 80128a2:	370c      	adds	r7, #12
 80128a4:	46bd      	mov	sp, r7
 80128a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128aa:	4770      	bx	lr

080128ac <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 80128ac:	b480      	push	{r7}
 80128ae:	b083      	sub	sp, #12
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
 80128b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80128be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80128c2:	683a      	ldr	r2, [r7, #0]
 80128c4:	431a      	orrs	r2, r3
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	601a      	str	r2, [r3, #0]
}
 80128ca:	bf00      	nop
 80128cc:	370c      	adds	r7, #12
 80128ce:	46bd      	mov	sp, r7
 80128d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d4:	4770      	bx	lr

080128d6 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 80128d6:	b480      	push	{r7}
 80128d8:	b083      	sub	sp, #12
 80128da:	af00      	add	r7, sp, #0
 80128dc:	6078      	str	r0, [r7, #4]
 80128de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	68db      	ldr	r3, [r3, #12]
 80128e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	431a      	orrs	r2, r3
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	60da      	str	r2, [r3, #12]
}
 80128f0:	bf00      	nop
 80128f2:	370c      	adds	r7, #12
 80128f4:	46bd      	mov	sp, r7
 80128f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fa:	4770      	bx	lr

080128fc <LL_UCPD_RxDisable>:
  * @rmtoll CR        PHYRXEN          LL_UCPD_RxDisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDisable(UCPD_TypeDef *UCPDx)
{
 80128fc:	b480      	push	{r7}
 80128fe:	b083      	sub	sp, #12
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	68db      	ldr	r3, [r3, #12]
 8012908:	f023 0220 	bic.w	r2, r3, #32
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	60da      	str	r2, [r3, #12]
}
 8012910:	bf00      	nop
 8012912:	370c      	adds	r7, #12
 8012914:	46bd      	mov	sp, r7
 8012916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291a:	4770      	bx	lr

0801291c <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 801291c:	b480      	push	{r7}
 801291e:	b083      	sub	sp, #12
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	691b      	ldr	r3, [r3, #16]
 8012928:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	611a      	str	r2, [r3, #16]
}
 8012930:	bf00      	nop
 8012932:	370c      	adds	r7, #12
 8012934:	46bd      	mov	sp, r7
 8012936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293a:	4770      	bx	lr

0801293c <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 801293c:	b480      	push	{r7}
 801293e:	b083      	sub	sp, #12
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	691b      	ldr	r3, [r3, #16]
 8012948:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	611a      	str	r2, [r3, #16]
}
 8012950:	bf00      	nop
 8012952:	370c      	adds	r7, #12
 8012954:	46bd      	mov	sp, r7
 8012956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295a:	4770      	bx	lr

0801295c <LL_PWR_DisableUSBDeadBattery>:
{
 801295c:	b480      	push	{r7}
 801295e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8012960:	4b05      	ldr	r3, [pc, #20]	; (8012978 <LL_PWR_DisableUSBDeadBattery+0x1c>)
 8012962:	689b      	ldr	r3, [r3, #8]
 8012964:	4a04      	ldr	r2, [pc, #16]	; (8012978 <LL_PWR_DisableUSBDeadBattery+0x1c>)
 8012966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801296a:	6093      	str	r3, [r2, #8]
}
 801296c:	bf00      	nop
 801296e:	46bd      	mov	sp, r7
 8012970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012974:	4770      	bx	lr
 8012976:	bf00      	nop
 8012978:	40007000 	.word	0x40007000

0801297c <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 801297c:	b590      	push	{r4, r7, lr}
 801297e:	b08b      	sub	sp, #44	; 0x2c
 8012980:	af00      	add	r7, sp, #0
 8012982:	60b9      	str	r1, [r7, #8]
 8012984:	607a      	str	r2, [r7, #4]
 8012986:	603b      	str	r3, [r7, #0]
 8012988:	4603      	mov	r3, r0
 801298a:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801298c:	7bfb      	ldrb	r3, [r7, #15]
 801298e:	00db      	lsls	r3, r3, #3
 8012990:	4a48      	ldr	r2, [pc, #288]	; (8012ab4 <CAD_Init+0x138>)
 8012992:	4413      	add	r3, r2
 8012994:	627b      	str	r3, [r7, #36]	; 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 8012996:	7bfb      	ldrb	r3, [r7, #15]
 8012998:	4a47      	ldr	r2, [pc, #284]	; (8012ab8 <CAD_Init+0x13c>)
 801299a:	019b      	lsls	r3, r3, #6
 801299c:	4413      	add	r3, r2
 801299e:	3310      	adds	r3, #16
 80129a0:	687a      	ldr	r2, [r7, #4]
 80129a2:	601a      	str	r2, [r3, #0]
#ifndef _VALID_RP
#define _VALID_RP vRp_3_0A
#endif
  Ports[PortNum].params->RpResistor = _VALID_RP;
 80129a4:	7bfb      	ldrb	r3, [r7, #15]
 80129a6:	4a44      	ldr	r2, [pc, #272]	; (8012ab8 <CAD_Init+0x13c>)
 80129a8:	019b      	lsls	r3, r3, #6
 80129aa:	4413      	add	r3, r2
 80129ac:	3310      	adds	r3, #16
 80129ae:	681a      	ldr	r2, [r3, #0]
 80129b0:	7893      	ldrb	r3, [r2, #2]
 80129b2:	2102      	movs	r1, #2
 80129b4:	f361 0301 	bfi	r3, r1, #0, #2
 80129b8:	7093      	strb	r3, [r2, #2]
  Ports[PortNum].settings = pSettings;
 80129ba:	7bfb      	ldrb	r3, [r7, #15]
 80129bc:	4a3e      	ldr	r2, [pc, #248]	; (8012ab8 <CAD_Init+0x13c>)
 80129be:	019b      	lsls	r3, r3, #6
 80129c0:	4413      	add	r3, r2
 80129c2:	330c      	adds	r3, #12
 80129c4:	68ba      	ldr	r2, [r7, #8]
 80129c6:	601a      	str	r2, [r3, #0]
  _handle->cstate = USBPD_CAD_STATE_RESET;
 80129c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129ca:	8853      	ldrh	r3, [r2, #2]
 80129cc:	f36f 1389 	bfc	r3, #6, #4
 80129d0:	8053      	strh	r3, [r2, #2]
  _handle->cc = CCNONE;
 80129d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129d4:	7813      	ldrb	r3, [r2, #0]
 80129d6:	f36f 0301 	bfc	r3, #0, #2
 80129da:	7013      	strb	r3, [r2, #0]
  _handle->CurrentHWcondition = HW_Detachment;
 80129dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129de:	7813      	ldrb	r3, [r2, #0]
 80129e0:	f36f 1306 	bfc	r3, #4, #3
 80129e4:	7013      	strb	r3, [r2, #0]
  _handle->SNK_Source_Current_Adv = vRd_Undefined;
 80129e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129e8:	7813      	ldrb	r3, [r2, #0]
 80129ea:	f36f 0383 	bfc	r3, #2, #2
 80129ee:	7013      	strb	r3, [r2, #0]

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 80129f0:	7bfb      	ldrb	r3, [r7, #15]
 80129f2:	4a31      	ldr	r2, [pc, #196]	; (8012ab8 <CAD_Init+0x13c>)
 80129f4:	019b      	lsls	r3, r3, #6
 80129f6:	4413      	add	r3, r2
 80129f8:	3334      	adds	r3, #52	; 0x34
 80129fa:	683a      	ldr	r2, [r7, #0]
 80129fc:	601a      	str	r2, [r3, #0]

  /* Initialise the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 80129fe:	7bfc      	ldrb	r4, [r7, #15]
 8012a00:	7bfb      	ldrb	r3, [r7, #15]
 8012a02:	4618      	mov	r0, r3
 8012a04:	f000 fb2c 	bl	8013060 <USBPD_HW_GetUSPDInstance>
 8012a08:	4601      	mov	r1, r0
 8012a0a:	4a2b      	ldr	r2, [pc, #172]	; (8012ab8 <CAD_Init+0x13c>)
 8012a0c:	01a3      	lsls	r3, r4, #6
 8012a0e:	4413      	add	r3, r2
 8012a10:	6019      	str	r1, [r3, #0]

  /* initialise usbpd */
  LL_UCPD_StructInit(&settings);
 8012a12:	f107 0314 	add.w	r3, r7, #20
 8012a16:	4618      	mov	r0, r3
 8012a18:	f7fc ffec 	bl	800f9f4 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 8012a1c:	7bfb      	ldrb	r3, [r7, #15]
 8012a1e:	4a26      	ldr	r2, [pc, #152]	; (8012ab8 <CAD_Init+0x13c>)
 8012a20:	019b      	lsls	r3, r3, #6
 8012a22:	4413      	add	r3, r2
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	f107 0214 	add.w	r2, r7, #20
 8012a2a:	4611      	mov	r1, r2
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	f7fc ffb3 	bl	800f998 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 | LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
 8012a32:	7bfb      	ldrb	r3, [r7, #15]
 8012a34:	4a20      	ldr	r2, [pc, #128]	; (8012ab8 <CAD_Init+0x13c>)
 8012a36:	019b      	lsls	r3, r3, #6
 8012a38:	4413      	add	r3, r2
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8012a40:	4618      	mov	r0, r3
 8012a42:	f7ff ff33 	bl	80128ac <LL_UCPD_SetRxOrderSet>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8012a46:	7bfb      	ldrb	r3, [r7, #15]
 8012a48:	4a1b      	ldr	r2, [pc, #108]	; (8012ab8 <CAD_Init+0x13c>)
 8012a4a:	019b      	lsls	r3, r3, #6
 8012a4c:	4413      	add	r3, r2
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8012a54:	4618      	mov	r0, r3
 8012a56:	f7ff ff3e 	bl	80128d6 <LL_UCPD_SetccEnable>
#ifdef _LOW_POWER
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif

  LL_PWR_DisableUSBDeadBattery(); /* PWR->CR3 |= (1 << 14); */
 8012a5a:	f7ff ff7f 	bl	801295c <LL_PWR_DisableUSBDeadBattery>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB); /* GPIOB enable RCC->AHB2ENR |= 2; */
 8012a5e:	2002      	movs	r0, #2
 8012a60:	f7ff fe9e 	bl	80127a0 <LL_AHB2_GRP1_EnableClock>
  /* Set by default UCPD1_CC1 & UCPD1_CC2 in analog mode */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ANALOG); /* PB6 mode = GP analog => CC1 */
 8012a64:	2203      	movs	r2, #3
 8012a66:	2140      	movs	r1, #64	; 0x40
 8012a68:	4814      	ldr	r0, [pc, #80]	; (8012abc <CAD_Init+0x140>)
 8012a6a:	f7ff feb1 	bl	80127d0 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_4, LL_GPIO_MODE_ANALOG); /* PB4 mode = GP analog => CC2 */
 8012a6e:	2203      	movs	r2, #3
 8012a70:	2110      	movs	r1, #16
 8012a72:	4812      	ldr	r0, [pc, #72]	; (8012abc <CAD_Init+0x140>)
 8012a74:	f7ff feac 	bl	80127d0 <LL_GPIO_SetPinMode>

  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_NO);
 8012a78:	2200      	movs	r2, #0
 8012a7a:	2140      	movs	r1, #64	; 0x40
 8012a7c:	480f      	ldr	r0, [pc, #60]	; (8012abc <CAD_Init+0x140>)
 8012a7e:	f7ff fed6 	bl	801282e <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 8012a82:	2200      	movs	r2, #0
 8012a84:	2110      	movs	r1, #16
 8012a86:	480d      	ldr	r0, [pc, #52]	; (8012abc <CAD_Init+0x140>)
 8012a88:	f7ff fed1 	bl	801282e <LL_GPIO_SetPinPull>

  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 8012a8c:	7bfb      	ldrb	r3, [r7, #15]
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f002 ff83 	bl	801599a <BSP_USBPD_PWR_Init>

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 8012a94:	7bfb      	ldrb	r3, [r7, #15]
 8012a96:	4a08      	ldr	r2, [pc, #32]	; (8012ab8 <CAD_Init+0x13c>)
 8012a98:	019b      	lsls	r3, r3, #6
 8012a9a:	4413      	add	r3, r2
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f7ff fef4 	bl	801288c <LL_UCPD_Enable>
    USBPDM1_AssertRp(PortNum);
  }
  else
#endif /* _SRC || _DRP */
  {
    USBPDM1_AssertRd(PortNum);
 8012aa4:	7bfb      	ldrb	r3, [r7, #15]
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f001 faec 	bl	8014084 <USBPDM1_AssertRd>
  }

}
 8012aac:	bf00      	nop
 8012aae:	372c      	adds	r7, #44	; 0x2c
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd90      	pop	{r4, r7, pc}
 8012ab4:	2000224c 	.word	0x2000224c
 8012ab8:	200024a4 	.word	0x200024a4
 8012abc:	48000400 	.word	0x48000400

08012ac0 <CAD_Enter_ErrorRecovery>:
  * @brief  funtion to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b082      	sub	sp, #8
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	71fb      	strb	r3, [r7, #7]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 8012aca:	79fb      	ldrb	r3, [r7, #7]
 8012acc:	4618      	mov	r0, r3
 8012ace:	f001 fb23 	bl	8014118 <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 8012ad2:	79fb      	ldrb	r3, [r7, #7]
 8012ad4:	4a08      	ldr	r2, [pc, #32]	; (8012af8 <CAD_Enter_ErrorRecovery+0x38>)
 8012ad6:	00db      	lsls	r3, r3, #3
 8012ad8:	4413      	add	r3, r2
 8012ada:	785a      	ldrb	r2, [r3, #1]
 8012adc:	f042 0201 	orr.w	r2, r2, #1
 8012ae0:	705a      	strb	r2, [r3, #1]
  Ports[PortNum].USBPD_CAD_WakeUp();
 8012ae2:	79fb      	ldrb	r3, [r7, #7]
 8012ae4:	4a05      	ldr	r2, [pc, #20]	; (8012afc <CAD_Enter_ErrorRecovery+0x3c>)
 8012ae6:	019b      	lsls	r3, r3, #6
 8012ae8:	4413      	add	r3, r2
 8012aea:	3334      	adds	r3, #52	; 0x34
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	4798      	blx	r3
}
 8012af0:	bf00      	nop
 8012af2:	3708      	adds	r7, #8
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}
 8012af8:	2000224c 	.word	0x2000224c
 8012afc:	200024a4 	.word	0x200024a4

08012b00 <CAD_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 8012b00:	b480      	push	{r7}
 8012b02:	b083      	sub	sp, #12
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	4603      	mov	r3, r0
 8012b08:	6039      	str	r1, [r7, #0]
 8012b0a:	71fb      	strb	r3, [r7, #7]

  /* inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
  Ports[PortNum].USBPD_CAD_WakeUp();
#endif /* _SRC || _DRP */
  return 0;
 8012b0c:	2300      	movs	r3, #0
}
 8012b0e:	4618      	mov	r0, r3
 8012b10:	370c      	adds	r7, #12
 8012b12:	46bd      	mov	sp, r7
 8012b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b18:	4770      	bx	lr
	...

08012b1c <CAD_StateMachine>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b086      	sub	sp, #24
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	4603      	mov	r3, r0
 8012b24:	60b9      	str	r1, [r7, #8]
 8012b26:	607a      	str	r2, [r7, #4]
 8012b28:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8012b2a:	7bfb      	ldrb	r3, [r7, #15]
 8012b2c:	00db      	lsls	r3, r3, #3
 8012b2e:	4a74      	ldr	r2, [pc, #464]	; (8012d00 <CAD_StateMachine+0x1e4>)
 8012b30:	4413      	add	r3, r2
 8012b32:	613b      	str	r3, [r7, #16]
  uint32_t _timing = 2;
 8012b34:	2302      	movs	r3, #2
 8012b36:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 8012b38:	68bb      	ldr	r3, [r7, #8]
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 8012b3e:	7bfb      	ldrb	r3, [r7, #15]
 8012b40:	4a70      	ldr	r2, [pc, #448]	; (8012d04 <CAD_StateMachine+0x1e8>)
 8012b42:	019b      	lsls	r3, r3, #6
 8012b44:	4413      	add	r3, r2
 8012b46:	3310      	adds	r3, #16
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	f003 0310 	and.w	r3, r3, #16
 8012b50:	b2db      	uxtb	r3, r3
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d001      	beq.n	8012b5a <CAD_StateMachine+0x3e>
  {
    return _timing;
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	e0ce      	b.n	8012cf8 <CAD_StateMachine+0x1dc>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 8012b5a:	693b      	ldr	r3, [r7, #16]
 8012b5c:	785b      	ldrb	r3, [r3, #1]
 8012b5e:	f003 0301 	and.w	r3, r3, #1
 8012b62:	b2db      	uxtb	r3, r3
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d00a      	beq.n	8012b7e <CAD_StateMachine+0x62>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 8012b68:	693a      	ldr	r2, [r7, #16]
 8012b6a:	7853      	ldrb	r3, [r2, #1]
 8012b6c:	f36f 0300 	bfc	r3, #0, #1
 8012b70:	7053      	strb	r3, [r2, #1]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 8012b72:	693a      	ldr	r2, [r7, #16]
 8012b74:	8853      	ldrh	r3, [r2, #2]
 8012b76:	210c      	movs	r1, #12
 8012b78:	f361 1389 	bfi	r3, r1, #6, #4
 8012b7c:	8053      	strh	r3, [r2, #2]
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
#endif
  }

  /*Check CAD STATE*/
  switch (_handle->cstate)
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	885b      	ldrh	r3, [r3, #2]
 8012b82:	f3c3 1383 	ubfx	r3, r3, #6, #4
 8012b86:	b2db      	uxtb	r3, r3
 8012b88:	2b0d      	cmp	r3, #13
 8012b8a:	f200 80b1 	bhi.w	8012cf0 <CAD_StateMachine+0x1d4>
 8012b8e:	a201      	add	r2, pc, #4	; (adr r2, 8012b94 <CAD_StateMachine+0x78>)
 8012b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b94:	08012c05 	.word	0x08012c05
 8012b98:	08012c47 	.word	0x08012c47
 8012b9c:	08012c53 	.word	0x08012c53
 8012ba0:	08012c63 	.word	0x08012c63
 8012ba4:	08012cf1 	.word	0x08012cf1
 8012ba8:	08012cf1 	.word	0x08012cf1
 8012bac:	08012cf1 	.word	0x08012cf1
 8012bb0:	08012cf1 	.word	0x08012cf1
 8012bb4:	08012be7 	.word	0x08012be7
 8012bb8:	08012be7 	.word	0x08012be7
 8012bbc:	08012cf1 	.word	0x08012cf1
 8012bc0:	08012bcd 	.word	0x08012bcd
 8012bc4:	08012c73 	.word	0x08012c73
 8012bc8:	08012cad 	.word	0x08012cad
#if defined(_VCONN_SUPPORT)
      /* DeInitialize Vconn managment */
      (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif  
      /* DeInitialise VBUS power */
      (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8012bcc:	7bfb      	ldrb	r3, [r7, #15]
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f002 ff09 	bl	80159e6 <BSP_USBPD_PWR_VBUSDeInit>
      _timing = 0;
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SNK;
 8012bd8:	693a      	ldr	r2, [r7, #16]
 8012bda:	8853      	ldrh	r3, [r2, #2]
 8012bdc:	2109      	movs	r1, #9
 8012bde:	f361 1389 	bfi	r3, r1, #6, #4
 8012be2:	8053      	strh	r3, [r2, #2]
      break;
 8012be4:	e087      	b.n	8012cf6 <CAD_StateMachine+0x1da>
    }
    
    case USBPD_CAD_STATE_SWITCH_TO_SRC:
    case USBPD_CAD_STATE_SWITCH_TO_SNK:
    {
      LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8012be6:	7bfb      	ldrb	r3, [r7, #15]
 8012be8:	4a46      	ldr	r2, [pc, #280]	; (8012d04 <CAD_StateMachine+0x1e8>)
 8012bea:	019b      	lsls	r3, r3, #6
 8012bec:	4413      	add	r3, r2
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f7ff fe83 	bl	80128fc <LL_UCPD_RxDisable>
        }
        _handle->CAD_tToogle_start = HAL_GetTick();
      }
#endif /* _DRP */
      /* execute detach to present the new resistor according the configuration selected */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8012bf6:	693a      	ldr	r2, [r7, #16]
 8012bf8:	8853      	ldrh	r3, [r2, #2]
 8012bfa:	2101      	movs	r1, #1
 8012bfc:	f361 1389 	bfi	r3, r1, #6, #4
 8012c00:	8053      	strh	r3, [r2, #2]
      break;
 8012c02:	e078      	b.n	8012cf6 <CAD_StateMachine+0x1da>

    case USBPD_CAD_STATE_RESET:
    {
      /* on the first call of the usbpd state machine the interrupt and CC pin are enabled */
#ifndef _LOW_POWER
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 8012c04:	7bfb      	ldrb	r3, [r7, #15]
 8012c06:	4a3f      	ldr	r2, [pc, #252]	; (8012d04 <CAD_StateMachine+0x1e8>)
 8012c08:	019b      	lsls	r3, r3, #6
 8012c0a:	4413      	add	r3, r2
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f7ff fe84 	bl	801291c <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 8012c14:	7bfb      	ldrb	r3, [r7, #15]
 8012c16:	4a3b      	ldr	r2, [pc, #236]	; (8012d04 <CAD_StateMachine+0x1e8>)
 8012c18:	019b      	lsls	r3, r3, #6
 8012c1a:	4413      	add	r3, r2
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f7ff fe8c 	bl	801293c <LL_UCPD_EnableIT_TypeCEventCC1>
      if (Ports[PortNum].settings->CAD_RoleToggle == USBPD_TRUE)
      {
        _handle->CAD_tToogle_start = HAL_GetTick();
      }
#endif /* _DRP */
      if (0 == PortNum)
 8012c24:	7bfb      	ldrb	r3, [r7, #15]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d106      	bne.n	8012c38 <CAD_StateMachine+0x11c>
      {
        UCPD_INSTANCE0_ENABLEIRQ;
 8012c2a:	2104      	movs	r1, #4
 8012c2c:	203f      	movs	r0, #63	; 0x3f
 8012c2e:	f7ff fd8d 	bl	801274c <__NVIC_SetPriority>
 8012c32:	203f      	movs	r0, #63	; 0x3f
 8012c34:	f7ff fd6c 	bl	8012710 <__NVIC_EnableIRQ>
      }
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8012c38:	693a      	ldr	r2, [r7, #16]
 8012c3a:	8853      	ldrh	r3, [r2, #2]
 8012c3c:	2101      	movs	r1, #1
 8012c3e:	f361 1389 	bfi	r3, r1, #6, #4
 8012c42:	8053      	strh	r3, [r2, #2]
      break;
 8012c44:	e057      	b.n	8012cf6 <CAD_StateMachine+0x1da>
    }

    case USBPD_CAD_STATE_DETACHED:
      _timing = ManageStateDetached(PortNum);
 8012c46:	7bfb      	ldrb	r3, [r7, #15]
 8012c48:	4618      	mov	r0, r3
 8012c4a:	f000 f907 	bl	8012e5c <ManageStateDetached>
 8012c4e:	6178      	str	r0, [r7, #20]
      break;
 8012c50:	e051      	b.n	8012cf6 <CAD_StateMachine+0x1da>
#if defined(_DRP)
      _timing = ManageStateAttachedWait_DRP(PortNum, pEvent, pCCXX);
#elif defined(_SRC)
      _timing = ManageStateAttachedWait_SRC(PortNum, pEvent, pCCXX);
#elif defined(_SNK)
      _timing = ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 8012c52:	7bfb      	ldrb	r3, [r7, #15]
 8012c54:	687a      	ldr	r2, [r7, #4]
 8012c56:	68b9      	ldr	r1, [r7, #8]
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f000 f931 	bl	8012ec0 <ManageStateAttachedWait_SNK>
 8012c5e:	6178      	str	r0, [r7, #20]
#else
#error "Wrong SW definition"
#endif
      break;
 8012c60:	e049      	b.n	8012cf6 <CAD_StateMachine+0x1da>
#if defined(_DRP)
      _timing = ManageStateAttached_DRP(PortNum, pEvent, pCCXX);
#elif defined(_SRC)
      _timing = ManageStateAttached_SRC(PortNum, pEvent, pCCXX);
#elif defined(_SNK)
      _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 8012c62:	7bfb      	ldrb	r3, [r7, #15]
 8012c64:	687a      	ldr	r2, [r7, #4]
 8012c66:	68b9      	ldr	r1, [r7, #8]
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f000 f9ab 	bl	8012fc4 <ManageStateAttached_SNK>
 8012c6e:	6178      	str	r0, [r7, #20]
#else
#error "Wrong SW definition"
#endif
      break;
 8012c70:	e041      	b.n	8012cf6 <CAD_StateMachine+0x1da>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 8012c72:	7bfb      	ldrb	r3, [r7, #15]
 8012c74:	4618      	mov	r0, r3
 8012c76:	f001 fa4f 	bl	8014118 <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      *pCCXX = CCNONE;
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 8012c80:	693a      	ldr	r2, [r7, #16]
 8012c82:	7813      	ldrb	r3, [r2, #0]
 8012c84:	f36f 0301 	bfc	r3, #0, #2
 8012c88:	7013      	strb	r3, [r2, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	2201      	movs	r2, #1
 8012c8e:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8012c90:	f7f7 ff5a 	bl	800ab48 <HAL_GetTick>
 8012c94:	4602      	mov	r2, r0
 8012c96:	693b      	ldr	r3, [r7, #16]
 8012c98:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 8012c9a:	231a      	movs	r3, #26
 8012c9c:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 8012c9e:	693a      	ldr	r2, [r7, #16]
 8012ca0:	8853      	ldrh	r3, [r2, #2]
 8012ca2:	210d      	movs	r1, #13
 8012ca4:	f361 1389 	bfi	r3, r1, #6, #4
 8012ca8:	8053      	strh	r3, [r2, #2]
      break;
 8012caa:	e024      	b.n	8012cf6 <CAD_StateMachine+0x1da>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 8012cac:	f7f7 ff4c 	bl	800ab48 <HAL_GetTick>
 8012cb0:	4602      	mov	r2, r0
 8012cb2:	693b      	ldr	r3, [r7, #16]
 8012cb4:	685b      	ldr	r3, [r3, #4]
 8012cb6:	1ad3      	subs	r3, r2, r3
 8012cb8:	2b1a      	cmp	r3, #26
 8012cba:	d91b      	bls.n	8012cf4 <CAD_StateMachine+0x1d8>
        else
#endif /* _DRP */
#endif /* _DRP || _SRC */
#if defined(_DRP) || defined(_SNK)
        {
          USBPDM1_AssertRd(PortNum);
 8012cbc:	7bfb      	ldrb	r3, [r7, #15]
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f001 f9e0 	bl	8014084 <USBPDM1_AssertRd>
          Ports[PortNum].params->PE_PowerRole = USBPD_PORTPOWERROLE_SNK;
 8012cc4:	7bfb      	ldrb	r3, [r7, #15]
 8012cc6:	4a0f      	ldr	r2, [pc, #60]	; (8012d04 <CAD_StateMachine+0x1e8>)
 8012cc8:	019b      	lsls	r3, r3, #6
 8012cca:	4413      	add	r3, r2
 8012ccc:	3310      	adds	r3, #16
 8012cce:	681a      	ldr	r2, [r3, #0]
 8012cd0:	7813      	ldrb	r3, [r2, #0]
 8012cd2:	f36f 0382 	bfc	r3, #2, #1
 8012cd6:	7013      	strb	r3, [r2, #0]
        }
#endif /* _DRP || _SNK */

        /* switch to state detach */
        _handle->CAD_tDebounce_start = HAL_GetTick();
 8012cd8:	f7f7 ff36 	bl	800ab48 <HAL_GetTick>
 8012cdc:	4602      	mov	r2, r0
 8012cde:	693b      	ldr	r3, [r7, #16]
 8012ce0:	605a      	str	r2, [r3, #4]
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8012ce2:	693a      	ldr	r2, [r7, #16]
 8012ce4:	8853      	ldrh	r3, [r2, #2]
 8012ce6:	2101      	movs	r1, #1
 8012ce8:	f361 1389 	bfi	r3, r1, #6, #4
 8012cec:	8053      	strh	r3, [r2, #2]
      }
      break;
 8012cee:	e001      	b.n	8012cf4 <CAD_StateMachine+0x1d8>
    }

    default :
      break;
 8012cf0:	bf00      	nop
 8012cf2:	e000      	b.n	8012cf6 <CAD_StateMachine+0x1da>
      break;
 8012cf4:	bf00      	nop
    _handle->pstate = _handle->cstate;
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
  }
#endif /* defined(__DEBUG_CAD) && defined(_TRACE) */

  return _timing;
 8012cf6:	697b      	ldr	r3, [r7, #20]
}
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	3718      	adds	r7, #24
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd80      	pop	{r7, pc}
 8012d00:	2000224c 	.word	0x2000224c
 8012d04:	200024a4 	.word	0x200024a4

08012d08 <CAD_Check_VBus>:
  * @brief  Check if VBus is present or not
  * @param  PortNum  port
  * @retval Return 1 is VBUS is present (0 otherwise)
  */
uint8_t CAD_Check_VBus(uint8_t PortNum)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b082      	sub	sp, #8
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	4603      	mov	r3, r0
 8012d10:	71fb      	strb	r3, [r7, #7]
  return (HW_IF_PWR_GetVoltage(PortNum) > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_TRUE : USBPD_FALSE;
 8012d12:	79fb      	ldrb	r3, [r7, #7]
 8012d14:	4618      	mov	r0, r3
 8012d16:	f001 fbff 	bl	8014518 <HW_IF_PWR_GetVoltage>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8012d20:	d901      	bls.n	8012d26 <CAD_Check_VBus+0x1e>
 8012d22:	2301      	movs	r3, #1
 8012d24:	e000      	b.n	8012d28 <CAD_Check_VBus+0x20>
 8012d26:	2300      	movs	r3, #0
}
 8012d28:	4618      	mov	r0, r3
 8012d2a:	3708      	adds	r7, #8
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	bd80      	pop	{r7, pc}

08012d30 <CAD_Check_HW>:
  * @brief  Check CCx HW condition
  * @param  PortNum                     port
  * @retval none
  */
void CAD_Check_HW(uint8_t PortNum)
{
 8012d30:	b480      	push	{r7}
 8012d32:	b087      	sub	sp, #28
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	4603      	mov	r3, r0
 8012d38:	71fb      	strb	r3, [r7, #7]
  uint32_t CC1_value, CC2_value;
#if !defined(_RTOS)
  uint32_t CC1_value_temp, CC2_value_temp;
#endif /* !_RTOS */
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8012d3a:	79fb      	ldrb	r3, [r7, #7]
 8012d3c:	00db      	lsls	r3, r3, #3
 8012d3e:	4a45      	ldr	r2, [pc, #276]	; (8012e54 <CAD_Check_HW+0x124>)
 8012d40:	4413      	add	r3, r2
 8012d42:	617b      	str	r3, [r7, #20]
  _handle->cc  = CCNONE;
 8012d44:	697a      	ldr	r2, [r7, #20]
 8012d46:	7813      	ldrb	r3, [r2, #0]
 8012d48:	f36f 0301 	bfc	r3, #0, #2
 8012d4c:	7013      	strb	r3, [r2, #0]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
  
  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else  
  CC1_value = Ports[PortNum].PIN_CC1;
 8012d4e:	79fb      	ldrb	r3, [r7, #7]
 8012d50:	4a41      	ldr	r2, [pc, #260]	; (8012e58 <CAD_Check_HW+0x128>)
 8012d52:	019b      	lsls	r3, r3, #6
 8012d54:	4413      	add	r3, r2
 8012d56:	332c      	adds	r3, #44	; 0x2c
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].PIN_CC2;
 8012d5c:	79fb      	ldrb	r3, [r7, #7]
 8012d5e:	4a3e      	ldr	r2, [pc, #248]	; (8012e58 <CAD_Check_HW+0x128>)
 8012d60:	019b      	lsls	r3, r3, #6
 8012d62:	4413      	add	r3, r2
 8012d64:	3330      	adds	r3, #48	; 0x30
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	60fb      	str	r3, [r7, #12]
  {
    return;
  }
#endif /* !_RTOS */
  
  _handle->CurrentHWcondition     = HW_Detachment;
 8012d6a:	697a      	ldr	r2, [r7, #20]
 8012d6c:	7813      	ldrb	r3, [r2, #0]
 8012d6e:	f36f 1306 	bfc	r3, #4, #3
 8012d72:	7013      	strb	r3, [r2, #0]
  _handle->SNK_Source_Current_Adv = vRd_Undefined;
 8012d74:	697a      	ldr	r2, [r7, #20]
 8012d76:	7813      	ldrb	r3, [r2, #0]
 8012d78:	f36f 0383 	bfc	r3, #2, #2
 8012d7c:	7013      	strb	r3, [r2, #0]
  else /* USBPD_PORTPOWERROLE_SNK */
#endif /* _DRP */
#endif /*_DRP || _SRC */
#if defined(_DRP) || defined(_SNK)
  {
    if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 8012d7e:	693b      	ldr	r3, [r7, #16]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d02d      	beq.n	8012de0 <CAD_Check_HW+0xb0>
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d12a      	bne.n	8012de0 <CAD_Check_HW+0xb0>
    {
      _handle->CurrentHWcondition = HW_Attachment;
 8012d8a:	697a      	ldr	r2, [r7, #20]
 8012d8c:	7813      	ldrb	r3, [r2, #0]
 8012d8e:	2101      	movs	r1, #1
 8012d90:	f361 1306 	bfi	r3, r1, #4, #3
 8012d94:	7013      	strb	r3, [r2, #0]
      _handle->cc = CC1;
 8012d96:	697a      	ldr	r2, [r7, #20]
 8012d98:	7813      	ldrb	r3, [r2, #0]
 8012d9a:	2101      	movs	r1, #1
 8012d9c:	f361 0301 	bfi	r3, r1, #0, #2
 8012da0:	7013      	strb	r3, [r2, #0]
      switch (CC1_value)
 8012da2:	693b      	ldr	r3, [r7, #16]
 8012da4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012da8:	d00d      	beq.n	8012dc6 <CAD_Check_HW+0x96>
 8012daa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8012dae:	d011      	beq.n	8012dd4 <CAD_Check_HW+0xa4>
 8012db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012db4:	d000      	beq.n	8012db8 <CAD_Check_HW+0x88>
          break;
        case LL_UCPD_SNK_CC1_VRP30A:
          _handle->SNK_Source_Current_Adv = vRd_3_0A;
          break;
        default:
          break;
 8012db6:	e014      	b.n	8012de2 <CAD_Check_HW+0xb2>
          _handle->SNK_Source_Current_Adv = vRd_USB;
 8012db8:	697a      	ldr	r2, [r7, #20]
 8012dba:	7813      	ldrb	r3, [r2, #0]
 8012dbc:	2101      	movs	r1, #1
 8012dbe:	f361 0383 	bfi	r3, r1, #2, #2
 8012dc2:	7013      	strb	r3, [r2, #0]
          break;
 8012dc4:	e00d      	b.n	8012de2 <CAD_Check_HW+0xb2>
          _handle->SNK_Source_Current_Adv = vRd_1_5A;
 8012dc6:	697a      	ldr	r2, [r7, #20]
 8012dc8:	7813      	ldrb	r3, [r2, #0]
 8012dca:	2102      	movs	r1, #2
 8012dcc:	f361 0383 	bfi	r3, r1, #2, #2
 8012dd0:	7013      	strb	r3, [r2, #0]
          break;
 8012dd2:	e006      	b.n	8012de2 <CAD_Check_HW+0xb2>
          _handle->SNK_Source_Current_Adv = vRd_3_0A;
 8012dd4:	697a      	ldr	r2, [r7, #20]
 8012dd6:	7813      	ldrb	r3, [r2, #0]
 8012dd8:	f043 030c 	orr.w	r3, r3, #12
 8012ddc:	7013      	strb	r3, [r2, #0]
          break;
 8012dde:	e000      	b.n	8012de2 <CAD_Check_HW+0xb2>
      }
    }
 8012de0:	bf00      	nop
    if ((CC2_value != LL_UCPD_SNK_CC2_VOPEN) && (CC1_value == LL_UCPD_SNK_CC1_VOPEN))
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d02d      	beq.n	8012e44 <CAD_Check_HW+0x114>
 8012de8:	693b      	ldr	r3, [r7, #16]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d12a      	bne.n	8012e44 <CAD_Check_HW+0x114>
    {
      _handle->CurrentHWcondition = HW_Attachment;
 8012dee:	697a      	ldr	r2, [r7, #20]
 8012df0:	7813      	ldrb	r3, [r2, #0]
 8012df2:	2101      	movs	r1, #1
 8012df4:	f361 1306 	bfi	r3, r1, #4, #3
 8012df8:	7013      	strb	r3, [r2, #0]
      _handle->cc = CC2;
 8012dfa:	697a      	ldr	r2, [r7, #20]
 8012dfc:	7813      	ldrb	r3, [r2, #0]
 8012dfe:	2102      	movs	r1, #2
 8012e00:	f361 0301 	bfi	r3, r1, #0, #2
 8012e04:	7013      	strb	r3, [r2, #0]
      switch (CC2_value)
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8012e0c:	d00d      	beq.n	8012e2a <CAD_Check_HW+0xfa>
 8012e0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8012e12:	d011      	beq.n	8012e38 <CAD_Check_HW+0x108>
 8012e14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012e18:	d000      	beq.n	8012e1c <CAD_Check_HW+0xec>
          break;
        case LL_UCPD_SNK_CC2_VRP30A:
          _handle->SNK_Source_Current_Adv = vRd_3_0A;
          break;
        default:
          break;
 8012e1a:	e014      	b.n	8012e46 <CAD_Check_HW+0x116>
          _handle->SNK_Source_Current_Adv = vRd_USB;
 8012e1c:	697a      	ldr	r2, [r7, #20]
 8012e1e:	7813      	ldrb	r3, [r2, #0]
 8012e20:	2101      	movs	r1, #1
 8012e22:	f361 0383 	bfi	r3, r1, #2, #2
 8012e26:	7013      	strb	r3, [r2, #0]
          break;
 8012e28:	e00d      	b.n	8012e46 <CAD_Check_HW+0x116>
          _handle->SNK_Source_Current_Adv = vRd_1_5A;
 8012e2a:	697a      	ldr	r2, [r7, #20]
 8012e2c:	7813      	ldrb	r3, [r2, #0]
 8012e2e:	2102      	movs	r1, #2
 8012e30:	f361 0383 	bfi	r3, r1, #2, #2
 8012e34:	7013      	strb	r3, [r2, #0]
          break;
 8012e36:	e006      	b.n	8012e46 <CAD_Check_HW+0x116>
          _handle->SNK_Source_Current_Adv = vRd_3_0A;
 8012e38:	697a      	ldr	r2, [r7, #20]
 8012e3a:	7813      	ldrb	r3, [r2, #0]
 8012e3c:	f043 030c 	orr.w	r3, r3, #12
 8012e40:	7013      	strb	r3, [r2, #0]
          break;
 8012e42:	e000      	b.n	8012e46 <CAD_Check_HW+0x116>
      }
    }
 8012e44:	bf00      	nop
  }
#endif /*_DRP || _SNK */
}
 8012e46:	bf00      	nop
 8012e48:	371c      	adds	r7, #28
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e50:	4770      	bx	lr
 8012e52:	bf00      	nop
 8012e54:	2000224c 	.word	0x2000224c
 8012e58:	200024a4 	.word	0x200024a4

08012e5c <ManageStateDetached>:

static uint32_t ManageStateDetached(uint8_t PortNum)
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b084      	sub	sp, #16
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	4603      	mov	r3, r0
 8012e64:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8012e66:	79fb      	ldrb	r3, [r7, #7]
 8012e68:	00db      	lsls	r3, r3, #3
 8012e6a:	4a14      	ldr	r2, [pc, #80]	; (8012ebc <ManageStateDetached+0x60>)
 8012e6c:	4413      	add	r3, r2
 8012e6e:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8012e70:	2302      	movs	r3, #2
 8012e72:	60fb      	str	r3, [r7, #12]
    /* let time to internal state machine update */
    HAL_Delay(1);
  }
#endif /* _DRP || _SRC */

  CAD_Check_HW(PortNum);
 8012e74:	79fb      	ldrb	r3, [r7, #7]
 8012e76:	4618      	mov	r0, r3
 8012e78:	f7ff ff5a 	bl	8012d30 <CAD_Check_HW>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 8012e7c:	68bb      	ldr	r3, [r7, #8]
 8012e7e:	781b      	ldrb	r3, [r3, #0]
 8012e80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012e84:	b2db      	uxtb	r3, r3
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d103      	bne.n	8012e92 <ManageStateDetached+0x36>
    {
#ifdef _LOW_POWER
      /* value returned by a SRC or a SINK */
      _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#else
      _timing = CAD_INFINITE_TIME;
 8012e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e8e:	60fb      	str	r3, [r7, #12]
 8012e90:	e00e      	b.n	8012eb0 <ManageStateDetached+0x54>
    }
    else
#endif
    {
      /* Get the time of this event */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8012e92:	f7f7 fe59 	bl	800ab48 <HAL_GetTick>
 8012e96:	4602      	mov	r2, r0
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	605a      	str	r2, [r3, #4]
      _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 8012e9c:	68ba      	ldr	r2, [r7, #8]
 8012e9e:	8853      	ldrh	r3, [r2, #2]
 8012ea0:	2102      	movs	r1, #2
 8012ea2:	f361 1389 	bfi	r3, r1, #6, #4
 8012ea6:	8053      	strh	r3, [r2, #2]
      BSP_USBPD_PWR_VBUSInit(PortNum);
 8012ea8:	79fb      	ldrb	r3, [r7, #7]
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f002 fd88 	bl	80159c0 <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 8012eb0:	68fb      	ldr	r3, [r7, #12]
}
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	3710      	adds	r7, #16
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bd80      	pop	{r7, pc}
 8012eba:	bf00      	nop
 8012ebc:	2000224c 	.word	0x2000224c

08012ec0 <ManageStateAttachedWait_SNK>:
}
#endif

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b088      	sub	sp, #32
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	60b9      	str	r1, [r7, #8]
 8012eca:	607a      	str	r2, [r7, #4]
 8012ecc:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8012ece:	7bfb      	ldrb	r3, [r7, #15]
 8012ed0:	00db      	lsls	r3, r3, #3
 8012ed2:	4a3b      	ldr	r2, [pc, #236]	; (8012fc0 <ManageStateAttachedWait_SNK+0x100>)
 8012ed4:	4413      	add	r3, r2
 8012ed6:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = 2;
 8012ed8:	2302      	movs	r3, #2
 8012eda:	61fb      	str	r3, [r7, #28]
  
  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 8012edc:	f7f7 fe34 	bl	800ab48 <HAL_GetTick>
 8012ee0:	4602      	mov	r2, r0
 8012ee2:	69bb      	ldr	r3, [r7, #24]
 8012ee4:	685b      	ldr	r3, [r3, #4]
 8012ee6:	1ad3      	subs	r3, r2, r3
 8012ee8:	617b      	str	r3, [r7, #20]
  CAD_Check_HW(PortNum);
 8012eea:	7bfb      	ldrb	r3, [r7, #15]
 8012eec:	4618      	mov	r0, r3
 8012eee:	f7ff ff1f 	bl	8012d30 <CAD_Check_HW>
  if (_handle->CurrentHWcondition == HW_Attachment)
 8012ef2:	69bb      	ldr	r3, [r7, #24]
 8012ef4:	781b      	ldrb	r3, [r3, #0]
 8012ef6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8012efa:	b2db      	uxtb	r3, r3
 8012efc:	2b10      	cmp	r3, #16
 8012efe:	d12d      	bne.n	8012f5c <ManageStateAttachedWait_SNK+0x9c>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 8012f00:	697b      	ldr	r3, [r7, #20]
 8012f02:	2b64      	cmp	r3, #100	; 0x64
 8012f04:	d924      	bls.n	8012f50 <ManageStateAttachedWait_SNK+0x90>
    {
      _timing = 2;
 8012f06:	2302      	movs	r3, #2
 8012f08:	61fb      	str	r3, [r7, #28]
      if (1u == CAD_Check_VBus(PortNum)) /* Check if Vbus is on */
 8012f0a:	7bfb      	ldrb	r3, [r7, #15]
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f7ff fefb 	bl	8012d08 <CAD_Check_VBus>
 8012f12:	4603      	mov	r3, r0
 8012f14:	2b01      	cmp	r3, #1
 8012f16:	d11b      	bne.n	8012f50 <ManageStateAttachedWait_SNK+0x90>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 8012f18:	69bb      	ldr	r3, [r7, #24]
 8012f1a:	781b      	ldrb	r3, [r3, #0]
 8012f1c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8012f20:	b2db      	uxtb	r3, r3
 8012f22:	461a      	mov	r2, r3
 8012f24:	7bfb      	ldrb	r3, [r7, #15]
 8012f26:	4611      	mov	r1, r2
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f001 f945 	bl	80141b8 <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 8012f2e:	69ba      	ldr	r2, [r7, #24]
 8012f30:	8853      	ldrh	r3, [r2, #2]
 8012f32:	2103      	movs	r1, #3
 8012f34:	f361 1389 	bfi	r3, r1, #6, #4
 8012f38:	8053      	strh	r3, [r2, #2]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	2202      	movs	r2, #2
 8012f3e:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 8012f40:	69bb      	ldr	r3, [r7, #24]
 8012f42:	781b      	ldrb	r3, [r3, #0]
 8012f44:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8012f48:	b2db      	uxtb	r3, r3
 8012f4a:	461a      	mov	r2, r3
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	601a      	str	r2, [r3, #0]
        
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8012f50:	69ba      	ldr	r2, [r7, #24]
 8012f52:	7813      	ldrb	r3, [r2, #0]
 8012f54:	f36f 13c7 	bfc	r3, #7, #1
 8012f58:	7013      	strb	r3, [r2, #0]
 8012f5a:	e02c      	b.n	8012fb6 <ManageStateAttachedWait_SNK+0xf6>
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 8012f5c:	69bb      	ldr	r3, [r7, #24]
 8012f5e:	781b      	ldrb	r3, [r3, #0]
 8012f60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012f64:	b2db      	uxtb	r3, r3
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d10c      	bne.n	8012f84 <ManageStateAttachedWait_SNK+0xc4>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8012f6a:	f7f7 fded 	bl	800ab48 <HAL_GetTick>
 8012f6e:	4602      	mov	r2, r0
 8012f70:	69bb      	ldr	r3, [r7, #24]
 8012f72:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 8012f74:	69ba      	ldr	r2, [r7, #24]
 8012f76:	7813      	ldrb	r3, [r2, #0]
 8012f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f7c:	7013      	strb	r3, [r2, #0]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 8012f7e:	230c      	movs	r3, #12
 8012f80:	61fb      	str	r3, [r7, #28]
 8012f82:	e018      	b.n	8012fb6 <ManageStateAttachedWait_SNK+0xf6>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 8012f84:	f7f7 fde0 	bl	800ab48 <HAL_GetTick>
 8012f88:	4602      	mov	r2, r0
 8012f8a:	69bb      	ldr	r3, [r7, #24]
 8012f8c:	685b      	ldr	r3, [r3, #4]
 8012f8e:	1ad3      	subs	r3, r2, r3
 8012f90:	613b      	str	r3, [r7, #16]
      if ((CAD_tDebounce > CAD_TPDDEBOUCE_THRESHOLD))
 8012f92:	693b      	ldr	r3, [r7, #16]
 8012f94:	2b0c      	cmp	r3, #12
 8012f96:	d90e      	bls.n	8012fb6 <ManageStateAttachedWait_SNK+0xf6>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8012f98:	69ba      	ldr	r2, [r7, #24]
 8012f9a:	7813      	ldrb	r3, [r2, #0]
 8012f9c:	f36f 13c7 	bfc	r3, #7, #1
 8012fa0:	7013      	strb	r3, [r2, #0]
        _handle->cstate             = USBPD_CAD_STATE_SWITCH_TO_SRC;
 8012fa2:	69ba      	ldr	r2, [r7, #24]
 8012fa4:	8853      	ldrh	r3, [r2, #2]
 8012fa6:	2108      	movs	r1, #8
 8012fa8:	f361 1389 	bfi	r3, r1, #6, #4
 8012fac:	8053      	strh	r3, [r2, #2]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8012fae:	7bfb      	ldrb	r3, [r7, #15]
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f002 fd18 	bl	80159e6 <BSP_USBPD_PWR_VBUSDeInit>
      }
    }
  }
  return _timing;
 8012fb6:	69fb      	ldr	r3, [r7, #28]
}
 8012fb8:	4618      	mov	r0, r3
 8012fba:	3720      	adds	r7, #32
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bd80      	pop	{r7, pc}
 8012fc0:	2000224c 	.word	0x2000224c

08012fc4 <ManageStateAttached_SNK>:


static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b086      	sub	sp, #24
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	4603      	mov	r3, r0
 8012fcc:	60b9      	str	r1, [r7, #8]
 8012fce:	607a      	str	r2, [r7, #4]
 8012fd0:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8012fd2:	7bfb      	ldrb	r3, [r7, #15]
 8012fd4:	00db      	lsls	r3, r3, #3
 8012fd6:	4a15      	ldr	r2, [pc, #84]	; (801302c <ManageStateAttached_SNK+0x68>)
 8012fd8:	4413      	add	r3, r2
 8012fda:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8012fdc:	2302      	movs	r3, #2
 8012fde:	617b      	str	r3, [r7, #20]

  if (CAD_Check_VBus(PortNum) == 0u) /* Check if Vbus is off */
 8012fe0:	7bfb      	ldrb	r3, [r7, #15]
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f7ff fe90 	bl	8012d08 <CAD_Check_VBus>
 8012fe8:	4603      	mov	r3, r0
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d117      	bne.n	801301e <ManageStateAttached_SNK+0x5a>
  {
    HW_SignalDetachment(PortNum);
 8012fee:	7bfb      	ldrb	r3, [r7, #15]
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f001 f9cf 	bl	8014394 <HW_SignalDetachment>
    /* restart the toggle time */
#if defined(_DRP)
    _handle->CAD_tToogle_start = HAL_GetTick();
#endif /* _DRP */
    _handle->CurrentHWcondition = HW_Detachment;
 8012ff6:	693a      	ldr	r2, [r7, #16]
 8012ff8:	7813      	ldrb	r3, [r2, #0]
 8012ffa:	f36f 1306 	bfc	r3, #4, #3
 8012ffe:	7013      	strb	r3, [r2, #0]
    _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SRC;
 8013000:	693a      	ldr	r2, [r7, #16]
 8013002:	8853      	ldrh	r3, [r2, #2]
 8013004:	2108      	movs	r1, #8
 8013006:	f361 1389 	bfi	r3, r1, #6, #4
 801300a:	8053      	strh	r3, [r2, #2]
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 801300c:	68bb      	ldr	r3, [r7, #8]
 801300e:	2201      	movs	r2, #1
 8013010:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	2200      	movs	r2, #0
 8013016:	601a      	str	r2, [r3, #0]
    _timing = 0;
 8013018:	2300      	movs	r3, #0
 801301a:	617b      	str	r3, [r7, #20]
 801301c:	e001      	b.n	8013022 <ManageStateAttached_SNK+0x5e>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 801301e:	230a      	movs	r3, #10
 8013020:	617b      	str	r3, [r7, #20]
  }

  return _timing;
 8013022:	697b      	ldr	r3, [r7, #20]
}
 8013024:	4618      	mov	r0, r3
 8013026:	3718      	adds	r7, #24
 8013028:	46bd      	mov	sp, r7
 801302a:	bd80      	pop	{r7, pc}
 801302c:	2000224c 	.word	0x2000224c

08013030 <LL_AHB1_GRP1_EnableClock>:
{
 8013030:	b480      	push	{r7}
 8013032:	b085      	sub	sp, #20
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8013038:	4b08      	ldr	r3, [pc, #32]	; (801305c <LL_AHB1_GRP1_EnableClock+0x2c>)
 801303a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801303c:	4907      	ldr	r1, [pc, #28]	; (801305c <LL_AHB1_GRP1_EnableClock+0x2c>)
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	4313      	orrs	r3, r2
 8013042:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8013044:	4b05      	ldr	r3, [pc, #20]	; (801305c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8013046:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	4013      	ands	r3, r2
 801304c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801304e:	68fb      	ldr	r3, [r7, #12]
}
 8013050:	bf00      	nop
 8013052:	3714      	adds	r7, #20
 8013054:	46bd      	mov	sp, r7
 8013056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305a:	4770      	bx	lr
 801305c:	40021000 	.word	0x40021000

08013060 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 8013060:	b480      	push	{r7}
 8013062:	b083      	sub	sp, #12
 8013064:	af00      	add	r7, sp, #0
 8013066:	4603      	mov	r3, r0
 8013068:	71fb      	strb	r3, [r7, #7]
  return UCPD_INSTANCE0;
 801306a:	4b03      	ldr	r3, [pc, #12]	; (8013078 <USBPD_HW_GetUSPDInstance+0x18>)
}
 801306c:	4618      	mov	r0, r3
 801306e:	370c      	adds	r7, #12
 8013070:	46bd      	mov	sp, r7
 8013072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013076:	4770      	bx	lr
 8013078:	4000a000 	.word	0x4000a000

0801307c <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b08e      	sub	sp, #56	; 0x38
 8013080:	af00      	add	r7, sp, #0
 8013082:	4603      	mov	r3, r0
 8013084:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8013086:	f107 030c 	add.w	r3, r7, #12
 801308a:	4618      	mov	r0, r3
 801308c:	f7fc f860 	bl	800f150 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8013090:	2300      	movs	r3, #0
 8013092:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8013094:	2300      	movs	r3, #0
 8013096:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8013098:	2300      	movs	r3, #0
 801309a:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 801309c:	2380      	movs	r3, #128	; 0x80
 801309e:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 80130a0:	2300      	movs	r3, #0
 80130a2:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 80130a4:	2300      	movs	r3, #0
 80130a6:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStruct.NbData = 0;
 80130a8:	2300      	movs	r3, #0
 80130aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 80130ac:	2300      	movs	r3, #0
 80130ae:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 80130b0:	2300      	movs	r3, #0
 80130b2:	60fb      	str	r3, [r7, #12]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 80130b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80130b8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 80130ba:	2001      	movs	r0, #1
 80130bc:	f7ff ffb8 	bl	8013030 <LL_AHB1_GRP1_EnableClock>

  /* Initialise the DMA */
  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 80130c0:	2372      	movs	r3, #114	; 0x72
 80130c2:	633b      	str	r3, [r7, #48]	; 0x30

  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 80130c4:	f107 030c 	add.w	r3, r7, #12
 80130c8:	461a      	mov	r2, r3
 80130ca:	2100      	movs	r1, #0
 80130cc:	4803      	ldr	r0, [pc, #12]	; (80130dc <USBPD_HW_Init_DMARxInstance+0x60>)
 80130ce:	f7fb ffff 	bl	800f0d0 <LL_DMA_Init>

  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 80130d2:	4b03      	ldr	r3, [pc, #12]	; (80130e0 <USBPD_HW_Init_DMARxInstance+0x64>)
}
 80130d4:	4618      	mov	r0, r3
 80130d6:	3738      	adds	r7, #56	; 0x38
 80130d8:	46bd      	mov	sp, r7
 80130da:	bd80      	pop	{r7, pc}
 80130dc:	40020000 	.word	0x40020000
 80130e0:	40020008 	.word	0x40020008

080130e4 <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 80130e4:	b480      	push	{r7}
 80130e6:	b083      	sub	sp, #12
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	4603      	mov	r3, r0
 80130ec:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 80130ee:	bf00      	nop
 80130f0:	370c      	adds	r7, #12
 80130f2:	46bd      	mov	sp, r7
 80130f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f8:	4770      	bx	lr
	...

080130fc <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b08e      	sub	sp, #56	; 0x38
 8013100:	af00      	add	r7, sp, #0
 8013102:	4603      	mov	r3, r0
 8013104:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8013106:	f107 030c 	add.w	r3, r7, #12
 801310a:	4618      	mov	r0, r3
 801310c:	f7fc f820 	bl	800f150 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 8013110:	2310      	movs	r3, #16
 8013112:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8013114:	2300      	movs	r3, #0
 8013116:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8013118:	2300      	movs	r3, #0
 801311a:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 801311c:	2380      	movs	r3, #128	; 0x80
 801311e:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8013120:	2300      	movs	r3, #0
 8013122:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8013124:	2300      	movs	r3, #0
 8013126:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStruct.NbData = 0;
 8013128:	2300      	movs	r3, #0
 801312a:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 801312c:	2300      	movs	r3, #0
 801312e:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8013130:	2300      	movs	r3, #0
 8013132:	60fb      	str	r3, [r7, #12]

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 8013134:	2001      	movs	r0, #1
 8013136:	f7ff ff7b 	bl	8013030 <LL_AHB1_GRP1_EnableClock>

  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 801313a:	2373      	movs	r3, #115	; 0x73
 801313c:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 801313e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013142:	637b      	str	r3, [r7, #52]	; 0x34
  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 8013144:	f107 030c 	add.w	r3, r7, #12
 8013148:	461a      	mov	r2, r3
 801314a:	2101      	movs	r1, #1
 801314c:	4803      	ldr	r0, [pc, #12]	; (801315c <USBPD_HW_Init_DMATxInstance+0x60>)
 801314e:	f7fb ffbf 	bl	800f0d0 <LL_DMA_Init>

  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 8013152:	4b03      	ldr	r3, [pc, #12]	; (8013160 <USBPD_HW_Init_DMATxInstance+0x64>)
}
 8013154:	4618      	mov	r0, r3
 8013156:	3738      	adds	r7, #56	; 0x38
 8013158:	46bd      	mov	sp, r7
 801315a:	bd80      	pop	{r7, pc}
 801315c:	40020000 	.word	0x40020000
 8013160:	4002001c 	.word	0x4002001c

08013164 <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 8013164:	b480      	push	{r7}
 8013166:	b083      	sub	sp, #12
 8013168:	af00      	add	r7, sp, #0
 801316a:	4603      	mov	r3, r0
 801316c:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 801316e:	bf00      	nop
 8013170:	370c      	adds	r7, #12
 8013172:	46bd      	mov	sp, r7
 8013174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013178:	4770      	bx	lr

0801317a <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 801317a:	b480      	push	{r7}
 801317c:	b083      	sub	sp, #12
 801317e:	af00      	add	r7, sp, #0
 8013180:	4603      	mov	r3, r0
 8013182:	460a      	mov	r2, r1
 8013184:	71fb      	strb	r3, [r7, #7]
 8013186:	4613      	mov	r3, r2
 8013188:	71bb      	strb	r3, [r7, #6]
  else
  {
    /* FRS_TX2 PB0 (CC2) */
    UCPDFRS_INSTANCE0_FRSCC2;
  }
}
 801318a:	bf00      	nop
 801318c:	370c      	adds	r7, #12
 801318e:	46bd      	mov	sp, r7
 8013190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013194:	4770      	bx	lr

08013196 <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8013196:	b480      	push	{r7}
 8013198:	b083      	sub	sp, #12
 801319a:	af00      	add	r7, sp, #0
 801319c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	699b      	ldr	r3, [r3, #24]
 80131a2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	619a      	str	r2, [r3, #24]
}
 80131aa:	bf00      	nop
 80131ac:	370c      	adds	r7, #12
 80131ae:	46bd      	mov	sp, r7
 80131b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b4:	4770      	bx	lr

080131b6 <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 80131b6:	b480      	push	{r7}
 80131b8:	b083      	sub	sp, #12
 80131ba:	af00      	add	r7, sp, #0
 80131bc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	699b      	ldr	r3, [r3, #24]
 80131c2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	619a      	str	r2, [r3, #24]
}
 80131ca:	bf00      	nop
 80131cc:	370c      	adds	r7, #12
 80131ce:	46bd      	mov	sp, r7
 80131d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d4:	4770      	bx	lr

080131d6 <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 80131d6:	b480      	push	{r7}
 80131d8:	b083      	sub	sp, #12
 80131da:	af00      	add	r7, sp, #0
 80131dc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	699b      	ldr	r3, [r3, #24]
 80131e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	619a      	str	r2, [r3, #24]
}
 80131ea:	bf00      	nop
 80131ec:	370c      	adds	r7, #12
 80131ee:	46bd      	mov	sp, r7
 80131f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f4:	4770      	bx	lr

080131f6 <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 80131f6:	b480      	push	{r7}
 80131f8:	b083      	sub	sp, #12
 80131fa:	af00      	add	r7, sp, #0
 80131fc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	699b      	ldr	r3, [r3, #24]
 8013202:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	619a      	str	r2, [r3, #24]
}
 801320a:	bf00      	nop
 801320c:	370c      	adds	r7, #12
 801320e:	46bd      	mov	sp, r7
 8013210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013214:	4770      	bx	lr

08013216 <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 8013216:	b480      	push	{r7}
 8013218:	b083      	sub	sp, #12
 801321a:	af00      	add	r7, sp, #0
 801321c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	699b      	ldr	r3, [r3, #24]
 8013222:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	619a      	str	r2, [r3, #24]
}
 801322a:	bf00      	nop
 801322c:	370c      	adds	r7, #12
 801322e:	46bd      	mov	sp, r7
 8013230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013234:	4770      	bx	lr

08013236 <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 8013236:	b480      	push	{r7}
 8013238:	b083      	sub	sp, #12
 801323a:	af00      	add	r7, sp, #0
 801323c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	699b      	ldr	r3, [r3, #24]
 8013242:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	619a      	str	r2, [r3, #24]
}
 801324a:	bf00      	nop
 801324c:	370c      	adds	r7, #12
 801324e:	46bd      	mov	sp, r7
 8013250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013254:	4770      	bx	lr

08013256 <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 8013256:	b480      	push	{r7}
 8013258:	b083      	sub	sp, #12
 801325a:	af00      	add	r7, sp, #0
 801325c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	699b      	ldr	r3, [r3, #24]
 8013262:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	619a      	str	r2, [r3, #24]
}
 801326a:	bf00      	nop
 801326c:	370c      	adds	r7, #12
 801326e:	46bd      	mov	sp, r7
 8013270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013274:	4770      	bx	lr

08013276 <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 8013276:	b480      	push	{r7}
 8013278:	b083      	sub	sp, #12
 801327a:	af00      	add	r7, sp, #0
 801327c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	699b      	ldr	r3, [r3, #24]
 8013282:	f043 0220 	orr.w	r2, r3, #32
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	619a      	str	r2, [r3, #24]
}
 801328a:	bf00      	nop
 801328c:	370c      	adds	r7, #12
 801328e:	46bd      	mov	sp, r7
 8013290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013294:	4770      	bx	lr

08013296 <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 8013296:	b480      	push	{r7}
 8013298:	b083      	sub	sp, #12
 801329a:	af00      	add	r7, sp, #0
 801329c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	699b      	ldr	r3, [r3, #24]
 80132a2:	f043 0210 	orr.w	r2, r3, #16
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	619a      	str	r2, [r3, #24]
}
 80132aa:	bf00      	nop
 80132ac:	370c      	adds	r7, #12
 80132ae:	46bd      	mov	sp, r7
 80132b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b4:	4770      	bx	lr

080132b6 <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 80132b6:	b480      	push	{r7}
 80132b8:	b083      	sub	sp, #12
 80132ba:	af00      	add	r7, sp, #0
 80132bc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	699b      	ldr	r3, [r3, #24]
 80132c2:	f043 0208 	orr.w	r2, r3, #8
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	619a      	str	r2, [r3, #24]
}
 80132ca:	bf00      	nop
 80132cc:	370c      	adds	r7, #12
 80132ce:	46bd      	mov	sp, r7
 80132d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d4:	4770      	bx	lr

080132d6 <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 80132d6:	b480      	push	{r7}
 80132d8:	b083      	sub	sp, #12
 80132da:	af00      	add	r7, sp, #0
 80132dc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	699b      	ldr	r3, [r3, #24]
 80132e2:	f043 0204 	orr.w	r2, r3, #4
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	619a      	str	r2, [r3, #24]
}
 80132ea:	bf00      	nop
 80132ec:	370c      	adds	r7, #12
 80132ee:	46bd      	mov	sp, r7
 80132f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f4:	4770      	bx	lr

080132f6 <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 80132f6:	b480      	push	{r7}
 80132f8:	b083      	sub	sp, #12
 80132fa:	af00      	add	r7, sp, #0
 80132fc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	699b      	ldr	r3, [r3, #24]
 8013302:	f043 0202 	orr.w	r2, r3, #2
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	619a      	str	r2, [r3, #24]
}
 801330a:	bf00      	nop
 801330c:	370c      	adds	r7, #12
 801330e:	46bd      	mov	sp, r7
 8013310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013314:	4770      	bx	lr

08013316 <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 8013316:	b580      	push	{r7, lr}
 8013318:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 801331a:	2000      	movs	r0, #0
 801331c:	f000 f802 	bl	8013324 <PORTx_IRQHandler>
}
 8013320:	bf00      	nop
 8013322:	bd80      	pop	{r7, pc}

08013324 <PORTx_IRQHandler>:
{
  PORTx_IRQHandler(USBPD_PORT_1);
}

void PORTx_IRQHandler(uint8_t PortNum)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b086      	sub	sp, #24
 8013328:	af00      	add	r7, sp, #0
 801332a:	4603      	mov	r3, r0
 801332c:	71fb      	strb	r3, [r7, #7]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 801332e:	79fb      	ldrb	r3, [r7, #7]
 8013330:	4a97      	ldr	r2, [pc, #604]	; (8013590 <PORTx_IRQHandler+0x26c>)
 8013332:	019b      	lsls	r3, r3, #6
 8013334:	4413      	add	r3, r2
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	617b      	str	r3, [r7, #20]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 801333a:	697b      	ldr	r3, [r7, #20]
 801333c:	695b      	ldr	r3, [r3, #20]
 801333e:	613b      	str	r3, [r7, #16]
  static uint8_t ovrflag = 0;

  if ((hucpd->IMR & _interrupt) != 0u)
 8013340:	697b      	ldr	r3, [r7, #20]
 8013342:	691a      	ldr	r2, [r3, #16]
 8013344:	693b      	ldr	r3, [r7, #16]
 8013346:	4013      	ands	r3, r2
 8013348:	2b00      	cmp	r3, #0
 801334a:	f000 8149 	beq.w	80135e0 <PORTx_IRQHandler+0x2bc>
  {
    /* TXIS no need to enable it all the transfert are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 801334e:	693b      	ldr	r3, [r7, #16]
 8013350:	f003 0302 	and.w	r3, r3, #2
 8013354:	2b00      	cmp	r3, #0
 8013356:	d013      	beq.n	8013380 <PORTx_IRQHandler+0x5c>
    {
      /* the message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 8013358:	6978      	ldr	r0, [r7, #20]
 801335a:	f7ff ffcc 	bl	80132f6 <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 801335e:	79fb      	ldrb	r3, [r7, #7]
 8013360:	4a8b      	ldr	r2, [pc, #556]	; (8013590 <PORTx_IRQHandler+0x26c>)
 8013362:	019b      	lsls	r3, r3, #6
 8013364:	4413      	add	r3, r2
 8013366:	3304      	adds	r3, #4
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	681a      	ldr	r2, [r3, #0]
 801336c:	79fb      	ldrb	r3, [r7, #7]
 801336e:	4988      	ldr	r1, [pc, #544]	; (8013590 <PORTx_IRQHandler+0x26c>)
 8013370:	019b      	lsls	r3, r3, #6
 8013372:	440b      	add	r3, r1
 8013374:	3304      	adds	r3, #4
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	f022 0201 	bic.w	r2, r2, #1
 801337c:	601a      	str	r2, [r3, #0]
      return;
 801337e:	e12f      	b.n	80135e0 <PORTx_IRQHandler+0x2bc>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 8013380:	693b      	ldr	r3, [r7, #16]
 8013382:	f003 0304 	and.w	r3, r3, #4
 8013386:	2b00      	cmp	r3, #0
 8013388:	d01c      	beq.n	80133c4 <PORTx_IRQHandler+0xa0>
    {
      /* Message has been fully transfered */
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum);
 801338a:	79fb      	ldrb	r3, [r7, #7]
 801338c:	4a80      	ldr	r2, [pc, #512]	; (8013590 <PORTx_IRQHandler+0x26c>)
 801338e:	019b      	lsls	r3, r3, #6
 8013390:	4413      	add	r3, r2
 8013392:	3314      	adds	r3, #20
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	79fa      	ldrb	r2, [r7, #7]
 8013398:	4610      	mov	r0, r2
 801339a:	4798      	blx	r3
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 801339c:	79fb      	ldrb	r3, [r7, #7]
 801339e:	4a7c      	ldr	r2, [pc, #496]	; (8013590 <PORTx_IRQHandler+0x26c>)
 80133a0:	019b      	lsls	r3, r3, #6
 80133a2:	4413      	add	r3, r2
 80133a4:	3304      	adds	r3, #4
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	681a      	ldr	r2, [r3, #0]
 80133aa:	79fb      	ldrb	r3, [r7, #7]
 80133ac:	4978      	ldr	r1, [pc, #480]	; (8013590 <PORTx_IRQHandler+0x26c>)
 80133ae:	019b      	lsls	r3, r3, #6
 80133b0:	440b      	add	r3, r1
 80133b2:	3304      	adds	r3, #4
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	f022 0201 	bic.w	r2, r2, #1
 80133ba:	601a      	str	r2, [r3, #0]
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 80133bc:	6978      	ldr	r0, [r7, #20]
 80133be:	f7ff ff8a 	bl	80132d6 <LL_UCPD_ClearFlag_TxMSGSENT>

#if defined(_LOW_POWER)       
      LPM_SetStopMode((LPM_Id_t)(LPM_PE_0 + PortNum), LPM_Enable);
#endif      
      return;
 80133c2:	e10d      	b.n	80135e0 <PORTx_IRQHandler+0x2bc>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 80133c4:	693b      	ldr	r3, [r7, #16]
 80133c6:	f003 0308 	and.w	r3, r3, #8
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d013      	beq.n	80133f6 <PORTx_IRQHandler+0xd2>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 80133ce:	6978      	ldr	r0, [r7, #20]
 80133d0:	f7ff ff71 	bl	80132b6 <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 80133d4:	79fb      	ldrb	r3, [r7, #7]
 80133d6:	4a6e      	ldr	r2, [pc, #440]	; (8013590 <PORTx_IRQHandler+0x26c>)
 80133d8:	019b      	lsls	r3, r3, #6
 80133da:	4413      	add	r3, r2
 80133dc:	3304      	adds	r3, #4
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	681a      	ldr	r2, [r3, #0]
 80133e2:	79fb      	ldrb	r3, [r7, #7]
 80133e4:	496a      	ldr	r1, [pc, #424]	; (8013590 <PORTx_IRQHandler+0x26c>)
 80133e6:	019b      	lsls	r3, r3, #6
 80133e8:	440b      	add	r3, r1
 80133ea:	3304      	adds	r3, #4
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	f022 0201 	bic.w	r2, r2, #1
 80133f2:	601a      	str	r2, [r3, #0]
      return;
 80133f4:	e0f4      	b.n	80135e0 <PORTx_IRQHandler+0x2bc>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 80133f6:	693b      	ldr	r3, [r7, #16]
 80133f8:	f003 0310 	and.w	r3, r3, #16
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d003      	beq.n	8013408 <PORTx_IRQHandler+0xe4>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 8013400:	6978      	ldr	r0, [r7, #20]
 8013402:	f7ff ff48 	bl	8013296 <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 8013406:	e0eb      	b.n	80135e0 <PORTx_IRQHandler+0x2bc>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 8013408:	693b      	ldr	r3, [r7, #16]
 801340a:	f003 0320 	and.w	r3, r3, #32
 801340e:	2b00      	cmp	r3, #0
 8013410:	d00d      	beq.n	801342e <PORTx_IRQHandler+0x10a>
    {
      /* Mhum, the stack is not expected to get this answer */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 8013412:	6978      	ldr	r0, [r7, #20]
 8013414:	f7ff ff2f 	bl	8013276 <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8013418:	79fb      	ldrb	r3, [r7, #7]
 801341a:	4a5d      	ldr	r2, [pc, #372]	; (8013590 <PORTx_IRQHandler+0x26c>)
 801341c:	019b      	lsls	r3, r3, #6
 801341e:	4413      	add	r3, r2
 8013420:	3328      	adds	r3, #40	; 0x28
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	79fa      	ldrb	r2, [r7, #7]
 8013426:	2105      	movs	r1, #5
 8013428:	4610      	mov	r0, r2
 801342a:	4798      	blx	r3
      return;
 801342c:	e0d8      	b.n	80135e0 <PORTx_IRQHandler+0x2bc>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 801342e:	693b      	ldr	r3, [r7, #16]
 8013430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013434:	2b00      	cmp	r3, #0
 8013436:	d003      	beq.n	8013440 <PORTx_IRQHandler+0x11c>
    {
      /* nothing to do the port partner check message integrity with CRC so PRL will repeat the sent
         can be used for debug purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 8013438:	6978      	ldr	r0, [r7, #20]
 801343a:	f7ff ff0c 	bl	8013256 <LL_UCPD_ClearFlag_TxUND>
      return;
 801343e:	e0cf      	b.n	80135e0 <PORTx_IRQHandler+0x2bc>
    }

    /* RXNE : not needeed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 8013440:	693b      	ldr	r3, [r7, #16]
 8013442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013446:	2b00      	cmp	r3, #0
 8013448:	d003      	beq.n	8013452 <PORTx_IRQHandler+0x12e>
    {
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 801344a:	6978      	ldr	r0, [r7, #20]
 801344c:	f7ff fef3 	bl	8013236 <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      LPM_SetStopMode((LPM_Id_t)(LPM_PE_0 + PortNum), LPM_Disable);
#endif
      return;
 8013450:	e0c6      	b.n	80135e0 <PORTx_IRQHandler+0x2bc>
    }

    /* check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 8013452:	693b      	ldr	r3, [r7, #16]
 8013454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013458:	2b00      	cmp	r3, #0
 801345a:	d00c      	beq.n	8013476 <PORTx_IRQHandler+0x152>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum);
 801345c:	79fb      	ldrb	r3, [r7, #7]
 801345e:	4a4c      	ldr	r2, [pc, #304]	; (8013590 <PORTx_IRQHandler+0x26c>)
 8013460:	019b      	lsls	r3, r3, #6
 8013462:	4413      	add	r3, r2
 8013464:	3320      	adds	r3, #32
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	79fa      	ldrb	r2, [r7, #7]
 801346a:	4610      	mov	r0, r2
 801346c:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 801346e:	6978      	ldr	r0, [r7, #20]
 8013470:	f7ff fed1 	bl	8013216 <LL_UCPD_ClearFlag_RxHRST>
      return;
 8013474:	e0b4      	b.n	80135e0 <PORTx_IRQHandler+0x2bc>
    }

    /* check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 8013476:	693b      	ldr	r3, [r7, #16]
 8013478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801347c:	2b00      	cmp	r3, #0
 801347e:	d006      	beq.n	801348e <PORTx_IRQHandler+0x16a>
    {
      /* nothing to do the message will be discarded and the port partner retry the send */
      ovrflag = 1;
 8013480:	4b44      	ldr	r3, [pc, #272]	; (8013594 <PORTx_IRQHandler+0x270>)
 8013482:	2201      	movs	r2, #1
 8013484:	701a      	strb	r2, [r3, #0]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 8013486:	6978      	ldr	r0, [r7, #20]
 8013488:	f7ff feb5 	bl	80131f6 <LL_UCPD_ClearFlag_RxOvr>
      return;
 801348c:	e0a8      	b.n	80135e0 <PORTx_IRQHandler+0x2bc>
    }

    /* check RXMSGEND an Rx message has been recieved */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 801348e:	693b      	ldr	r3, [r7, #16]
 8013490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013494:	2b00      	cmp	r3, #0
 8013496:	d056      	beq.n	8013546 <PORTx_IRQHandler+0x222>
    {
      /* for DMA mode add a control to check if the number of data recived is corresponding with the number of
         data receive by USBPD */
      uint16_t _datasize = (uint16_t)hucpd->RX_PAYSZ;
 8013498:	697b      	ldr	r3, [r7, #20]
 801349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801349c:	81fb      	strh	r3, [r7, #14]
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 801349e:	6978      	ldr	r0, [r7, #20]
 80134a0:	f7ff fe99 	bl	80131d6 <LL_UCPD_ClearFlag_RxMsgEnd>

      /* disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 80134a4:	79fb      	ldrb	r3, [r7, #7]
 80134a6:	4a3a      	ldr	r2, [pc, #232]	; (8013590 <PORTx_IRQHandler+0x26c>)
 80134a8:	019b      	lsls	r3, r3, #6
 80134aa:	4413      	add	r3, r2
 80134ac:	3308      	adds	r3, #8
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	681a      	ldr	r2, [r3, #0]
 80134b2:	79fb      	ldrb	r3, [r7, #7]
 80134b4:	4936      	ldr	r1, [pc, #216]	; (8013590 <PORTx_IRQHandler+0x26c>)
 80134b6:	019b      	lsls	r3, r3, #6
 80134b8:	440b      	add	r3, r1
 80134ba:	3308      	adds	r3, #8
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	f022 0201 	bic.w	r2, r2, #1
 80134c2:	601a      	str	r2, [r3, #0]

#if defined(_LOW_POWER)       
      LPM_SetStopMode((LPM_Id_t)(LPM_PE_0 + PortNum), LPM_Enable);
#endif
      
      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag == 0u))
 80134c4:	693b      	ldr	r3, [r7, #16]
 80134c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d110      	bne.n	80134f0 <PORTx_IRQHandler+0x1cc>
 80134ce:	4b31      	ldr	r3, [pc, #196]	; (8013594 <PORTx_IRQHandler+0x270>)
 80134d0:	781b      	ldrb	r3, [r3, #0]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d10c      	bne.n	80134f0 <PORTx_IRQHandler+0x1cc>
      {
        /* Rx message has been recieved without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET, _datasize);
 80134d6:	79fb      	ldrb	r3, [r7, #7]
 80134d8:	4a2d      	ldr	r2, [pc, #180]	; (8013590 <PORTx_IRQHandler+0x26c>)
 80134da:	019b      	lsls	r3, r3, #6
 80134dc:	4413      	add	r3, r2
 80134de:	3324      	adds	r3, #36	; 0x24
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	697a      	ldr	r2, [r7, #20]
 80134e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80134e6:	f002 0107 	and.w	r1, r2, #7
 80134ea:	89fa      	ldrh	r2, [r7, #14]
 80134ec:	79f8      	ldrb	r0, [r7, #7]
 80134ee:	4798      	blx	r3
      }
      ovrflag = 0;
 80134f0:	4b28      	ldr	r3, [pc, #160]	; (8013594 <PORTx_IRQHandler+0x270>)
 80134f2:	2200      	movs	r2, #0
 80134f4:	701a      	strb	r2, [r3, #0]

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 80134f6:	79fb      	ldrb	r3, [r7, #7]
 80134f8:	4a25      	ldr	r2, [pc, #148]	; (8013590 <PORTx_IRQHandler+0x26c>)
 80134fa:	019b      	lsls	r3, r3, #6
 80134fc:	4413      	add	r3, r2
 80134fe:	3338      	adds	r3, #56	; 0x38
 8013500:	6819      	ldr	r1, [r3, #0]
 8013502:	79fb      	ldrb	r3, [r7, #7]
 8013504:	4a22      	ldr	r2, [pc, #136]	; (8013590 <PORTx_IRQHandler+0x26c>)
 8013506:	019b      	lsls	r3, r3, #6
 8013508:	4413      	add	r3, r2
 801350a:	3308      	adds	r3, #8
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	460a      	mov	r2, r1
 8013510:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 8013512:	79fb      	ldrb	r3, [r7, #7]
 8013514:	4a1e      	ldr	r2, [pc, #120]	; (8013590 <PORTx_IRQHandler+0x26c>)
 8013516:	019b      	lsls	r3, r3, #6
 8013518:	4413      	add	r3, r2
 801351a:	3308      	adds	r3, #8
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	f44f 7284 	mov.w	r2, #264	; 0x108
 8013522:	605a      	str	r2, [r3, #4]

      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8013524:	79fb      	ldrb	r3, [r7, #7]
 8013526:	4a1a      	ldr	r2, [pc, #104]	; (8013590 <PORTx_IRQHandler+0x26c>)
 8013528:	019b      	lsls	r3, r3, #6
 801352a:	4413      	add	r3, r2
 801352c:	3308      	adds	r3, #8
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	681a      	ldr	r2, [r3, #0]
 8013532:	79fb      	ldrb	r3, [r7, #7]
 8013534:	4916      	ldr	r1, [pc, #88]	; (8013590 <PORTx_IRQHandler+0x26c>)
 8013536:	019b      	lsls	r3, r3, #6
 8013538:	440b      	add	r3, r1
 801353a:	3308      	adds	r3, #8
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	f042 0201 	orr.w	r2, r2, #1
 8013542:	601a      	str	r2, [r3, #0]
      return;
 8013544:	e04c      	b.n	80135e0 <PORTx_IRQHandler+0x2bc>
    }

    /* check TYPECEVT1IE/TYPECEVT1IE */
    if (UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 8013546:	693b      	ldr	r3, [r7, #16]
 8013548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801354c:	2b00      	cmp	r3, #0
 801354e:	d023      	beq.n	8013598 <PORTx_IRQHandler+0x274>
    {
      Ports[PortNum].PIN_CC1 = hucpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 8013550:	697b      	ldr	r3, [r7, #20]
 8013552:	695a      	ldr	r2, [r3, #20]
 8013554:	79fb      	ldrb	r3, [r7, #7]
 8013556:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 801355a:	490d      	ldr	r1, [pc, #52]	; (8013590 <PORTx_IRQHandler+0x26c>)
 801355c:	019b      	lsls	r3, r3, #6
 801355e:	440b      	add	r3, r1
 8013560:	332c      	adds	r3, #44	; 0x2c
 8013562:	601a      	str	r2, [r3, #0]
      Ports[PortNum].PIN_CC2 = hucpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 8013564:	697b      	ldr	r3, [r7, #20]
 8013566:	695a      	ldr	r2, [r3, #20]
 8013568:	79fb      	ldrb	r3, [r7, #7]
 801356a:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 801356e:	4908      	ldr	r1, [pc, #32]	; (8013590 <PORTx_IRQHandler+0x26c>)
 8013570:	019b      	lsls	r3, r3, #6
 8013572:	440b      	add	r3, r1
 8013574:	3330      	adds	r3, #48	; 0x30
 8013576:	601a      	str	r2, [r3, #0]
      /* clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 8013578:	6978      	ldr	r0, [r7, #20]
 801357a:	f7ff fe1c 	bl	80131b6 <LL_UCPD_ClearFlag_TypeCEventCC1>
      Ports[PortNum].USBPD_CAD_WakeUp();
 801357e:	79fb      	ldrb	r3, [r7, #7]
 8013580:	4a03      	ldr	r2, [pc, #12]	; (8013590 <PORTx_IRQHandler+0x26c>)
 8013582:	019b      	lsls	r3, r3, #6
 8013584:	4413      	add	r3, r2
 8013586:	3334      	adds	r3, #52	; 0x34
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 801358c:	e028      	b.n	80135e0 <PORTx_IRQHandler+0x2bc>
 801358e:	bf00      	nop
 8013590:	200024a4 	.word	0x200024a4
 8013594:	20002254 	.word	0x20002254
    }

    /* check TYPECEVT1IE/TYPECEVT1IE */
    if (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2))
 8013598:	693b      	ldr	r3, [r7, #16]
 801359a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d01e      	beq.n	80135e0 <PORTx_IRQHandler+0x2bc>
    {
      Ports[PortNum].PIN_CC1 = hucpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	695a      	ldr	r2, [r3, #20]
 80135a6:	79fb      	ldrb	r3, [r7, #7]
 80135a8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80135ac:	490e      	ldr	r1, [pc, #56]	; (80135e8 <PORTx_IRQHandler+0x2c4>)
 80135ae:	019b      	lsls	r3, r3, #6
 80135b0:	440b      	add	r3, r1
 80135b2:	332c      	adds	r3, #44	; 0x2c
 80135b4:	601a      	str	r2, [r3, #0]
      Ports[PortNum].PIN_CC2 = hucpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 80135b6:	697b      	ldr	r3, [r7, #20]
 80135b8:	695a      	ldr	r2, [r3, #20]
 80135ba:	79fb      	ldrb	r3, [r7, #7]
 80135bc:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80135c0:	4909      	ldr	r1, [pc, #36]	; (80135e8 <PORTx_IRQHandler+0x2c4>)
 80135c2:	019b      	lsls	r3, r3, #6
 80135c4:	440b      	add	r3, r1
 80135c6:	3330      	adds	r3, #48	; 0x30
 80135c8:	601a      	str	r2, [r3, #0]
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 80135ca:	6978      	ldr	r0, [r7, #20]
 80135cc:	f7ff fde3 	bl	8013196 <LL_UCPD_ClearFlag_TypeCEventCC2>
      /* Wakeup CAD to check the detection event */
      Ports[PortNum].USBPD_CAD_WakeUp();
 80135d0:	79fb      	ldrb	r3, [r7, #7]
 80135d2:	4a05      	ldr	r2, [pc, #20]	; (80135e8 <PORTx_IRQHandler+0x2c4>)
 80135d4:	019b      	lsls	r3, r3, #6
 80135d6:	4413      	add	r3, r2
 80135d8:	3334      	adds	r3, #52	; 0x34
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	4798      	blx	r3
      return;
 80135de:	bf00      	nop
    if (_interrupt !=  UCPD_SR_FRSEVT)
    {
      /* not yet handled */
    }
  }
}
 80135e0:	3718      	adds	r7, #24
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}
 80135e6:	bf00      	nop
 80135e8:	200024a4 	.word	0x200024a4

080135ec <USBPD_PHY_Init>:
  * @param  PowerRole     Power Role of the board.
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer, USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 80135ec:	b480      	push	{r7}
 80135ee:	b085      	sub	sp, #20
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	60b9      	str	r1, [r7, #8]
 80135f4:	607a      	str	r2, [r7, #4]
 80135f6:	603b      	str	r3, [r7, #0]
 80135f8:	4603      	mov	r3, r0
 80135fa:	73fb      	strb	r3, [r7, #15]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = PHY_TxCompleted;
 80135fc:	7bfb      	ldrb	r3, [r7, #15]
 80135fe:	4a21      	ldr	r2, [pc, #132]	; (8013684 <USBPD_PHY_Init+0x98>)
 8013600:	019b      	lsls	r3, r3, #6
 8013602:	4413      	add	r3, r2
 8013604:	3314      	adds	r3, #20
 8013606:	4a20      	ldr	r2, [pc, #128]	; (8013688 <USBPD_PHY_Init+0x9c>)
 8013608:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = PHY_BistCompleted;
 801360a:	7bfb      	ldrb	r3, [r7, #15]
 801360c:	4a1d      	ldr	r2, [pc, #116]	; (8013684 <USBPD_PHY_Init+0x98>)
 801360e:	019b      	lsls	r3, r3, #6
 8013610:	4413      	add	r3, r2
 8013612:	3318      	adds	r3, #24
 8013614:	4a1d      	ldr	r2, [pc, #116]	; (801368c <USBPD_PHY_Init+0xa0>)
 8013616:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Reset               = PHY_Rx_Reset;
 8013618:	7bfb      	ldrb	r3, [r7, #15]
 801361a:	4a1a      	ldr	r2, [pc, #104]	; (8013684 <USBPD_PHY_Init+0x98>)
 801361c:	019b      	lsls	r3, r3, #6
 801361e:	4413      	add	r3, r2
 8013620:	331c      	adds	r3, #28
 8013622:	4a1b      	ldr	r2, [pc, #108]	; (8013690 <USBPD_PHY_Init+0xa4>)
 8013624:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = PHY_Rx_HardReset;
 8013626:	7bfb      	ldrb	r3, [r7, #15]
 8013628:	4a16      	ldr	r2, [pc, #88]	; (8013684 <USBPD_PHY_Init+0x98>)
 801362a:	019b      	lsls	r3, r3, #6
 801362c:	4413      	add	r3, r2
 801362e:	3320      	adds	r3, #32
 8013630:	4a18      	ldr	r2, [pc, #96]	; (8013694 <USBPD_PHY_Init+0xa8>)
 8013632:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 8013634:	7bfb      	ldrb	r3, [r7, #15]
 8013636:	4a13      	ldr	r2, [pc, #76]	; (8013684 <USBPD_PHY_Init+0x98>)
 8013638:	019b      	lsls	r3, r3, #6
 801363a:	4413      	add	r3, r2
 801363c:	3324      	adds	r3, #36	; 0x24
 801363e:	4a16      	ldr	r2, [pc, #88]	; (8013698 <USBPD_PHY_Init+0xac>)
 8013640:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = PHY_ResetCompleted;
 8013642:	7bfb      	ldrb	r3, [r7, #15]
 8013644:	4a0f      	ldr	r2, [pc, #60]	; (8013684 <USBPD_PHY_Init+0x98>)
 8013646:	019b      	lsls	r3, r3, #6
 8013648:	4413      	add	r3, r2
 801364a:	3328      	adds	r3, #40	; 0x28
 801364c:	4a13      	ldr	r2, [pc, #76]	; (801369c <USBPD_PHY_Init+0xb0>)
 801364e:	601a      	str	r2, [r3, #0]

  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 8013650:	7bfb      	ldrb	r3, [r7, #15]
 8013652:	4a0c      	ldr	r2, [pc, #48]	; (8013684 <USBPD_PHY_Init+0x98>)
 8013654:	019b      	lsls	r3, r3, #6
 8013656:	4413      	add	r3, r2
 8013658:	3338      	adds	r3, #56	; 0x38
 801365a:	687a      	ldr	r2, [r7, #4]
 801365c:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 801365e:	7bfb      	ldrb	r3, [r7, #15]
 8013660:	4a0f      	ldr	r2, [pc, #60]	; (80136a0 <USBPD_PHY_Init+0xb4>)
 8013662:	00db      	lsls	r3, r3, #3
 8013664:	4413      	add	r3, r2
 8013666:	69ba      	ldr	r2, [r7, #24]
 8013668:	605a      	str	r2, [r3, #4]
  PHY_Ports[PortNum].cbs = pCallbacks;
 801366a:	7bfb      	ldrb	r3, [r7, #15]
 801366c:	490c      	ldr	r1, [pc, #48]	; (80136a0 <USBPD_PHY_Init+0xb4>)
 801366e:	68ba      	ldr	r2, [r7, #8]
 8013670:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

  return USBPD_OK;
 8013674:	2300      	movs	r3, #0
}
 8013676:	4618      	mov	r0, r3
 8013678:	3714      	adds	r7, #20
 801367a:	46bd      	mov	sp, r7
 801367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013680:	4770      	bx	lr
 8013682:	bf00      	nop
 8013684:	200024a4 	.word	0x200024a4
 8013688:	080138b5 	.word	0x080138b5
 801368c:	08013879 	.word	0x08013879
 8013690:	080138e9 	.word	0x080138e9
 8013694:	08013901 	.word	0x08013901
 8013698:	08013939 	.word	0x08013939
 801369c:	08013835 	.word	0x08013835
 80136a0:	20002258 	.word	0x20002258

080136a4 <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not aknowledge by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 80136a4:	b480      	push	{r7}
 80136a6:	b083      	sub	sp, #12
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	4603      	mov	r3, r0
 80136ac:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  return 905u;
 80136ae:	f240 3389 	movw	r3, #905	; 0x389
}
 80136b2:	4618      	mov	r0, r3
 80136b4:	370c      	adds	r7, #12
 80136b6:	46bd      	mov	sp, r7
 80136b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136bc:	4770      	bx	lr

080136be <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 80136be:	b480      	push	{r7}
 80136c0:	b083      	sub	sp, #12
 80136c2:	af00      	add	r7, sp, #0
 80136c4:	4603      	mov	r3, r0
 80136c6:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 80136c8:	bf00      	nop
 80136ca:	370c      	adds	r7, #12
 80136cc:	46bd      	mov	sp, r7
 80136ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d2:	4770      	bx	lr

080136d4 <USBPD_PHY_ResetRequest>:
  * @param  PortNum   Number of the port
  * @param  Type      Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b082      	sub	sp, #8
 80136d8:	af00      	add	r7, sp, #0
 80136da:	4603      	mov	r3, r0
 80136dc:	460a      	mov	r2, r1
 80136de:	71fb      	strb	r3, [r7, #7]
 80136e0:	4613      	mov	r3, r2
 80136e2:	71bb      	strb	r3, [r7, #6]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 80136e4:	79b9      	ldrb	r1, [r7, #6]
 80136e6:	79f8      	ldrb	r0, [r7, #7]
 80136e8:	2300      	movs	r3, #0
 80136ea:	2200      	movs	r2, #0
 80136ec:	f000 f805 	bl	80136fa <USBPD_PHY_SendMessage>
 80136f0:	4603      	mov	r3, r0
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	3708      	adds	r7, #8
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd80      	pop	{r7, pc}

080136fa <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 80136fa:	b580      	push	{r7, lr}
 80136fc:	b082      	sub	sp, #8
 80136fe:	af00      	add	r7, sp, #0
 8013700:	603a      	str	r2, [r7, #0]
 8013702:	461a      	mov	r2, r3
 8013704:	4603      	mov	r3, r0
 8013706:	71fb      	strb	r3, [r7, #7]
 8013708:	460b      	mov	r3, r1
 801370a:	71bb      	strb	r3, [r7, #6]
 801370c:	4613      	mov	r3, r2
 801370e:	80bb      	strh	r3, [r7, #4]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 8013710:	88bb      	ldrh	r3, [r7, #4]
 8013712:	79b9      	ldrb	r1, [r7, #6]
 8013714:	79f8      	ldrb	r0, [r7, #7]
 8013716:	683a      	ldr	r2, [r7, #0]
 8013718:	f000 fb74 	bl	8013e04 <USBPD_HW_IF_SendBuffer>
 801371c:	4603      	mov	r3, r0
}
 801371e:	4618      	mov	r0, r3
 8013720:	3708      	adds	r7, #8
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}

08013726 <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 8013726:	b580      	push	{r7, lr}
 8013728:	b082      	sub	sp, #8
 801372a:	af00      	add	r7, sp, #0
 801372c:	4603      	mov	r3, r0
 801372e:	71fb      	strb	r3, [r7, #7]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 8013730:	79fb      	ldrb	r3, [r7, #7]
 8013732:	4618      	mov	r0, r3
 8013734:	f000 fc26 	bl	8013f84 <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 8013738:	2300      	movs	r3, #0
}
 801373a:	4618      	mov	r0, r3
 801373c:	3708      	adds	r7, #8
 801373e:	46bd      	mov	sp, r7
 8013740:	bd80      	pop	{r7, pc}

08013742 <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 8013742:	b580      	push	{r7, lr}
 8013744:	b082      	sub	sp, #8
 8013746:	af00      	add	r7, sp, #0
 8013748:	4603      	mov	r3, r0
 801374a:	460a      	mov	r2, r1
 801374c:	71fb      	strb	r3, [r7, #7]
 801374e:	4613      	mov	r3, r2
 8013750:	71bb      	strb	r3, [r7, #6]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 8013752:	79bb      	ldrb	r3, [r7, #6]
 8013754:	2b07      	cmp	r3, #7
 8013756:	d103      	bne.n	8013760 <USBPD_PHY_ExitTransmit+0x1e>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 8013758:	79fb      	ldrb	r3, [r7, #7]
 801375a:	4618      	mov	r0, r3
 801375c:	f000 fb26 	bl	8013dac <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 8013760:	2300      	movs	r3, #0
}
 8013762:	4618      	mov	r0, r3
 8013764:	3708      	adds	r7, #8
 8013766:	46bd      	mov	sp, r7
 8013768:	bd80      	pop	{r7, pc}

0801376a <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 801376a:	b580      	push	{r7, lr}
 801376c:	b082      	sub	sp, #8
 801376e:	af00      	add	r7, sp, #0
 8013770:	4603      	mov	r3, r0
 8013772:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 8013774:	79fb      	ldrb	r3, [r7, #7]
 8013776:	4618      	mov	r0, r3
 8013778:	f000 fe5c 	bl	8014434 <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 801377c:	bf00      	nop
 801377e:	3708      	adds	r7, #8
 8013780:	46bd      	mov	sp, r7
 8013782:	bd80      	pop	{r7, pc}

08013784 <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b082      	sub	sp, #8
 8013788:	af00      	add	r7, sp, #0
 801378a:	4603      	mov	r3, r0
 801378c:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 801378e:	79fb      	ldrb	r3, [r7, #7]
 8013790:	4618      	mov	r0, r3
 8013792:	f000 fe65 	bl	8014460 <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 8013796:	bf00      	nop
 8013798:	3708      	adds	r7, #8
 801379a:	46bd      	mov	sp, r7
 801379c:	bd80      	pop	{r7, pc}
	...

080137a0 <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 80137a0:	b480      	push	{r7}
 80137a2:	b083      	sub	sp, #12
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	4603      	mov	r3, r0
 80137a8:	6039      	str	r1, [r7, #0]
 80137aa:	71fb      	strb	r3, [r7, #7]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 80137ac:	79fb      	ldrb	r3, [r7, #7]
 80137ae:	4a05      	ldr	r2, [pc, #20]	; (80137c4 <USBPD_PHY_SOPSupported+0x24>)
 80137b0:	00db      	lsls	r3, r3, #3
 80137b2:	4413      	add	r3, r2
 80137b4:	683a      	ldr	r2, [r7, #0]
 80137b6:	605a      	str	r2, [r3, #4]
}
 80137b8:	bf00      	nop
 80137ba:	370c      	adds	r7, #12
 80137bc:	46bd      	mov	sp, r7
 80137be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c2:	4770      	bx	lr
 80137c4:	20002258 	.word	0x20002258

080137c8 <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 80137c8:	b580      	push	{r7, lr}
 80137ca:	b082      	sub	sp, #8
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	4603      	mov	r3, r0
 80137d0:	71fb      	strb	r3, [r7, #7]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 80137d2:	79fb      	ldrb	r3, [r7, #7]
 80137d4:	4618      	mov	r0, r3
 80137d6:	f000 fe59 	bl	801448c <USBPD_HW_IF_IsResistor_SinkTxOk>
 80137da:	4603      	mov	r3, r0
}
 80137dc:	4618      	mov	r0, r3
 80137de:	3708      	adds	r7, #8
 80137e0:	46bd      	mov	sp, r7
 80137e2:	bd80      	pop	{r7, pc}

080137e4 <USBPD_PHY_FastRoleSwapSignalling>:
 * @brief  function to generate an FRS signalling
 * @param  PortNum  Number of the port.
 * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b082      	sub	sp, #8
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	4603      	mov	r3, r0
 80137ec:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 80137ee:	79fb      	ldrb	r3, [r7, #7]
 80137f0:	4618      	mov	r0, r3
 80137f2:	f000 fe7d 	bl	80144f0 <USBPD_HW_IF_FastRoleSwapSignalling>
}
 80137f6:	bf00      	nop
 80137f8:	3708      	adds	r7, #8
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd80      	pop	{r7, pc}

080137fe <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 80137fe:	b580      	push	{r7, lr}
 8013800:	b082      	sub	sp, #8
 8013802:	af00      	add	r7, sp, #0
 8013804:	4603      	mov	r3, r0
 8013806:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_EnableRX(PortNum);
 8013808:	79fb      	ldrb	r3, [r7, #7]
 801380a:	4618      	mov	r0, r3
 801380c:	f000 fcac 	bl	8014168 <USBPD_HW_IF_EnableRX>
}
 8013810:	bf00      	nop
 8013812:	3708      	adds	r7, #8
 8013814:	46bd      	mov	sp, r7
 8013816:	bd80      	pop	{r7, pc}

08013818 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 8013818:	b580      	push	{r7, lr}
 801381a:	b082      	sub	sp, #8
 801381c:	af00      	add	r7, sp, #0
 801381e:	4603      	mov	r3, r0
 8013820:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_DisableRX(PortNum);
 8013822:	79fb      	ldrb	r3, [r7, #7]
 8013824:	4618      	mov	r0, r3
 8013826:	f000 fcb3 	bl	8014190 <USBPD_HW_IF_DisableRX>
}
 801382a:	bf00      	nop
 801382c:	3708      	adds	r7, #8
 801382e:	46bd      	mov	sp, r7
 8013830:	bd80      	pop	{r7, pc}
	...

08013834 <PHY_ResetCompleted>:
  * @param  PortNum   Number of the port
  * @param  Type  PD Type
  * @retval None
  */
void PHY_ResetCompleted(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b082      	sub	sp, #8
 8013838:	af00      	add	r7, sp, #0
 801383a:	4603      	mov	r3, r0
 801383c:	460a      	mov	r2, r1
 801383e:	71fb      	strb	r3, [r7, #7]
 8013840:	4613      	mov	r3, r2
 8013842:	71bb      	strb	r3, [r7, #6]
  /* perform a PHY layer reset */
  USBPD_PHY_Reset(PortNum);
 8013844:	79fb      	ldrb	r3, [r7, #7]
 8013846:	4618      	mov	r0, r3
 8013848:	f7ff ff39 	bl	80136be <USBPD_PHY_Reset>

  /* notify to upper level (PRL) */
  if (PHY_Ports[PortNum].cbs->USBPD_PHY_ResetCompleted != NULL)
 801384c:	79fb      	ldrb	r3, [r7, #7]
 801384e:	4a09      	ldr	r2, [pc, #36]	; (8013874 <PHY_ResetCompleted+0x40>)
 8013850:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013854:	689b      	ldr	r3, [r3, #8]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d008      	beq.n	801386c <PHY_ResetCompleted+0x38>
  {
    PHY_Ports[PortNum].cbs->USBPD_PHY_ResetCompleted(PortNum, Type);
 801385a:	79fb      	ldrb	r3, [r7, #7]
 801385c:	4a05      	ldr	r2, [pc, #20]	; (8013874 <PHY_ResetCompleted+0x40>)
 801385e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013862:	689b      	ldr	r3, [r3, #8]
 8013864:	79b9      	ldrb	r1, [r7, #6]
 8013866:	79fa      	ldrb	r2, [r7, #7]
 8013868:	4610      	mov	r0, r2
 801386a:	4798      	blx	r3
  }
}
 801386c:	bf00      	nop
 801386e:	3708      	adds	r7, #8
 8013870:	46bd      	mov	sp, r7
 8013872:	bd80      	pop	{r7, pc}
 8013874:	20002258 	.word	0x20002258

08013878 <PHY_BistCompleted>:
 * @param  PortNum   Number of the port.
 * @param  bistmode  Modality of the bist.
 * @retval none.
 */
void PHY_BistCompleted(uint8_t PortNum, USBPD_BISTMsg_TypeDef bistmode)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b082      	sub	sp, #8
 801387c:	af00      	add	r7, sp, #0
 801387e:	4603      	mov	r3, r0
 8013880:	460a      	mov	r2, r1
 8013882:	71fb      	strb	r3, [r7, #7]
 8013884:	4613      	mov	r3, r2
 8013886:	71bb      	strb	r3, [r7, #6]
  if (NULL != PHY_Ports[PortNum].cbs->USBPD_PHY_BistCompleted)
 8013888:	79fb      	ldrb	r3, [r7, #7]
 801388a:	4a09      	ldr	r2, [pc, #36]	; (80138b0 <PHY_BistCompleted+0x38>)
 801388c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013890:	68db      	ldr	r3, [r3, #12]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d008      	beq.n	80138a8 <PHY_BistCompleted+0x30>
  {
    PHY_Ports[PortNum].cbs->USBPD_PHY_BistCompleted(PortNum, bistmode);
 8013896:	79fb      	ldrb	r3, [r7, #7]
 8013898:	4a05      	ldr	r2, [pc, #20]	; (80138b0 <PHY_BistCompleted+0x38>)
 801389a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801389e:	68db      	ldr	r3, [r3, #12]
 80138a0:	79b9      	ldrb	r1, [r7, #6]
 80138a2:	79fa      	ldrb	r2, [r7, #7]
 80138a4:	4610      	mov	r0, r2
 80138a6:	4798      	blx	r3
  }
}
 80138a8:	bf00      	nop
 80138aa:	3708      	adds	r7, #8
 80138ac:	46bd      	mov	sp, r7
 80138ae:	bd80      	pop	{r7, pc}
 80138b0:	20002258 	.word	0x20002258

080138b4 <PHY_TxCompleted>:
 * @brief  Callback to notify the a transmission is completed
 * @param  PortNum  Number of the port.
 * @retval none.
 */
void PHY_TxCompleted(uint8_t PortNum)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b082      	sub	sp, #8
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	4603      	mov	r3, r0
 80138bc:	71fb      	strb	r3, [r7, #7]
  if (NULL != PHY_Ports[PortNum].cbs->USBPD_PHY_TxCompleted)
 80138be:	79fb      	ldrb	r3, [r7, #7]
 80138c0:	4a08      	ldr	r2, [pc, #32]	; (80138e4 <PHY_TxCompleted+0x30>)
 80138c2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80138c6:	691b      	ldr	r3, [r3, #16]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d007      	beq.n	80138dc <PHY_TxCompleted+0x28>
  {
    PHY_Ports[PortNum].cbs->USBPD_PHY_TxCompleted(PortNum);
 80138cc:	79fb      	ldrb	r3, [r7, #7]
 80138ce:	4a05      	ldr	r2, [pc, #20]	; (80138e4 <PHY_TxCompleted+0x30>)
 80138d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80138d4:	691b      	ldr	r3, [r3, #16]
 80138d6:	79fa      	ldrb	r2, [r7, #7]
 80138d8:	4610      	mov	r0, r2
 80138da:	4798      	blx	r3
  }
}
 80138dc:	bf00      	nop
 80138de:	3708      	adds	r7, #8
 80138e0:	46bd      	mov	sp, r7
 80138e2:	bd80      	pop	{r7, pc}
 80138e4:	20002258 	.word	0x20002258

080138e8 <PHY_Rx_Reset>:
 * @brief  Callback to notify the start of reception
 * @param  PortNum  Number of the port.
 * @retval Status of current reception.
 */
USBPD_PHY_RX_Status_TypeDef PHY_Rx_Reset(uint8_t PortNum)
{
 80138e8:	b480      	push	{r7}
 80138ea:	b083      	sub	sp, #12
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	4603      	mov	r3, r0
 80138f0:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  return USBPD_PHY_RX_STATUS_OK;
 80138f2:	2301      	movs	r3, #1
}
 80138f4:	4618      	mov	r0, r3
 80138f6:	370c      	adds	r7, #12
 80138f8:	46bd      	mov	sp, r7
 80138fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fe:	4770      	bx	lr

08013900 <PHY_Rx_HardReset>:
 * @brief  Callback to notify the start of reception
 * @param  PortNum  Number of the port.
 * @retval Status of current reception.
 */
void PHY_Rx_HardReset(uint8_t PortNum)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b082      	sub	sp, #8
 8013904:	af00      	add	r7, sp, #0
 8013906:	4603      	mov	r3, r0
 8013908:	71fb      	strb	r3, [r7, #7]
  /* nothing to do the message will be discarded and the port partner retry the send */
  if (NULL != PHY_Ports[PortNum].cbs->USBPD_PHY_ResetIndication)
 801390a:	79fb      	ldrb	r3, [r7, #7]
 801390c:	4a09      	ldr	r2, [pc, #36]	; (8013934 <PHY_Rx_HardReset+0x34>)
 801390e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013912:	685b      	ldr	r3, [r3, #4]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d008      	beq.n	801392a <PHY_Rx_HardReset+0x2a>
  {
    PHY_Ports[PortNum].cbs->USBPD_PHY_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 8013918:	79fb      	ldrb	r3, [r7, #7]
 801391a:	4a06      	ldr	r2, [pc, #24]	; (8013934 <PHY_Rx_HardReset+0x34>)
 801391c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013920:	685b      	ldr	r3, [r3, #4]
 8013922:	79fa      	ldrb	r2, [r7, #7]
 8013924:	2105      	movs	r1, #5
 8013926:	4610      	mov	r0, r2
 8013928:	4798      	blx	r3
  }
}
 801392a:	bf00      	nop
 801392c:	3708      	adds	r7, #8
 801392e:	46bd      	mov	sp, r7
 8013930:	bd80      	pop	{r7, pc}
 8013932:	bf00      	nop
 8013934:	20002258 	.word	0x20002258

08013938 <PHY_Rx_Completed>:
  * @param  MsgType   SOP Message Type
  * @param  RxPaySize Payload RX size
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType, uint16_t RxPaySize)
{
 8013938:	b580      	push	{r7, lr}
 801393a:	b084      	sub	sp, #16
 801393c:	af00      	add	r7, sp, #0
 801393e:	4603      	mov	r3, r0
 8013940:	6039      	str	r1, [r7, #0]
 8013942:	71fb      	strb	r3, [r7, #7]
 8013944:	4613      	mov	r3, r2
 8013946:	80bb      	strh	r3, [r7, #4]
  USBPD_SOPType_TypeDef _msgtype;
  uint8_t _callphy = 1u;
 8013948:	2301      	movs	r3, #1
 801394a:	73fb      	strb	r3, [r7, #15]
  (void)RxPaySize;

  const USBPD_SOPType_TypeDef tab_sop_value[] = { USBPD_SOPTYPE_SOP,              USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
 801394c:	4a31      	ldr	r2, [pc, #196]	; (8013a14 <PHY_Rx_Completed+0xdc>)
 801394e:	f107 0308 	add.w	r3, r7, #8
 8013952:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013956:	6018      	str	r0, [r3, #0]
 8013958:	3304      	adds	r3, #4
 801395a:	8019      	strh	r1, [r3, #0]
                                                  USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
                                                };
  _msgtype = tab_sop_value[MsgType];
 801395c:	f107 0208 	add.w	r2, r7, #8
 8013960:	683b      	ldr	r3, [r7, #0]
 8013962:	4413      	add	r3, r2
 8013964:	781b      	ldrb	r3, [r3, #0]
 8013966:	73bb      	strb	r3, [r7, #14]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 8013968:	7bbb      	ldrb	r3, [r7, #14]
 801396a:	2b00      	cmp	r3, #0
 801396c:	db35      	blt.n	80139da <PHY_Rx_Completed+0xa2>
 801396e:	2b04      	cmp	r3, #4
 8013970:	dd1d      	ble.n	80139ae <PHY_Rx_Completed+0x76>
 8013972:	2b06      	cmp	r3, #6
 8013974:	d131      	bne.n	80139da <PHY_Rx_Completed+0xa2>
  {
    case USBPD_SOPTYPE_CABLE_RESET :
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 8013976:	79fb      	ldrb	r3, [r7, #7]
 8013978:	4a27      	ldr	r2, [pc, #156]	; (8013a18 <PHY_Rx_Completed+0xe0>)
 801397a:	00db      	lsls	r3, r3, #3
 801397c:	4413      	add	r3, r2
 801397e:	685b      	ldr	r3, [r3, #4]
 8013980:	f003 031e 	and.w	r3, r3, #30
 8013984:	2b1e      	cmp	r3, #30
 8013986:	d12b      	bne.n	80139e0 <PHY_Rx_Completed+0xa8>
      {
        /* nothing to do the message will be discarded and the port partner retry the send */
        if (PHY_Ports[PortNum].cbs->USBPD_PHY_ResetIndication != NULL)
 8013988:	79fb      	ldrb	r3, [r7, #7]
 801398a:	4a23      	ldr	r2, [pc, #140]	; (8013a18 <PHY_Rx_Completed+0xe0>)
 801398c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013990:	685b      	ldr	r3, [r3, #4]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d008      	beq.n	80139a8 <PHY_Rx_Completed+0x70>
        {
          PHY_Ports[PortNum].cbs->USBPD_PHY_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 8013996:	79fb      	ldrb	r3, [r7, #7]
 8013998:	4a1f      	ldr	r2, [pc, #124]	; (8013a18 <PHY_Rx_Completed+0xe0>)
 801399a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801399e:	685b      	ldr	r3, [r3, #4]
 80139a0:	79fa      	ldrb	r2, [r7, #7]
 80139a2:	2106      	movs	r1, #6
 80139a4:	4610      	mov	r0, r2
 80139a6:	4798      	blx	r3
        }
        _callphy = 0u;
 80139a8:	2300      	movs	r3, #0
 80139aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80139ac:	e018      	b.n	80139e0 <PHY_Rx_Completed+0xa8>
    case USBPD_SOPTYPE_SOP :
    case USBPD_SOPTYPE_SOP1 :
    case USBPD_SOPTYPE_SOP2 :
    case USBPD_SOPTYPE_SOP1_DEBUG :
    case USBPD_SOPTYPE_SOP2_DEBUG :
      if ((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype)))
 80139ae:	7bbb      	ldrb	r3, [r7, #14]
 80139b0:	2201      	movs	r2, #1
 80139b2:	fa02 f303 	lsl.w	r3, r2, r3
 80139b6:	b2db      	uxtb	r3, r3
 80139b8:	4618      	mov	r0, r3
 80139ba:	79fb      	ldrb	r3, [r7, #7]
 80139bc:	4a16      	ldr	r2, [pc, #88]	; (8013a18 <PHY_Rx_Completed+0xe0>)
 80139be:	00db      	lsls	r3, r3, #3
 80139c0:	4413      	add	r3, r2
 80139c2:	685b      	ldr	r3, [r3, #4]
 80139c4:	7bba      	ldrb	r2, [r7, #14]
 80139c6:	2101      	movs	r1, #1
 80139c8:	fa01 f202 	lsl.w	r2, r1, r2
 80139cc:	b2d2      	uxtb	r2, r2
 80139ce:	4013      	ands	r3, r2
 80139d0:	4298      	cmp	r0, r3
 80139d2:	d007      	beq.n	80139e4 <PHY_Rx_Completed+0xac>
      {
        _callphy = 0u;
 80139d4:	2300      	movs	r3, #0
 80139d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80139d8:	e004      	b.n	80139e4 <PHY_Rx_Completed+0xac>
    default :
      _callphy = 0u;
 80139da:	2300      	movs	r3, #0
 80139dc:	73fb      	strb	r3, [r7, #15]
      break;
 80139de:	e002      	b.n	80139e6 <PHY_Rx_Completed+0xae>
      break;
 80139e0:	bf00      	nop
 80139e2:	e000      	b.n	80139e6 <PHY_Rx_Completed+0xae>
      break;
 80139e4:	bf00      	nop
  }

  if ((1u == _callphy) && (PHY_Ports[PortNum].cbs->USBPD_PHY_MessageReceived != NULL))
 80139e6:	7bfb      	ldrb	r3, [r7, #15]
 80139e8:	2b01      	cmp	r3, #1
 80139ea:	d10f      	bne.n	8013a0c <PHY_Rx_Completed+0xd4>
 80139ec:	79fb      	ldrb	r3, [r7, #7]
 80139ee:	4a0a      	ldr	r2, [pc, #40]	; (8013a18 <PHY_Rx_Completed+0xe0>)
 80139f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d008      	beq.n	8013a0c <PHY_Rx_Completed+0xd4>
  {
    PHY_Ports[PortNum].cbs->USBPD_PHY_MessageReceived(PortNum, _msgtype);
 80139fa:	79fb      	ldrb	r3, [r7, #7]
 80139fc:	4a06      	ldr	r2, [pc, #24]	; (8013a18 <PHY_Rx_Completed+0xe0>)
 80139fe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	7bb9      	ldrb	r1, [r7, #14]
 8013a06:	79fa      	ldrb	r2, [r7, #7]
 8013a08:	4610      	mov	r0, r2
 8013a0a:	4798      	blx	r3
  }
}
 8013a0c:	bf00      	nop
 8013a0e:	3710      	adds	r7, #16
 8013a10:	46bd      	mov	sp, r7
 8013a12:	bd80      	pop	{r7, pc}
 8013a14:	08015cb8 	.word	0x08015cb8
 8013a18:	20002258 	.word	0x20002258

08013a1c <LL_AHB1_GRP1_EnableClock>:
{
 8013a1c:	b480      	push	{r7}
 8013a1e:	b085      	sub	sp, #20
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8013a24:	4b08      	ldr	r3, [pc, #32]	; (8013a48 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8013a26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013a28:	4907      	ldr	r1, [pc, #28]	; (8013a48 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	4313      	orrs	r3, r2
 8013a2e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8013a30:	4b05      	ldr	r3, [pc, #20]	; (8013a48 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8013a32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	4013      	ands	r3, r2
 8013a38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
}
 8013a3c:	bf00      	nop
 8013a3e:	3714      	adds	r7, #20
 8013a40:	46bd      	mov	sp, r7
 8013a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a46:	4770      	bx	lr
 8013a48:	40021000 	.word	0x40021000

08013a4c <LL_APB1_GRP1_EnableClock>:
{
 8013a4c:	b480      	push	{r7}
 8013a4e:	b085      	sub	sp, #20
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8013a54:	4b08      	ldr	r3, [pc, #32]	; (8013a78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8013a56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013a58:	4907      	ldr	r1, [pc, #28]	; (8013a78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	4313      	orrs	r3, r2
 8013a5e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8013a60:	4b05      	ldr	r3, [pc, #20]	; (8013a78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8013a62:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	4013      	ands	r3, r2
 8013a68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8013a6a:	68fb      	ldr	r3, [r7, #12]
}
 8013a6c:	bf00      	nop
 8013a6e:	3714      	adds	r7, #20
 8013a70:	46bd      	mov	sp, r7
 8013a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a76:	4770      	bx	lr
 8013a78:	40021000 	.word	0x40021000

08013a7c <LL_UCPD_Enable>:
{
 8013a7c:	b480      	push	{r7}
 8013a7e:	b083      	sub	sp, #12
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	601a      	str	r2, [r3, #0]
}
 8013a90:	bf00      	nop
 8013a92:	370c      	adds	r7, #12
 8013a94:	46bd      	mov	sp, r7
 8013a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9a:	4770      	bx	lr

08013a9c <LL_UCPD_Disable>:
{
 8013a9c:	b480      	push	{r7}
 8013a9e:	b083      	sub	sp, #12
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	601a      	str	r2, [r3, #0]
}
 8013ab0:	bf00      	nop
 8013ab2:	370c      	adds	r7, #12
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aba:	4770      	bx	lr

08013abc <LL_UCPD_TypeCDetectionCC2Enable>:
{
 8013abc:	b480      	push	{r7}
 8013abe:	b083      	sub	sp, #12
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	68db      	ldr	r3, [r3, #12]
 8013ac8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	60da      	str	r2, [r3, #12]
}
 8013ad0:	bf00      	nop
 8013ad2:	370c      	adds	r7, #12
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ada:	4770      	bx	lr

08013adc <LL_UCPD_TypeCDetectionCC2Disable>:
{
 8013adc:	b480      	push	{r7}
 8013ade:	b083      	sub	sp, #12
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	68db      	ldr	r3, [r3, #12]
 8013ae8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	60da      	str	r2, [r3, #12]
}
 8013af0:	bf00      	nop
 8013af2:	370c      	adds	r7, #12
 8013af4:	46bd      	mov	sp, r7
 8013af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afa:	4770      	bx	lr

08013afc <LL_UCPD_TypeCDetectionCC1Enable>:
{
 8013afc:	b480      	push	{r7}
 8013afe:	b083      	sub	sp, #12
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	68db      	ldr	r3, [r3, #12]
 8013b08:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	60da      	str	r2, [r3, #12]
}
 8013b10:	bf00      	nop
 8013b12:	370c      	adds	r7, #12
 8013b14:	46bd      	mov	sp, r7
 8013b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1a:	4770      	bx	lr

08013b1c <LL_UCPD_TypeCDetectionCC1Disable>:
{
 8013b1c:	b480      	push	{r7}
 8013b1e:	b083      	sub	sp, #12
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	68db      	ldr	r3, [r3, #12]
 8013b28:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	60da      	str	r2, [r3, #12]
}
 8013b30:	bf00      	nop
 8013b32:	370c      	adds	r7, #12
 8013b34:	46bd      	mov	sp, r7
 8013b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3a:	4770      	bx	lr

08013b3c <LL_UCPD_SignalFRSTX>:
{
 8013b3c:	b480      	push	{r7}
 8013b3e:	b083      	sub	sp, #12
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	68db      	ldr	r3, [r3, #12]
 8013b48:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	60da      	str	r2, [r3, #12]
}
 8013b50:	bf00      	nop
 8013b52:	370c      	adds	r7, #12
 8013b54:	46bd      	mov	sp, r7
 8013b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5a:	4770      	bx	lr

08013b5c <LL_UCPD_SetccEnable>:
{
 8013b5c:	b480      	push	{r7}
 8013b5e:	b083      	sub	sp, #12
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
 8013b64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	68db      	ldr	r3, [r3, #12]
 8013b6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8013b6e:	683b      	ldr	r3, [r7, #0]
 8013b70:	431a      	orrs	r2, r3
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	60da      	str	r2, [r3, #12]
}
 8013b76:	bf00      	nop
 8013b78:	370c      	adds	r7, #12
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b80:	4770      	bx	lr

08013b82 <LL_UCPD_SetSNKRole>:
{
 8013b82:	b480      	push	{r7}
 8013b84:	b083      	sub	sp, #12
 8013b86:	af00      	add	r7, sp, #0
 8013b88:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	68db      	ldr	r3, [r3, #12]
 8013b8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	60da      	str	r2, [r3, #12]
}
 8013b96:	bf00      	nop
 8013b98:	370c      	adds	r7, #12
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba0:	4770      	bx	lr

08013ba2 <LL_UCPD_SetSRCRole>:
{
 8013ba2:	b480      	push	{r7}
 8013ba4:	b083      	sub	sp, #12
 8013ba6:	af00      	add	r7, sp, #0
 8013ba8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	68db      	ldr	r3, [r3, #12]
 8013bae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	60da      	str	r2, [r3, #12]
}
 8013bb6:	bf00      	nop
 8013bb8:	370c      	adds	r7, #12
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc0:	4770      	bx	lr

08013bc2 <LL_UCPD_SetRpResistor>:
{
 8013bc2:	b480      	push	{r7}
 8013bc4:	b083      	sub	sp, #12
 8013bc6:	af00      	add	r7, sp, #0
 8013bc8:	6078      	str	r0, [r7, #4]
 8013bca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	68db      	ldr	r3, [r3, #12]
 8013bd0:	f423 72c0 	bic.w	r2, r3, #384	; 0x180
 8013bd4:	683b      	ldr	r3, [r7, #0]
 8013bd6:	431a      	orrs	r2, r3
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	60da      	str	r2, [r3, #12]
}
 8013bdc:	bf00      	nop
 8013bde:	370c      	adds	r7, #12
 8013be0:	46bd      	mov	sp, r7
 8013be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be6:	4770      	bx	lr

08013be8 <LL_UCPD_SetCCPin>:
{
 8013be8:	b480      	push	{r7}
 8013bea:	b083      	sub	sp, #12
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
 8013bf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	68db      	ldr	r3, [r3, #12]
 8013bf6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8013bfa:	683b      	ldr	r3, [r7, #0]
 8013bfc:	431a      	orrs	r2, r3
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	60da      	str	r2, [r3, #12]
}
 8013c02:	bf00      	nop
 8013c04:	370c      	adds	r7, #12
 8013c06:	46bd      	mov	sp, r7
 8013c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0c:	4770      	bx	lr

08013c0e <LL_UCPD_RxEnable>:
{
 8013c0e:	b480      	push	{r7}
 8013c10:	b083      	sub	sp, #12
 8013c12:	af00      	add	r7, sp, #0
 8013c14:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	68db      	ldr	r3, [r3, #12]
 8013c1a:	f043 0220 	orr.w	r2, r3, #32
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	60da      	str	r2, [r3, #12]
}
 8013c22:	bf00      	nop
 8013c24:	370c      	adds	r7, #12
 8013c26:	46bd      	mov	sp, r7
 8013c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2c:	4770      	bx	lr

08013c2e <LL_UCPD_RxDisable>:
{
 8013c2e:	b480      	push	{r7}
 8013c30:	b083      	sub	sp, #12
 8013c32:	af00      	add	r7, sp, #0
 8013c34:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	68db      	ldr	r3, [r3, #12]
 8013c3a:	f023 0220 	bic.w	r2, r3, #32
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	60da      	str	r2, [r3, #12]
}
 8013c42:	bf00      	nop
 8013c44:	370c      	adds	r7, #12
 8013c46:	46bd      	mov	sp, r7
 8013c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4c:	4770      	bx	lr

08013c4e <LL_UCPD_SetRxMode>:
{
 8013c4e:	b480      	push	{r7}
 8013c50:	b083      	sub	sp, #12
 8013c52:	af00      	add	r7, sp, #0
 8013c54:	6078      	str	r0, [r7, #4]
 8013c56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	68db      	ldr	r3, [r3, #12]
 8013c5c:	f023 0210 	bic.w	r2, r3, #16
 8013c60:	683b      	ldr	r3, [r7, #0]
 8013c62:	431a      	orrs	r2, r3
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	60da      	str	r2, [r3, #12]
}
 8013c68:	bf00      	nop
 8013c6a:	370c      	adds	r7, #12
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c72:	4770      	bx	lr

08013c74 <LL_UCPD_SendHardReset>:
{
 8013c74:	b480      	push	{r7}
 8013c76:	b083      	sub	sp, #12
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	68db      	ldr	r3, [r3, #12]
 8013c80:	f043 0208 	orr.w	r2, r3, #8
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	60da      	str	r2, [r3, #12]
}
 8013c88:	bf00      	nop
 8013c8a:	370c      	adds	r7, #12
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c92:	4770      	bx	lr

08013c94 <LL_UCPD_SendMessage>:
{
 8013c94:	b480      	push	{r7}
 8013c96:	b083      	sub	sp, #12
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	68db      	ldr	r3, [r3, #12]
 8013ca0:	f043 0204 	orr.w	r2, r3, #4
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	60da      	str	r2, [r3, #12]
}
 8013ca8:	bf00      	nop
 8013caa:	370c      	adds	r7, #12
 8013cac:	46bd      	mov	sp, r7
 8013cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb2:	4770      	bx	lr

08013cb4 <LL_UCPD_SetTxMode>:
{
 8013cb4:	b480      	push	{r7}
 8013cb6:	b083      	sub	sp, #12
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
 8013cbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	68db      	ldr	r3, [r3, #12]
 8013cc2:	f023 0203 	bic.w	r2, r3, #3
 8013cc6:	683b      	ldr	r3, [r7, #0]
 8013cc8:	431a      	orrs	r2, r3
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	60da      	str	r2, [r3, #12]
}
 8013cce:	bf00      	nop
 8013cd0:	370c      	adds	r7, #12
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd8:	4770      	bx	lr

08013cda <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 8013cda:	b480      	push	{r7}
 8013cdc:	b083      	sub	sp, #12
 8013cde:	af00      	add	r7, sp, #0
 8013ce0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	601a      	str	r2, [r3, #0]
}
 8013cee:	bf00      	nop
 8013cf0:	370c      	adds	r7, #12
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf8:	4770      	bx	lr

08013cfa <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 8013cfa:	b480      	push	{r7}
 8013cfc:	b083      	sub	sp, #12
 8013cfe:	af00      	add	r7, sp, #0
 8013d00:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	601a      	str	r2, [r3, #0]
}
 8013d0e:	bf00      	nop
 8013d10:	370c      	adds	r7, #12
 8013d12:	46bd      	mov	sp, r7
 8013d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d18:	4770      	bx	lr

08013d1a <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 8013d1a:	b480      	push	{r7}
 8013d1c:	b083      	sub	sp, #12
 8013d1e:	af00      	add	r7, sp, #0
 8013d20:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	601a      	str	r2, [r3, #0]
}
 8013d2e:	bf00      	nop
 8013d30:	370c      	adds	r7, #12
 8013d32:	46bd      	mov	sp, r7
 8013d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d38:	4770      	bx	lr

08013d3a <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 8013d3a:	b480      	push	{r7}
 8013d3c:	b083      	sub	sp, #12
 8013d3e:	af00      	add	r7, sp, #0
 8013d40:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	601a      	str	r2, [r3, #0]
}
 8013d4e:	bf00      	nop
 8013d50:	370c      	adds	r7, #12
 8013d52:	46bd      	mov	sp, r7
 8013d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d58:	4770      	bx	lr

08013d5a <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 8013d5a:	b480      	push	{r7}
 8013d5c:	b083      	sub	sp, #12
 8013d5e:	af00      	add	r7, sp, #0
 8013d60:	6078      	str	r0, [r7, #4]
 8013d62:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	683a      	ldr	r2, [r7, #0]
 8013d68:	61da      	str	r2, [r3, #28]
}
 8013d6a:	bf00      	nop
 8013d6c:	370c      	adds	r7, #12
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d74:	4770      	bx	lr

08013d76 <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 8013d76:	b480      	push	{r7}
 8013d78:	b083      	sub	sp, #12
 8013d7a:	af00      	add	r7, sp, #0
 8013d7c:	6078      	str	r0, [r7, #4]
 8013d7e:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	683a      	ldr	r2, [r7, #0]
 8013d84:	621a      	str	r2, [r3, #32]
}
 8013d86:	bf00      	nop
 8013d88:	370c      	adds	r7, #12
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d90:	4770      	bx	lr

08013d92 <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 8013d92:	b580      	push	{r7, lr}
 8013d94:	af00      	add	r7, sp, #0
  /* ## Backup register access ## */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8013d96:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8013d9a:	f7ff fe57 	bl	8013a4c <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8013d9e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8013da2:	f7ff fe3b 	bl	8013a1c <LL_AHB1_GRP1_EnableClock>
}
 8013da6:	bf00      	nop
 8013da8:	bd80      	pop	{r7, pc}
	...

08013dac <USBPD_HW_IF_StopBISTMode2>:

void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b084      	sub	sp, #16
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	4603      	mov	r3, r0
 8013db4:	71fb      	strb	r3, [r7, #7]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 8013db6:	79fb      	ldrb	r3, [r7, #7]
 8013db8:	4a11      	ldr	r2, [pc, #68]	; (8013e00 <USBPD_HW_IF_StopBISTMode2+0x54>)
 8013dba:	019b      	lsls	r3, r3, #6
 8013dbc:	4413      	add	r3, r2
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	68db      	ldr	r3, [r3, #12]
 8013dc2:	f023 0307 	bic.w	r3, r3, #7
 8013dc6:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 8013dc8:	79fb      	ldrb	r3, [r7, #7]
 8013dca:	4a0d      	ldr	r2, [pc, #52]	; (8013e00 <USBPD_HW_IF_StopBISTMode2+0x54>)
 8013dcc:	019b      	lsls	r3, r3, #6
 8013dce:	4413      	add	r3, r2
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7ff fe62 	bl	8013a9c <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 8013dd8:	79fb      	ldrb	r3, [r7, #7]
 8013dda:	4a09      	ldr	r2, [pc, #36]	; (8013e00 <USBPD_HW_IF_StopBISTMode2+0x54>)
 8013ddc:	019b      	lsls	r3, r3, #6
 8013dde:	4413      	add	r3, r2
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	4618      	mov	r0, r3
 8013de4:	f7ff fe4a 	bl	8013a7c <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 8013de8:	79fb      	ldrb	r3, [r7, #7]
 8013dea:	4a05      	ldr	r2, [pc, #20]	; (8013e00 <USBPD_HW_IF_StopBISTMode2+0x54>)
 8013dec:	019b      	lsls	r3, r3, #6
 8013dee:	4413      	add	r3, r2
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	68fa      	ldr	r2, [r7, #12]
 8013df4:	60da      	str	r2, [r3, #12]
}
 8013df6:	bf00      	nop
 8013df8:	3710      	adds	r7, #16
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bd80      	pop	{r7, pc}
 8013dfe:	bf00      	nop
 8013e00:	200024a4 	.word	0x200024a4

08013e04 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b086      	sub	sp, #24
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	60ba      	str	r2, [r7, #8]
 8013e0c:	607b      	str	r3, [r7, #4]
 8013e0e:	4603      	mov	r3, r0
 8013e10:	73fb      	strb	r3, [r7, #15]
 8013e12:	460b      	mov	r3, r1
 8013e14:	73bb      	strb	r3, [r7, #14]
  USBPD_StatusTypeDef _status = USBPD_OK;
 8013e16:	2300      	movs	r3, #0
 8013e18:	75fb      	strb	r3, [r7, #23]

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 8013e1a:	7bbb      	ldrb	r3, [r7, #14]
 8013e1c:	2b05      	cmp	r3, #5
 8013e1e:	d108      	bne.n	8013e32 <USBPD_HW_IF_SendBuffer+0x2e>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 8013e20:	7bfb      	ldrb	r3, [r7, #15]
 8013e22:	4a54      	ldr	r2, [pc, #336]	; (8013f74 <USBPD_HW_IF_SendBuffer+0x170>)
 8013e24:	019b      	lsls	r3, r3, #6
 8013e26:	4413      	add	r3, r2
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	f7ff ff22 	bl	8013c74 <LL_UCPD_SendHardReset>
 8013e30:	e09a      	b.n	8013f68 <USBPD_HW_IF_SendBuffer+0x164>
  }
  else
  {
    switch (Type)
 8013e32:	7bbb      	ldrb	r3, [r7, #14]
 8013e34:	2b07      	cmp	r3, #7
 8013e36:	d860      	bhi.n	8013efa <USBPD_HW_IF_SendBuffer+0xf6>
 8013e38:	a201      	add	r2, pc, #4	; (adr r2, 8013e40 <USBPD_HW_IF_SendBuffer+0x3c>)
 8013e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e3e:	bf00      	nop
 8013e40:	08013e61 	.word	0x08013e61
 8013e44:	08013e87 	.word	0x08013e87
 8013e48:	08013ead 	.word	0x08013ead
 8013e4c:	08013efb 	.word	0x08013efb
 8013e50:	08013efb 	.word	0x08013efb
 8013e54:	08013efb 	.word	0x08013efb
 8013e58:	08013ed3 	.word	0x08013ed3
 8013e5c:	08013ee7 	.word	0x08013ee7
    {
      case USBPD_SOPTYPE_SOP :
      {
        LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 8013e60:	7bfb      	ldrb	r3, [r7, #15]
 8013e62:	4a44      	ldr	r2, [pc, #272]	; (8013f74 <USBPD_HW_IF_SendBuffer+0x170>)
 8013e64:	019b      	lsls	r3, r3, #6
 8013e66:	4413      	add	r3, r2
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	4943      	ldr	r1, [pc, #268]	; (8013f78 <USBPD_HW_IF_SendBuffer+0x174>)
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	f7ff ff74 	bl	8013d5a <LL_UCPD_WriteTxOrderSet>
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8013e72:	7bfb      	ldrb	r3, [r7, #15]
 8013e74:	4a3f      	ldr	r2, [pc, #252]	; (8013f74 <USBPD_HW_IF_SendBuffer+0x170>)
 8013e76:	019b      	lsls	r3, r3, #6
 8013e78:	4413      	add	r3, r2
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	2100      	movs	r1, #0
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f7ff ff18 	bl	8013cb4 <LL_UCPD_SetTxMode>
        break;
 8013e84:	e03c      	b.n	8013f00 <USBPD_HW_IF_SendBuffer+0xfc>
      }
      case USBPD_SOPTYPE_SOP1 :
      {
        LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 8013e86:	7bfb      	ldrb	r3, [r7, #15]
 8013e88:	4a3a      	ldr	r2, [pc, #232]	; (8013f74 <USBPD_HW_IF_SendBuffer+0x170>)
 8013e8a:	019b      	lsls	r3, r3, #6
 8013e8c:	4413      	add	r3, r2
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	493a      	ldr	r1, [pc, #232]	; (8013f7c <USBPD_HW_IF_SendBuffer+0x178>)
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7ff ff61 	bl	8013d5a <LL_UCPD_WriteTxOrderSet>
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8013e98:	7bfb      	ldrb	r3, [r7, #15]
 8013e9a:	4a36      	ldr	r2, [pc, #216]	; (8013f74 <USBPD_HW_IF_SendBuffer+0x170>)
 8013e9c:	019b      	lsls	r3, r3, #6
 8013e9e:	4413      	add	r3, r2
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	2100      	movs	r1, #0
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	f7ff ff05 	bl	8013cb4 <LL_UCPD_SetTxMode>
        break;
 8013eaa:	e029      	b.n	8013f00 <USBPD_HW_IF_SendBuffer+0xfc>
      }
      case USBPD_SOPTYPE_SOP2 :
      {
        LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 8013eac:	7bfb      	ldrb	r3, [r7, #15]
 8013eae:	4a31      	ldr	r2, [pc, #196]	; (8013f74 <USBPD_HW_IF_SendBuffer+0x170>)
 8013eb0:	019b      	lsls	r3, r3, #6
 8013eb2:	4413      	add	r3, r2
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	4932      	ldr	r1, [pc, #200]	; (8013f80 <USBPD_HW_IF_SendBuffer+0x17c>)
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7ff ff4e 	bl	8013d5a <LL_UCPD_WriteTxOrderSet>
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8013ebe:	7bfb      	ldrb	r3, [r7, #15]
 8013ec0:	4a2c      	ldr	r2, [pc, #176]	; (8013f74 <USBPD_HW_IF_SendBuffer+0x170>)
 8013ec2:	019b      	lsls	r3, r3, #6
 8013ec4:	4413      	add	r3, r2
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	2100      	movs	r1, #0
 8013eca:	4618      	mov	r0, r3
 8013ecc:	f7ff fef2 	bl	8013cb4 <LL_UCPD_SetTxMode>
        break;
 8013ed0:	e016      	b.n	8013f00 <USBPD_HW_IF_SendBuffer+0xfc>
      }
      case USBPD_SOPTYPE_CABLE_RESET :
      {
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 8013ed2:	7bfb      	ldrb	r3, [r7, #15]
 8013ed4:	4a27      	ldr	r2, [pc, #156]	; (8013f74 <USBPD_HW_IF_SendBuffer+0x170>)
 8013ed6:	019b      	lsls	r3, r3, #6
 8013ed8:	4413      	add	r3, r2
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	2101      	movs	r1, #1
 8013ede:	4618      	mov	r0, r3
 8013ee0:	f7ff fee8 	bl	8013cb4 <LL_UCPD_SetTxMode>
        break;
 8013ee4:	e00c      	b.n	8013f00 <USBPD_HW_IF_SendBuffer+0xfc>
      }
      case USBPD_SOPTYPE_BIST_MODE_2 :
      {
        LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8013ee6:	7bfb      	ldrb	r3, [r7, #15]
 8013ee8:	4a22      	ldr	r2, [pc, #136]	; (8013f74 <USBPD_HW_IF_SendBuffer+0x170>)
 8013eea:	019b      	lsls	r3, r3, #6
 8013eec:	4413      	add	r3, r2
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	2102      	movs	r1, #2
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	f7ff fede 	bl	8013cb4 <LL_UCPD_SetTxMode>
        break;
 8013ef8:	e002      	b.n	8013f00 <USBPD_HW_IF_SendBuffer+0xfc>
      }
      default :
        _status = USBPD_ERROR;
 8013efa:	2302      	movs	r3, #2
 8013efc:	75fb      	strb	r3, [r7, #23]
        break;
 8013efe:	bf00      	nop
    }

    if (USBPD_OK == _status)
 8013f00:	7dfb      	ldrb	r3, [r7, #23]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d130      	bne.n	8013f68 <USBPD_HW_IF_SendBuffer+0x164>
    {
#if defined(_LOW_POWER)       
      LPM_SetStopMode((LPM_Id_t)(LPM_PE_0 + PortNum), LPM_Disable);
#endif  
      WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 8013f06:	7bfb      	ldrb	r3, [r7, #15]
 8013f08:	4a1a      	ldr	r2, [pc, #104]	; (8013f74 <USBPD_HW_IF_SendBuffer+0x170>)
 8013f0a:	019b      	lsls	r3, r3, #6
 8013f0c:	4413      	add	r3, r2
 8013f0e:	3304      	adds	r3, #4
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	68ba      	ldr	r2, [r7, #8]
 8013f14:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 8013f16:	7bfb      	ldrb	r3, [r7, #15]
 8013f18:	4a16      	ldr	r2, [pc, #88]	; (8013f74 <USBPD_HW_IF_SendBuffer+0x170>)
 8013f1a:	019b      	lsls	r3, r3, #6
 8013f1c:	4413      	add	r3, r2
 8013f1e:	3304      	adds	r3, #4
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	687a      	ldr	r2, [r7, #4]
 8013f24:	605a      	str	r2, [r3, #4]
      Ports[PortNum].hdmatx->CCR |= DMA_CCR_EN;
 8013f26:	7bfb      	ldrb	r3, [r7, #15]
 8013f28:	4a12      	ldr	r2, [pc, #72]	; (8013f74 <USBPD_HW_IF_SendBuffer+0x170>)
 8013f2a:	019b      	lsls	r3, r3, #6
 8013f2c:	4413      	add	r3, r2
 8013f2e:	3304      	adds	r3, #4
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	681a      	ldr	r2, [r3, #0]
 8013f34:	7bfb      	ldrb	r3, [r7, #15]
 8013f36:	490f      	ldr	r1, [pc, #60]	; (8013f74 <USBPD_HW_IF_SendBuffer+0x170>)
 8013f38:	019b      	lsls	r3, r3, #6
 8013f3a:	440b      	add	r3, r1
 8013f3c:	3304      	adds	r3, #4
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	f042 0201 	orr.w	r2, r2, #1
 8013f44:	601a      	str	r2, [r3, #0]

      LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 8013f46:	7bfb      	ldrb	r3, [r7, #15]
 8013f48:	4a0a      	ldr	r2, [pc, #40]	; (8013f74 <USBPD_HW_IF_SendBuffer+0x170>)
 8013f4a:	019b      	lsls	r3, r3, #6
 8013f4c:	4413      	add	r3, r2
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	6879      	ldr	r1, [r7, #4]
 8013f52:	4618      	mov	r0, r3
 8013f54:	f7ff ff0f 	bl	8013d76 <LL_UCPD_WriteTxPaySize>
      LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 8013f58:	7bfb      	ldrb	r3, [r7, #15]
 8013f5a:	4a06      	ldr	r2, [pc, #24]	; (8013f74 <USBPD_HW_IF_SendBuffer+0x170>)
 8013f5c:	019b      	lsls	r3, r3, #6
 8013f5e:	4413      	add	r3, r2
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	4618      	mov	r0, r3
 8013f64:	f7ff fe96 	bl	8013c94 <LL_UCPD_SendMessage>
    }
  }
  return _status;
 8013f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	3718      	adds	r7, #24
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	bd80      	pop	{r7, pc}
 8013f72:	bf00      	nop
 8013f74:	200024a4 	.word	0x200024a4
 8013f78:	0008e318 	.word	0x0008e318
 8013f7c:	00031b18 	.word	0x00031b18
 8013f80:	000360d8 	.word	0x000360d8

08013f84 <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b082      	sub	sp, #8
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8013f8e:	79fb      	ldrb	r3, [r7, #7]
 8013f90:	4a09      	ldr	r2, [pc, #36]	; (8013fb8 <USBPD_HW_IF_Send_BIST_Pattern+0x34>)
 8013f92:	019b      	lsls	r3, r3, #6
 8013f94:	4413      	add	r3, r2
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	2102      	movs	r1, #2
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f7ff fe8a 	bl	8013cb4 <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 8013fa0:	79fb      	ldrb	r3, [r7, #7]
 8013fa2:	4a05      	ldr	r2, [pc, #20]	; (8013fb8 <USBPD_HW_IF_Send_BIST_Pattern+0x34>)
 8013fa4:	019b      	lsls	r3, r3, #6
 8013fa6:	4413      	add	r3, r2
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	4618      	mov	r0, r3
 8013fac:	f7ff fe72 	bl	8013c94 <LL_UCPD_SendMessage>
}
 8013fb0:	bf00      	nop
 8013fb2:	3708      	adds	r7, #8
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	bd80      	pop	{r7, pc}
 8013fb8:	200024a4 	.word	0x200024a4

08013fbc <USBPDM1_AssertRp>:

void USBPDM1_AssertRp(uint8_t PortNum)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b082      	sub	sp, #8
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	71fb      	strb	r3, [r7, #7]
  switch (Ports[PortNum].params->RpResistor)
 8013fc6:	79fb      	ldrb	r3, [r7, #7]
 8013fc8:	4a27      	ldr	r2, [pc, #156]	; (8014068 <USBPDM1_AssertRp+0xac>)
 8013fca:	019b      	lsls	r3, r3, #6
 8013fcc:	4413      	add	r3, r2
 8013fce:	3310      	adds	r3, #16
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	789b      	ldrb	r3, [r3, #2]
 8013fd4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8013fd8:	b2db      	uxtb	r3, r3
 8013fda:	2b01      	cmp	r3, #1
 8013fdc:	d00e      	beq.n	8013ffc <USBPDM1_AssertRp+0x40>
 8013fde:	2b02      	cmp	r3, #2
 8013fe0:	d017      	beq.n	8014012 <USBPDM1_AssertRp+0x56>
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d000      	beq.n	8013fe8 <USBPDM1_AssertRp+0x2c>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 8013fe6:	e01f      	b.n	8014028 <USBPDM1_AssertRp+0x6c>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 8013fe8:	79fb      	ldrb	r3, [r7, #7]
 8013fea:	4a1f      	ldr	r2, [pc, #124]	; (8014068 <USBPDM1_AssertRp+0xac>)
 8013fec:	019b      	lsls	r3, r3, #6
 8013fee:	4413      	add	r3, r2
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	2180      	movs	r1, #128	; 0x80
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f7ff fde4 	bl	8013bc2 <LL_UCPD_SetRpResistor>
      break;
 8013ffa:	e015      	b.n	8014028 <USBPDM1_AssertRp+0x6c>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8013ffc:	79fb      	ldrb	r3, [r7, #7]
 8013ffe:	4a1a      	ldr	r2, [pc, #104]	; (8014068 <USBPDM1_AssertRp+0xac>)
 8014000:	019b      	lsls	r3, r3, #6
 8014002:	4413      	add	r3, r2
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	f44f 7180 	mov.w	r1, #256	; 0x100
 801400a:	4618      	mov	r0, r3
 801400c:	f7ff fdd9 	bl	8013bc2 <LL_UCPD_SetRpResistor>
      break;
 8014010:	e00a      	b.n	8014028 <USBPDM1_AssertRp+0x6c>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8014012:	79fb      	ldrb	r3, [r7, #7]
 8014014:	4a14      	ldr	r2, [pc, #80]	; (8014068 <USBPDM1_AssertRp+0xac>)
 8014016:	019b      	lsls	r3, r3, #6
 8014018:	4413      	add	r3, r2
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8014020:	4618      	mov	r0, r3
 8014022:	f7ff fdce 	bl	8013bc2 <LL_UCPD_SetRpResistor>
      break;
 8014026:	bf00      	nop
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8014028:	79fb      	ldrb	r3, [r7, #7]
 801402a:	4a0f      	ldr	r2, [pc, #60]	; (8014068 <USBPDM1_AssertRp+0xac>)
 801402c:	019b      	lsls	r3, r3, #6
 801402e:	4413      	add	r3, r2
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	2100      	movs	r1, #0
 8014034:	4618      	mov	r0, r3
 8014036:	f7ff fd91 	bl	8013b5c <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 801403a:	79fb      	ldrb	r3, [r7, #7]
 801403c:	4a0a      	ldr	r2, [pc, #40]	; (8014068 <USBPDM1_AssertRp+0xac>)
 801403e:	019b      	lsls	r3, r3, #6
 8014040:	4413      	add	r3, r2
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	4618      	mov	r0, r3
 8014046:	f7ff fdac 	bl	8013ba2 <LL_UCPD_SetSRCRole>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 801404a:	79fb      	ldrb	r3, [r7, #7]
 801404c:	4a06      	ldr	r2, [pc, #24]	; (8014068 <USBPDM1_AssertRp+0xac>)
 801404e:	019b      	lsls	r3, r3, #6
 8014050:	4413      	add	r3, r2
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8014058:	4618      	mov	r0, r3
 801405a:	f7ff fd7f 	bl	8013b5c <LL_UCPD_SetccEnable>
}
 801405e:	bf00      	nop
 8014060:	3708      	adds	r7, #8
 8014062:	46bd      	mov	sp, r7
 8014064:	bd80      	pop	{r7, pc}
 8014066:	bf00      	nop
 8014068:	200024a4 	.word	0x200024a4

0801406c <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 801406c:	b480      	push	{r7}
 801406e:	b083      	sub	sp, #12
 8014070:	af00      	add	r7, sp, #0
 8014072:	4603      	mov	r3, r0
 8014074:	71fb      	strb	r3, [r7, #7]
  /* not needed on G4, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8014076:	bf00      	nop
 8014078:	370c      	adds	r7, #12
 801407a:	46bd      	mov	sp, r7
 801407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014080:	4770      	bx	lr
	...

08014084 <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 8014084:	b580      	push	{r7, lr}
 8014086:	b082      	sub	sp, #8
 8014088:	af00      	add	r7, sp, #0
 801408a:	4603      	mov	r3, r0
 801408c:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 801408e:	79fb      	ldrb	r3, [r7, #7]
 8014090:	4a20      	ldr	r2, [pc, #128]	; (8014114 <USBPDM1_AssertRd+0x90>)
 8014092:	019b      	lsls	r3, r3, #6
 8014094:	4413      	add	r3, r2
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	4618      	mov	r0, r3
 801409a:	f7ff fd1f 	bl	8013adc <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 801409e:	79fb      	ldrb	r3, [r7, #7]
 80140a0:	4a1c      	ldr	r2, [pc, #112]	; (8014114 <USBPDM1_AssertRd+0x90>)
 80140a2:	019b      	lsls	r3, r3, #6
 80140a4:	4413      	add	r3, r2
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	4618      	mov	r0, r3
 80140aa:	f7ff fd37 	bl	8013b1c <LL_UCPD_TypeCDetectionCC1Disable>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 80140ae:	79fb      	ldrb	r3, [r7, #7]
 80140b0:	4a18      	ldr	r2, [pc, #96]	; (8014114 <USBPDM1_AssertRd+0x90>)
 80140b2:	019b      	lsls	r3, r3, #6
 80140b4:	4413      	add	r3, r2
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	2100      	movs	r1, #0
 80140ba:	4618      	mov	r0, r3
 80140bc:	f7ff fd4e 	bl	8013b5c <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 80140c0:	79fb      	ldrb	r3, [r7, #7]
 80140c2:	4a14      	ldr	r2, [pc, #80]	; (8014114 <USBPDM1_AssertRd+0x90>)
 80140c4:	019b      	lsls	r3, r3, #6
 80140c6:	4413      	add	r3, r2
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	4618      	mov	r0, r3
 80140cc:	f7ff fd59 	bl	8013b82 <LL_UCPD_SetSNKRole>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80140d0:	79fb      	ldrb	r3, [r7, #7]
 80140d2:	4a10      	ldr	r2, [pc, #64]	; (8014114 <USBPDM1_AssertRd+0x90>)
 80140d4:	019b      	lsls	r3, r3, #6
 80140d6:	4413      	add	r3, r2
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80140de:	4618      	mov	r0, r3
 80140e0:	f7ff fd3c 	bl	8013b5c <LL_UCPD_SetccEnable>

  HAL_Delay(1);
 80140e4:	2001      	movs	r0, #1
 80140e6:	f7f6 fd3b 	bl	800ab60 <HAL_Delay>

#ifndef _LOW_POWER  
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 80140ea:	79fb      	ldrb	r3, [r7, #7]
 80140ec:	4a09      	ldr	r2, [pc, #36]	; (8014114 <USBPDM1_AssertRd+0x90>)
 80140ee:	019b      	lsls	r3, r3, #6
 80140f0:	4413      	add	r3, r2
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	4618      	mov	r0, r3
 80140f6:	f7ff fce1 	bl	8013abc <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 80140fa:	79fb      	ldrb	r3, [r7, #7]
 80140fc:	4a05      	ldr	r2, [pc, #20]	; (8014114 <USBPDM1_AssertRd+0x90>)
 80140fe:	019b      	lsls	r3, r3, #6
 8014100:	4413      	add	r3, r2
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	4618      	mov	r0, r3
 8014106:	f7ff fcf9 	bl	8013afc <LL_UCPD_TypeCDetectionCC1Enable>
#endif
}
 801410a:	bf00      	nop
 801410c:	3708      	adds	r7, #8
 801410e:	46bd      	mov	sp, r7
 8014110:	bd80      	pop	{r7, pc}
 8014112:	bf00      	nop
 8014114:	200024a4 	.word	0x200024a4

08014118 <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b082      	sub	sp, #8
 801411c:	af00      	add	r7, sp, #0
 801411e:	4603      	mov	r3, r0
 8014120:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8014122:	79fb      	ldrb	r3, [r7, #7]
 8014124:	4a09      	ldr	r2, [pc, #36]	; (801414c <USBPDM1_EnterErrorRecovery+0x34>)
 8014126:	019b      	lsls	r3, r3, #6
 8014128:	4413      	add	r3, r2
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	4618      	mov	r0, r3
 801412e:	f7ff fd38 	bl	8013ba2 <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 8014132:	79fb      	ldrb	r3, [r7, #7]
 8014134:	4a05      	ldr	r2, [pc, #20]	; (801414c <USBPDM1_EnterErrorRecovery+0x34>)
 8014136:	019b      	lsls	r3, r3, #6
 8014138:	4413      	add	r3, r2
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	2100      	movs	r1, #0
 801413e:	4618      	mov	r0, r3
 8014140:	f7ff fd3f 	bl	8013bc2 <LL_UCPD_SetRpResistor>
}
 8014144:	bf00      	nop
 8014146:	3708      	adds	r7, #8
 8014148:	46bd      	mov	sp, r7
 801414a:	bd80      	pop	{r7, pc}
 801414c:	200024a4 	.word	0x200024a4

08014150 <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 8014150:	b480      	push	{r7}
 8014152:	b083      	sub	sp, #12
 8014154:	af00      	add	r7, sp, #0
 8014156:	4603      	mov	r3, r0
 8014158:	71fb      	strb	r3, [r7, #7]
  /* not needed on G4, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 801415a:	bf00      	nop
 801415c:	370c      	adds	r7, #12
 801415e:	46bd      	mov	sp, r7
 8014160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014164:	4770      	bx	lr
	...

08014168 <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 8014168:	b580      	push	{r7, lr}
 801416a:	b082      	sub	sp, #8
 801416c:	af00      	add	r7, sp, #0
 801416e:	4603      	mov	r3, r0
 8014170:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 8014172:	79fb      	ldrb	r3, [r7, #7]
 8014174:	4a05      	ldr	r2, [pc, #20]	; (801418c <USBPD_HW_IF_EnableRX+0x24>)
 8014176:	019b      	lsls	r3, r3, #6
 8014178:	4413      	add	r3, r2
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	4618      	mov	r0, r3
 801417e:	f7ff fd46 	bl	8013c0e <LL_UCPD_RxEnable>
}
 8014182:	bf00      	nop
 8014184:	3708      	adds	r7, #8
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}
 801418a:	bf00      	nop
 801418c:	200024a4 	.word	0x200024a4

08014190 <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b082      	sub	sp, #8
 8014194:	af00      	add	r7, sp, #0
 8014196:	4603      	mov	r3, r0
 8014198:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 801419a:	79fb      	ldrb	r3, [r7, #7]
 801419c:	4a05      	ldr	r2, [pc, #20]	; (80141b4 <USBPD_HW_IF_DisableRX+0x24>)
 801419e:	019b      	lsls	r3, r3, #6
 80141a0:	4413      	add	r3, r2
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	4618      	mov	r0, r3
 80141a6:	f7ff fd42 	bl	8013c2e <LL_UCPD_RxDisable>
}
 80141aa:	bf00      	nop
 80141ac:	3708      	adds	r7, #8
 80141ae:	46bd      	mov	sp, r7
 80141b0:	bd80      	pop	{r7, pc}
 80141b2:	bf00      	nop
 80141b4:	200024a4 	.word	0x200024a4

080141b8 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 80141b8:	b590      	push	{r4, r7, lr}
 80141ba:	b085      	sub	sp, #20
 80141bc:	af00      	add	r7, sp, #0
 80141be:	4603      	mov	r3, r0
 80141c0:	6039      	str	r1, [r7, #0]
 80141c2:	71fb      	strb	r3, [r7, #7]
  uint32_t _temp;
    
  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 80141c4:	f000 fba0 	bl	8014908 <USBPD_TIM_Init>
 
  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 80141c8:	79fc      	ldrb	r4, [r7, #7]
 80141ca:	79fb      	ldrb	r3, [r7, #7]
 80141cc:	4618      	mov	r0, r3
 80141ce:	f7fe ff95 	bl	80130fc <USBPD_HW_Init_DMATxInstance>
 80141d2:	4601      	mov	r1, r0
 80141d4:	4a6e      	ldr	r2, [pc, #440]	; (8014390 <HW_SignalAttachement+0x1d8>)
 80141d6:	01a3      	lsls	r3, r4, #6
 80141d8:	4413      	add	r3, r2
 80141da:	3304      	adds	r3, #4
 80141dc:	6019      	str	r1, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 80141de:	79fc      	ldrb	r4, [r7, #7]
 80141e0:	79fb      	ldrb	r3, [r7, #7]
 80141e2:	4618      	mov	r0, r3
 80141e4:	f7fe ff4a 	bl	801307c <USBPD_HW_Init_DMARxInstance>
 80141e8:	4601      	mov	r1, r0
 80141ea:	4a69      	ldr	r2, [pc, #420]	; (8014390 <HW_SignalAttachement+0x1d8>)
 80141ec:	01a3      	lsls	r3, r4, #6
 80141ee:	4413      	add	r3, r2
 80141f0:	3308      	adds	r3, #8
 80141f2:	6019      	str	r1, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 80141f4:	79fb      	ldrb	r3, [r7, #7]
 80141f6:	4a66      	ldr	r2, [pc, #408]	; (8014390 <HW_SignalAttachement+0x1d8>)
 80141f8:	019b      	lsls	r3, r3, #6
 80141fa:	4413      	add	r3, r2
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	3330      	adds	r3, #48	; 0x30
 8014200:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 8014202:	79fb      	ldrb	r3, [r7, #7]
 8014204:	4a62      	ldr	r2, [pc, #392]	; (8014390 <HW_SignalAttachement+0x1d8>)
 8014206:	019b      	lsls	r3, r3, #6
 8014208:	4413      	add	r3, r2
 801420a:	3308      	adds	r3, #8
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	68fa      	ldr	r2, [r7, #12]
 8014210:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8014212:	79fb      	ldrb	r3, [r7, #7]
 8014214:	4a5e      	ldr	r2, [pc, #376]	; (8014390 <HW_SignalAttachement+0x1d8>)
 8014216:	019b      	lsls	r3, r3, #6
 8014218:	4413      	add	r3, r2
 801421a:	3338      	adds	r3, #56	; 0x38
 801421c:	6819      	ldr	r1, [r3, #0]
 801421e:	79fb      	ldrb	r3, [r7, #7]
 8014220:	4a5b      	ldr	r2, [pc, #364]	; (8014390 <HW_SignalAttachement+0x1d8>)
 8014222:	019b      	lsls	r3, r3, #6
 8014224:	4413      	add	r3, r2
 8014226:	3308      	adds	r3, #8
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	460a      	mov	r2, r1
 801422c:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 801422e:	79fb      	ldrb	r3, [r7, #7]
 8014230:	4a57      	ldr	r2, [pc, #348]	; (8014390 <HW_SignalAttachement+0x1d8>)
 8014232:	019b      	lsls	r3, r3, #6
 8014234:	4413      	add	r3, r2
 8014236:	3308      	adds	r3, #8
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	f44f 7284 	mov.w	r2, #264	; 0x108
 801423e:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 8014240:	79fb      	ldrb	r3, [r7, #7]
 8014242:	4a53      	ldr	r2, [pc, #332]	; (8014390 <HW_SignalAttachement+0x1d8>)
 8014244:	019b      	lsls	r3, r3, #6
 8014246:	4413      	add	r3, r2
 8014248:	3308      	adds	r3, #8
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	681a      	ldr	r2, [r3, #0]
 801424e:	79fb      	ldrb	r3, [r7, #7]
 8014250:	494f      	ldr	r1, [pc, #316]	; (8014390 <HW_SignalAttachement+0x1d8>)
 8014252:	019b      	lsls	r3, r3, #6
 8014254:	440b      	add	r3, r1
 8014256:	3308      	adds	r3, #8
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	f042 0201 	orr.w	r2, r2, #1
 801425e:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 8014260:	79fb      	ldrb	r3, [r7, #7]
 8014262:	4a4b      	ldr	r2, [pc, #300]	; (8014390 <HW_SignalAttachement+0x1d8>)
 8014264:	019b      	lsls	r3, r3, #6
 8014266:	4413      	add	r3, r2
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	3324      	adds	r3, #36	; 0x24
 801426c:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 801426e:	79fb      	ldrb	r3, [r7, #7]
 8014270:	4a47      	ldr	r2, [pc, #284]	; (8014390 <HW_SignalAttachement+0x1d8>)
 8014272:	019b      	lsls	r3, r3, #6
 8014274:	4413      	add	r3, r2
 8014276:	3304      	adds	r3, #4
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	68fa      	ldr	r2, [r7, #12]
 801427c:	609a      	str	r2, [r3, #8]

  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE | UCPD_IMR_TXMSGABTIE |\
                        UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE    | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 801427e:	79fb      	ldrb	r3, [r7, #7]
 8014280:	4a43      	ldr	r2, [pc, #268]	; (8014390 <HW_SignalAttachement+0x1d8>)
 8014282:	019b      	lsls	r3, r3, #6
 8014284:	4413      	add	r3, r2
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	691b      	ldr	r3, [r3, #16]
 801428a:	79fa      	ldrb	r2, [r7, #7]
 801428c:	4940      	ldr	r1, [pc, #256]	; (8014390 <HW_SignalAttachement+0x1d8>)
 801428e:	0192      	lsls	r2, r2, #6
 8014290:	440a      	add	r2, r1
 8014292:	6812      	ldr	r2, [r2, #0]
 8014294:	f443 53f3 	orr.w	r3, r3, #7776	; 0x1e60
 8014298:	f043 031e 	orr.w	r3, r3, #30
 801429c:	6113      	str	r3, [r2, #16]

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 801429e:	79fb      	ldrb	r3, [r7, #7]
 80142a0:	4a3b      	ldr	r2, [pc, #236]	; (8014390 <HW_SignalAttachement+0x1d8>)
 80142a2:	019b      	lsls	r3, r3, #6
 80142a4:	4413      	add	r3, r2
 80142a6:	333c      	adds	r3, #60	; 0x3c
 80142a8:	683a      	ldr	r2, [r7, #0]
 80142aa:	601a      	str	r2, [r3, #0]

  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 80142ac:	79fb      	ldrb	r3, [r7, #7]
 80142ae:	4a38      	ldr	r2, [pc, #224]	; (8014390 <HW_SignalAttachement+0x1d8>)
 80142b0:	019b      	lsls	r3, r3, #6
 80142b2:	4413      	add	r3, r2
 80142b4:	6818      	ldr	r0, [r3, #0]
 80142b6:	79fb      	ldrb	r3, [r7, #7]
 80142b8:	4a35      	ldr	r2, [pc, #212]	; (8014390 <HW_SignalAttachement+0x1d8>)
 80142ba:	019b      	lsls	r3, r3, #6
 80142bc:	4413      	add	r3, r2
 80142be:	333c      	adds	r3, #60	; 0x3c
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	2b01      	cmp	r3, #1
 80142c4:	d101      	bne.n	80142ca <HW_SignalAttachement+0x112>
 80142c6:	2300      	movs	r3, #0
 80142c8:	e000      	b.n	80142cc <HW_SignalAttachement+0x114>
 80142ca:	2340      	movs	r3, #64	; 0x40
 80142cc:	4619      	mov	r1, r3
 80142ce:	f7ff fc8b 	bl	8013be8 <LL_UCPD_SetCCPin>

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 80142d2:	79fb      	ldrb	r3, [r7, #7]
 80142d4:	4a2e      	ldr	r2, [pc, #184]	; (8014390 <HW_SignalAttachement+0x1d8>)
 80142d6:	019b      	lsls	r3, r3, #6
 80142d8:	4413      	add	r3, r2
 80142da:	330c      	adds	r3, #12
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	7a1b      	ldrb	r3, [r3, #8]
 80142e0:	f003 0302 	and.w	r3, r3, #2
 80142e4:	b2db      	uxtb	r3, r3
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d00f      	beq.n	801430a <HW_SignalAttachement+0x152>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 80142ea:	79fb      	ldrb	r3, [r7, #7]
 80142ec:	4a28      	ldr	r2, [pc, #160]	; (8014390 <HW_SignalAttachement+0x1d8>)
 80142ee:	019b      	lsls	r3, r3, #6
 80142f0:	4413      	add	r3, r2
 80142f2:	333c      	adds	r3, #60	; 0x3c
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	2b01      	cmp	r3, #1
 80142f8:	d101      	bne.n	80142fe <HW_SignalAttachement+0x146>
 80142fa:	2201      	movs	r2, #1
 80142fc:	e000      	b.n	8014300 <HW_SignalAttachement+0x148>
 80142fe:	2202      	movs	r2, #2
 8014300:	79fb      	ldrb	r3, [r7, #7]
 8014302:	4611      	mov	r1, r2
 8014304:	4618      	mov	r0, r3
 8014306:	f7fe ff38 	bl	801317a <USBPD_HW_SetFRSSignalling>
  /* Initialize Vconn managment */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
  
  /* Disable the Resistor on Vconn PIN */
  (Ports[PortNum].CCx == CC1) ? LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1) : LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 801430a:	79fb      	ldrb	r3, [r7, #7]
 801430c:	4a20      	ldr	r2, [pc, #128]	; (8014390 <HW_SignalAttachement+0x1d8>)
 801430e:	019b      	lsls	r3, r3, #6
 8014310:	4413      	add	r3, r2
 8014312:	333c      	adds	r3, #60	; 0x3c
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	2b01      	cmp	r3, #1
 8014318:	d10a      	bne.n	8014330 <HW_SignalAttachement+0x178>
 801431a:	79fb      	ldrb	r3, [r7, #7]
 801431c:	4a1c      	ldr	r2, [pc, #112]	; (8014390 <HW_SignalAttachement+0x1d8>)
 801431e:	019b      	lsls	r3, r3, #6
 8014320:	4413      	add	r3, r2
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014328:	4618      	mov	r0, r3
 801432a:	f7ff fc17 	bl	8013b5c <LL_UCPD_SetccEnable>
 801432e:	e009      	b.n	8014344 <HW_SignalAttachement+0x18c>
 8014330:	79fb      	ldrb	r3, [r7, #7]
 8014332:	4a17      	ldr	r2, [pc, #92]	; (8014390 <HW_SignalAttachement+0x1d8>)
 8014334:	019b      	lsls	r3, r3, #6
 8014336:	4413      	add	r3, r2
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801433e:	4618      	mov	r0, r3
 8014340:	f7ff fc0c 	bl	8013b5c <LL_UCPD_SetccEnable>

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 8014344:	79fb      	ldrb	r3, [r7, #7]
 8014346:	4a12      	ldr	r2, [pc, #72]	; (8014390 <HW_SignalAttachement+0x1d8>)
 8014348:	019b      	lsls	r3, r3, #6
 801434a:	4413      	add	r3, r2
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	2100      	movs	r1, #0
 8014350:	4618      	mov	r0, r3
 8014352:	f7ff fc7c 	bl	8013c4e <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 8014356:	79fb      	ldrb	r3, [r7, #7]
 8014358:	4a0d      	ldr	r2, [pc, #52]	; (8014390 <HW_SignalAttachement+0x1d8>)
 801435a:	019b      	lsls	r3, r3, #6
 801435c:	4413      	add	r3, r2
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	4618      	mov	r0, r3
 8014362:	f7ff fcba 	bl	8013cda <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 8014366:	79fb      	ldrb	r3, [r7, #7]
 8014368:	4a09      	ldr	r2, [pc, #36]	; (8014390 <HW_SignalAttachement+0x1d8>)
 801436a:	019b      	lsls	r3, r3, #6
 801436c:	4413      	add	r3, r2
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	4618      	mov	r0, r3
 8014372:	f7ff fcd2 	bl	8013d1a <LL_UCPD_TxDMAEnable>
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 8014376:	79fb      	ldrb	r3, [r7, #7]
 8014378:	4a05      	ldr	r2, [pc, #20]	; (8014390 <HW_SignalAttachement+0x1d8>)
 801437a:	019b      	lsls	r3, r3, #6
 801437c:	4413      	add	r3, r2
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	4618      	mov	r0, r3
 8014382:	f7ff fc44 	bl	8013c0e <LL_UCPD_RxEnable>
}
 8014386:	bf00      	nop
 8014388:	3714      	adds	r7, #20
 801438a:	46bd      	mov	sp, r7
 801438c:	bd90      	pop	{r4, r7, pc}
 801438e:	bf00      	nop
 8014390:	200024a4 	.word	0x200024a4

08014394 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 8014394:	b580      	push	{r7, lr}
 8014396:	b082      	sub	sp, #8
 8014398:	af00      	add	r7, sp, #0
 801439a:	4603      	mov	r3, r0
 801439c:	71fb      	strb	r3, [r7, #7]
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 801439e:	79fb      	ldrb	r3, [r7, #7]
 80143a0:	4a23      	ldr	r2, [pc, #140]	; (8014430 <HW_SignalDetachment+0x9c>)
 80143a2:	019b      	lsls	r3, r3, #6
 80143a4:	4413      	add	r3, r2
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	4618      	mov	r0, r3
 80143aa:	f7ff fca6 	bl	8013cfa <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 80143ae:	79fb      	ldrb	r3, [r7, #7]
 80143b0:	4a1f      	ldr	r2, [pc, #124]	; (8014430 <HW_SignalDetachment+0x9c>)
 80143b2:	019b      	lsls	r3, r3, #6
 80143b4:	4413      	add	r3, r2
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	4618      	mov	r0, r3
 80143ba:	f7ff fcbe 	bl	8013d3a <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 80143be:	79fb      	ldrb	r3, [r7, #7]
 80143c0:	4a1b      	ldr	r2, [pc, #108]	; (8014430 <HW_SignalDetachment+0x9c>)
 80143c2:	019b      	lsls	r3, r3, #6
 80143c4:	4413      	add	r3, r2
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	4618      	mov	r0, r3
 80143ca:	f7ff fc30 	bl	8013c2e <LL_UCPD_RxDisable>

#ifndef _LOW_POWER  
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 80143ce:	79fb      	ldrb	r3, [r7, #7]
 80143d0:	4a17      	ldr	r2, [pc, #92]	; (8014430 <HW_SignalDetachment+0x9c>)
 80143d2:	019b      	lsls	r3, r3, #6
 80143d4:	4413      	add	r3, r2
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80143dc:	611a      	str	r2, [r3, #16]
#endif

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 80143de:	79fb      	ldrb	r3, [r7, #7]
 80143e0:	4618      	mov	r0, r3
 80143e2:	f7fe febf 	bl	8013164 <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 80143e6:	79fb      	ldrb	r3, [r7, #7]
 80143e8:	4618      	mov	r0, r3
 80143ea:	f7fe fe7b 	bl	80130e4 <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80143ee:	79fb      	ldrb	r3, [r7, #7]
 80143f0:	4a0f      	ldr	r2, [pc, #60]	; (8014430 <HW_SignalDetachment+0x9c>)
 80143f2:	019b      	lsls	r3, r3, #6
 80143f4:	4413      	add	r3, r2
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80143fc:	4618      	mov	r0, r3
 80143fe:	f7ff fbad 	bl	8013b5c <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole) 
 8014402:	79fb      	ldrb	r3, [r7, #7]
 8014404:	4a0a      	ldr	r2, [pc, #40]	; (8014430 <HW_SignalDetachment+0x9c>)
 8014406:	019b      	lsls	r3, r3, #6
 8014408:	4413      	add	r3, r2
 801440a:	3310      	adds	r3, #16
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	781b      	ldrb	r3, [r3, #0]
 8014410:	f003 0304 	and.w	r3, r3, #4
 8014414:	b2db      	uxtb	r3, r3
 8014416:	2b00      	cmp	r3, #0
 8014418:	d103      	bne.n	8014422 <HW_SignalDetachment+0x8e>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn managment */
  (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif  
    /* DeInitialise VBUS power */
  (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 801441a:	79fb      	ldrb	r3, [r7, #7]
 801441c:	4618      	mov	r0, r3
 801441e:	f001 fae2 	bl	80159e6 <BSP_USBPD_PWR_VBUSDeInit>
  }
  
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 8014422:	f000 faf5 	bl	8014a10 <USBPD_TIM_DeInit>
}
 8014426:	bf00      	nop
 8014428:	3708      	adds	r7, #8
 801442a:	46bd      	mov	sp, r7
 801442c:	bd80      	pop	{r7, pc}
 801442e:	bf00      	nop
 8014430:	200024a4 	.word	0x200024a4

08014434 <USBPD_HW_IF_SetResistor_SinkTxNG>:

void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b082      	sub	sp, #8
 8014438:	af00      	add	r7, sp, #0
 801443a:	4603      	mov	r3, r0
 801443c:	71fb      	strb	r3, [r7, #7]
  /* set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 801443e:	79fb      	ldrb	r3, [r7, #7]
 8014440:	4a06      	ldr	r2, [pc, #24]	; (801445c <USBPD_HW_IF_SetResistor_SinkTxNG+0x28>)
 8014442:	019b      	lsls	r3, r3, #6
 8014444:	4413      	add	r3, r2
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	f44f 7180 	mov.w	r1, #256	; 0x100
 801444c:	4618      	mov	r0, r3
 801444e:	f7ff fbb8 	bl	8013bc2 <LL_UCPD_SetRpResistor>
}
 8014452:	bf00      	nop
 8014454:	3708      	adds	r7, #8
 8014456:	46bd      	mov	sp, r7
 8014458:	bd80      	pop	{r7, pc}
 801445a:	bf00      	nop
 801445c:	200024a4 	.word	0x200024a4

08014460 <USBPD_HW_IF_SetResistor_SinkTxOK>:

void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 8014460:	b580      	push	{r7, lr}
 8014462:	b082      	sub	sp, #8
 8014464:	af00      	add	r7, sp, #0
 8014466:	4603      	mov	r3, r0
 8014468:	71fb      	strb	r3, [r7, #7]
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 801446a:	79fb      	ldrb	r3, [r7, #7]
 801446c:	4a06      	ldr	r2, [pc, #24]	; (8014488 <USBPD_HW_IF_SetResistor_SinkTxOK+0x28>)
 801446e:	019b      	lsls	r3, r3, #6
 8014470:	4413      	add	r3, r2
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8014478:	4618      	mov	r0, r3
 801447a:	f7ff fba2 	bl	8013bc2 <LL_UCPD_SetRpResistor>
}
 801447e:	bf00      	nop
 8014480:	3708      	adds	r7, #8
 8014482:	46bd      	mov	sp, r7
 8014484:	bd80      	pop	{r7, pc}
 8014486:	bf00      	nop
 8014488:	200024a4 	.word	0x200024a4

0801448c <USBPD_HW_IF_IsResistor_SinkTxOk>:

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 801448c:	b480      	push	{r7}
 801448e:	b083      	sub	sp, #12
 8014490:	af00      	add	r7, sp, #0
 8014492:	4603      	mov	r3, r0
 8014494:	71fb      	strb	r3, [r7, #7]
  switch (Ports[PortNum].CCx)
 8014496:	79fb      	ldrb	r3, [r7, #7]
 8014498:	4a14      	ldr	r2, [pc, #80]	; (80144ec <USBPD_HW_IF_IsResistor_SinkTxOk+0x60>)
 801449a:	019b      	lsls	r3, r3, #6
 801449c:	4413      	add	r3, r2
 801449e:	333c      	adds	r3, #60	; 0x3c
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	2b01      	cmp	r3, #1
 80144a4:	d002      	beq.n	80144ac <USBPD_HW_IF_IsResistor_SinkTxOk+0x20>
 80144a6:	2b02      	cmp	r3, #2
 80144a8:	d00b      	beq.n	80144c2 <USBPD_HW_IF_IsResistor_SinkTxOk+0x36>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 80144aa:	e018      	b.n	80144de <USBPD_HW_IF_IsResistor_SinkTxOk+0x52>
      if (Ports[PortNum].PIN_CC1 == LL_UCPD_SNK_CC1_VRP30A)
 80144ac:	79fb      	ldrb	r3, [r7, #7]
 80144ae:	4a0f      	ldr	r2, [pc, #60]	; (80144ec <USBPD_HW_IF_IsResistor_SinkTxOk+0x60>)
 80144b0:	019b      	lsls	r3, r3, #6
 80144b2:	4413      	add	r3, r2
 80144b4:	332c      	adds	r3, #44	; 0x2c
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80144bc:	d10c      	bne.n	80144d8 <USBPD_HW_IF_IsResistor_SinkTxOk+0x4c>
        return USBPD_TRUE;
 80144be:	2301      	movs	r3, #1
 80144c0:	e00e      	b.n	80144e0 <USBPD_HW_IF_IsResistor_SinkTxOk+0x54>
      if (Ports[PortNum].PIN_CC2 == LL_UCPD_SNK_CC2_VRP30A)
 80144c2:	79fb      	ldrb	r3, [r7, #7]
 80144c4:	4a09      	ldr	r2, [pc, #36]	; (80144ec <USBPD_HW_IF_IsResistor_SinkTxOk+0x60>)
 80144c6:	019b      	lsls	r3, r3, #6
 80144c8:	4413      	add	r3, r2
 80144ca:	3330      	adds	r3, #48	; 0x30
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80144d2:	d103      	bne.n	80144dc <USBPD_HW_IF_IsResistor_SinkTxOk+0x50>
        return USBPD_TRUE;
 80144d4:	2301      	movs	r3, #1
 80144d6:	e003      	b.n	80144e0 <USBPD_HW_IF_IsResistor_SinkTxOk+0x54>
      break;
 80144d8:	bf00      	nop
 80144da:	e000      	b.n	80144de <USBPD_HW_IF_IsResistor_SinkTxOk+0x52>
      break;
 80144dc:	bf00      	nop
  }

  return USBPD_FALSE;
 80144de:	2300      	movs	r3, #0
}
 80144e0:	4618      	mov	r0, r3
 80144e2:	370c      	adds	r7, #12
 80144e4:	46bd      	mov	sp, r7
 80144e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ea:	4770      	bx	lr
 80144ec:	200024a4 	.word	0x200024a4

080144f0 <USBPD_HW_IF_FastRoleSwapSignalling>:

void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b082      	sub	sp, #8
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	4603      	mov	r3, r0
 80144f8:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 80144fa:	79fb      	ldrb	r3, [r7, #7]
 80144fc:	4a05      	ldr	r2, [pc, #20]	; (8014514 <USBPD_HW_IF_FastRoleSwapSignalling+0x24>)
 80144fe:	019b      	lsls	r3, r3, #6
 8014500:	4413      	add	r3, r2
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	4618      	mov	r0, r3
 8014506:	f7ff fb19 	bl	8013b3c <LL_UCPD_SignalFRSTX>
}
 801450a:	bf00      	nop
 801450c:	3708      	adds	r7, #8
 801450e:	46bd      	mov	sp, r7
 8014510:	bd80      	pop	{r7, pc}
 8014512:	bf00      	nop
 8014514:	200024a4 	.word	0x200024a4

08014518 <HW_IF_PWR_GetVoltage>:

  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b084      	sub	sp, #16
 801451c:	af00      	add	r7, sp, #0
 801451e:	4603      	mov	r3, r0
 8014520:	71fb      	strb	r3, [r7, #7]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8014522:	79fb      	ldrb	r3, [r7, #7]
 8014524:	f107 020c 	add.w	r2, r7, #12
 8014528:	4611      	mov	r1, r2
 801452a:	4618      	mov	r0, r3
 801452c:	f001 fa70 	bl	8015a10 <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	b29b      	uxth	r3, r3
}
 8014534:	4618      	mov	r0, r3
 8014536:	3710      	adds	r7, #16
 8014538:	46bd      	mov	sp, r7
 801453a:	bd80      	pop	{r7, pc}

0801453c <LL_APB2_GRP1_EnableClock>:
{
 801453c:	b480      	push	{r7}
 801453e:	b085      	sub	sp, #20
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8014544:	4b08      	ldr	r3, [pc, #32]	; (8014568 <LL_APB2_GRP1_EnableClock+0x2c>)
 8014546:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8014548:	4907      	ldr	r1, [pc, #28]	; (8014568 <LL_APB2_GRP1_EnableClock+0x2c>)
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	4313      	orrs	r3, r2
 801454e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8014550:	4b05      	ldr	r3, [pc, #20]	; (8014568 <LL_APB2_GRP1_EnableClock+0x2c>)
 8014552:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	4013      	ands	r3, r2
 8014558:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801455a:	68fb      	ldr	r3, [r7, #12]
}
 801455c:	bf00      	nop
 801455e:	3714      	adds	r7, #20
 8014560:	46bd      	mov	sp, r7
 8014562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014566:	4770      	bx	lr
 8014568:	40021000 	.word	0x40021000

0801456c <LL_APB2_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 801456c:	b480      	push	{r7}
 801456e:	b083      	sub	sp, #12
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8014574:	4b06      	ldr	r3, [pc, #24]	; (8014590 <LL_APB2_GRP1_DisableClock+0x24>)
 8014576:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	43db      	mvns	r3, r3
 801457c:	4904      	ldr	r1, [pc, #16]	; (8014590 <LL_APB2_GRP1_DisableClock+0x24>)
 801457e:	4013      	ands	r3, r2
 8014580:	660b      	str	r3, [r1, #96]	; 0x60
}
 8014582:	bf00      	nop
 8014584:	370c      	adds	r7, #12
 8014586:	46bd      	mov	sp, r7
 8014588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458c:	4770      	bx	lr
 801458e:	bf00      	nop
 8014590:	40021000 	.word	0x40021000

08014594 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8014594:	b480      	push	{r7}
 8014596:	b083      	sub	sp, #12
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	f043 0201 	orr.w	r2, r3, #1
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	601a      	str	r2, [r3, #0]
}
 80145a8:	bf00      	nop
 80145aa:	370c      	adds	r7, #12
 80145ac:	46bd      	mov	sp, r7
 80145ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b2:	4770      	bx	lr

080145b4 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 80145b4:	b480      	push	{r7}
 80145b6:	b083      	sub	sp, #12
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
 80145bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80145c6:	683b      	ldr	r3, [r7, #0]
 80145c8:	431a      	orrs	r2, r3
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	601a      	str	r2, [r3, #0]
}
 80145ce:	bf00      	nop
 80145d0:	370c      	adds	r7, #12
 80145d2:	46bd      	mov	sp, r7
 80145d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d8:	4770      	bx	lr

080145da <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80145da:	b480      	push	{r7}
 80145dc:	b083      	sub	sp, #12
 80145de:	af00      	add	r7, sp, #0
 80145e0:	6078      	str	r0, [r7, #4]
 80145e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	683a      	ldr	r2, [r7, #0]
 80145e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80145ea:	bf00      	nop
 80145ec:	370c      	adds	r7, #12
 80145ee:	46bd      	mov	sp, r7
 80145f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f4:	4770      	bx	lr

080145f6 <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
{
 80145f6:	b480      	push	{r7}
 80145f8:	b083      	sub	sp, #12
 80145fa:	af00      	add	r7, sp, #0
 80145fc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8014602:	4618      	mov	r0, r3
 8014604:	370c      	adds	r7, #12
 8014606:	46bd      	mov	sp, r7
 8014608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460c:	4770      	bx	lr

0801460e <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 801460e:	b480      	push	{r7}
 8014610:	b083      	sub	sp, #12
 8014612:	af00      	add	r7, sp, #0
 8014614:	6078      	str	r0, [r7, #4]
 8014616:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	683a      	ldr	r2, [r7, #0]
 801461c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801461e:	bf00      	nop
 8014620:	370c      	adds	r7, #12
 8014622:	46bd      	mov	sp, r7
 8014624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014628:	4770      	bx	lr
	...

0801462c <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PULSE_ON_COMPARE   (for channel 3 or channel 4 only)
  *         @arg @ref LL_TIM_OCMODE_DIRECTION_OUTPUT   (for channel 3 or channel 4 only)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 801462c:	b4b0      	push	{r4, r5, r7}
 801462e:	b085      	sub	sp, #20
 8014630:	af00      	add	r7, sp, #0
 8014632:	60f8      	str	r0, [r7, #12]
 8014634:	60b9      	str	r1, [r7, #8]
 8014636:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8014638:	68bb      	ldr	r3, [r7, #8]
 801463a:	2b01      	cmp	r3, #1
 801463c:	d02e      	beq.n	801469c <LL_TIM_OC_SetMode+0x70>
 801463e:	68bb      	ldr	r3, [r7, #8]
 8014640:	2b04      	cmp	r3, #4
 8014642:	d029      	beq.n	8014698 <LL_TIM_OC_SetMode+0x6c>
 8014644:	68bb      	ldr	r3, [r7, #8]
 8014646:	2b10      	cmp	r3, #16
 8014648:	d024      	beq.n	8014694 <LL_TIM_OC_SetMode+0x68>
 801464a:	68bb      	ldr	r3, [r7, #8]
 801464c:	2b40      	cmp	r3, #64	; 0x40
 801464e:	d01f      	beq.n	8014690 <LL_TIM_OC_SetMode+0x64>
 8014650:	68bb      	ldr	r3, [r7, #8]
 8014652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014656:	d019      	beq.n	801468c <LL_TIM_OC_SetMode+0x60>
 8014658:	68bb      	ldr	r3, [r7, #8]
 801465a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801465e:	d013      	beq.n	8014688 <LL_TIM_OC_SetMode+0x5c>
 8014660:	68bb      	ldr	r3, [r7, #8]
 8014662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014666:	d00d      	beq.n	8014684 <LL_TIM_OC_SetMode+0x58>
 8014668:	68bb      	ldr	r3, [r7, #8]
 801466a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801466e:	d007      	beq.n	8014680 <LL_TIM_OC_SetMode+0x54>
 8014670:	68bb      	ldr	r3, [r7, #8]
 8014672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014676:	d101      	bne.n	801467c <LL_TIM_OC_SetMode+0x50>
 8014678:	2308      	movs	r3, #8
 801467a:	e010      	b.n	801469e <LL_TIM_OC_SetMode+0x72>
 801467c:	2309      	movs	r3, #9
 801467e:	e00e      	b.n	801469e <LL_TIM_OC_SetMode+0x72>
 8014680:	2307      	movs	r3, #7
 8014682:	e00c      	b.n	801469e <LL_TIM_OC_SetMode+0x72>
 8014684:	2306      	movs	r3, #6
 8014686:	e00a      	b.n	801469e <LL_TIM_OC_SetMode+0x72>
 8014688:	2305      	movs	r3, #5
 801468a:	e008      	b.n	801469e <LL_TIM_OC_SetMode+0x72>
 801468c:	2304      	movs	r3, #4
 801468e:	e006      	b.n	801469e <LL_TIM_OC_SetMode+0x72>
 8014690:	2303      	movs	r3, #3
 8014692:	e004      	b.n	801469e <LL_TIM_OC_SetMode+0x72>
 8014694:	2302      	movs	r3, #2
 8014696:	e002      	b.n	801469e <LL_TIM_OC_SetMode+0x72>
 8014698:	2301      	movs	r3, #1
 801469a:	e000      	b.n	801469e <LL_TIM_OC_SetMode+0x72>
 801469c:	2300      	movs	r3, #0
 801469e:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	3318      	adds	r3, #24
 80146a4:	461a      	mov	r2, r3
 80146a6:	4629      	mov	r1, r5
 80146a8:	4b0c      	ldr	r3, [pc, #48]	; (80146dc <LL_TIM_OC_SetMode+0xb0>)
 80146aa:	5c5b      	ldrb	r3, [r3, r1]
 80146ac:	4413      	add	r3, r2
 80146ae:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80146b0:	6822      	ldr	r2, [r4, #0]
 80146b2:	4629      	mov	r1, r5
 80146b4:	4b0a      	ldr	r3, [pc, #40]	; (80146e0 <LL_TIM_OC_SetMode+0xb4>)
 80146b6:	5c5b      	ldrb	r3, [r3, r1]
 80146b8:	4619      	mov	r1, r3
 80146ba:	4b0a      	ldr	r3, [pc, #40]	; (80146e4 <LL_TIM_OC_SetMode+0xb8>)
 80146bc:	408b      	lsls	r3, r1
 80146be:	43db      	mvns	r3, r3
 80146c0:	401a      	ands	r2, r3
 80146c2:	4629      	mov	r1, r5
 80146c4:	4b06      	ldr	r3, [pc, #24]	; (80146e0 <LL_TIM_OC_SetMode+0xb4>)
 80146c6:	5c5b      	ldrb	r3, [r3, r1]
 80146c8:	4619      	mov	r1, r3
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	408b      	lsls	r3, r1
 80146ce:	4313      	orrs	r3, r2
 80146d0:	6023      	str	r3, [r4, #0]
}
 80146d2:	bf00      	nop
 80146d4:	3714      	adds	r7, #20
 80146d6:	46bd      	mov	sp, r7
 80146d8:	bcb0      	pop	{r4, r5, r7}
 80146da:	4770      	bx	lr
 80146dc:	08019d50 	.word	0x08019d50
 80146e0:	08019d5c 	.word	0x08019d5c
 80146e4:	00010073 	.word	0x00010073

080146e8 <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 80146e8:	b490      	push	{r4, r7}
 80146ea:	b084      	sub	sp, #16
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	60f8      	str	r0, [r7, #12]
 80146f0:	60b9      	str	r1, [r7, #8]
 80146f2:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80146f4:	68bb      	ldr	r3, [r7, #8]
 80146f6:	2b01      	cmp	r3, #1
 80146f8:	d02e      	beq.n	8014758 <LL_TIM_OC_SetPolarity+0x70>
 80146fa:	68bb      	ldr	r3, [r7, #8]
 80146fc:	2b04      	cmp	r3, #4
 80146fe:	d029      	beq.n	8014754 <LL_TIM_OC_SetPolarity+0x6c>
 8014700:	68bb      	ldr	r3, [r7, #8]
 8014702:	2b10      	cmp	r3, #16
 8014704:	d024      	beq.n	8014750 <LL_TIM_OC_SetPolarity+0x68>
 8014706:	68bb      	ldr	r3, [r7, #8]
 8014708:	2b40      	cmp	r3, #64	; 0x40
 801470a:	d01f      	beq.n	801474c <LL_TIM_OC_SetPolarity+0x64>
 801470c:	68bb      	ldr	r3, [r7, #8]
 801470e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014712:	d019      	beq.n	8014748 <LL_TIM_OC_SetPolarity+0x60>
 8014714:	68bb      	ldr	r3, [r7, #8]
 8014716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801471a:	d013      	beq.n	8014744 <LL_TIM_OC_SetPolarity+0x5c>
 801471c:	68bb      	ldr	r3, [r7, #8]
 801471e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014722:	d00d      	beq.n	8014740 <LL_TIM_OC_SetPolarity+0x58>
 8014724:	68bb      	ldr	r3, [r7, #8]
 8014726:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801472a:	d007      	beq.n	801473c <LL_TIM_OC_SetPolarity+0x54>
 801472c:	68bb      	ldr	r3, [r7, #8]
 801472e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014732:	d101      	bne.n	8014738 <LL_TIM_OC_SetPolarity+0x50>
 8014734:	2308      	movs	r3, #8
 8014736:	e010      	b.n	801475a <LL_TIM_OC_SetPolarity+0x72>
 8014738:	2309      	movs	r3, #9
 801473a:	e00e      	b.n	801475a <LL_TIM_OC_SetPolarity+0x72>
 801473c:	2307      	movs	r3, #7
 801473e:	e00c      	b.n	801475a <LL_TIM_OC_SetPolarity+0x72>
 8014740:	2306      	movs	r3, #6
 8014742:	e00a      	b.n	801475a <LL_TIM_OC_SetPolarity+0x72>
 8014744:	2305      	movs	r3, #5
 8014746:	e008      	b.n	801475a <LL_TIM_OC_SetPolarity+0x72>
 8014748:	2304      	movs	r3, #4
 801474a:	e006      	b.n	801475a <LL_TIM_OC_SetPolarity+0x72>
 801474c:	2303      	movs	r3, #3
 801474e:	e004      	b.n	801475a <LL_TIM_OC_SetPolarity+0x72>
 8014750:	2302      	movs	r3, #2
 8014752:	e002      	b.n	801475a <LL_TIM_OC_SetPolarity+0x72>
 8014754:	2301      	movs	r3, #1
 8014756:	e000      	b.n	801475a <LL_TIM_OC_SetPolarity+0x72>
 8014758:	2300      	movs	r3, #0
 801475a:	461c      	mov	r4, r3
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	6a1a      	ldr	r2, [r3, #32]
 8014760:	4621      	mov	r1, r4
 8014762:	4b0a      	ldr	r3, [pc, #40]	; (801478c <LL_TIM_OC_SetPolarity+0xa4>)
 8014764:	5c5b      	ldrb	r3, [r3, r1]
 8014766:	4619      	mov	r1, r3
 8014768:	2302      	movs	r3, #2
 801476a:	408b      	lsls	r3, r1
 801476c:	43db      	mvns	r3, r3
 801476e:	401a      	ands	r2, r3
 8014770:	4621      	mov	r1, r4
 8014772:	4b06      	ldr	r3, [pc, #24]	; (801478c <LL_TIM_OC_SetPolarity+0xa4>)
 8014774:	5c5b      	ldrb	r3, [r3, r1]
 8014776:	4619      	mov	r1, r3
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	408b      	lsls	r3, r1
 801477c:	431a      	orrs	r2, r3
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	621a      	str	r2, [r3, #32]
}
 8014782:	bf00      	nop
 8014784:	3710      	adds	r7, #16
 8014786:	46bd      	mov	sp, r7
 8014788:	bc90      	pop	{r4, r7}
 801478a:	4770      	bx	lr
 801478c:	08019d68 	.word	0x08019d68

08014790 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8014790:	b480      	push	{r7}
 8014792:	b083      	sub	sp, #12
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
 8014798:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	683a      	ldr	r2, [r7, #0]
 801479e:	635a      	str	r2, [r3, #52]	; 0x34
}
 80147a0:	bf00      	nop
 80147a2:	370c      	adds	r7, #12
 80147a4:	46bd      	mov	sp, r7
 80147a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147aa:	4770      	bx	lr

080147ac <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80147ac:	b480      	push	{r7}
 80147ae:	b083      	sub	sp, #12
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
 80147b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	683a      	ldr	r2, [r7, #0]
 80147ba:	639a      	str	r2, [r3, #56]	; 0x38
}
 80147bc:	bf00      	nop
 80147be:	370c      	adds	r7, #12
 80147c0:	46bd      	mov	sp, r7
 80147c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c6:	4770      	bx	lr

080147c8 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80147c8:	b480      	push	{r7}
 80147ca:	b083      	sub	sp, #12
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
 80147d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	683a      	ldr	r2, [r7, #0]
 80147d6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80147d8:	bf00      	nop
 80147da:	370c      	adds	r7, #12
 80147dc:	46bd      	mov	sp, r7
 80147de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e2:	4770      	bx	lr

080147e4 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80147e4:	b480      	push	{r7}
 80147e6:	b083      	sub	sp, #12
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
 80147ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	683a      	ldr	r2, [r7, #0]
 80147f2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80147f4:	bf00      	nop
 80147f6:	370c      	adds	r7, #12
 80147f8:	46bd      	mov	sp, r7
 80147fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fe:	4770      	bx	lr

08014800 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8014800:	b480      	push	{r7}
 8014802:	b083      	sub	sp, #12
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	f06f 0202 	mvn.w	r2, #2
 801480e:	611a      	str	r2, [r3, #16]
}
 8014810:	bf00      	nop
 8014812:	370c      	adds	r7, #12
 8014814:	46bd      	mov	sp, r7
 8014816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801481a:	4770      	bx	lr

0801481c <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(TIM_TypeDef *TIMx)
{
 801481c:	b480      	push	{r7}
 801481e:	b083      	sub	sp, #12
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	691b      	ldr	r3, [r3, #16]
 8014828:	f003 0302 	and.w	r3, r3, #2
 801482c:	2b02      	cmp	r3, #2
 801482e:	d101      	bne.n	8014834 <LL_TIM_IsActiveFlag_CC1+0x18>
 8014830:	2301      	movs	r3, #1
 8014832:	e000      	b.n	8014836 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8014834:	2300      	movs	r3, #0
}
 8014836:	4618      	mov	r0, r3
 8014838:	370c      	adds	r7, #12
 801483a:	46bd      	mov	sp, r7
 801483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014840:	4770      	bx	lr

08014842 <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 8014842:	b480      	push	{r7}
 8014844:	b083      	sub	sp, #12
 8014846:	af00      	add	r7, sp, #0
 8014848:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	f06f 0204 	mvn.w	r2, #4
 8014850:	611a      	str	r2, [r3, #16]
}
 8014852:	bf00      	nop
 8014854:	370c      	adds	r7, #12
 8014856:	46bd      	mov	sp, r7
 8014858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485c:	4770      	bx	lr

0801485e <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(TIM_TypeDef *TIMx)
{
 801485e:	b480      	push	{r7}
 8014860:	b083      	sub	sp, #12
 8014862:	af00      	add	r7, sp, #0
 8014864:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	691b      	ldr	r3, [r3, #16]
 801486a:	f003 0304 	and.w	r3, r3, #4
 801486e:	2b04      	cmp	r3, #4
 8014870:	d101      	bne.n	8014876 <LL_TIM_IsActiveFlag_CC2+0x18>
 8014872:	2301      	movs	r3, #1
 8014874:	e000      	b.n	8014878 <LL_TIM_IsActiveFlag_CC2+0x1a>
 8014876:	2300      	movs	r3, #0
}
 8014878:	4618      	mov	r0, r3
 801487a:	370c      	adds	r7, #12
 801487c:	46bd      	mov	sp, r7
 801487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014882:	4770      	bx	lr

08014884 <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 8014884:	b480      	push	{r7}
 8014886:	b083      	sub	sp, #12
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	f06f 0208 	mvn.w	r2, #8
 8014892:	611a      	str	r2, [r3, #16]
}
 8014894:	bf00      	nop
 8014896:	370c      	adds	r7, #12
 8014898:	46bd      	mov	sp, r7
 801489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489e:	4770      	bx	lr

080148a0 <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(TIM_TypeDef *TIMx)
{
 80148a0:	b480      	push	{r7}
 80148a2:	b083      	sub	sp, #12
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	691b      	ldr	r3, [r3, #16]
 80148ac:	f003 0308 	and.w	r3, r3, #8
 80148b0:	2b08      	cmp	r3, #8
 80148b2:	d101      	bne.n	80148b8 <LL_TIM_IsActiveFlag_CC3+0x18>
 80148b4:	2301      	movs	r3, #1
 80148b6:	e000      	b.n	80148ba <LL_TIM_IsActiveFlag_CC3+0x1a>
 80148b8:	2300      	movs	r3, #0
}
 80148ba:	4618      	mov	r0, r3
 80148bc:	370c      	adds	r7, #12
 80148be:	46bd      	mov	sp, r7
 80148c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c4:	4770      	bx	lr

080148c6 <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 80148c6:	b480      	push	{r7}
 80148c8:	b083      	sub	sp, #12
 80148ca:	af00      	add	r7, sp, #0
 80148cc:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	f06f 0210 	mvn.w	r2, #16
 80148d4:	611a      	str	r2, [r3, #16]
}
 80148d6:	bf00      	nop
 80148d8:	370c      	adds	r7, #12
 80148da:	46bd      	mov	sp, r7
 80148dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e0:	4770      	bx	lr

080148e2 <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(TIM_TypeDef *TIMx)
{
 80148e2:	b480      	push	{r7}
 80148e4:	b083      	sub	sp, #12
 80148e6:	af00      	add	r7, sp, #0
 80148e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	691b      	ldr	r3, [r3, #16]
 80148ee:	f003 0310 	and.w	r3, r3, #16
 80148f2:	2b10      	cmp	r3, #16
 80148f4:	d101      	bne.n	80148fa <LL_TIM_IsActiveFlag_CC4+0x18>
 80148f6:	2301      	movs	r3, #1
 80148f8:	e000      	b.n	80148fc <LL_TIM_IsActiveFlag_CC4+0x1a>
 80148fa:	2300      	movs	r3, #0
}
 80148fc:	4618      	mov	r0, r3
 80148fe:	370c      	adds	r7, #12
 8014900:	46bd      	mov	sp, r7
 8014902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014906:	4770      	bx	lr

08014908 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 8014908:	b598      	push	{r3, r4, r7, lr}
 801490a:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 801490c:	4b3b      	ldr	r3, [pc, #236]	; (80149fc <USBPD_TIM_Init+0xf4>)
 801490e:	f993 3000 	ldrsb.w	r3, [r3]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d166      	bne.n	80149e4 <USBPD_TIM_Init+0xdc>
  {
    TIMX_CLK_ENABLE;
 8014916:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801491a:	f7ff fe0f 	bl	801453c <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 801491e:	2100      	movs	r1, #0
 8014920:	4837      	ldr	r0, [pc, #220]	; (8014a00 <USBPD_TIM_Init+0xf8>)
 8014922:	f7ff fe47 	bl	80145b4 <LL_TIM_SetCounterMode>
    
    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 8014926:	4b37      	ldr	r3, [pc, #220]	; (8014a04 <USBPD_TIM_Init+0xfc>)
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	4a37      	ldr	r2, [pc, #220]	; (8014a08 <USBPD_TIM_Init+0x100>)
 801492c:	4293      	cmp	r3, r2
 801492e:	d907      	bls.n	8014940 <USBPD_TIM_Init+0x38>
 8014930:	4b34      	ldr	r3, [pc, #208]	; (8014a04 <USBPD_TIM_Init+0xfc>)
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	4a35      	ldr	r2, [pc, #212]	; (8014a0c <USBPD_TIM_Init+0x104>)
 8014936:	fba2 2303 	umull	r2, r3, r2, r3
 801493a:	0c9b      	lsrs	r3, r3, #18
 801493c:	3b01      	subs	r3, #1
 801493e:	e000      	b.n	8014942 <USBPD_TIM_Init+0x3a>
 8014940:	2300      	movs	r3, #0
 8014942:	4619      	mov	r1, r3
 8014944:	482e      	ldr	r0, [pc, #184]	; (8014a00 <USBPD_TIM_Init+0xf8>)
 8014946:	f7ff fe48 	bl	80145da <LL_TIM_SetPrescaler>
    
    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 801494a:	4b2e      	ldr	r3, [pc, #184]	; (8014a04 <USBPD_TIM_Init+0xfc>)
 801494c:	681c      	ldr	r4, [r3, #0]
 801494e:	482c      	ldr	r0, [pc, #176]	; (8014a00 <USBPD_TIM_Init+0xf8>)
 8014950:	f7ff fe51 	bl	80145f6 <LL_TIM_GetPrescaler>
 8014954:	4603      	mov	r3, r0
 8014956:	3301      	adds	r3, #1
 8014958:	fbb4 f3f3 	udiv	r3, r4, r3
 801495c:	2b63      	cmp	r3, #99	; 0x63
 801495e:	d90d      	bls.n	801497c <USBPD_TIM_Init+0x74>
 8014960:	4b28      	ldr	r3, [pc, #160]	; (8014a04 <USBPD_TIM_Init+0xfc>)
 8014962:	681c      	ldr	r4, [r3, #0]
 8014964:	4826      	ldr	r0, [pc, #152]	; (8014a00 <USBPD_TIM_Init+0xf8>)
 8014966:	f7ff fe46 	bl	80145f6 <LL_TIM_GetPrescaler>
 801496a:	4603      	mov	r3, r0
 801496c:	3301      	adds	r3, #1
 801496e:	2264      	movs	r2, #100	; 0x64
 8014970:	fb02 f303 	mul.w	r3, r2, r3
 8014974:	fbb4 f3f3 	udiv	r3, r4, r3
 8014978:	3b01      	subs	r3, #1
 801497a:	e000      	b.n	801497e <USBPD_TIM_Init+0x76>
 801497c:	2300      	movs	r3, #0
 801497e:	4619      	mov	r1, r3
 8014980:	481f      	ldr	r0, [pc, #124]	; (8014a00 <USBPD_TIM_Init+0xf8>)
 8014982:	f7ff fe44 	bl	801460e <LL_TIM_SetAutoReload>
    
    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 8014986:	2230      	movs	r2, #48	; 0x30
 8014988:	2101      	movs	r1, #1
 801498a:	481d      	ldr	r0, [pc, #116]	; (8014a00 <USBPD_TIM_Init+0xf8>)
 801498c:	f7ff fe4e 	bl	801462c <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 8014990:	2230      	movs	r2, #48	; 0x30
 8014992:	2110      	movs	r1, #16
 8014994:	481a      	ldr	r0, [pc, #104]	; (8014a00 <USBPD_TIM_Init+0xf8>)
 8014996:	f7ff fe49 	bl	801462c <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 801499a:	2230      	movs	r2, #48	; 0x30
 801499c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80149a0:	4817      	ldr	r0, [pc, #92]	; (8014a00 <USBPD_TIM_Init+0xf8>)
 80149a2:	f7ff fe43 	bl	801462c <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 80149a6:	2230      	movs	r2, #48	; 0x30
 80149a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80149ac:	4814      	ldr	r0, [pc, #80]	; (8014a00 <USBPD_TIM_Init+0xf8>)
 80149ae:	f7ff fe3d 	bl	801462c <LL_TIM_OC_SetMode>
    
    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 80149b2:	2200      	movs	r2, #0
 80149b4:	2101      	movs	r1, #1
 80149b6:	4812      	ldr	r0, [pc, #72]	; (8014a00 <USBPD_TIM_Init+0xf8>)
 80149b8:	f7ff fe96 	bl	80146e8 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 80149bc:	2200      	movs	r2, #0
 80149be:	2110      	movs	r1, #16
 80149c0:	480f      	ldr	r0, [pc, #60]	; (8014a00 <USBPD_TIM_Init+0xf8>)
 80149c2:	f7ff fe91 	bl	80146e8 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 80149c6:	2200      	movs	r2, #0
 80149c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80149cc:	480c      	ldr	r0, [pc, #48]	; (8014a00 <USBPD_TIM_Init+0xf8>)
 80149ce:	f7ff fe8b 	bl	80146e8 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 80149d2:	2200      	movs	r2, #0
 80149d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80149d8:	4809      	ldr	r0, [pc, #36]	; (8014a00 <USBPD_TIM_Init+0xf8>)
 80149da:	f7ff fe85 	bl	80146e8 <LL_TIM_OC_SetPolarity>
    
    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 80149de:	4808      	ldr	r0, [pc, #32]	; (8014a00 <USBPD_TIM_Init+0xf8>)
 80149e0:	f7ff fdd8 	bl	8014594 <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 80149e4:	4b05      	ldr	r3, [pc, #20]	; (80149fc <USBPD_TIM_Init+0xf4>)
 80149e6:	f993 3000 	ldrsb.w	r3, [r3]
 80149ea:	b2db      	uxtb	r3, r3
 80149ec:	3301      	adds	r3, #1
 80149ee:	b2db      	uxtb	r3, r3
 80149f0:	b25a      	sxtb	r2, r3
 80149f2:	4b02      	ldr	r3, [pc, #8]	; (80149fc <USBPD_TIM_Init+0xf4>)
 80149f4:	701a      	strb	r2, [r3, #0]
}
 80149f6:	bf00      	nop
 80149f8:	bd98      	pop	{r3, r4, r7, pc}
 80149fa:	bf00      	nop
 80149fc:	20002260 	.word	0x20002260
 8014a00:	40012c00 	.word	0x40012c00
 8014a04:	2000000c 	.word	0x2000000c
 8014a08:	000f423f 	.word	0x000f423f
 8014a0c:	431bde83 	.word	0x431bde83

08014a10 <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	af00      	add	r7, sp, #0
  timer_initcounter--;
 8014a14:	4b09      	ldr	r3, [pc, #36]	; (8014a3c <USBPD_TIM_DeInit+0x2c>)
 8014a16:	f993 3000 	ldrsb.w	r3, [r3]
 8014a1a:	b2db      	uxtb	r3, r3
 8014a1c:	3b01      	subs	r3, #1
 8014a1e:	b2db      	uxtb	r3, r3
 8014a20:	b25a      	sxtb	r2, r3
 8014a22:	4b06      	ldr	r3, [pc, #24]	; (8014a3c <USBPD_TIM_DeInit+0x2c>)
 8014a24:	701a      	strb	r2, [r3, #0]
  if(0 == timer_initcounter)
 8014a26:	4b05      	ldr	r3, [pc, #20]	; (8014a3c <USBPD_TIM_DeInit+0x2c>)
 8014a28:	f993 3000 	ldrsb.w	r3, [r3]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d103      	bne.n	8014a38 <USBPD_TIM_DeInit+0x28>
  {
    TIMX_CLK_DISABLE;
 8014a30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8014a34:	f7ff fd9a 	bl	801456c <LL_APB2_GRP1_DisableClock>
  }
}
 8014a38:	bf00      	nop
 8014a3a:	bd80      	pop	{r7, pc}
 8014a3c:	20002260 	.word	0x20002260

08014a40 <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b082      	sub	sp, #8
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	4603      	mov	r3, r0
 8014a48:	6039      	str	r1, [r7, #0]
 8014a4a:	71fb      	strb	r3, [r7, #7]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 8014a4c:	79fb      	ldrb	r3, [r7, #7]
 8014a4e:	2b03      	cmp	r3, #3
 8014a50:	d85e      	bhi.n	8014b10 <USBPD_TIM_Start+0xd0>
 8014a52:	a201      	add	r2, pc, #4	; (adr r2, 8014a58 <USBPD_TIM_Start+0x18>)
 8014a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a58:	08014a69 	.word	0x08014a69
 8014a5c:	08014a93 	.word	0x08014a93
 8014a60:	08014abd 	.word	0x08014abd
 8014a64:	08014ae7 	.word	0x08014ae7
  {
    case TIM_PORT0_CRC:
      TIMX_CHANNEL1_SETEVENT;
 8014a68:	4b2c      	ldr	r3, [pc, #176]	; (8014b1c <USBPD_TIM_Start+0xdc>)
 8014a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014a6c:	683b      	ldr	r3, [r7, #0]
 8014a6e:	441a      	add	r2, r3
 8014a70:	4b2b      	ldr	r3, [pc, #172]	; (8014b20 <USBPD_TIM_Start+0xe0>)
 8014a72:	fba3 1302 	umull	r1, r3, r3, r2
 8014a76:	0b5b      	lsrs	r3, r3, #13
 8014a78:	f242 7110 	movw	r1, #10000	; 0x2710
 8014a7c:	fb01 f303 	mul.w	r3, r1, r3
 8014a80:	1ad3      	subs	r3, r2, r3
 8014a82:	4619      	mov	r1, r3
 8014a84:	4825      	ldr	r0, [pc, #148]	; (8014b1c <USBPD_TIM_Start+0xdc>)
 8014a86:	f7ff fe83 	bl	8014790 <LL_TIM_OC_SetCompareCH1>
 8014a8a:	4824      	ldr	r0, [pc, #144]	; (8014b1c <USBPD_TIM_Start+0xdc>)
 8014a8c:	f7ff feb8 	bl	8014800 <LL_TIM_ClearFlag_CC1>
      break;
 8014a90:	e03f      	b.n	8014b12 <USBPD_TIM_Start+0xd2>
    case TIM_PORT0_RETRY:
      TIMX_CHANNEL2_SETEVENT;
 8014a92:	4b22      	ldr	r3, [pc, #136]	; (8014b1c <USBPD_TIM_Start+0xdc>)
 8014a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014a96:	683b      	ldr	r3, [r7, #0]
 8014a98:	441a      	add	r2, r3
 8014a9a:	4b21      	ldr	r3, [pc, #132]	; (8014b20 <USBPD_TIM_Start+0xe0>)
 8014a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8014aa0:	0b5b      	lsrs	r3, r3, #13
 8014aa2:	f242 7110 	movw	r1, #10000	; 0x2710
 8014aa6:	fb01 f303 	mul.w	r3, r1, r3
 8014aaa:	1ad3      	subs	r3, r2, r3
 8014aac:	4619      	mov	r1, r3
 8014aae:	481b      	ldr	r0, [pc, #108]	; (8014b1c <USBPD_TIM_Start+0xdc>)
 8014ab0:	f7ff fe7c 	bl	80147ac <LL_TIM_OC_SetCompareCH2>
 8014ab4:	4819      	ldr	r0, [pc, #100]	; (8014b1c <USBPD_TIM_Start+0xdc>)
 8014ab6:	f7ff fec4 	bl	8014842 <LL_TIM_ClearFlag_CC2>
      break;
 8014aba:	e02a      	b.n	8014b12 <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_CRC:
      TIMX_CHANNEL3_SETEVENT;
 8014abc:	4b17      	ldr	r3, [pc, #92]	; (8014b1c <USBPD_TIM_Start+0xdc>)
 8014abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014ac0:	683b      	ldr	r3, [r7, #0]
 8014ac2:	441a      	add	r2, r3
 8014ac4:	4b16      	ldr	r3, [pc, #88]	; (8014b20 <USBPD_TIM_Start+0xe0>)
 8014ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8014aca:	0b5b      	lsrs	r3, r3, #13
 8014acc:	f242 7110 	movw	r1, #10000	; 0x2710
 8014ad0:	fb01 f303 	mul.w	r3, r1, r3
 8014ad4:	1ad3      	subs	r3, r2, r3
 8014ad6:	4619      	mov	r1, r3
 8014ad8:	4810      	ldr	r0, [pc, #64]	; (8014b1c <USBPD_TIM_Start+0xdc>)
 8014ada:	f7ff fe75 	bl	80147c8 <LL_TIM_OC_SetCompareCH3>
 8014ade:	480f      	ldr	r0, [pc, #60]	; (8014b1c <USBPD_TIM_Start+0xdc>)
 8014ae0:	f7ff fed0 	bl	8014884 <LL_TIM_ClearFlag_CC3>
      break;
 8014ae4:	e015      	b.n	8014b12 <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
 8014ae6:	4b0d      	ldr	r3, [pc, #52]	; (8014b1c <USBPD_TIM_Start+0xdc>)
 8014ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014aea:	683b      	ldr	r3, [r7, #0]
 8014aec:	441a      	add	r2, r3
 8014aee:	4b0c      	ldr	r3, [pc, #48]	; (8014b20 <USBPD_TIM_Start+0xe0>)
 8014af0:	fba3 1302 	umull	r1, r3, r3, r2
 8014af4:	0b5b      	lsrs	r3, r3, #13
 8014af6:	f242 7110 	movw	r1, #10000	; 0x2710
 8014afa:	fb01 f303 	mul.w	r3, r1, r3
 8014afe:	1ad3      	subs	r3, r2, r3
 8014b00:	4619      	mov	r1, r3
 8014b02:	4806      	ldr	r0, [pc, #24]	; (8014b1c <USBPD_TIM_Start+0xdc>)
 8014b04:	f7ff fe6e 	bl	80147e4 <LL_TIM_OC_SetCompareCH4>
 8014b08:	4804      	ldr	r0, [pc, #16]	; (8014b1c <USBPD_TIM_Start+0xdc>)
 8014b0a:	f7ff fedc 	bl	80148c6 <LL_TIM_ClearFlag_CC4>
      break;
 8014b0e:	e000      	b.n	8014b12 <USBPD_TIM_Start+0xd2>
    default:
      break;
 8014b10:	bf00      	nop
  }
}
 8014b12:	bf00      	nop
 8014b14:	3708      	adds	r7, #8
 8014b16:	46bd      	mov	sp, r7
 8014b18:	bd80      	pop	{r7, pc}
 8014b1a:	bf00      	nop
 8014b1c:	40012c00 	.word	0x40012c00
 8014b20:	d1b71759 	.word	0xd1b71759

08014b24 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b084      	sub	sp, #16
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	71fb      	strb	r3, [r7, #7]
  uint32_t _expired = 1u;
 8014b2e:	2301      	movs	r3, #1
 8014b30:	60fb      	str	r3, [r7, #12]
  switch (Id)
 8014b32:	79fb      	ldrb	r3, [r7, #7]
 8014b34:	2b03      	cmp	r3, #3
 8014b36:	d81f      	bhi.n	8014b78 <USBPD_TIM_IsExpired+0x54>
 8014b38:	a201      	add	r2, pc, #4	; (adr r2, 8014b40 <USBPD_TIM_IsExpired+0x1c>)
 8014b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b3e:	bf00      	nop
 8014b40:	08014b51 	.word	0x08014b51
 8014b44:	08014b5b 	.word	0x08014b5b
 8014b48:	08014b65 	.word	0x08014b65
 8014b4c:	08014b6f 	.word	0x08014b6f
  {
    case TIM_PORT0_CRC:
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 8014b50:	480c      	ldr	r0, [pc, #48]	; (8014b84 <USBPD_TIM_IsExpired+0x60>)
 8014b52:	f7ff fe63 	bl	801481c <LL_TIM_IsActiveFlag_CC1>
 8014b56:	60f8      	str	r0, [r7, #12]
      break;
 8014b58:	e00f      	b.n	8014b7a <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT0_RETRY:
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 8014b5a:	480a      	ldr	r0, [pc, #40]	; (8014b84 <USBPD_TIM_IsExpired+0x60>)
 8014b5c:	f7ff fe7f 	bl	801485e <LL_TIM_IsActiveFlag_CC2>
 8014b60:	60f8      	str	r0, [r7, #12]
      break;
 8014b62:	e00a      	b.n	8014b7a <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_CRC:
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 8014b64:	4807      	ldr	r0, [pc, #28]	; (8014b84 <USBPD_TIM_IsExpired+0x60>)
 8014b66:	f7ff fe9b 	bl	80148a0 <LL_TIM_IsActiveFlag_CC3>
 8014b6a:	60f8      	str	r0, [r7, #12]
      break;
 8014b6c:	e005      	b.n	8014b7a <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 8014b6e:	4805      	ldr	r0, [pc, #20]	; (8014b84 <USBPD_TIM_IsExpired+0x60>)
 8014b70:	f7ff feb7 	bl	80148e2 <LL_TIM_IsActiveFlag_CC4>
 8014b74:	60f8      	str	r0, [r7, #12]
      break;
 8014b76:	e000      	b.n	8014b7a <USBPD_TIM_IsExpired+0x56>
    default:
      break;
 8014b78:	bf00      	nop
  }
  return _expired;
 8014b7a:	68fb      	ldr	r3, [r7, #12]
}
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	3710      	adds	r7, #16
 8014b80:	46bd      	mov	sp, r7
 8014b82:	bd80      	pop	{r7, pc}
 8014b84:	40012c00 	.word	0x40012c00

08014b88 <MX_USBPD_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* USBPD init function */
void MX_USBPD_Init(void)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 8014b8c:	f7ff f901 	bl	8013d92 <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if(USBPD_OK != USBPD_DPM_InitCore())
 8014b90:	f000 f814 	bl	8014bbc <USBPD_DPM_InitCore>
 8014b94:	4603      	mov	r3, r0
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d000      	beq.n	8014b9c <MX_USBPD_Init+0x14>
  {
    while(1);
 8014b9a:	e7fe      	b.n	8014b9a <MX_USBPD_Init+0x12>
  }

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 8014b9c:	f000 f9be 	bl	8014f1c <USBPD_DPM_UserInit>
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d000      	beq.n	8014ba8 <MX_USBPD_Init+0x20>
  {
    while(1);
 8014ba6:	e7fe      	b.n	8014ba6 <MX_USBPD_Init+0x1e>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if(USBPD_OK != USBPD_DPM_InitOS())
 8014ba8:	f000 f876 	bl	8014c98 <USBPD_DPM_InitOS>
 8014bac:	4603      	mov	r3, r0
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d000      	beq.n	8014bb4 <MX_USBPD_Init+0x2c>
  {
    while(1);
 8014bb2:	e7fe      	b.n	8014bb2 <MX_USBPD_Init+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
 8014bb4:	b662      	cpsie	i
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 8014bb6:	bf00      	nop
 8014bb8:	bd80      	pop	{r7, pc}
	...

08014bbc <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b082      	sub	sp, #8
 8014bc0:	af00      	add	r7, sp, #0
  };

  static const USBPD_CAD_Callbacks CAD_cbs = { USBPD_DPM_CADCallback, USBPD_DPM_CADTaskWakeUp };

  /* Check the lib selected */
  if(USBPD_TRUE != USBPD_PE_CheckLIB(_LIB_ID))
 8014bc2:	4830      	ldr	r0, [pc, #192]	; (8014c84 <USBPD_DPM_InitCore+0xc8>)
 8014bc4:	f7eb fc42 	bl	800044c <USBPD_PE_CheckLIB>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	2b01      	cmp	r3, #1
 8014bcc:	d001      	beq.n	8014bd2 <USBPD_DPM_InitCore+0x16>
  {
    return USBPD_ERROR;
 8014bce:	2302      	movs	r3, #2
 8014bd0:	e054      	b.n	8014c7c <USBPD_DPM_InitCore+0xc0>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 8014bd2:	f7eb fc42 	bl	800045a <USBPD_PE_GetMemoryConsumption>
 8014bd6:	6078      	str	r0, [r7, #4]

  /* done to avoid warning */
  stack_dynamemsize--;
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	3b01      	subs	r3, #1
 8014bdc:	607b      	str	r3, [r7, #4]

  /* Variable to be sure that DPM is correctly initialized */
  DPM_Params[USBPD_PORT_0].DPM_Initialized = USBPD_FALSE;
 8014bde:	4a2a      	ldr	r2, [pc, #168]	; (8014c88 <USBPD_DPM_InitCore+0xcc>)
 8014be0:	7853      	ldrb	r3, [r2, #1]
 8014be2:	f36f 03c3 	bfc	r3, #3, #1
 8014be6:	7053      	strb	r3, [r2, #1]
#if USBPD_PORT_COUNT == 2
  DPM_Params[USBPD_PORT_1].DPM_Initialized = USBPD_FALSE;
#endif /* USBPD_PORT_COUNT == 2 */

  /* check the stack settings */
  DPM_Params[USBPD_PORT_0].PE_SpecRevision  = DPM_Settings[USBPD_PORT_0].PE_SpecRevision;
 8014be8:	4b28      	ldr	r3, [pc, #160]	; (8014c8c <USBPD_DPM_InitCore+0xd0>)
 8014bea:	791b      	ldrb	r3, [r3, #4]
 8014bec:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8014bf0:	b2d9      	uxtb	r1, r3
 8014bf2:	4a25      	ldr	r2, [pc, #148]	; (8014c88 <USBPD_DPM_InitCore+0xcc>)
 8014bf4:	7813      	ldrb	r3, [r2, #0]
 8014bf6:	f361 0301 	bfi	r3, r1, #0, #2
 8014bfa:	7013      	strb	r3, [r2, #0]
  DPM_Params[USBPD_PORT_0].PE_PowerRole     = DPM_Settings[USBPD_PORT_0].PE_DefaultRole;
 8014bfc:	4b23      	ldr	r3, [pc, #140]	; (8014c8c <USBPD_DPM_InitCore+0xd0>)
 8014bfe:	791b      	ldrb	r3, [r3, #4]
 8014c00:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8014c04:	b2d9      	uxtb	r1, r3
 8014c06:	4a20      	ldr	r2, [pc, #128]	; (8014c88 <USBPD_DPM_InitCore+0xcc>)
 8014c08:	7813      	ldrb	r3, [r2, #0]
 8014c0a:	f361 0382 	bfi	r3, r1, #2, #1
 8014c0e:	7013      	strb	r3, [r2, #0]
  DPM_Params[USBPD_PORT_0].PE_SwapOngoing   = USBPD_FALSE;
 8014c10:	4a1d      	ldr	r2, [pc, #116]	; (8014c88 <USBPD_DPM_InitCore+0xcc>)
 8014c12:	7813      	ldrb	r3, [r2, #0]
 8014c14:	f36f 1304 	bfc	r3, #4, #1
 8014c18:	7013      	strb	r3, [r2, #0]
  DPM_Params[USBPD_PORT_0].ActiveCCIs       = CCNONE;
 8014c1a:	4a1b      	ldr	r2, [pc, #108]	; (8014c88 <USBPD_DPM_InitCore+0xcc>)
 8014c1c:	7813      	ldrb	r3, [r2, #0]
 8014c1e:	f36f 1387 	bfc	r3, #6, #2
 8014c22:	7013      	strb	r3, [r2, #0]
  DPM_Params[USBPD_PORT_0].VconnCCIs        = CCNONE;
 8014c24:	4a18      	ldr	r2, [pc, #96]	; (8014c88 <USBPD_DPM_InitCore+0xcc>)
 8014c26:	7853      	ldrb	r3, [r2, #1]
 8014c28:	f36f 1346 	bfc	r3, #5, #2
 8014c2c:	7053      	strb	r3, [r2, #1]
  DPM_Params[USBPD_PORT_0].VconnStatus      = USBPD_FALSE;
 8014c2e:	4a16      	ldr	r2, [pc, #88]	; (8014c88 <USBPD_DPM_InitCore+0xcc>)
 8014c30:	7853      	ldrb	r3, [r2, #1]
 8014c32:	f36f 13c7 	bfc	r3, #7, #1
 8014c36:	7053      	strb	r3, [r2, #1]
  DPM_Params[USBPD_PORT_1].VconnCCIs        = CCNONE;
  DPM_Params[USBPD_PORT_1].VconnStatus      = USBPD_FALSE;
#endif /* USBPD_PORT_COUNT == 2 */

  /* CAD SET UP : Port 0 */
  CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(USBPD_PORT_0, (USBPD_CAD_Callbacks *)&CAD_cbs, (USBPD_SettingsTypeDef *)&DPM_Settings[USBPD_PORT_0], &DPM_Params[USBPD_PORT_0]));
 8014c38:	4b13      	ldr	r3, [pc, #76]	; (8014c88 <USBPD_DPM_InitCore+0xcc>)
 8014c3a:	4a14      	ldr	r2, [pc, #80]	; (8014c8c <USBPD_DPM_InitCore+0xd0>)
 8014c3c:	4914      	ldr	r1, [pc, #80]	; (8014c90 <USBPD_DPM_InitCore+0xd4>)
 8014c3e:	2000      	movs	r0, #0
 8014c40:	f7eb faee 	bl	8000220 <USBPD_CAD_Init>
 8014c44:	4603      	mov	r3, r0
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d001      	beq.n	8014c4e <USBPD_DPM_InitCore+0x92>
 8014c4a:	2302      	movs	r3, #2
 8014c4c:	e016      	b.n	8014c7c <USBPD_DPM_InitCore+0xc0>
#if USBPD_PORT_COUNT == 2
  CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(USBPD_PORT_1, (USBPD_CAD_Callbacks *)&CAD_cbs, (USBPD_SettingsTypeDef *)&DPM_Settings[USBPD_PORT_1], &DPM_Params[USBPD_PORT_1]));
#endif /* USBPD_PORT_COUNT == 2 */

  /* PE SET UP : Port 0 */
  CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(USBPD_PORT_0, (USBPD_SettingsTypeDef *)&DPM_Settings[USBPD_PORT_0], &DPM_Params[USBPD_PORT_0], &dpmCallbacks));
 8014c4e:	4b11      	ldr	r3, [pc, #68]	; (8014c94 <USBPD_DPM_InitCore+0xd8>)
 8014c50:	4a0d      	ldr	r2, [pc, #52]	; (8014c88 <USBPD_DPM_InitCore+0xcc>)
 8014c52:	490e      	ldr	r1, [pc, #56]	; (8014c8c <USBPD_DPM_InitCore+0xd0>)
 8014c54:	2000      	movs	r0, #0
 8014c56:	f7eb fb93 	bl	8000380 <USBPD_PE_Init>
 8014c5a:	4603      	mov	r3, r0
 8014c5c:	70fb      	strb	r3, [r7, #3]
 8014c5e:	78fb      	ldrb	r3, [r7, #3]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d001      	beq.n	8014c68 <USBPD_DPM_InitCore+0xac>
 8014c64:	78fb      	ldrb	r3, [r7, #3]
 8014c66:	e009      	b.n	8014c7c <USBPD_DPM_InitCore+0xc0>
#if USBPD_PORT_COUNT == 2
  CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(USBPD_PORT_1, (USBPD_SettingsTypeDef *)&DPM_Settings[USBPD_PORT_1], &DPM_Params[USBPD_PORT_1], &dpmCallbacks));
#endif /* USBPD_PORT_COUNT == 2 */

  /* DPM is correctly initialized */
  DPM_Params[USBPD_PORT_0].DPM_Initialized = USBPD_TRUE;
 8014c68:	4a07      	ldr	r2, [pc, #28]	; (8014c88 <USBPD_DPM_InitCore+0xcc>)
 8014c6a:	7853      	ldrb	r3, [r2, #1]
 8014c6c:	f043 0308 	orr.w	r3, r3, #8
 8014c70:	7053      	strb	r3, [r2, #1]
#if USBPD_PORT_COUNT == 2
  DPM_Params[USBPD_PORT_1].DPM_Initialized = USBPD_TRUE;
#endif /* USBPD_PORT_COUNT == 2 */

  /* Enable CAD on Port 0 */
  USBPD_CAD_PortEnable(USBPD_PORT_0, USBPD_CAD_ENABLE);
 8014c72:	2101      	movs	r1, #1
 8014c74:	2000      	movs	r0, #0
 8014c76:	f7eb fb0b 	bl	8000290 <USBPD_CAD_PortEnable>
#if USBPD_PORT_COUNT == 2
  USBPD_CAD_PortEnable(USBPD_PORT_1, USBPD_CAD_ENABLE);
#endif /* USBPD_PORT_COUNT == 2 */

  return USBPD_OK;
 8014c7a:	2300      	movs	r3, #0
}
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	3708      	adds	r7, #8
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}
 8014c84:	30260000 	.word	0x30260000
 8014c88:	200024e4 	.word	0x200024e4
 8014c8c:	2000001c 	.word	0x2000001c
 8014c90:	08019dc0 	.word	0x08019dc0
 8014c94:	08019dc8 	.word	0x08019dc8

08014c98 <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  CADQueueId = osMessageCreate(osMessageQ(queueCAD), NULL);
 8014c9c:	2100      	movs	r1, #0
 8014c9e:	4810      	ldr	r0, [pc, #64]	; (8014ce0 <USBPD_DPM_InitOS+0x48>)
 8014ca0:	f7fb f8fe 	bl	800fea0 <osMessageCreate>
 8014ca4:	4602      	mov	r2, r0
 8014ca6:	4b0f      	ldr	r3, [pc, #60]	; (8014ce4 <USBPD_DPM_InitOS+0x4c>)
 8014ca8:	601a      	str	r2, [r3, #0]
  if((DPM_Thread_Table[USBPD_THREAD_CAD] = osThreadCreate(osThread(CAD), NULL)) == NULL)
 8014caa:	2100      	movs	r1, #0
 8014cac:	480e      	ldr	r0, [pc, #56]	; (8014ce8 <USBPD_DPM_InitOS+0x50>)
 8014cae:	f7fb f808 	bl	800fcc2 <osThreadCreate>
 8014cb2:	4602      	mov	r2, r0
 8014cb4:	4b0d      	ldr	r3, [pc, #52]	; (8014cec <USBPD_DPM_InitOS+0x54>)
 8014cb6:	605a      	str	r2, [r3, #4]
 8014cb8:	4b0c      	ldr	r3, [pc, #48]	; (8014cec <USBPD_DPM_InitOS+0x54>)
 8014cba:	685b      	ldr	r3, [r3, #4]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d101      	bne.n	8014cc4 <USBPD_DPM_InitOS+0x2c>
#else
  CADQueueId = osMessageQueueNew (2, sizeof(uint16_t), NULL);
  if (NULL == osThreadNew(USBPD_CAD_Task, &CADQueueId, &CAD_Thread_Atrr))
#endif /* osCMSIS < 0x20000U */
  {
    return USBPD_ERROR;
 8014cc0:	2302      	movs	r3, #2
 8014cc2:	e00a      	b.n	8014cda <USBPD_DPM_InitOS+0x42>
  }

  /* Create the queue corresponding to PE task */
#if (osCMSIS < 0x20000U)
  PEQueueId[0] = osMessageCreate(osMessageQ(queuePE), NULL);
 8014cc4:	2100      	movs	r1, #0
 8014cc6:	480a      	ldr	r0, [pc, #40]	; (8014cf0 <USBPD_DPM_InitOS+0x58>)
 8014cc8:	f7fb f8ea 	bl	800fea0 <osMessageCreate>
 8014ccc:	4602      	mov	r2, r0
 8014cce:	4b09      	ldr	r3, [pc, #36]	; (8014cf4 <USBPD_DPM_InitOS+0x5c>)
 8014cd0:	601a      	str	r2, [r3, #0]
  PEQueueId[1] = osMessageQueueNew (1, sizeof(uint16_t), NULL);
#endif /* USBPD_PORT_COUNT == 2 */
#endif /* osCMSIS < 0x20000U */

  /* PE task to be created on attachment */
  DPM_Thread_Table[USBPD_THREAD_PORT_0] = NULL;
 8014cd2:	4b06      	ldr	r3, [pc, #24]	; (8014cec <USBPD_DPM_InitOS+0x54>)
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	601a      	str	r2, [r3, #0]
#if USBPD_PORT_COUNT == 2
  DPM_Thread_Table[USBPD_THREAD_PORT_1] = NULL;
#endif /* USBPD_PORT_COUNT == 2 */

  return USBPD_OK;
 8014cd8:	2300      	movs	r3, #0
}
 8014cda:	4618      	mov	r0, r3
 8014cdc:	bd80      	pop	{r7, pc}
 8014cde:	bf00      	nop
 8014ce0:	08019db8 	.word	0x08019db8
 8014ce4:	200022a8 	.word	0x200022a8
 8014ce8:	08019da4 	.word	0x08019da4
 8014cec:	2000229c 	.word	0x2000229c
 8014cf0:	08019d9c 	.word	0x08019d9c
 8014cf4:	200022a4 	.word	0x200022a4

08014cf8 <USBPD_DPM_TimerCounter>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
void USBPD_DPM_TimerCounter(void)
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	af00      	add	r7, sp, #0
  /* Call PE/PRL timers functions only if DPM is initialized */
  if (USBPD_TRUE == DPM_Params[USBPD_PORT_0].DPM_Initialized)
 8014cfc:	4b08      	ldr	r3, [pc, #32]	; (8014d20 <USBPD_DPM_TimerCounter+0x28>)
 8014cfe:	785b      	ldrb	r3, [r3, #1]
 8014d00:	f003 0308 	and.w	r3, r3, #8
 8014d04:	b2db      	uxtb	r3, r3
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d008      	beq.n	8014d1c <USBPD_DPM_TimerCounter+0x24>
  {
    USBPD_DPM_UserTimerCounter(USBPD_PORT_0);
 8014d0a:	2000      	movs	r0, #0
 8014d0c:	f000 f942 	bl	8014f94 <USBPD_DPM_UserTimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_0);
 8014d10:	2000      	movs	r0, #0
 8014d12:	f7eb fbac 	bl	800046e <USBPD_PE_TimerCounter>
    USBPD_PRL_TimerCounter(USBPD_PORT_0);
 8014d16:	2000      	movs	r0, #0
 8014d18:	f7f0 fefa 	bl	8005b10 <USBPD_PRL_TimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_1);
    USBPD_PRL_TimerCounter(USBPD_PORT_1);
  }
#endif /* USBPD_PORT_COUNT == 2 */

}
 8014d1c:	bf00      	nop
 8014d1e:	bd80      	pop	{r7, pc}
 8014d20:	200024e4 	.word	0x200024e4

08014d24 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b082      	sub	sp, #8
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	71fb      	strb	r3, [r7, #7]
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(PEQueueId[PortNum], 0xFFFF, 0);
 8014d2e:	79fb      	ldrb	r3, [r7, #7]
 8014d30:	4a06      	ldr	r2, [pc, #24]	; (8014d4c <USBPD_PE_TaskWakeUp+0x28>)
 8014d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014d36:	2200      	movs	r2, #0
 8014d38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f7fb f8c1 	bl	800fec4 <osMessagePut>
#else
  uint32_t event = 0xFFFFU;
  (void)osMessageQueuePut(PEQueueId[PortNum], &event, 0U, 0U);
#endif /* osCMSIS < 0x20000U */
}
 8014d42:	bf00      	nop
 8014d44:	3708      	adds	r7, #8
 8014d46:	46bd      	mov	sp, r7
 8014d48:	bd80      	pop	{r7, pc}
 8014d4a:	bf00      	nop
 8014d4c:	200022a4 	.word	0x200022a4

08014d50 <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(CADQueueId, 0xFFFF, 0);
 8014d54:	4b04      	ldr	r3, [pc, #16]	; (8014d68 <USBPD_DPM_CADTaskWakeUp+0x18>)
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	2200      	movs	r2, #0
 8014d5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f7fb f8b0 	bl	800fec4 <osMessagePut>
#else
  uint32_t event = 0xFFFFU;
  (void)osMessageQueuePut(CADQueueId, &event, 0U, 0U);
#endif /* osCMSIS < 0x20000U */
}
 8014d64:	bf00      	nop
 8014d66:	bd80      	pop	{r7, pc}
 8014d68:	200022a8 	.word	0x200022a8

08014d6c <USBPD_PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
void USBPD_PE_Task(void const *argument)
{
 8014d6c:	b590      	push	{r4, r7, lr}
 8014d6e:	b089      	sub	sp, #36	; 0x24
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6178      	str	r0, [r7, #20]
  uint8_t _port = (uint32_t)argument;
 8014d74:	697b      	ldr	r3, [r7, #20]
 8014d76:	77fb      	strb	r3, [r7, #31]

  for(;;)
  {
    osMessageGet(PEQueueId[_port],
 8014d78:	7ffb      	ldrb	r3, [r7, #31]
 8014d7a:	4a07      	ldr	r2, [pc, #28]	; (8014d98 <USBPD_PE_Task+0x2c>)
 8014d7c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014d80:	7ffb      	ldrb	r3, [r7, #31]
 8014d82:	4618      	mov	r0, r3
 8014d84:	f7ec fc49 	bl	800161a <USBPD_PE_StateMachine_SNK>
 8014d88:	4602      	mov	r2, r0
 8014d8a:	463b      	mov	r3, r7
 8014d8c:	4621      	mov	r1, r4
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f7fb f8d8 	bl	800ff44 <osMessageGet>
 8014d94:	e7f0      	b.n	8014d78 <USBPD_PE_Task+0xc>
 8014d96:	bf00      	nop
 8014d98:	200022a4 	.word	0x200022a4

08014d9c <USBPD_CAD_Task>:
#if (osCMSIS < 0x20000U)
void USBPD_CAD_Task(void const *argument)
#else
void USBPD_CAD_Task(void *argument)
#endif /* osCMSIS < 0x20000U */
{
 8014d9c:	b590      	push	{r4, r7, lr}
 8014d9e:	b087      	sub	sp, #28
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6178      	str	r0, [r7, #20]
  for(;;)
  {
#if (osCMSIS < 0x20000U)
    osMessageGet(CADQueueId, USBPD_CAD_Process());
 8014da4:	4b05      	ldr	r3, [pc, #20]	; (8014dbc <USBPD_CAD_Task+0x20>)
 8014da6:	681c      	ldr	r4, [r3, #0]
 8014da8:	f7eb fa7a 	bl	80002a0 <USBPD_CAD_Process>
 8014dac:	4602      	mov	r2, r0
 8014dae:	463b      	mov	r3, r7
 8014db0:	4621      	mov	r1, r4
 8014db2:	4618      	mov	r0, r3
 8014db4:	f7fb f8c6 	bl	800ff44 <osMessageGet>
 8014db8:	e7f4      	b.n	8014da4 <USBPD_CAD_Task+0x8>
 8014dba:	bf00      	nop
 8014dbc:	200022a8 	.word	0x200022a8

08014dc0 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	b082      	sub	sp, #8
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	603a      	str	r2, [r7, #0]
 8014dca:	71fb      	strb	r3, [r7, #7]
 8014dcc:	460b      	mov	r3, r1
 8014dce:	71bb      	strb	r3, [r7, #6]

  switch(State)
 8014dd0:	79bb      	ldrb	r3, [r7, #6]
 8014dd2:	3b01      	subs	r3, #1
 8014dd4:	2b03      	cmp	r3, #3
 8014dd6:	d84f      	bhi.n	8014e78 <USBPD_DPM_CADCallback+0xb8>
 8014dd8:	a201      	add	r2, pc, #4	; (adr r2, 8014de0 <USBPD_DPM_CADCallback+0x20>)
 8014dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dde:	bf00      	nop
 8014de0:	08014e0d 	.word	0x08014e0d
 8014de4:	08014dff 	.word	0x08014dff
 8014de8:	08014e0d 	.word	0x08014e0d
 8014dec:	08014df1 	.word	0x08014df1
  {
    case USBPD_CAD_EVENT_ATTEMC :
    {
      DPM_ManageAttachedState(PortNum, State, Cc);
 8014df0:	79b9      	ldrb	r1, [r7, #6]
 8014df2:	79fb      	ldrb	r3, [r7, #7]
 8014df4:	683a      	ldr	r2, [r7, #0]
 8014df6:	4618      	mov	r0, r3
 8014df8:	f000 f848 	bl	8014e8c <DPM_ManageAttachedState>
      break;
 8014dfc:	e03d      	b.n	8014e7a <USBPD_DPM_CADCallback+0xba>
    }
    case USBPD_CAD_EVENT_ATTACHED :
      DPM_ManageAttachedState(PortNum, State, Cc);
 8014dfe:	79b9      	ldrb	r1, [r7, #6]
 8014e00:	79fb      	ldrb	r3, [r7, #7]
 8014e02:	683a      	ldr	r2, [r7, #0]
 8014e04:	4618      	mov	r0, r3
 8014e06:	f000 f841 	bl	8014e8c <DPM_ManageAttachedState>
      break;
 8014e0a:	e036      	b.n	8014e7a <USBPD_DPM_CADCallback+0xba>
    case USBPD_CAD_EVENT_DETACHED :
    case USBPD_CAD_EVENT_EMC :
    {
      /* The ufp is detached */
      (void)USBPD_PE_IsCableConnected(PortNum, 0);
 8014e0c:	79fb      	ldrb	r3, [r7, #7]
 8014e0e:	2100      	movs	r1, #0
 8014e10:	4618      	mov	r0, r3
 8014e12:	f7eb fbc0 	bl	8000596 <USBPD_PE_IsCableConnected>
      /* Terminate PE task */
      if (DPM_Thread_Table[PortNum] != NULL)
 8014e16:	79fb      	ldrb	r3, [r7, #7]
 8014e18:	4a1a      	ldr	r2, [pc, #104]	; (8014e84 <USBPD_DPM_CADCallback+0xc4>)
 8014e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d00b      	beq.n	8014e3a <USBPD_DPM_CADCallback+0x7a>
      {
        osThreadTerminate(DPM_Thread_Table[PortNum]);
 8014e22:	79fb      	ldrb	r3, [r7, #7]
 8014e24:	4a17      	ldr	r2, [pc, #92]	; (8014e84 <USBPD_DPM_CADCallback+0xc4>)
 8014e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f7fa ff70 	bl	800fd10 <osThreadTerminate>
        DPM_Thread_Table[PortNum] = NULL;
 8014e30:	79fb      	ldrb	r3, [r7, #7]
 8014e32:	4a14      	ldr	r2, [pc, #80]	; (8014e84 <USBPD_DPM_CADCallback+0xc4>)
 8014e34:	2100      	movs	r1, #0
 8014e36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }
      USBPD_DPM_UserCableDetection(PortNum, State);
 8014e3a:	79ba      	ldrb	r2, [r7, #6]
 8014e3c:	79fb      	ldrb	r3, [r7, #7]
 8014e3e:	4611      	mov	r1, r2
 8014e40:	4618      	mov	r0, r3
 8014e42:	f000 f873 	bl	8014f2c <USBPD_DPM_UserCableDetection>
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 8014e46:	79fa      	ldrb	r2, [r7, #7]
 8014e48:	490f      	ldr	r1, [pc, #60]	; (8014e88 <USBPD_DPM_CADCallback+0xc8>)
 8014e4a:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8014e4e:	f36f 1304 	bfc	r3, #4, #1
 8014e52:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].ActiveCCIs = CCNONE;
 8014e56:	79fa      	ldrb	r2, [r7, #7]
 8014e58:	490b      	ldr	r1, [pc, #44]	; (8014e88 <USBPD_DPM_CADCallback+0xc8>)
 8014e5a:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8014e5e:	f36f 1387 	bfc	r3, #6, #2
 8014e62:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 8014e66:	79fb      	ldrb	r3, [r7, #7]
 8014e68:	4a07      	ldr	r2, [pc, #28]	; (8014e88 <USBPD_DPM_CADCallback+0xc8>)
 8014e6a:	009b      	lsls	r3, r3, #2
 8014e6c:	4413      	add	r3, r2
 8014e6e:	785a      	ldrb	r2, [r3, #1]
 8014e70:	f36f 0202 	bfc	r2, #0, #3
 8014e74:	705a      	strb	r2, [r3, #1]
    break;
 8014e76:	e000      	b.n	8014e7a <USBPD_DPM_CADCallback+0xba>
    }
  default :
    /* nothing to do */
    break;
 8014e78:	bf00      	nop
  }
}
 8014e7a:	bf00      	nop
 8014e7c:	3708      	adds	r7, #8
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	bd80      	pop	{r7, pc}
 8014e82:	bf00      	nop
 8014e84:	2000229c 	.word	0x2000229c
 8014e88:	200024e4 	.word	0x200024e4

08014e8c <DPM_ManageAttachedState>:

static void DPM_ManageAttachedState(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8014e8c:	b590      	push	{r4, r7, lr}
 8014e8e:	b083      	sub	sp, #12
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	4603      	mov	r3, r0
 8014e94:	603a      	str	r2, [r7, #0]
 8014e96:	71fb      	strb	r3, [r7, #7]
 8014e98:	460b      	mov	r3, r1
 8014e9a:	71bb      	strb	r3, [r7, #6]
  DPM_Params[PortNum].ActiveCCIs = Cc;
 8014e9c:	79fa      	ldrb	r2, [r7, #7]
 8014e9e:	683b      	ldr	r3, [r7, #0]
 8014ea0:	f003 0303 	and.w	r3, r3, #3
 8014ea4:	b2d8      	uxtb	r0, r3
 8014ea6:	4919      	ldr	r1, [pc, #100]	; (8014f0c <DPM_ManageAttachedState+0x80>)
 8014ea8:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8014eac:	f360 1387 	bfi	r3, r0, #6, #2
 8014eb0:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
  (void)USBPD_PE_IsCableConnected(PortNum, 1);
 8014eb4:	79fb      	ldrb	r3, [r7, #7]
 8014eb6:	2101      	movs	r1, #1
 8014eb8:	4618      	mov	r0, r3
 8014eba:	f7eb fb6c 	bl	8000596 <USBPD_PE_IsCableConnected>

  USBPD_DPM_UserCableDetection(PortNum, State);
 8014ebe:	79ba      	ldrb	r2, [r7, #6]
 8014ec0:	79fb      	ldrb	r3, [r7, #7]
 8014ec2:	4611      	mov	r1, r2
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	f000 f831 	bl	8014f2c <USBPD_DPM_UserCableDetection>

  /* Create PE task */
  if (DPM_Thread_Table[PortNum] == NULL)
 8014eca:	79fb      	ldrb	r3, [r7, #7]
 8014ecc:	4a10      	ldr	r2, [pc, #64]	; (8014f10 <DPM_ManageAttachedState+0x84>)
 8014ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d116      	bne.n	8014f04 <DPM_ManageAttachedState+0x78>
  {
#if (osCMSIS < 0x20000U)
    DPM_Thread_Table[PortNum] = osThreadCreate(OSTHREAD_PE(PortNum), (void *)((uint32_t)PortNum));
 8014ed6:	79fb      	ldrb	r3, [r7, #7]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d101      	bne.n	8014ee0 <DPM_ManageAttachedState+0x54>
 8014edc:	4b0d      	ldr	r3, [pc, #52]	; (8014f14 <DPM_ManageAttachedState+0x88>)
 8014ede:	e000      	b.n	8014ee2 <DPM_ManageAttachedState+0x56>
 8014ee0:	4b0d      	ldr	r3, [pc, #52]	; (8014f18 <DPM_ManageAttachedState+0x8c>)
 8014ee2:	79fa      	ldrb	r2, [r7, #7]
 8014ee4:	79fc      	ldrb	r4, [r7, #7]
 8014ee6:	4611      	mov	r1, r2
 8014ee8:	4618      	mov	r0, r3
 8014eea:	f7fa feea 	bl	800fcc2 <osThreadCreate>
 8014eee:	4602      	mov	r2, r0
 8014ef0:	4b07      	ldr	r3, [pc, #28]	; (8014f10 <DPM_ManageAttachedState+0x84>)
 8014ef2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
#else
    DPM_Thread_Table[PortNum] = osThreadNew(OSTHREAD_PE(PortNum), NULL, OSTHREAD_PE_ATTR(PortNum));
#endif /* osCMSIS < 0x20000U */
    if (DPM_Thread_Table[PortNum] == NULL)
 8014ef6:	79fb      	ldrb	r3, [r7, #7]
 8014ef8:	4a05      	ldr	r2, [pc, #20]	; (8014f10 <DPM_ManageAttachedState+0x84>)
 8014efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d100      	bne.n	8014f04 <DPM_ManageAttachedState+0x78>
    {
      /* should not occurr. May be an issue with FreeRTOS heap size too small */
      while(1);
 8014f02:	e7fe      	b.n	8014f02 <DPM_ManageAttachedState+0x76>
    }
  }
}
 8014f04:	bf00      	nop
 8014f06:	370c      	adds	r7, #12
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd90      	pop	{r4, r7, pc}
 8014f0c:	200024e4 	.word	0x200024e4
 8014f10:	2000229c 	.word	0x2000229c
 8014f14:	08019d74 	.word	0x08019d74
 8014f18:	08019d88 	.word	0x08019d88

08014f1c <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
  USBPD_PWR_IF_Init();
 8014f20:	f000 fcd4 	bl	80158cc <USBPD_PWR_IF_Init>

  return USBPD_OK;
 8014f24:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 8014f26:	4618      	mov	r0, r3
 8014f28:	bd80      	pop	{r7, pc}
	...

08014f2c <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b082      	sub	sp, #8
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	4603      	mov	r3, r0
 8014f34:	460a      	mov	r2, r1
 8014f36:	71fb      	strb	r3, [r7, #7]
 8014f38:	4613      	mov	r3, r2
 8014f3a:	71bb      	strb	r3, [r7, #6]
  switch(State)
 8014f3c:	79bb      	ldrb	r3, [r7, #6]
 8014f3e:	2b02      	cmp	r3, #2
 8014f40:	d00b      	beq.n	8014f5a <USBPD_DPM_UserCableDetection+0x2e>
 8014f42:	2b04      	cmp	r3, #4
 8014f44:	d113      	bne.n	8014f6e <USBPD_DPM_UserCableDetection+0x42>
  {
  case USBPD_CAD_EVENT_ATTEMC:
    DPM_Ports[PortNum].DPM_IsConnected = 1;
 8014f46:	79fb      	ldrb	r3, [r7, #7]
 8014f48:	4a11      	ldr	r2, [pc, #68]	; (8014f90 <USBPD_DPM_UserCableDetection+0x64>)
 8014f4a:	2164      	movs	r1, #100	; 0x64
 8014f4c:	fb01 f303 	mul.w	r3, r1, r3
 8014f50:	4413      	add	r3, r2
 8014f52:	3360      	adds	r3, #96	; 0x60
 8014f54:	2201      	movs	r2, #1
 8014f56:	701a      	strb	r2, [r3, #0]
    break;
 8014f58:	e015      	b.n	8014f86 <USBPD_DPM_UserCableDetection+0x5a>

  case USBPD_CAD_EVENT_ATTACHED:
   /* Format and send a notification to GUI if enabled */
    DPM_Ports[PortNum].DPM_IsConnected = 1;
 8014f5a:	79fb      	ldrb	r3, [r7, #7]
 8014f5c:	4a0c      	ldr	r2, [pc, #48]	; (8014f90 <USBPD_DPM_UserCableDetection+0x64>)
 8014f5e:	2164      	movs	r1, #100	; 0x64
 8014f60:	fb01 f303 	mul.w	r3, r1, r3
 8014f64:	4413      	add	r3, r2
 8014f66:	3360      	adds	r3, #96	; 0x60
 8014f68:	2201      	movs	r2, #1
 8014f6a:	701a      	strb	r2, [r3, #0]
    break;
 8014f6c:	e00b      	b.n	8014f86 <USBPD_DPM_UserCableDetection+0x5a>
  case USBPD_CAD_EVENT_EMC:
  default:
    //LED_OFF(LED2_WHITE);

    /* reset all values received from port partner */
    memset(&DPM_Ports[PortNum], 0, sizeof(DPM_Ports[PortNum]));
 8014f6e:	79fb      	ldrb	r3, [r7, #7]
 8014f70:	2264      	movs	r2, #100	; 0x64
 8014f72:	fb02 f303 	mul.w	r3, r2, r3
 8014f76:	4a06      	ldr	r2, [pc, #24]	; (8014f90 <USBPD_DPM_UserCableDetection+0x64>)
 8014f78:	4413      	add	r3, r2
 8014f7a:	2264      	movs	r2, #100	; 0x64
 8014f7c:	2100      	movs	r1, #0
 8014f7e:	4618      	mov	r0, r3
 8014f80:	f000 fdcb 	bl	8015b1a <memset>
    break;
 8014f84:	bf00      	nop

  }
/* USER CODE BEGIN USBPD_DPM_UserCableDetection */
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 8014f86:	bf00      	nop
 8014f88:	3708      	adds	r7, #8
 8014f8a:	46bd      	mov	sp, r7
 8014f8c:	bd80      	pop	{r7, pc}
 8014f8e:	bf00      	nop
 8014f90:	200022ac 	.word	0x200022ac

08014f94 <USBPD_DPM_UserTimerCounter>:
  * @brief  function used to manage user timer.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_UserTimerCounter(uint8_t PortNum)
{
 8014f94:	b480      	push	{r7}
 8014f96:	b083      	sub	sp, #12
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_UserTimerCounter */

/* USER CODE END USBPD_DPM_UserTimerCounter */
}
 8014f9e:	bf00      	nop
 8014fa0:	370c      	adds	r7, #12
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa8:	4770      	bx	lr

08014faa <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 8014faa:	b480      	push	{r7}
 8014fac:	b083      	sub	sp, #12
 8014fae:	af00      	add	r7, sp, #0
 8014fb0:	4603      	mov	r3, r0
 8014fb2:	6039      	str	r1, [r7, #0]
 8014fb4:	71fb      	strb	r3, [r7, #7]
 8014fb6:	4613      	mov	r3, r2
 8014fb8:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "HELP: update USBPD_DPM_HardReset");
/* USER CODE END USBPD_DPM_HardReset */
}
 8014fba:	bf00      	nop
 8014fbc:	370c      	adds	r7, #12
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc4:	4770      	bx	lr

08014fc6 <USBPD_DPM_EvaluatePowerRoleSwap>:
  * @brief  Evaluate the swap request from PE.
  * @param  PortNum The current port number
  * @retval USBPD_ACCEPT, USBPD_WAIT, USBPD_REJECT
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluatePowerRoleSwap(uint8_t PortNum)
{
 8014fc6:	b480      	push	{r7}
 8014fc8:	b083      	sub	sp, #12
 8014fca:	af00      	add	r7, sp, #0
 8014fcc:	4603      	mov	r3, r0
 8014fce:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EvaluatePowerRoleSwap */
  return USBPD_REJECT;
 8014fd0:	230c      	movs	r3, #12
/* USER CODE END USBPD_DPM_EvaluatePowerRoleSwap */
}
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	370c      	adds	r7, #12
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fdc:	4770      	bx	lr
	...

08014fe0 <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 8014fe0:	b480      	push	{r7}
 8014fe2:	b085      	sub	sp, #20
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	460a      	mov	r2, r1
 8014fea:	71fb      	strb	r3, [r7, #7]
 8014fec:	4613      	mov	r3, r2
 8014fee:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_Notification */
  switch(EventVal)
 8014ff0:	79bb      	ldrb	r3, [r7, #6]
 8014ff2:	3b01      	subs	r3, #1
 8014ff4:	2b20      	cmp	r3, #32
 8014ff6:	d865      	bhi.n	80150c4 <USBPD_DPM_Notification+0xe4>
 8014ff8:	a201      	add	r2, pc, #4	; (adr r2, 8015000 <USBPD_DPM_Notification+0x20>)
 8014ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ffe:	bf00      	nop
 8015000:	08015085 	.word	0x08015085
 8015004:	080150c5 	.word	0x080150c5
 8015008:	080150c5 	.word	0x080150c5
 801500c:	080150c5 	.word	0x080150c5
 8015010:	080150c5 	.word	0x080150c5
 8015014:	080150c5 	.word	0x080150c5
 8015018:	080150c5 	.word	0x080150c5
 801501c:	080150c5 	.word	0x080150c5
 8015020:	080150c5 	.word	0x080150c5
 8015024:	080150c5 	.word	0x080150c5
 8015028:	080150c5 	.word	0x080150c5
 801502c:	080150c5 	.word	0x080150c5
 8015030:	080150c5 	.word	0x080150c5
 8015034:	080150c5 	.word	0x080150c5
 8015038:	080150c5 	.word	0x080150c5
 801503c:	080150c5 	.word	0x080150c5
 8015040:	080150c5 	.word	0x080150c5
 8015044:	080150c5 	.word	0x080150c5
 8015048:	080150c5 	.word	0x080150c5
 801504c:	080150c5 	.word	0x080150c5
 8015050:	080150c5 	.word	0x080150c5
 8015054:	080150c5 	.word	0x080150c5
 8015058:	080150c5 	.word	0x080150c5
 801505c:	080150c5 	.word	0x080150c5
 8015060:	080150c5 	.word	0x080150c5
 8015064:	080150c5 	.word	0x080150c5
 8015068:	080150c5 	.word	0x080150c5
 801506c:	080150c5 	.word	0x080150c5
 8015070:	080150c5 	.word	0x080150c5
 8015074:	080150c5 	.word	0x080150c5
 8015078:	080150c5 	.word	0x080150c5
 801507c:	080150c5 	.word	0x080150c5
 8015080:	080150c5 	.word	0x080150c5
    /***************************************************************************
                               REQUEST ANSWER NOTIFICATION
    */
    case USBPD_NOTIFY_REQUEST_ACCEPTED:
      /* Update DPM_RDOPosition only if current role is SNK */
      if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 8015084:	79fb      	ldrb	r3, [r7, #7]
 8015086:	4a14      	ldr	r2, [pc, #80]	; (80150d8 <USBPD_DPM_Notification+0xf8>)
 8015088:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801508c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015090:	b2db      	uxtb	r3, r3
 8015092:	2b00      	cmp	r3, #0
 8015094:	d118      	bne.n	80150c8 <USBPD_DPM_Notification+0xe8>
      {
        USBPD_SNKRDO_TypeDef rdo;
        rdo.d32 = DPM_Ports[PortNum].DPM_RequestDOMsg;
 8015096:	79fb      	ldrb	r3, [r7, #7]
 8015098:	4a10      	ldr	r2, [pc, #64]	; (80150dc <USBPD_DPM_Notification+0xfc>)
 801509a:	2164      	movs	r1, #100	; 0x64
 801509c:	fb01 f303 	mul.w	r3, r1, r3
 80150a0:	4413      	add	r3, r2
 80150a2:	3350      	adds	r3, #80	; 0x50
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	60fb      	str	r3, [r7, #12]
        DPM_Ports[PortNum].DPM_RDOPosition = rdo.GenericRDO.ObjectPosition;
 80150a8:	7bfb      	ldrb	r3, [r7, #15]
 80150aa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80150ae:	b2da      	uxtb	r2, r3
 80150b0:	79fb      	ldrb	r3, [r7, #7]
 80150b2:	4610      	mov	r0, r2
 80150b4:	4a09      	ldr	r2, [pc, #36]	; (80150dc <USBPD_DPM_Notification+0xfc>)
 80150b6:	2164      	movs	r1, #100	; 0x64
 80150b8:	fb01 f303 	mul.w	r3, r1, r3
 80150bc:	4413      	add	r3, r2
 80150be:	3340      	adds	r3, #64	; 0x40
 80150c0:	6018      	str	r0, [r3, #0]
      }
    break;
 80150c2:	e001      	b.n	80150c8 <USBPD_DPM_Notification+0xe8>
        /* SINK Port Partner is not PD capable. Legacy cable may have been connected
           In this state, VBUS is set to 5V */
      }
      break;
    default :
      break;
 80150c4:	bf00      	nop
 80150c6:	e000      	b.n	80150ca <USBPD_DPM_Notification+0xea>
    break;
 80150c8:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_Notification */
}
 80150ca:	bf00      	nop
 80150cc:	3714      	adds	r7, #20
 80150ce:	46bd      	mov	sp, r7
 80150d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d4:	4770      	bx	lr
 80150d6:	bf00      	nop
 80150d8:	200024e4 	.word	0x200024e4
 80150dc:	200022ac 	.word	0x200022ac

080150e0 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b086      	sub	sp, #24
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	60ba      	str	r2, [r7, #8]
 80150e8:	607b      	str	r3, [r7, #4]
 80150ea:	4603      	mov	r3, r0
 80150ec:	73fb      	strb	r3, [r7, #15]
 80150ee:	460b      	mov	r3, r1
 80150f0:	73bb      	strb	r3, [r7, #14]
/* USER CODE BEGIN USBPD_DPM_GetDataInfo */
  uint32_t index = 0;
 80150f2:	2300      	movs	r3, #0
 80150f4:	617b      	str	r3, [r7, #20]

  /* Check type of information targeted by request */
  switch (DataId)
 80150f6:	7bbb      	ldrb	r3, [r7, #14]
 80150f8:	2b07      	cmp	r3, #7
 80150fa:	f200 8096 	bhi.w	801522a <USBPD_DPM_GetDataInfo+0x14a>
 80150fe:	a201      	add	r2, pc, #4	; (adr r2, 8015104 <USBPD_DPM_GetDataInfo+0x24>)
 8015100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015104:	08015125 	.word	0x08015125
 8015108:	08015125 	.word	0x08015125
 801510c:	0801522b 	.word	0x0801522b
 8015110:	080151ef 	.word	0x080151ef
 8015114:	0801513d 	.word	0x0801513d
 8015118:	08015195 	.word	0x08015195
 801511c:	0801522b 	.word	0x0801522b
 8015120:	0801520d 	.word	0x0801520d
    Case Port SINK PDO Data information :
    Call PWR_IF PDO reading request.
    */
    case USBPD_CORE_DATATYPE_SRC_PDO:
    case USBPD_CORE_DATATYPE_SNK_PDO:
      USBPD_PWR_IF_GetPortPDOs(PortNum, DataId, Ptr, Size);
 8015124:	7bb9      	ldrb	r1, [r7, #14]
 8015126:	7bf8      	ldrb	r0, [r7, #15]
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	68ba      	ldr	r2, [r7, #8]
 801512c:	f000 fc10 	bl	8015950 <USBPD_PWR_IF_GetPortPDOs>
      *Size *= 4;
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	009a      	lsls	r2, r3, #2
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	601a      	str	r2, [r3, #0]
      break;
 801513a:	e07a      	b.n	8015232 <USBPD_DPM_GetDataInfo+0x152>

    /* Case Port Received Source PDO Data information (from distant port) */
    case USBPD_CORE_DATATYPE_RCV_SRC_PDO:
      for(index = 0; index < DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO; index++)
 801513c:	2300      	movs	r3, #0
 801513e:	617b      	str	r3, [r7, #20]
 8015140:	e011      	b.n	8015166 <USBPD_DPM_GetDataInfo+0x86>
        { *(uint32_t*)(Ptr + index) = DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO[index]; }
 8015142:	7bfa      	ldrb	r2, [r7, #15]
 8015144:	68b9      	ldr	r1, [r7, #8]
 8015146:	697b      	ldr	r3, [r7, #20]
 8015148:	4419      	add	r1, r3
 801514a:	483c      	ldr	r0, [pc, #240]	; (801523c <USBPD_DPM_GetDataInfo+0x15c>)
 801514c:	4613      	mov	r3, r2
 801514e:	009b      	lsls	r3, r3, #2
 8015150:	4413      	add	r3, r2
 8015152:	009a      	lsls	r2, r3, #2
 8015154:	4413      	add	r3, r2
 8015156:	697a      	ldr	r2, [r7, #20]
 8015158:	4413      	add	r3, r2
 801515a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801515e:	600b      	str	r3, [r1, #0]
      for(index = 0; index < DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO; index++)
 8015160:	697b      	ldr	r3, [r7, #20]
 8015162:	3301      	adds	r3, #1
 8015164:	617b      	str	r3, [r7, #20]
 8015166:	7bfb      	ldrb	r3, [r7, #15]
 8015168:	4a34      	ldr	r2, [pc, #208]	; (801523c <USBPD_DPM_GetDataInfo+0x15c>)
 801516a:	2164      	movs	r1, #100	; 0x64
 801516c:	fb01 f303 	mul.w	r3, r1, r3
 8015170:	4413      	add	r3, r2
 8015172:	331c      	adds	r3, #28
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	697a      	ldr	r2, [r7, #20]
 8015178:	429a      	cmp	r2, r3
 801517a:	d3e2      	bcc.n	8015142 <USBPD_DPM_GetDataInfo+0x62>
      *Size = (DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO * 4);
 801517c:	7bfb      	ldrb	r3, [r7, #15]
 801517e:	4a2f      	ldr	r2, [pc, #188]	; (801523c <USBPD_DPM_GetDataInfo+0x15c>)
 8015180:	2164      	movs	r1, #100	; 0x64
 8015182:	fb01 f303 	mul.w	r3, r1, r3
 8015186:	4413      	add	r3, r2
 8015188:	331c      	adds	r3, #28
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	009a      	lsls	r2, r3, #2
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	601a      	str	r2, [r3, #0]
      break;
 8015192:	e04e      	b.n	8015232 <USBPD_DPM_GetDataInfo+0x152>

    /* Case Port Received Sink PDO Data information (from distant port) */
    case USBPD_CORE_DATATYPE_RCV_SNK_PDO:
      for(index = 0; index < DPM_Ports[PortNum].DPM_NumberOfRcvSNKPDO; index++)
 8015194:	2300      	movs	r3, #0
 8015196:	617b      	str	r3, [r7, #20]
 8015198:	e012      	b.n	80151c0 <USBPD_DPM_GetDataInfo+0xe0>
        { *(uint32_t*)(Ptr + index) = DPM_Ports[PortNum].DPM_ListOfRcvSNKPDO[index]; }
 801519a:	7bfa      	ldrb	r2, [r7, #15]
 801519c:	68b9      	ldr	r1, [r7, #8]
 801519e:	697b      	ldr	r3, [r7, #20]
 80151a0:	4419      	add	r1, r3
 80151a2:	4826      	ldr	r0, [pc, #152]	; (801523c <USBPD_DPM_GetDataInfo+0x15c>)
 80151a4:	4613      	mov	r3, r2
 80151a6:	009b      	lsls	r3, r3, #2
 80151a8:	4413      	add	r3, r2
 80151aa:	009a      	lsls	r2, r3, #2
 80151ac:	4413      	add	r3, r2
 80151ae:	697a      	ldr	r2, [r7, #20]
 80151b0:	4413      	add	r3, r2
 80151b2:	3308      	adds	r3, #8
 80151b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80151b8:	600b      	str	r3, [r1, #0]
      for(index = 0; index < DPM_Ports[PortNum].DPM_NumberOfRcvSNKPDO; index++)
 80151ba:	697b      	ldr	r3, [r7, #20]
 80151bc:	3301      	adds	r3, #1
 80151be:	617b      	str	r3, [r7, #20]
 80151c0:	7bfb      	ldrb	r3, [r7, #15]
 80151c2:	4a1e      	ldr	r2, [pc, #120]	; (801523c <USBPD_DPM_GetDataInfo+0x15c>)
 80151c4:	2164      	movs	r1, #100	; 0x64
 80151c6:	fb01 f303 	mul.w	r3, r1, r3
 80151ca:	4413      	add	r3, r2
 80151cc:	333c      	adds	r3, #60	; 0x3c
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	697a      	ldr	r2, [r7, #20]
 80151d2:	429a      	cmp	r2, r3
 80151d4:	d3e1      	bcc.n	801519a <USBPD_DPM_GetDataInfo+0xba>
      *Size = (DPM_Ports[PortNum].DPM_NumberOfRcvSNKPDO * 4);
 80151d6:	7bfb      	ldrb	r3, [r7, #15]
 80151d8:	4a18      	ldr	r2, [pc, #96]	; (801523c <USBPD_DPM_GetDataInfo+0x15c>)
 80151da:	2164      	movs	r1, #100	; 0x64
 80151dc:	fb01 f303 	mul.w	r3, r1, r3
 80151e0:	4413      	add	r3, r2
 80151e2:	333c      	adds	r3, #60	; 0x3c
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	009a      	lsls	r2, r3, #2
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	601a      	str	r2, [r3, #0]
      break;
 80151ec:	e021      	b.n	8015232 <USBPD_DPM_GetDataInfo+0x152>

    /* Case Requested voltage value Data information */
    case USBPD_CORE_DATATYPE_REQ_VOLTAGE:
      *Ptr = DPM_Ports[PortNum].DPM_RequestedVoltage;
 80151ee:	7bfb      	ldrb	r3, [r7, #15]
 80151f0:	4a12      	ldr	r2, [pc, #72]	; (801523c <USBPD_DPM_GetDataInfo+0x15c>)
 80151f2:	2164      	movs	r1, #100	; 0x64
 80151f4:	fb01 f303 	mul.w	r3, r1, r3
 80151f8:	4413      	add	r3, r2
 80151fa:	3344      	adds	r3, #68	; 0x44
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	b2da      	uxtb	r2, r3
 8015200:	68bb      	ldr	r3, [r7, #8]
 8015202:	701a      	strb	r2, [r3, #0]
      *Size = 4;
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	2204      	movs	r2, #4
 8015208:	601a      	str	r2, [r3, #0]
      break;
 801520a:	e012      	b.n	8015232 <USBPD_DPM_GetDataInfo+0x152>

    /* Case Request message DO (from Sink to Source) Data information */
    case USBPD_CORE_DATATYPE_REQUEST_DO:
      *Ptr = DPM_Ports[PortNum].DPM_RequestDOMsg;
 801520c:	7bfb      	ldrb	r3, [r7, #15]
 801520e:	4a0b      	ldr	r2, [pc, #44]	; (801523c <USBPD_DPM_GetDataInfo+0x15c>)
 8015210:	2164      	movs	r1, #100	; 0x64
 8015212:	fb01 f303 	mul.w	r3, r1, r3
 8015216:	4413      	add	r3, r2
 8015218:	3350      	adds	r3, #80	; 0x50
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	b2da      	uxtb	r2, r3
 801521e:	68bb      	ldr	r3, [r7, #8]
 8015220:	701a      	strb	r2, [r3, #0]
      *Size = 4;
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	2204      	movs	r2, #4
 8015226:	601a      	str	r2, [r3, #0]
      break;
 8015228:	e003      	b.n	8015232 <USBPD_DPM_GetDataInfo+0x152>

    default:
      *Size = 0;
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	2200      	movs	r2, #0
 801522e:	601a      	str	r2, [r3, #0]
      break;
 8015230:	bf00      	nop
//  case USBPD_CORE_MANUFACTURER_INFO:          /*!< Retrieve of Manufacturer info message content       */
//  case USBPD_CORE_BATTERY_STATUS:             /*!< Retrieve of Battery status message content          */
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 8015232:	bf00      	nop
 8015234:	3718      	adds	r7, #24
 8015236:	46bd      	mov	sp, r7
 8015238:	bd80      	pop	{r7, pc}
 801523a:	bf00      	nop
 801523c:	200022ac 	.word	0x200022ac

08015240 <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 8015240:	b480      	push	{r7}
 8015242:	b087      	sub	sp, #28
 8015244:	af00      	add	r7, sp, #0
 8015246:	60ba      	str	r2, [r7, #8]
 8015248:	607b      	str	r3, [r7, #4]
 801524a:	4603      	mov	r3, r0
 801524c:	73fb      	strb	r3, [r7, #15]
 801524e:	460b      	mov	r3, r1
 8015250:	73bb      	strb	r3, [r7, #14]
/* USER CODE BEGIN USBPD_DPM_SetDataInfo */

  uint32_t index;

  // Check type of information targeted by request
  switch (DataId)
 8015252:	7bbb      	ldrb	r3, [r7, #14]
 8015254:	3b02      	subs	r3, #2
 8015256:	2b05      	cmp	r3, #5
 8015258:	f200 80d7 	bhi.w	801540a <USBPD_DPM_SetDataInfo+0x1ca>
 801525c:	a201      	add	r2, pc, #4	; (adr r2, 8015264 <USBPD_DPM_SetDataInfo+0x24>)
 801525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015262:	bf00      	nop
 8015264:	0801527d 	.word	0x0801527d
 8015268:	080152b3 	.word	0x080152b3
 801526c:	080152d3 	.word	0x080152d3
 8015270:	08015351 	.word	0x08015351
 8015274:	080153cf 	.word	0x080153cf
 8015278:	080153ed 	.word	0x080153ed
  {
    // Case requested DO position Data information :
    case USBPD_CORE_DATATYPE_RDO_POSITION:
      if (Size == 4)
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	2b04      	cmp	r3, #4
 8015280:	f040 80c5 	bne.w	801540e <USBPD_DPM_SetDataInfo+0x1ce>
      {
        DPM_Ports[PortNum].DPM_RDOPosition = *Ptr;
 8015284:	68bb      	ldr	r3, [r7, #8]
 8015286:	781a      	ldrb	r2, [r3, #0]
 8015288:	7bfb      	ldrb	r3, [r7, #15]
 801528a:	4610      	mov	r0, r2
 801528c:	4a68      	ldr	r2, [pc, #416]	; (8015430 <USBPD_DPM_SetDataInfo+0x1f0>)
 801528e:	2164      	movs	r1, #100	; 0x64
 8015290:	fb01 f303 	mul.w	r3, r1, r3
 8015294:	4413      	add	r3, r2
 8015296:	3340      	adds	r3, #64	; 0x40
 8015298:	6018      	str	r0, [r3, #0]
        DPM_Ports[PortNum].DPM_RDOPositionPrevious = *Ptr;
 801529a:	68bb      	ldr	r3, [r7, #8]
 801529c:	781a      	ldrb	r2, [r3, #0]
 801529e:	7bfb      	ldrb	r3, [r7, #15]
 80152a0:	4610      	mov	r0, r2
 80152a2:	4a63      	ldr	r2, [pc, #396]	; (8015430 <USBPD_DPM_SetDataInfo+0x1f0>)
 80152a4:	2164      	movs	r1, #100	; 0x64
 80152a6:	fb01 f303 	mul.w	r3, r1, r3
 80152aa:	4413      	add	r3, r2
 80152ac:	334c      	adds	r3, #76	; 0x4c
 80152ae:	6018      	str	r0, [r3, #0]
      }
      break;
 80152b0:	e0ad      	b.n	801540e <USBPD_DPM_SetDataInfo+0x1ce>

    // Case requested Voltage Data information :
    case USBPD_CORE_DATATYPE_REQ_VOLTAGE:
      if (Size == 4)
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	2b04      	cmp	r3, #4
 80152b6:	f040 80ac 	bne.w	8015412 <USBPD_DPM_SetDataInfo+0x1d2>
        { DPM_Ports[PortNum].DPM_RequestedVoltage = *Ptr; }
 80152ba:	68bb      	ldr	r3, [r7, #8]
 80152bc:	781a      	ldrb	r2, [r3, #0]
 80152be:	7bfb      	ldrb	r3, [r7, #15]
 80152c0:	4610      	mov	r0, r2
 80152c2:	4a5b      	ldr	r2, [pc, #364]	; (8015430 <USBPD_DPM_SetDataInfo+0x1f0>)
 80152c4:	2164      	movs	r1, #100	; 0x64
 80152c6:	fb01 f303 	mul.w	r3, r1, r3
 80152ca:	4413      	add	r3, r2
 80152cc:	3344      	adds	r3, #68	; 0x44
 80152ce:	6018      	str	r0, [r3, #0]
      break;
 80152d0:	e09f      	b.n	8015412 <USBPD_DPM_SetDataInfo+0x1d2>

    // Case Received Source PDO values Data information :
    case USBPD_CORE_DATATYPE_RCV_SRC_PDO:
      if (Size <= (USBPD_MAX_NB_PDO * 4))
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	2b1c      	cmp	r3, #28
 80152d6:	f200 809e 	bhi.w	8015416 <USBPD_DPM_SetDataInfo+0x1d6>
      {
        DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO = (Size / 4);
 80152da:	7bfb      	ldrb	r3, [r7, #15]
 80152dc:	687a      	ldr	r2, [r7, #4]
 80152de:	0892      	lsrs	r2, r2, #2
 80152e0:	4953      	ldr	r1, [pc, #332]	; (8015430 <USBPD_DPM_SetDataInfo+0x1f0>)
 80152e2:	2064      	movs	r0, #100	; 0x64
 80152e4:	fb00 f303 	mul.w	r3, r0, r3
 80152e8:	440b      	add	r3, r1
 80152ea:	331c      	adds	r3, #28
 80152ec:	601a      	str	r2, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0; index < (Size / 4); index++)
 80152ee:	2300      	movs	r3, #0
 80152f0:	617b      	str	r3, [r7, #20]
 80152f2:	e027      	b.n	8015344 <USBPD_DPM_SetDataInfo+0x104>
          { DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO[index] = LE32(Ptr + index); }
 80152f4:	68ba      	ldr	r2, [r7, #8]
 80152f6:	697b      	ldr	r3, [r7, #20]
 80152f8:	4413      	add	r3, r2
 80152fa:	781b      	ldrb	r3, [r3, #0]
 80152fc:	4619      	mov	r1, r3
 80152fe:	697b      	ldr	r3, [r7, #20]
 8015300:	3301      	adds	r3, #1
 8015302:	68ba      	ldr	r2, [r7, #8]
 8015304:	4413      	add	r3, r2
 8015306:	781b      	ldrb	r3, [r3, #0]
 8015308:	021b      	lsls	r3, r3, #8
 801530a:	18ca      	adds	r2, r1, r3
 801530c:	697b      	ldr	r3, [r7, #20]
 801530e:	3302      	adds	r3, #2
 8015310:	68b9      	ldr	r1, [r7, #8]
 8015312:	440b      	add	r3, r1
 8015314:	781b      	ldrb	r3, [r3, #0]
 8015316:	041b      	lsls	r3, r3, #16
 8015318:	18d1      	adds	r1, r2, r3
 801531a:	697b      	ldr	r3, [r7, #20]
 801531c:	3303      	adds	r3, #3
 801531e:	68ba      	ldr	r2, [r7, #8]
 8015320:	4413      	add	r3, r2
 8015322:	781b      	ldrb	r3, [r3, #0]
 8015324:	061b      	lsls	r3, r3, #24
 8015326:	7bfa      	ldrb	r2, [r7, #15]
 8015328:	4419      	add	r1, r3
 801532a:	4841      	ldr	r0, [pc, #260]	; (8015430 <USBPD_DPM_SetDataInfo+0x1f0>)
 801532c:	4613      	mov	r3, r2
 801532e:	009b      	lsls	r3, r3, #2
 8015330:	4413      	add	r3, r2
 8015332:	009a      	lsls	r2, r3, #2
 8015334:	4413      	add	r3, r2
 8015336:	697a      	ldr	r2, [r7, #20]
 8015338:	4413      	add	r3, r2
 801533a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for (index = 0; index < (Size / 4); index++)
 801533e:	697b      	ldr	r3, [r7, #20]
 8015340:	3301      	adds	r3, #1
 8015342:	617b      	str	r3, [r7, #20]
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	089b      	lsrs	r3, r3, #2
 8015348:	697a      	ldr	r2, [r7, #20]
 801534a:	429a      	cmp	r2, r3
 801534c:	d3d2      	bcc.n	80152f4 <USBPD_DPM_SetDataInfo+0xb4>
      }
      break;
 801534e:	e062      	b.n	8015416 <USBPD_DPM_SetDataInfo+0x1d6>

    // Case Received Sink PDO values Data information :
    case USBPD_CORE_DATATYPE_RCV_SNK_PDO:
      if (Size <= (USBPD_MAX_NB_PDO * 4))
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	2b1c      	cmp	r3, #28
 8015354:	d861      	bhi.n	801541a <USBPD_DPM_SetDataInfo+0x1da>
      {
        DPM_Ports[PortNum].DPM_NumberOfRcvSNKPDO = (Size / 4);
 8015356:	7bfb      	ldrb	r3, [r7, #15]
 8015358:	687a      	ldr	r2, [r7, #4]
 801535a:	0892      	lsrs	r2, r2, #2
 801535c:	4934      	ldr	r1, [pc, #208]	; (8015430 <USBPD_DPM_SetDataInfo+0x1f0>)
 801535e:	2064      	movs	r0, #100	; 0x64
 8015360:	fb00 f303 	mul.w	r3, r0, r3
 8015364:	440b      	add	r3, r1
 8015366:	333c      	adds	r3, #60	; 0x3c
 8015368:	601a      	str	r2, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0; index < (Size / 4); index++)
 801536a:	2300      	movs	r3, #0
 801536c:	617b      	str	r3, [r7, #20]
 801536e:	e028      	b.n	80153c2 <USBPD_DPM_SetDataInfo+0x182>
          { DPM_Ports[PortNum].DPM_ListOfRcvSNKPDO[index] = LE32(Ptr + index); }
 8015370:	68ba      	ldr	r2, [r7, #8]
 8015372:	697b      	ldr	r3, [r7, #20]
 8015374:	4413      	add	r3, r2
 8015376:	781b      	ldrb	r3, [r3, #0]
 8015378:	4619      	mov	r1, r3
 801537a:	697b      	ldr	r3, [r7, #20]
 801537c:	3301      	adds	r3, #1
 801537e:	68ba      	ldr	r2, [r7, #8]
 8015380:	4413      	add	r3, r2
 8015382:	781b      	ldrb	r3, [r3, #0]
 8015384:	021b      	lsls	r3, r3, #8
 8015386:	18ca      	adds	r2, r1, r3
 8015388:	697b      	ldr	r3, [r7, #20]
 801538a:	3302      	adds	r3, #2
 801538c:	68b9      	ldr	r1, [r7, #8]
 801538e:	440b      	add	r3, r1
 8015390:	781b      	ldrb	r3, [r3, #0]
 8015392:	041b      	lsls	r3, r3, #16
 8015394:	18d1      	adds	r1, r2, r3
 8015396:	697b      	ldr	r3, [r7, #20]
 8015398:	3303      	adds	r3, #3
 801539a:	68ba      	ldr	r2, [r7, #8]
 801539c:	4413      	add	r3, r2
 801539e:	781b      	ldrb	r3, [r3, #0]
 80153a0:	061b      	lsls	r3, r3, #24
 80153a2:	7bfa      	ldrb	r2, [r7, #15]
 80153a4:	4419      	add	r1, r3
 80153a6:	4822      	ldr	r0, [pc, #136]	; (8015430 <USBPD_DPM_SetDataInfo+0x1f0>)
 80153a8:	4613      	mov	r3, r2
 80153aa:	009b      	lsls	r3, r3, #2
 80153ac:	4413      	add	r3, r2
 80153ae:	009a      	lsls	r2, r3, #2
 80153b0:	4413      	add	r3, r2
 80153b2:	697a      	ldr	r2, [r7, #20]
 80153b4:	4413      	add	r3, r2
 80153b6:	3308      	adds	r3, #8
 80153b8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for (index = 0; index < (Size / 4); index++)
 80153bc:	697b      	ldr	r3, [r7, #20]
 80153be:	3301      	adds	r3, #1
 80153c0:	617b      	str	r3, [r7, #20]
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	089b      	lsrs	r3, r3, #2
 80153c6:	697a      	ldr	r2, [r7, #20]
 80153c8:	429a      	cmp	r2, r3
 80153ca:	d3d1      	bcc.n	8015370 <USBPD_DPM_SetDataInfo+0x130>
      }
      break;
 80153cc:	e025      	b.n	801541a <USBPD_DPM_SetDataInfo+0x1da>

    // Case Received Request PDO Data information :
    case USBPD_CORE_DATATYPE_RCV_REQ_PDO:
      if (Size == 4)
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	2b04      	cmp	r3, #4
 80153d2:	d124      	bne.n	801541e <USBPD_DPM_SetDataInfo+0x1de>
        { DPM_Ports[PortNum].DPM_RcvRequestDOMsg = *Ptr; }
 80153d4:	68bb      	ldr	r3, [r7, #8]
 80153d6:	781a      	ldrb	r2, [r3, #0]
 80153d8:	7bfb      	ldrb	r3, [r7, #15]
 80153da:	4610      	mov	r0, r2
 80153dc:	4a14      	ldr	r2, [pc, #80]	; (8015430 <USBPD_DPM_SetDataInfo+0x1f0>)
 80153de:	2164      	movs	r1, #100	; 0x64
 80153e0:	fb01 f303 	mul.w	r3, r1, r3
 80153e4:	4413      	add	r3, r2
 80153e6:	3358      	adds	r3, #88	; 0x58
 80153e8:	6018      	str	r0, [r3, #0]
      break;
 80153ea:	e018      	b.n	801541e <USBPD_DPM_SetDataInfo+0x1de>

    // Case Request message DO (from Sink to Source) Data information :
    case USBPD_CORE_DATATYPE_REQUEST_DO:
      if (Size == 4)
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	2b04      	cmp	r3, #4
 80153f0:	d117      	bne.n	8015422 <USBPD_DPM_SetDataInfo+0x1e2>
        { DPM_Ports[PortNum].DPM_RcvRequestDOMsg = *Ptr; }
 80153f2:	68bb      	ldr	r3, [r7, #8]
 80153f4:	781a      	ldrb	r2, [r3, #0]
 80153f6:	7bfb      	ldrb	r3, [r7, #15]
 80153f8:	4610      	mov	r0, r2
 80153fa:	4a0d      	ldr	r2, [pc, #52]	; (8015430 <USBPD_DPM_SetDataInfo+0x1f0>)
 80153fc:	2164      	movs	r1, #100	; 0x64
 80153fe:	fb01 f303 	mul.w	r3, r1, r3
 8015402:	4413      	add	r3, r2
 8015404:	3358      	adds	r3, #88	; 0x58
 8015406:	6018      	str	r0, [r3, #0]
      break;
 8015408:	e00b      	b.n	8015422 <USBPD_DPM_SetDataInfo+0x1e2>

    // In case of unexpected data type (Set request could not be fulfilled) :
    default :
      break;
 801540a:	bf00      	nop
 801540c:	e00a      	b.n	8015424 <USBPD_DPM_SetDataInfo+0x1e4>
      break;
 801540e:	bf00      	nop
 8015410:	e008      	b.n	8015424 <USBPD_DPM_SetDataInfo+0x1e4>
      break;
 8015412:	bf00      	nop
 8015414:	e006      	b.n	8015424 <USBPD_DPM_SetDataInfo+0x1e4>
      break;
 8015416:	bf00      	nop
 8015418:	e004      	b.n	8015424 <USBPD_DPM_SetDataInfo+0x1e4>
      break;
 801541a:	bf00      	nop
 801541c:	e002      	b.n	8015424 <USBPD_DPM_SetDataInfo+0x1e4>
      break;
 801541e:	bf00      	nop
 8015420:	e000      	b.n	8015424 <USBPD_DPM_SetDataInfo+0x1e4>
      break;
 8015422:	bf00      	nop
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
  }

/* USER CODE END USBPD_DPM_SetDataInfo */

}
 8015424:	bf00      	nop
 8015426:	371c      	adds	r7, #28
 8015428:	46bd      	mov	sp, r7
 801542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801542e:	4770      	bx	lr
 8015430:	200022ac 	.word	0x200022ac

08015434 <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 8015434:	b580      	push	{r7, lr}
 8015436:	b090      	sub	sp, #64	; 0x40
 8015438:	af00      	add	r7, sp, #0
 801543a:	4603      	mov	r3, r0
 801543c:	60b9      	str	r1, [r7, #8]
 801543e:	607a      	str	r2, [r7, #4]
 8015440:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */

  USBPD_PDO_TypeDef pdo;
  USBPD_SNKRDO_TypeDef rdo;
  USBPD_HandleTypeDef *pdhandle = &DPM_Ports[PortNum];
 8015442:	7bfb      	ldrb	r3, [r7, #15]
 8015444:	2264      	movs	r2, #100	; 0x64
 8015446:	fb02 f303 	mul.w	r3, r2, r3
 801544a:	4a7e      	ldr	r2, [pc, #504]	; (8015644 <USBPD_DPM_SNK_EvaluateCapabilities+0x210>)
 801544c:	4413      	add	r3, r2
 801544e:	63bb      	str	r3, [r7, #56]	; 0x38
  USBPD_USER_SettingsTypeDef *puser =
    (USBPD_USER_SettingsTypeDef *)&DPM_USER_Settings[PortNum];
 8015450:	7bfa      	ldrb	r2, [r7, #15]
  USBPD_USER_SettingsTypeDef *puser =
 8015452:	4613      	mov	r3, r2
 8015454:	00db      	lsls	r3, r3, #3
 8015456:	1a9b      	subs	r3, r3, r2
 8015458:	00db      	lsls	r3, r3, #3
 801545a:	4a7b      	ldr	r2, [pc, #492]	; (8015648 <USBPD_DPM_SNK_EvaluateCapabilities+0x214>)
 801545c:	4413      	add	r3, r2
 801545e:	637b      	str	r3, [r7, #52]	; 0x34

  pdhandle->DPM_RequestedVoltage = 0;
 8015460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015462:	2200      	movs	r2, #0
 8015464:	645a      	str	r2, [r3, #68]	; 0x44

  /* Find the Pdo index for the requested voltage */
  int32_t pdoindex = DPM_FindVoltageIndex(PortNum, &(puser->DPM_SNKRequestedPower));
 8015466:	7bfa      	ldrb	r2, [r7, #15]
 8015468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801546a:	3304      	adds	r3, #4
 801546c:	4619      	mov	r1, r3
 801546e:	4610      	mov	r0, r2
 8015470:	f000 f9aa 	bl	80157c8 <DPM_FindVoltageIndex>
 8015474:	6338      	str	r0, [r7, #48]	; 0x30

  /* Initialize RDO */
  rdo.d32 = 0;
 8015476:	2300      	movs	r3, #0
 8015478:	623b      	str	r3, [r7, #32]

  /* If could not find desired pdo index, then return error */
  if (pdoindex == -1)
 801547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801547c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015480:	d137      	bne.n	80154f2 <USBPD_DPM_SNK_EvaluateCapabilities+0xbe>
  {
    //LED_OFF(LED2_WHITE);

    rdo.FixedVariableRDO.ObjectPosition = 1;
 8015482:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015486:	2201      	movs	r2, #1
 8015488:	f362 1306 	bfi	r3, r2, #4, #3
 801548c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    rdo.FixedVariableRDO.OperatingCurrentIn10mAunits =
      puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits / 10;
 8015490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015492:	685b      	ldr	r3, [r3, #4]
 8015494:	4a6d      	ldr	r2, [pc, #436]	; (801564c <USBPD_DPM_SNK_EvaluateCapabilities+0x218>)
 8015496:	fba2 2303 	umull	r2, r3, r2, r3
 801549a:	08db      	lsrs	r3, r3, #3
 801549c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80154a0:	b29a      	uxth	r2, r3
    rdo.FixedVariableRDO.OperatingCurrentIn10mAunits =
 80154a2:	6a3b      	ldr	r3, [r7, #32]
 80154a4:	f362 2393 	bfi	r3, r2, #10, #10
 80154a8:	623b      	str	r3, [r7, #32]
    rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits =
      puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits / 10;
 80154aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80154ac:	685b      	ldr	r3, [r3, #4]
 80154ae:	4a67      	ldr	r2, [pc, #412]	; (801564c <USBPD_DPM_SNK_EvaluateCapabilities+0x218>)
 80154b0:	fba2 2303 	umull	r2, r3, r2, r3
 80154b4:	08db      	lsrs	r3, r3, #3
 80154b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80154ba:	b29a      	uxth	r2, r3
    rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits =
 80154bc:	8c3b      	ldrh	r3, [r7, #32]
 80154be:	f362 0309 	bfi	r3, r2, #0, #10
 80154c2:	843b      	strh	r3, [r7, #32]
    rdo.FixedVariableRDO.CapabilityMismatch = 1;
 80154c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80154c8:	f043 0304 	orr.w	r3, r3, #4
 80154cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    DPM_Ports[PortNum].DPM_RequestedCurrent =
 80154d0:	7bfb      	ldrb	r3, [r7, #15]
      puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits;
 80154d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80154d4:	6852      	ldr	r2, [r2, #4]
    DPM_Ports[PortNum].DPM_RequestedCurrent =
 80154d6:	495b      	ldr	r1, [pc, #364]	; (8015644 <USBPD_DPM_SNK_EvaluateCapabilities+0x210>)
 80154d8:	2064      	movs	r0, #100	; 0x64
 80154da:	fb00 f303 	mul.w	r3, r0, r3
 80154de:	440b      	add	r3, r1
 80154e0:	3348      	adds	r3, #72	; 0x48
 80154e2:	601a      	str	r2, [r3, #0]
    /* USBPD_DPM_EvaluateCapabilities: Mismatch, could not find desired pdo index */

    pdhandle->DPM_RequestDOMsg = rdo.d32;
 80154e4:	6a3a      	ldr	r2, [r7, #32]
 80154e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154e8:	651a      	str	r2, [r3, #80]	; 0x50
    *PtrRequestData = rdo.d32;
 80154ea:	6a3a      	ldr	r2, [r7, #32]
 80154ec:	68bb      	ldr	r3, [r7, #8]
 80154ee:	601a      	str	r2, [r3, #0]
 80154f0:	e12c      	b.n	801574c <USBPD_DPM_SNK_EvaluateCapabilities+0x318>
    return;
  }

  /* Extract power information from Power Data Object */
  pdo.d32 = pdhandle->DPM_ListOfRcvSRCPDO[pdoindex];
 80154f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80154f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154fa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the Object position */
  USBPD_PDO_TypeDef snkFixedPDO;
  uint32_t size = 0;
 80154fc:	2300      	movs	r3, #0
 80154fe:	61bb      	str	r3, [r7, #24]
  uint32_t mV = 0;
 8015500:	2300      	movs	r3, #0
 8015502:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t mA = 0;
 8015504:	2300      	movs	r3, #0
 8015506:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t mW = 0;
 8015508:	2300      	movs	r3, #0
 801550a:	62bb      	str	r3, [r7, #40]	; 0x28

  USBPD_PWR_IF_GetPortPDOs(PortNum, USBPD_CORE_DATATYPE_SNK_PDO, (uint8_t *)&snkFixedPDO.d32, &size);
 801550c:	f107 0318 	add.w	r3, r7, #24
 8015510:	f107 021c 	add.w	r2, r7, #28
 8015514:	7bf8      	ldrb	r0, [r7, #15]
 8015516:	2101      	movs	r1, #1
 8015518:	f000 fa1a 	bl	8015950 <USBPD_PWR_IF_GetPortPDOs>
  rdo.GenericRDO.ObjectPosition           = pdoindex + 1;
 801551c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801551e:	b2db      	uxtb	r3, r3
 8015520:	3301      	adds	r3, #1
 8015522:	b2db      	uxtb	r3, r3
 8015524:	f003 0307 	and.w	r3, r3, #7
 8015528:	b2da      	uxtb	r2, r3
 801552a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801552e:	f362 1306 	bfi	r3, r2, #4, #3
 8015532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  rdo.GenericRDO.NoUSBSuspend             = 1;
 8015536:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801553a:	f043 0301 	orr.w	r3, r3, #1
 801553e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  rdo.GenericRDO.USBCommunicationsCapable = snkFixedPDO.SNKFixedPDO.USBCommunicationsCapable;
 8015542:	7ffb      	ldrb	r3, [r7, #31]
 8015544:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8015548:	b2da      	uxtb	r2, r3
 801554a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801554e:	f362 0341 	bfi	r3, r2, #1, #1
 8015552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  *PtrPowerObjectType = pdo.GenericPDO.PowerObject;
 8015556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801555a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801555e:	b2db      	uxtb	r3, r3
 8015560:	461a      	mov	r2, r3
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	601a      	str	r2, [r3, #0]

  switch(pdo.GenericPDO.PowerObject)
 8015566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801556a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801556e:	b2db      	uxtb	r3, r3
 8015570:	2b01      	cmp	r3, #1
 8015572:	d06d      	beq.n	8015650 <USBPD_DPM_SNK_EvaluateCapabilities+0x21c>
 8015574:	2b02      	cmp	r3, #2
 8015576:	f000 80da 	beq.w	801572e <USBPD_DPM_SNK_EvaluateCapabilities+0x2fa>
 801557a:	2b00      	cmp	r3, #0
 801557c:	d000      	beq.n	8015580 <USBPD_DPM_SNK_EvaluateCapabilities+0x14c>
    {
      //USBPD_SRCVariableSupplyPDO_TypeDef variablepdo = pdo.SRCVariablePDO;
    }
    break;
  default:
    break;
 801557e:	e0db      	b.n	8015738 <USBPD_DPM_SNK_EvaluateCapabilities+0x304>
      USBPD_SRCFixedSupplyPDO_TypeDef fixedpdo = pdo.SRCFixedPDO;
 8015580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015582:	617b      	str	r3, [r7, #20]
      mV = PWR_DECODE_50MV(fixedpdo.VoltageIn50mVunits);
 8015584:	697b      	ldr	r3, [r7, #20]
 8015586:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801558a:	b29b      	uxth	r3, r3
 801558c:	461a      	mov	r2, r3
 801558e:	0092      	lsls	r2, r2, #2
 8015590:	4413      	add	r3, r2
 8015592:	461a      	mov	r2, r3
 8015594:	0091      	lsls	r1, r2, #2
 8015596:	461a      	mov	r2, r3
 8015598:	460b      	mov	r3, r1
 801559a:	4413      	add	r3, r2
 801559c:	005b      	lsls	r3, r3, #1
 801559e:	b29b      	uxth	r3, r3
 80155a0:	63fb      	str	r3, [r7, #60]	; 0x3c
      mA = PWR_DECODE_10MA(fixedpdo.MaxCurrentIn10mAunits);
 80155a2:	8abb      	ldrh	r3, [r7, #20]
 80155a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80155a8:	b29b      	uxth	r3, r3
 80155aa:	461a      	mov	r2, r3
 80155ac:	0092      	lsls	r2, r2, #2
 80155ae:	4413      	add	r3, r2
 80155b0:	005b      	lsls	r3, r3, #1
 80155b2:	b29b      	uxth	r3, r3
 80155b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      mA = USBPD_MIN(mA, puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits);
 80155b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155b8:	685b      	ldr	r3, [r3, #4]
 80155ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80155bc:	4293      	cmp	r3, r2
 80155be:	bf28      	it	cs
 80155c0:	4613      	movcs	r3, r2
 80155c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      mW = mA * mV; /* mW */
 80155c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80155c8:	fb02 f303 	mul.w	r3, r2, r3
 80155cc:	62bb      	str	r3, [r7, #40]	; 0x28
      DPM_Ports[PortNum].DPM_RequestedCurrent = mA;
 80155ce:	7bfb      	ldrb	r3, [r7, #15]
 80155d0:	4a1c      	ldr	r2, [pc, #112]	; (8015644 <USBPD_DPM_SNK_EvaluateCapabilities+0x210>)
 80155d2:	2164      	movs	r1, #100	; 0x64
 80155d4:	fb01 f303 	mul.w	r3, r1, r3
 80155d8:	4413      	add	r3, r2
 80155da:	3348      	adds	r3, #72	; 0x48
 80155dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80155de:	601a      	str	r2, [r3, #0]
      rdo.FixedVariableRDO.OperatingCurrentIn10mAunits  = mA / 10;
 80155e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155e2:	4a1a      	ldr	r2, [pc, #104]	; (801564c <USBPD_DPM_SNK_EvaluateCapabilities+0x218>)
 80155e4:	fba2 2303 	umull	r2, r3, r2, r3
 80155e8:	08db      	lsrs	r3, r3, #3
 80155ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80155ee:	b29a      	uxth	r2, r3
 80155f0:	6a3b      	ldr	r3, [r7, #32]
 80155f2:	f362 2393 	bfi	r3, r2, #10, #10
 80155f6:	623b      	str	r3, [r7, #32]
      rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = mA / 10;
 80155f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155fa:	4a14      	ldr	r2, [pc, #80]	; (801564c <USBPD_DPM_SNK_EvaluateCapabilities+0x218>)
 80155fc:	fba2 2303 	umull	r2, r3, r2, r3
 8015600:	08db      	lsrs	r3, r3, #3
 8015602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015606:	b29a      	uxth	r2, r3
 8015608:	8c3b      	ldrh	r3, [r7, #32]
 801560a:	f362 0309 	bfi	r3, r2, #0, #10
 801560e:	843b      	strh	r3, [r7, #32]
      if (mW < puser->DPM_SNKRequestedPower.OperatingPowerInmWunits)
 8015610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015612:	695b      	ldr	r3, [r3, #20]
 8015614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015616:	429a      	cmp	r2, r3
 8015618:	f080 808b 	bcs.w	8015732 <USBPD_DPM_SNK_EvaluateCapabilities+0x2fe>
        rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits = puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits / 10;
 801561c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801561e:	685b      	ldr	r3, [r3, #4]
 8015620:	4a0a      	ldr	r2, [pc, #40]	; (801564c <USBPD_DPM_SNK_EvaluateCapabilities+0x218>)
 8015622:	fba2 2303 	umull	r2, r3, r2, r3
 8015626:	08db      	lsrs	r3, r3, #3
 8015628:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801562c:	b29a      	uxth	r2, r3
 801562e:	8c3b      	ldrh	r3, [r7, #32]
 8015630:	f362 0309 	bfi	r3, r2, #0, #10
 8015634:	843b      	strh	r3, [r7, #32]
        rdo.FixedVariableRDO.CapabilityMismatch = 1;
 8015636:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801563a:	f043 0304 	orr.w	r3, r3, #4
 801563e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    break;
 8015642:	e076      	b.n	8015732 <USBPD_DPM_SNK_EvaluateCapabilities+0x2fe>
 8015644:	200022ac 	.word	0x200022ac
 8015648:	20002264 	.word	0x20002264
 801564c:	cccccccd 	.word	0xcccccccd
      USBPD_SRCBatterySupplyPDO_TypeDef batterypdo = pdo.SRCBatteryPDO;
 8015650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015652:	613b      	str	r3, [r7, #16]
      mV = PWR_DECODE_50MV(batterypdo.MinVoltageIn50mVunits);
 8015654:	693b      	ldr	r3, [r7, #16]
 8015656:	f3c3 2389 	ubfx	r3, r3, #10, #10
 801565a:	b29b      	uxth	r3, r3
 801565c:	461a      	mov	r2, r3
 801565e:	0092      	lsls	r2, r2, #2
 8015660:	4413      	add	r3, r2
 8015662:	461a      	mov	r2, r3
 8015664:	0091      	lsls	r1, r2, #2
 8015666:	461a      	mov	r2, r3
 8015668:	460b      	mov	r3, r1
 801566a:	4413      	add	r3, r2
 801566c:	005b      	lsls	r3, r3, #1
 801566e:	b29b      	uxth	r3, r3
 8015670:	63fb      	str	r3, [r7, #60]	; 0x3c
      mW = PWR_DECODE_MW(batterypdo.MaxAllowablePowerIn250mWunits);
 8015672:	8a3b      	ldrh	r3, [r7, #16]
 8015674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015678:	b29b      	uxth	r3, r3
 801567a:	461a      	mov	r2, r3
 801567c:	0152      	lsls	r2, r2, #5
 801567e:	1ad2      	subs	r2, r2, r3
 8015680:	0092      	lsls	r2, r2, #2
 8015682:	4413      	add	r3, r2
 8015684:	005b      	lsls	r3, r3, #1
 8015686:	b29b      	uxth	r3, r3
 8015688:	62bb      	str	r3, [r7, #40]	; 0x28
      mW = USBPD_MIN(mW, puser->DPM_SNKRequestedPower.MaxOperatingPowerInmWunits); /* mW */
 801568a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801568c:	699b      	ldr	r3, [r3, #24]
 801568e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015690:	4293      	cmp	r3, r2
 8015692:	bf28      	it	cs
 8015694:	4613      	movcs	r3, r2
 8015696:	62bb      	str	r3, [r7, #40]	; 0x28
      mA = mW / mV; /* mA */
 8015698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801569a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801569c:	fbb2 f3f3 	udiv	r3, r2, r3
 80156a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      mA = USBPD_MIN(mA, puser->DPM_SNKRequestedPower.MaxOperatingCurrentInmAunits);
 80156a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156a4:	685b      	ldr	r3, [r3, #4]
 80156a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80156a8:	4293      	cmp	r3, r2
 80156aa:	bf28      	it	cs
 80156ac:	4613      	movcs	r3, r2
 80156ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      DPM_Ports[PortNum].DPM_RequestedCurrent       = mA;
 80156b0:	7bfb      	ldrb	r3, [r7, #15]
 80156b2:	4a28      	ldr	r2, [pc, #160]	; (8015754 <USBPD_DPM_SNK_EvaluateCapabilities+0x320>)
 80156b4:	2164      	movs	r1, #100	; 0x64
 80156b6:	fb01 f303 	mul.w	r3, r1, r3
 80156ba:	4413      	add	r3, r2
 80156bc:	3348      	adds	r3, #72	; 0x48
 80156be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80156c0:	601a      	str	r2, [r3, #0]
      mW = mA * mV; /* mW */
 80156c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80156c6:	fb02 f303 	mul.w	r3, r2, r3
 80156ca:	62bb      	str	r3, [r7, #40]	; 0x28
      rdo.BatteryRDO.ObjectPosition                 = pdoindex + 1;
 80156cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156ce:	b2db      	uxtb	r3, r3
 80156d0:	3301      	adds	r3, #1
 80156d2:	b2db      	uxtb	r3, r3
 80156d4:	f003 0307 	and.w	r3, r3, #7
 80156d8:	b2da      	uxtb	r2, r3
 80156da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80156de:	f362 1306 	bfi	r3, r2, #4, #3
 80156e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      rdo.BatteryRDO.OperatingPowerIn250mWunits     = mW / 250;
 80156e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156e8:	4a1b      	ldr	r2, [pc, #108]	; (8015758 <USBPD_DPM_SNK_EvaluateCapabilities+0x324>)
 80156ea:	fba2 2303 	umull	r2, r3, r2, r3
 80156ee:	091b      	lsrs	r3, r3, #4
 80156f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80156f4:	b29a      	uxth	r2, r3
 80156f6:	6a3b      	ldr	r3, [r7, #32]
 80156f8:	f362 2393 	bfi	r3, r2, #10, #10
 80156fc:	623b      	str	r3, [r7, #32]
      rdo.BatteryRDO.MaxOperatingPowerIn250mWunits  = mW / 250;
 80156fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015700:	4a15      	ldr	r2, [pc, #84]	; (8015758 <USBPD_DPM_SNK_EvaluateCapabilities+0x324>)
 8015702:	fba2 2303 	umull	r2, r3, r2, r3
 8015706:	091b      	lsrs	r3, r3, #4
 8015708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801570c:	b29a      	uxth	r2, r3
 801570e:	8c3b      	ldrh	r3, [r7, #32]
 8015710:	f362 0309 	bfi	r3, r2, #0, #10
 8015714:	843b      	strh	r3, [r7, #32]
      if (mW < puser->DPM_SNKRequestedPower.OperatingPowerInmWunits)
 8015716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015718:	695b      	ldr	r3, [r3, #20]
 801571a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801571c:	429a      	cmp	r2, r3
 801571e:	d20a      	bcs.n	8015736 <USBPD_DPM_SNK_EvaluateCapabilities+0x302>
        rdo.BatteryRDO.CapabilityMismatch = 1;
 8015720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015724:	f043 0304 	orr.w	r3, r3, #4
 8015728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    break;
 801572c:	e003      	b.n	8015736 <USBPD_DPM_SNK_EvaluateCapabilities+0x302>
    break;
 801572e:	bf00      	nop
 8015730:	e002      	b.n	8015738 <USBPD_DPM_SNK_EvaluateCapabilities+0x304>
    break;
 8015732:	bf00      	nop
 8015734:	e000      	b.n	8015738 <USBPD_DPM_SNK_EvaluateCapabilities+0x304>
    break;
 8015736:	bf00      	nop
  }

  pdhandle->DPM_RequestDOMsg = rdo.d32;
 8015738:	6a3a      	ldr	r2, [r7, #32]
 801573a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801573c:	651a      	str	r2, [r3, #80]	; 0x50

  *PtrRequestData = pdhandle->DPM_RequestDOMsg;
 801573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015740:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015742:	68bb      	ldr	r3, [r7, #8]
 8015744:	601a      	str	r2, [r3, #0]
  /* Get the requested voltage */
  pdhandle->DPM_RequestedVoltage = mV;
 8015746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015748:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801574a:	645a      	str	r2, [r3, #68]	; 0x44

/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 801574c:	3740      	adds	r7, #64	; 0x40
 801574e:	46bd      	mov	sp, r7
 8015750:	bd80      	pop	{r7, pc}
 8015752:	bf00      	nop
 8015754:	200022ac 	.word	0x200022ac
 8015758:	10624dd3 	.word	0x10624dd3

0801575c <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 801575c:	b480      	push	{r7}
 801575e:	b083      	sub	sp, #12
 8015760:	af00      	add	r7, sp, #0
 8015762:	603a      	str	r2, [r7, #0]
 8015764:	461a      	mov	r2, r3
 8015766:	4603      	mov	r3, r0
 8015768:	71fb      	strb	r3, [r7, #7]
 801576a:	460b      	mov	r3, r1
 801576c:	71bb      	strb	r3, [r7, #6]
 801576e:	4613      	mov	r3, r2
 8015770:	80bb      	strh	r3, [r7, #4]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 8015772:	bf00      	nop
 8015774:	370c      	adds	r7, #12
 8015776:	46bd      	mov	sp, r7
 8015778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577c:	4770      	bx	lr

0801577e <USBPD_DPM_EvaluateDataRoleSwap>:
  * @brief  DPM callback used to know user choice about Data Role Swap.
  * @param  PortNum Port number
  * @retval USBPD_REJECT, UBPD_ACCEPT
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 801577e:	b480      	push	{r7}
 8015780:	b083      	sub	sp, #12
 8015782:	af00      	add	r7, sp, #0
 8015784:	4603      	mov	r3, r0
 8015786:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  return USBPD_REJECT;
 8015788:	230c      	movs	r3, #12
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 801578a:	4618      	mov	r0, r3
 801578c:	370c      	adds	r7, #12
 801578e:	46bd      	mov	sp, r7
 8015790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015794:	4770      	bx	lr

08015796 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8015796:	b580      	push	{r7, lr}
 8015798:	b082      	sub	sp, #8
 801579a:	af00      	add	r7, sp, #0
 801579c:	4603      	mov	r3, r0
 801579e:	460a      	mov	r2, r1
 80157a0:	71fb      	strb	r3, [r7, #7]
 80157a2:	4613      	mov	r3, r2
 80157a4:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 80157a6:	79ba      	ldrb	r2, [r7, #6]
 80157a8:	79fb      	ldrb	r3, [r7, #7]
 80157aa:	4611      	mov	r1, r2
 80157ac:	4618      	mov	r0, r3
 80157ae:	f000 f89f 	bl	80158f0 <USBPD_PWR_IF_SupplyReady>
 80157b2:	4603      	mov	r3, r0
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	bf0c      	ite	eq
 80157b8:	2301      	moveq	r3, #1
 80157ba:	2300      	movne	r3, #0
 80157bc:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 80157be:	4618      	mov	r0, r3
 80157c0:	3708      	adds	r7, #8
 80157c2:	46bd      	mov	sp, r7
 80157c4:	bd80      	pop	{r7, pc}
	...

080157c8 <DPM_FindVoltageIndex>:
  * @param  PortNum Port number
  * @param  PtrRequestedPower  Sink requested power profile structure pointer
  * @retval Index of PDO within source capabilities message (-1 indicating not found)
  */
static int32_t DPM_FindVoltageIndex(uint32_t PortNum, USBPD_SNKPowerRequest_TypeDef *PtrRequestedPower)
{
 80157c8:	b480      	push	{r7}
 80157ca:	b08d      	sub	sp, #52	; 0x34
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	6078      	str	r0, [r7, #4]
 80157d0:	6039      	str	r1, [r7, #0]
  uint32_t *ptpdoarray;
  USBPD_PDO_TypeDef  pdo;
  uint32_t mv = 0, voltage = 0, max_voltage = 0, curr_dist = 0, temp_dist = 0;
 80157d2:	2300      	movs	r3, #0
 80157d4:	627b      	str	r3, [r7, #36]	; 0x24
 80157d6:	2300      	movs	r3, #0
 80157d8:	623b      	str	r3, [r7, #32]
 80157da:	2300      	movs	r3, #0
 80157dc:	61fb      	str	r3, [r7, #28]
 80157de:	2300      	movs	r3, #0
 80157e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80157e2:	2300      	movs	r3, #0
 80157e4:	61bb      	str	r3, [r7, #24]
  uint32_t nbpdo;
  int8_t curr_index = -1, temp_index = -1;
 80157e6:	23ff      	movs	r3, #255	; 0xff
 80157e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80157ec:	23ff      	movs	r3, #255	; 0xff
 80157ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

  /* Max voltage is always limited by the board's max request */
  voltage = PtrRequestedPower->OperatingVoltageInmVunits;
 80157f2:	683b      	ldr	r3, [r7, #0]
 80157f4:	685b      	ldr	r3, [r3, #4]
 80157f6:	623b      	str	r3, [r7, #32]
  max_voltage = PtrRequestedPower->MaxOperatingVoltageInmVunits;
 80157f8:	683b      	ldr	r3, [r7, #0]
 80157fa:	689b      	ldr	r3, [r3, #8]
 80157fc:	61fb      	str	r3, [r7, #28]

  /* The requested voltage not supported by this board */
  if (USBPD_IS_VALID_VOLTAGE(voltage, PtrRequestedPower->MaxOperatingVoltageInmVunits, PtrRequestedPower->MinOperatingVoltageInmVunits) != 1)
 80157fe:	683b      	ldr	r3, [r7, #0]
 8015800:	689b      	ldr	r3, [r3, #8]
 8015802:	6a3a      	ldr	r2, [r7, #32]
 8015804:	429a      	cmp	r2, r3
 8015806:	d804      	bhi.n	8015812 <DPM_FindVoltageIndex+0x4a>
 8015808:	683b      	ldr	r3, [r7, #0]
 801580a:	68db      	ldr	r3, [r3, #12]
 801580c:	6a3a      	ldr	r2, [r7, #32]
 801580e:	429a      	cmp	r2, r3
 8015810:	d202      	bcs.n	8015818 <DPM_FindVoltageIndex+0x50>
  {
    /* DPM_FindVoltageIndex: Requested voltage not supported by the board\r */
    return curr_index;
 8015812:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8015816:	e050      	b.n	80158ba <DPM_FindVoltageIndex+0xf2>
  }

  /* Search PDO index among Source PDO of Port */
  nbpdo = DPM_Ports[PortNum].DPM_NumberOfRcvSRCPDO;
 8015818:	4a2b      	ldr	r2, [pc, #172]	; (80158c8 <DPM_FindVoltageIndex+0x100>)
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	2164      	movs	r1, #100	; 0x64
 801581e:	fb01 f303 	mul.w	r3, r1, r3
 8015822:	4413      	add	r3, r2
 8015824:	331c      	adds	r3, #28
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	617b      	str	r3, [r7, #20]
  ptpdoarray = DPM_Ports[PortNum].DPM_ListOfRcvSRCPDO;
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	2264      	movs	r2, #100	; 0x64
 801582e:	fb02 f303 	mul.w	r3, r2, r3
 8015832:	4a25      	ldr	r2, [pc, #148]	; (80158c8 <DPM_FindVoltageIndex+0x100>)
 8015834:	4413      	add	r3, r2
 8015836:	613b      	str	r3, [r7, #16]

  /* search the better PDO in the list of source PDOs */
  for(temp_index = 0; temp_index < nbpdo; temp_index++)
 8015838:	2300      	movs	r3, #0
 801583a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801583e:	e035      	b.n	80158ac <DPM_FindVoltageIndex+0xe4>
  {
    pdo.d32 = ptpdoarray[temp_index];
 8015840:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 8015844:	009b      	lsls	r3, r3, #2
 8015846:	693a      	ldr	r2, [r7, #16]
 8015848:	4413      	add	r3, r2
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	60fb      	str	r3, [r7, #12]
    /* get voltage value from PDO */
    mv = pdo.GenericPDO.VoltageIn50mVunits * 50;
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8015854:	b29b      	uxth	r3, r3
 8015856:	461a      	mov	r2, r3
 8015858:	2332      	movs	r3, #50	; 0x32
 801585a:	fb03 f302 	mul.w	r3, r3, r2
 801585e:	627b      	str	r3, [r7, #36]	; 0x24

    /* check if the source PDO is ok in term of voltage */
    if (mv <= max_voltage)
 8015860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015862:	69fb      	ldr	r3, [r7, #28]
 8015864:	429a      	cmp	r2, r3
 8015866:	d81a      	bhi.n	801589e <DPM_FindVoltageIndex+0xd6>
    {
      /* choose the "better" PDO, in this case only the distance in absolute value from the target voltage */
      temp_dist = mv > voltage ? mv - voltage : voltage - mv;
 8015868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801586a:	6a3b      	ldr	r3, [r7, #32]
 801586c:	429a      	cmp	r2, r3
 801586e:	d903      	bls.n	8015878 <DPM_FindVoltageIndex+0xb0>
 8015870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015872:	6a3b      	ldr	r3, [r7, #32]
 8015874:	1ad3      	subs	r3, r2, r3
 8015876:	e002      	b.n	801587e <DPM_FindVoltageIndex+0xb6>
 8015878:	6a3a      	ldr	r2, [r7, #32]
 801587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801587c:	1ad3      	subs	r3, r2, r3
 801587e:	61bb      	str	r3, [r7, #24]
      if (curr_index == -1 || curr_dist >= temp_dist)
 8015880:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8015884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015888:	d003      	beq.n	8015892 <DPM_FindVoltageIndex+0xca>
 801588a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801588c:	69bb      	ldr	r3, [r7, #24]
 801588e:	429a      	cmp	r2, r3
 8015890:	d305      	bcc.n	801589e <DPM_FindVoltageIndex+0xd6>
      {
        /* consider the current PDO the better one until this time */
        curr_index = temp_index;
 8015892:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8015896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        curr_dist = temp_dist;
 801589a:	69bb      	ldr	r3, [r7, #24]
 801589c:	62fb      	str	r3, [r7, #44]	; 0x2c
  for(temp_index = 0; temp_index < nbpdo; temp_index++)
 801589e:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 80158a2:	b2db      	uxtb	r3, r3
 80158a4:	3301      	adds	r3, #1
 80158a6:	b2db      	uxtb	r3, r3
 80158a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80158ac:	f997 302a 	ldrsb.w	r3, [r7, #42]	; 0x2a
 80158b0:	697a      	ldr	r2, [r7, #20]
 80158b2:	429a      	cmp	r2, r3
 80158b4:	d8c4      	bhi.n	8015840 <DPM_FindVoltageIndex+0x78>
      }
    }
  }

  return curr_index;
 80158b6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 80158ba:	4618      	mov	r0, r3
 80158bc:	3734      	adds	r7, #52	; 0x34
 80158be:	46bd      	mov	sp, r7
 80158c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c4:	4770      	bx	lr
 80158c6:	bf00      	nop
 80158c8:	200022ac 	.word	0x200022ac

080158cc <USBPD_PWR_IF_Init>:
  * @brief  Initialize structures and variables related to power board profiles
  *         used by Sink and Source, for all available ports.
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_Init(void)
{
 80158cc:	b480      	push	{r7}
 80158ce:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_PWR_IF_Init */

  // Set links to PDO values and number for Port 0 (defined in PDO arrays in H file).
#if (PORT0_NB_SINKPDO > 0)
  PWR_Port_PDO_Storage[USBPD_PORT_0].SinkPDO.ListOfPDO = (uint32_t *)PORT0_PDO_ListSNK;
 80158d0:	4b05      	ldr	r3, [pc, #20]	; (80158e8 <USBPD_PWR_IF_Init+0x1c>)
 80158d2:	4a06      	ldr	r2, [pc, #24]	; (80158ec <USBPD_PWR_IF_Init+0x20>)
 80158d4:	601a      	str	r2, [r3, #0]
  PWR_Port_PDO_Storage[USBPD_PORT_0].SinkPDO.NumberOfPDO = PORT0_NB_SINKPDO;
 80158d6:	4b04      	ldr	r3, [pc, #16]	; (80158e8 <USBPD_PWR_IF_Init+0x1c>)
 80158d8:	2202      	movs	r2, #2
 80158da:	711a      	strb	r2, [r3, #4]
#endif

  return USBPD_OK;
 80158dc:	2300      	movs	r3, #0

/* USER CODE END USBPD_PWR_IF_Init */
}
 80158de:	4618      	mov	r0, r3
 80158e0:	46bd      	mov	sp, r7
 80158e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e6:	4770      	bx	lr
 80158e8:	200024e8 	.word	0x200024e8
 80158ec:	20000028 	.word	0x20000028

080158f0 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b082      	sub	sp, #8
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	4603      	mov	r3, r0
 80158f8:	460a      	mov	r2, r1
 80158fa:	71fb      	strb	r3, [r7, #7]
 80158fc:	4613      	mov	r3, r2
 80158fe:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 8015900:	79fb      	ldrb	r3, [r7, #7]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d001      	beq.n	801590a <USBPD_PWR_IF_SupplyReady+0x1a>
    { return USBPD_ERROR; }
 8015906:	2302      	movs	r3, #2
 8015908:	e01d      	b.n	8015946 <USBPD_PWR_IF_SupplyReady+0x56>

  if (USBPD_VSAFE_0V == Vsafe)
 801590a:	79bb      	ldrb	r3, [r7, #6]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d10d      	bne.n	801592c <USBPD_PWR_IF_SupplyReady+0x3c>
  {
    /* Vsafe0V */
    return
      HW_IF_PWR_GetVoltage(PortNum) < USBPD_PWR_LOW_VBUS_THRESHOLD
 8015910:	79fb      	ldrb	r3, [r7, #7]
 8015912:	4618      	mov	r0, r3
 8015914:	f7fe fe00 	bl	8014518 <HW_IF_PWR_GetVoltage>
 8015918:	4603      	mov	r3, r0
 801591a:	461a      	mov	r2, r3
        ? USBPD_OK
        : USBPD_ERROR;
 801591c:	f240 23ed 	movw	r3, #749	; 0x2ed
 8015920:	429a      	cmp	r2, r3
 8015922:	d801      	bhi.n	8015928 <USBPD_PWR_IF_SupplyReady+0x38>
 8015924:	2300      	movs	r3, #0
 8015926:	e00e      	b.n	8015946 <USBPD_PWR_IF_SupplyReady+0x56>
 8015928:	2302      	movs	r3, #2
 801592a:	e00c      	b.n	8015946 <USBPD_PWR_IF_SupplyReady+0x56>
  }
  else
  {
    /* Vsafe5V */
    return
      HW_IF_PWR_GetVoltage(PortNum) > USBPD_PWR_VBUS_THRESHOLD_5V
 801592c:	79fb      	ldrb	r3, [r7, #7]
 801592e:	4618      	mov	r0, r3
 8015930:	f7fe fdf2 	bl	8014518 <HW_IF_PWR_GetVoltage>
 8015934:	4603      	mov	r3, r0
 8015936:	461a      	mov	r2, r3
        ? USBPD_OK
        : USBPD_ERROR;
 8015938:	f640 0366 	movw	r3, #2150	; 0x866
 801593c:	429a      	cmp	r2, r3
 801593e:	d901      	bls.n	8015944 <USBPD_PWR_IF_SupplyReady+0x54>
 8015940:	2300      	movs	r3, #0
 8015942:	e000      	b.n	8015946 <USBPD_PWR_IF_SupplyReady+0x56>
 8015944:	2302      	movs	r3, #2
  }
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 8015946:	4618      	mov	r0, r3
 8015948:	3708      	adds	r7, #8
 801594a:	46bd      	mov	sp, r7
 801594c:	bd80      	pop	{r7, pc}
	...

08015950 <USBPD_PWR_IF_GetPortPDOs>:
  * @param  Ptr Pointer on address where PDO values should be written (u8 pointer)
  * @param  Size Pointer on nb of u32 written by PWR_IF (nb of PDOs)
  * @retval None
  */
void USBPD_PWR_IF_GetPortPDOs(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b084      	sub	sp, #16
 8015954:	af00      	add	r7, sp, #0
 8015956:	60ba      	str	r2, [r7, #8]
 8015958:	607b      	str	r3, [r7, #4]
 801595a:	4603      	mov	r3, r0
 801595c:	73fb      	strb	r3, [r7, #15]
 801595e:	460b      	mov	r3, r1
 8015960:	73bb      	strb	r3, [r7, #14]
    {
      *Size = PORT0_NB_SINKPDO;
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	2202      	movs	r2, #2
 8015966:	601a      	str	r2, [r3, #0]
      memcpy(Ptr,PORT0_PDO_ListSNK, sizeof(uint32_t) * PORT0_NB_SINKPDO);
 8015968:	2208      	movs	r2, #8
 801596a:	4904      	ldr	r1, [pc, #16]	; (801597c <USBPD_PWR_IF_GetPortPDOs+0x2c>)
 801596c:	68b8      	ldr	r0, [r7, #8]
 801596e:	f000 f8c9 	bl	8015b04 <memcpy>
    }
/* USER CODE BEGIN USBPD_PWR_IF_GetPortPDOs */

/* USER CODE END USBPD_PWR_IF_GetPortPDOs */
}
 8015972:	bf00      	nop
 8015974:	3710      	adds	r7, #16
 8015976:	46bd      	mov	sp, r7
 8015978:	bd80      	pop	{r7, pc}
 801597a:	bf00      	nop
 801597c:	20000028 	.word	0x20000028

08015980 <LL_ADC_REG_ReadConversionData12>:
{
 8015980:	b480      	push	{r7}
 8015982:	b083      	sub	sp, #12
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801598c:	b29b      	uxth	r3, r3
}
 801598e:	4618      	mov	r0, r3
 8015990:	370c      	adds	r7, #12
 8015992:	46bd      	mov	sp, r7
 8015994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015998:	4770      	bx	lr

0801599a <BSP_USBPD_PWR_Init>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 801599a:	b480      	push	{r7}
 801599c:	b085      	sub	sp, #20
 801599e:	af00      	add	r7, sp, #0
 80159a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 80159a2:	2300      	movs	r3, #0
 80159a4:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d002      	beq.n	80159b2 <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80159ac:	f06f 0301 	mvn.w	r3, #1
 80159b0:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80159b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 80159b4:	4618      	mov	r0, r3
 80159b6:	3714      	adds	r7, #20
 80159b8:	46bd      	mov	sp, r7
 80159ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159be:	4770      	bx	lr

080159c0 <BSP_USBPD_PWR_VBUSInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 80159c0:	b480      	push	{r7}
 80159c2:	b085      	sub	sp, #20
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 80159c8:	2300      	movs	r3, #0
 80159ca:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d002      	beq.n	80159d8 <BSP_USBPD_PWR_VBUSInit+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80159d2:	f06f 0301 	mvn.w	r3, #1
 80159d6:	60fb      	str	r3, [r7, #12]
  else
  {
    PWR_DEBUG_TRACE(Instance, "HELP: Update BSP_USBPD_PWR_VBUSInit");
  }

  return ret;
 80159d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 80159da:	4618      	mov	r0, r3
 80159dc:	3714      	adds	r7, #20
 80159de:	46bd      	mov	sp, r7
 80159e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e4:	4770      	bx	lr

080159e6 <BSP_USBPD_PWR_VBUSDeInit>:
  *         This parameter can be take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 80159e6:	b480      	push	{r7}
 80159e8:	b085      	sub	sp, #20
 80159ea:	af00      	add	r7, sp, #0
 80159ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80159ee:	f06f 030a 	mvn.w	r3, #10
 80159f2:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d002      	beq.n	8015a00 <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80159fa:	f06f 0301 	mvn.w	r3, #1
 80159fe:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8015a00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 8015a02:	4618      	mov	r0, r3
 8015a04:	3714      	adds	r7, #20
 8015a06:	46bd      	mov	sp, r7
 8015a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a0c:	4770      	bx	lr
	...

08015a10 <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 8015a10:	b580      	push	{r7, lr}
 8015a12:	b086      	sub	sp, #24
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	6078      	str	r0, [r7, #4]
 8015a18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */

  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	617b      	str	r3, [r7, #20]

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d102      	bne.n	8015a2a <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 8015a24:	683b      	ldr	r3, [r7, #0]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d102      	bne.n	8015a30 <BSP_USBPD_PWR_VBUSGetVoltage+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8015a2a:	f06f 0301 	mvn.w	r3, #1
 8015a2e:	617b      	str	r3, [r7, #20]
  }

  *pVoltage = 0u;
 8015a30:	683b      	ldr	r3, [r7, #0]
 8015a32:	2200      	movs	r2, #0
 8015a34:	601a      	str	r2, [r3, #0]
  if (BSP_ERROR_NONE == ret)
 8015a36:	697b      	ldr	r3, [r7, #20]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d122      	bne.n	8015a82 <BSP_USBPD_PWR_VBUSGetVoltage+0x72>
  {
    uint16_t an = LL_ADC_REG_ReadConversionData12(VSENSE_ADC_Instance);
 8015a3c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8015a40:	f7ff ff9e 	bl	8015980 <LL_ADC_REG_ReadConversionData12>
 8015a44:	4603      	mov	r3, r0
 8015a46:	827b      	strh	r3, [r7, #18]
    uint32_t mV = __LL_ADC_CALC_DATA_TO_VOLTAGE(VDDA_APPLI, an, LL_ADC_RESOLUTION_12B);
 8015a48:	8a7b      	ldrh	r3, [r7, #18]
 8015a4a:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 8015a4e:	fb02 f303 	mul.w	r3, r2, r3
 8015a52:	461a      	mov	r2, r3
 8015a54:	4b0d      	ldr	r3, [pc, #52]	; (8015a8c <BSP_USBPD_PWR_VBUSGetVoltage+0x7c>)
 8015a56:	fba3 1302 	umull	r1, r3, r3, r2
 8015a5a:	1ad2      	subs	r2, r2, r3
 8015a5c:	0852      	lsrs	r2, r2, #1
 8015a5e:	4413      	add	r3, r2
 8015a60:	0adb      	lsrs	r3, r3, #11
 8015a62:	60fb      	str	r3, [r7, #12]

    /* Divider R1=200K, R2=39K selected as it scales PD max of 20V down to 3.26V,
     * which is less than the 3.3V GPIO tolerance. Therefore to scale back up, we
     * can use 20V/3.26V=6.13V as multiplier.  */
    mV *= 613;
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	f240 2265 	movw	r2, #613	; 0x265
 8015a6a:	fb02 f303 	mul.w	r3, r2, r3
 8015a6e:	60fb      	str	r3, [r7, #12]
    mV /= 100;
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	4a07      	ldr	r2, [pc, #28]	; (8015a90 <BSP_USBPD_PWR_VBUSGetVoltage+0x80>)
 8015a74:	fba2 2303 	umull	r2, r3, r2, r3
 8015a78:	095b      	lsrs	r3, r3, #5
 8015a7a:	60fb      	str	r3, [r7, #12]
    *pVoltage = mV;
 8015a7c:	683b      	ldr	r3, [r7, #0]
 8015a7e:	68fa      	ldr	r2, [r7, #12]
 8015a80:	601a      	str	r2, [r3, #0]
  }
  return ret;
 8015a82:	697b      	ldr	r3, [r7, #20]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 8015a84:	4618      	mov	r0, r3
 8015a86:	3718      	adds	r7, #24
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}
 8015a8c:	00100101 	.word	0x00100101
 8015a90:	51eb851f 	.word	0x51eb851f

08015a94 <__aeabi_memclr>:
 8015a94:	2200      	movs	r2, #0
 8015a96:	f7f0 be0c 	b.w	80066b2 <__aeabi_memset>

08015a9a <__aeabi_memcpy>:
 8015a9a:	f000 b833 	b.w	8015b04 <memcpy>
	...

08015aa0 <__errno>:
 8015aa0:	4b01      	ldr	r3, [pc, #4]	; (8015aa8 <__errno+0x8>)
 8015aa2:	6818      	ldr	r0, [r3, #0]
 8015aa4:	4770      	bx	lr
 8015aa6:	bf00      	nop
 8015aa8:	20000044 	.word	0x20000044

08015aac <__libc_init_array>:
 8015aac:	b570      	push	{r4, r5, r6, lr}
 8015aae:	4e0d      	ldr	r6, [pc, #52]	; (8015ae4 <__libc_init_array+0x38>)
 8015ab0:	4c0d      	ldr	r4, [pc, #52]	; (8015ae8 <__libc_init_array+0x3c>)
 8015ab2:	1ba4      	subs	r4, r4, r6
 8015ab4:	10a4      	asrs	r4, r4, #2
 8015ab6:	2500      	movs	r5, #0
 8015ab8:	42a5      	cmp	r5, r4
 8015aba:	d109      	bne.n	8015ad0 <__libc_init_array+0x24>
 8015abc:	4e0b      	ldr	r6, [pc, #44]	; (8015aec <__libc_init_array+0x40>)
 8015abe:	4c0c      	ldr	r4, [pc, #48]	; (8015af0 <__libc_init_array+0x44>)
 8015ac0:	f000 f8a0 	bl	8015c04 <_init>
 8015ac4:	1ba4      	subs	r4, r4, r6
 8015ac6:	10a4      	asrs	r4, r4, #2
 8015ac8:	2500      	movs	r5, #0
 8015aca:	42a5      	cmp	r5, r4
 8015acc:	d105      	bne.n	8015ada <__libc_init_array+0x2e>
 8015ace:	bd70      	pop	{r4, r5, r6, pc}
 8015ad0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015ad4:	4798      	blx	r3
 8015ad6:	3501      	adds	r5, #1
 8015ad8:	e7ee      	b.n	8015ab8 <__libc_init_array+0xc>
 8015ada:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015ade:	4798      	blx	r3
 8015ae0:	3501      	adds	r5, #1
 8015ae2:	e7f2      	b.n	8015aca <__libc_init_array+0x1e>
 8015ae4:	08019e08 	.word	0x08019e08
 8015ae8:	08019e08 	.word	0x08019e08
 8015aec:	08019e08 	.word	0x08019e08
 8015af0:	08019e0c 	.word	0x08019e0c

08015af4 <malloc>:
 8015af4:	4b02      	ldr	r3, [pc, #8]	; (8015b00 <malloc+0xc>)
 8015af6:	4601      	mov	r1, r0
 8015af8:	6818      	ldr	r0, [r3, #0]
 8015afa:	f000 b817 	b.w	8015b2c <_malloc_r>
 8015afe:	bf00      	nop
 8015b00:	20000044 	.word	0x20000044

08015b04 <memcpy>:
 8015b04:	b510      	push	{r4, lr}
 8015b06:	1e43      	subs	r3, r0, #1
 8015b08:	440a      	add	r2, r1
 8015b0a:	4291      	cmp	r1, r2
 8015b0c:	d100      	bne.n	8015b10 <memcpy+0xc>
 8015b0e:	bd10      	pop	{r4, pc}
 8015b10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015b14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015b18:	e7f7      	b.n	8015b0a <memcpy+0x6>

08015b1a <memset>:
 8015b1a:	4402      	add	r2, r0
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	4293      	cmp	r3, r2
 8015b20:	d100      	bne.n	8015b24 <memset+0xa>
 8015b22:	4770      	bx	lr
 8015b24:	f803 1b01 	strb.w	r1, [r3], #1
 8015b28:	e7f9      	b.n	8015b1e <memset+0x4>
	...

08015b2c <_malloc_r>:
 8015b2c:	b570      	push	{r4, r5, r6, lr}
 8015b2e:	1ccd      	adds	r5, r1, #3
 8015b30:	f025 0503 	bic.w	r5, r5, #3
 8015b34:	3508      	adds	r5, #8
 8015b36:	2d0c      	cmp	r5, #12
 8015b38:	bf38      	it	cc
 8015b3a:	250c      	movcc	r5, #12
 8015b3c:	2d00      	cmp	r5, #0
 8015b3e:	4606      	mov	r6, r0
 8015b40:	db01      	blt.n	8015b46 <_malloc_r+0x1a>
 8015b42:	42a9      	cmp	r1, r5
 8015b44:	d903      	bls.n	8015b4e <_malloc_r+0x22>
 8015b46:	230c      	movs	r3, #12
 8015b48:	6033      	str	r3, [r6, #0]
 8015b4a:	2000      	movs	r0, #0
 8015b4c:	bd70      	pop	{r4, r5, r6, pc}
 8015b4e:	f000 f857 	bl	8015c00 <__malloc_lock>
 8015b52:	4a21      	ldr	r2, [pc, #132]	; (8015bd8 <_malloc_r+0xac>)
 8015b54:	6814      	ldr	r4, [r2, #0]
 8015b56:	4621      	mov	r1, r4
 8015b58:	b991      	cbnz	r1, 8015b80 <_malloc_r+0x54>
 8015b5a:	4c20      	ldr	r4, [pc, #128]	; (8015bdc <_malloc_r+0xb0>)
 8015b5c:	6823      	ldr	r3, [r4, #0]
 8015b5e:	b91b      	cbnz	r3, 8015b68 <_malloc_r+0x3c>
 8015b60:	4630      	mov	r0, r6
 8015b62:	f000 f83d 	bl	8015be0 <_sbrk_r>
 8015b66:	6020      	str	r0, [r4, #0]
 8015b68:	4629      	mov	r1, r5
 8015b6a:	4630      	mov	r0, r6
 8015b6c:	f000 f838 	bl	8015be0 <_sbrk_r>
 8015b70:	1c43      	adds	r3, r0, #1
 8015b72:	d124      	bne.n	8015bbe <_malloc_r+0x92>
 8015b74:	230c      	movs	r3, #12
 8015b76:	6033      	str	r3, [r6, #0]
 8015b78:	4630      	mov	r0, r6
 8015b7a:	f000 f842 	bl	8015c02 <__malloc_unlock>
 8015b7e:	e7e4      	b.n	8015b4a <_malloc_r+0x1e>
 8015b80:	680b      	ldr	r3, [r1, #0]
 8015b82:	1b5b      	subs	r3, r3, r5
 8015b84:	d418      	bmi.n	8015bb8 <_malloc_r+0x8c>
 8015b86:	2b0b      	cmp	r3, #11
 8015b88:	d90f      	bls.n	8015baa <_malloc_r+0x7e>
 8015b8a:	600b      	str	r3, [r1, #0]
 8015b8c:	50cd      	str	r5, [r1, r3]
 8015b8e:	18cc      	adds	r4, r1, r3
 8015b90:	4630      	mov	r0, r6
 8015b92:	f000 f836 	bl	8015c02 <__malloc_unlock>
 8015b96:	f104 000b 	add.w	r0, r4, #11
 8015b9a:	1d23      	adds	r3, r4, #4
 8015b9c:	f020 0007 	bic.w	r0, r0, #7
 8015ba0:	1ac3      	subs	r3, r0, r3
 8015ba2:	d0d3      	beq.n	8015b4c <_malloc_r+0x20>
 8015ba4:	425a      	negs	r2, r3
 8015ba6:	50e2      	str	r2, [r4, r3]
 8015ba8:	e7d0      	b.n	8015b4c <_malloc_r+0x20>
 8015baa:	428c      	cmp	r4, r1
 8015bac:	684b      	ldr	r3, [r1, #4]
 8015bae:	bf16      	itet	ne
 8015bb0:	6063      	strne	r3, [r4, #4]
 8015bb2:	6013      	streq	r3, [r2, #0]
 8015bb4:	460c      	movne	r4, r1
 8015bb6:	e7eb      	b.n	8015b90 <_malloc_r+0x64>
 8015bb8:	460c      	mov	r4, r1
 8015bba:	6849      	ldr	r1, [r1, #4]
 8015bbc:	e7cc      	b.n	8015b58 <_malloc_r+0x2c>
 8015bbe:	1cc4      	adds	r4, r0, #3
 8015bc0:	f024 0403 	bic.w	r4, r4, #3
 8015bc4:	42a0      	cmp	r0, r4
 8015bc6:	d005      	beq.n	8015bd4 <_malloc_r+0xa8>
 8015bc8:	1a21      	subs	r1, r4, r0
 8015bca:	4630      	mov	r0, r6
 8015bcc:	f000 f808 	bl	8015be0 <_sbrk_r>
 8015bd0:	3001      	adds	r0, #1
 8015bd2:	d0cf      	beq.n	8015b74 <_malloc_r+0x48>
 8015bd4:	6025      	str	r5, [r4, #0]
 8015bd6:	e7db      	b.n	8015b90 <_malloc_r+0x64>
 8015bd8:	20002310 	.word	0x20002310
 8015bdc:	20002314 	.word	0x20002314

08015be0 <_sbrk_r>:
 8015be0:	b538      	push	{r3, r4, r5, lr}
 8015be2:	4c06      	ldr	r4, [pc, #24]	; (8015bfc <_sbrk_r+0x1c>)
 8015be4:	2300      	movs	r3, #0
 8015be6:	4605      	mov	r5, r0
 8015be8:	4608      	mov	r0, r1
 8015bea:	6023      	str	r3, [r4, #0]
 8015bec:	f7f4 f91a 	bl	8009e24 <_sbrk>
 8015bf0:	1c43      	adds	r3, r0, #1
 8015bf2:	d102      	bne.n	8015bfa <_sbrk_r+0x1a>
 8015bf4:	6823      	ldr	r3, [r4, #0]
 8015bf6:	b103      	cbz	r3, 8015bfa <_sbrk_r+0x1a>
 8015bf8:	602b      	str	r3, [r5, #0]
 8015bfa:	bd38      	pop	{r3, r4, r5, pc}
 8015bfc:	200024f0 	.word	0x200024f0

08015c00 <__malloc_lock>:
 8015c00:	4770      	bx	lr

08015c02 <__malloc_unlock>:
 8015c02:	4770      	bx	lr

08015c04 <_init>:
 8015c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c06:	bf00      	nop
 8015c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c0a:	bc08      	pop	{r3}
 8015c0c:	469e      	mov	lr, r3
 8015c0e:	4770      	bx	lr

08015c10 <_fini>:
 8015c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c12:	bf00      	nop
 8015c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c16:	bc08      	pop	{r3}
 8015c18:	469e      	mov	lr, r3
 8015c1a:	4770      	bx	lr
